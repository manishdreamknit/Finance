	[Documentation]			This keyword to produce Scenario Dictionary Variable from Scenario Configuration file
	...						Keyword Return Dictionary Data
	...						Pre-requisite: N/A
	...						Note: 		 : 
	...						Return Type : Dictionary
	...				  		Author  : Manisha Gadekar (Manisha.Gadekar@dealtertrack.com)
	...						Creation Date: 16th Jun 2015
	...						Update Date\By: NA

	Log		Initial Partner Dealer Setup>>>		warn
	Log 	${SCENARIO_FILE}
	
	${CONFIGUARATION_XML}		WS_CommonUtil.Read_From_File_To_String		${RESOURCE}\\Code\\Setup\\${SCENARIO_FILE}
	${Scenario Setup} 			Create Dictionary 
	
	#################################################################
	@{CONFIGUARATION_ITEMS} 	Create List				PartnerIdCB
	${Data}			Return Values From Child Node		${CONFIGUARATION_XML}	@{CONFIGUARATION_ITEMS}
	# Partner Id CB
	Set To Dictionary		${Scenario Setup}			Partner Id CB			${Data}
	
	Log			${Scenario Setup}	
	
	# Partner Dealer Id CB #
	@{CONFIGUARATION_ITEMS} 	Create List				PartnerDealerIdCB
	${Data}			Return Values From Child Node		${CONFIGUARATION_XML}	@{CONFIGUARATION_ITEMS}
	Set To Dictionary		${Scenario Setup}			Partner Dealer Id CB			${Data}
	
	Log			${Scenario Setup}
	#################################################################
	
	# Partner Id FD #
	@{CONFIGUARATION_ITEMS} 	Create List				PartnerIdFD
	${Data}			Return Values From Child Node		${CONFIGUARATION_XML}	@{CONFIGUARATION_ITEMS}
	Set To Dictionary		${Scenario Setup}			Partner Id FD			${Data}
	
	Log			${Scenario Setup}
	
	# Partner Dealer Id FD #
	@{CONFIGUARATION_ITEMS} 	Create List				PartnerDealerIdFD
	${Data}			Return Values From Child Node		${CONFIGUARATION_XML}	@{CONFIGUARATION_ITEMS}
	Set To Dictionary		${Scenario Setup}			Partner Dealer Id FD			${Data}
	
	Log			${Scenario Setup}
	#################################################################
	
	# Environment #
	@{CONFIGUARATION_ITEMS} 	Create List				Environment
	${Data}			Return Values From Child Node		${CONFIGUARATION_XML}	@{CONFIGUARATION_ITEMS}
	Set To Dictionary		${Scenario Setup}			Environment			${Data}
	
	${Environment}=		Set Variable 	${Data}
	Log 				${Environment}
	Set Suite Variable 	${Environment}
	
	Log			${Scenario Setup}
	#################################################################
	
	# Login URL #
	@{CONFIGUARATION_ITEMS} 	Create List				LoginURL
	${Data}			Return Values From Child Node		${CONFIGUARATION_XML}	@{CONFIGUARATION_ITEMS}
	Set To Dictionary		${Scenario Setup}			LoginURL			${Data}
	
	${LOGINURL}=		Set Variable 	${Data}
	Log 				${LOGINURL}
	Set Suite Variable 	${LOGINURL}
	
	Log			${Scenario Setup}
	#################################################################
	
	# User ID #
	@{CONFIGUARATION_ITEMS} 	Create List				User_ID
	${Data}			Return Values From Child Node		${CONFIGUARATION_XML}	@{CONFIGUARATION_ITEMS}
	Set To Dictionary		${Scenario Setup}			User_ID			${Data}
	
	${User_ID}=		Set Variable 	${Data}
	Log 				${User_ID}
	Set Suite Variable 	${User_ID}
	
	Log			${Scenario Setup}
	#################################################################
	
	# USER_PASSWORD #
	@{CONFIGUARATION_ITEMS} 	Create List				USER_PASSWORD
	${Data}			Return Values From Child Node		${CONFIGUARATION_XML}	@{CONFIGUARATION_ITEMS}
	Set To Dictionary		${Scenario Setup}			USER_PASSWORD			${Data}
	
	${USER_PASSWORD}=		Set Variable 	${Data}
	Log 					${USER_PASSWORD}
	Set Suite Variable 		${USER_PASSWORD}
	
	Log			${Scenario Setup}
	#################################################################
	
	# Lender Id TPP #
	@{CONFIGUARATION_ITEMS} 	Create List				LenderIdTPP
	${Data}			Return Values From Child Node		${CONFIGUARATION_XML}	@{CONFIGUARATION_ITEMS}
	Set To Dictionary		${Scenario Setup}			Lender Id TPP			${Data}
	
	Log			${Scenario Setup}
	
	#  Dealer Id TPP #
	@{CONFIGUARATION_ITEMS} 	Create List				DealerIdTPP
	${Data}			Return Values From Child Node		${CONFIGUARATION_XML}	@{CONFIGUARATION_ITEMS}
	Set To Dictionary		${Scenario Setup}			Dealer Id TPP			${Data}
	
	Log			${Scenario Setup}
	
	#################################################################
	# Partner Id Compliance #
	@{CONFIGUARATION_ITEMS} 	Create List				PartnerIdCompliance
	${Data}			Return Values From Child Node		${CONFIGUARATION_XML}	@{CONFIGUARATION_ITEMS}
	Set To Dictionary		${Scenario Setup}			Partner Id Compliance			${Data}
	
	Log			${Scenario Setup}
	
	# Partner Dealer Id Compliance #
	@{CONFIGUARATION_ITEMS} 	Create List				DealerIdCompliance
	${Data}			Return Values From Child Node		${CONFIGUARATION_XML}	@{CONFIGUARATION_ITEMS}
	Set To Dictionary		${Scenario Setup}			Dealer Id Compliance			${Data}

	#################################################################	
	# Partner Id TD #
	@{CONFIGUARATION_ITEMS} 	Create List				PartnerIdTD
	${Data}			Return Values From Child Node		${CONFIGUARATION_XML}	@{CONFIGUARATION_ITEMS}
	Set To Dictionary		${Scenario Setup}			Partner Id TD			${Data}
	
	Log			${Scenario Setup}
	
	# Partner Dealer Id TD #
	@{CONFIGUARATION_ITEMS} 	Create List				PartnerDealerIdTD
	${Data}			Return Values From Child Node		${CONFIGUARATION_XML}	@{CONFIGUARATION_ITEMS}
	Set To Dictionary		${Scenario Setup}			Partner Dealer Id TD			${Data}
	
	Log			${Scenario Setup}	
	#################################################################
	
	# Splunk Details#
	@{CONFIGUARATION_ITEMS} 	Create List				Splunk_UserID
	${Data}			Return Values From Child Node		${CONFIGUARATION_XML}	@{CONFIGUARATION_ITEMS}
	Set To Dictionary		${Scenario Setup}			Splunk_UserID			${Data}
	
	# password #
	@{CONFIGUARATION_ITEMS} 	Create List				Splunk_Password
	${Data}			Return Values From Child Node		${CONFIGUARATION_XML}	@{CONFIGUARATION_ITEMS}
	Set To Dictionary		${Scenario Setup}			Splunk_Password			${Data}
	
	Log			${Scenario Setup}
	
	#################################################################
	
	# Switch Dealership #
	@{CONFIGUARATION_ITEMS} 	Create List				SwitchDealership
	${Data}			Return Values From Child Node		${CONFIGUARATION_XML}	@{CONFIGUARATION_ITEMS}
	Set To Dictionary		${Scenario Setup}			SwitchDealership			${Data}
	
	Log			${Scenario Setup}
####
		# DealerSwitch SourceDealerID #
	@{CONFIGUARATION_ITEMS} 	Create List				DealerSwitchSource
	${Data}			Return Values From Child Node		${CONFIGUARATION_XML}	@{CONFIGUARATION_ITEMS}
	Set To Dictionary		${Scenario Setup}			Dealer Switch Source			${Data}
	
	Log			${Scenario Setup}
	#################################################################
		# DealerSwitch TargetDealerID #
	@{CONFIGUARATION_ITEMS} 	Create List				DealerSwitchTarget
	${Data}			Return Values From Child Node		${CONFIGUARATION_XML}	@{CONFIGUARATION_ITEMS}
	Set To Dictionary		${Scenario Setup}			Dealer Switch Target			${Data}
	
	Log			${Scenario Setup}
	#################################################################	
		# DealerSwitch Product Type #
	@{CONFIGUARATION_ITEMS} 	Create List				DealerSwitchProductType
	${Data}			Return Values From Child Node		${CONFIGUARATION_XML}	@{CONFIGUARATION_ITEMS}
	Set To Dictionary		${Scenario Setup}			Dealer Switch Product Type			${Data}
	
	Log			${Scenario Setup}
	#################################################################	
		# COL Dealer #
	@{CONFIGUARATION_ITEMS} 	Create List				DealerIdCOL
	${Data}			Return Values From Child Node		${CONFIGUARATION_XML}	@{CONFIGUARATION_ITEMS}
	Set To Dictionary		${Scenario Setup}			Dealer Id COL			${Data}
	
	Log			${Scenario Setup}	
	#################################################################
	
	Log			${Scenario Setup}		warn
	Set Suite Variable		${Scenario Setup}
	
	#Set base url depending on environment
	${URL_BASE}=			Run Keyword If	'${Environment}'=='QA'		Set Variable		${URL_QA}
	...	ELSE IF								'${Environment}'=='DEV'		Set Variable		${URL_DEV}
	...	ELSE IF								'${Environment}'=='PROD'	Set Variable		${URL_PROD}
	Set Suite Variable		${URL_BASE}
	Log						URL_Base: ${URL_BASE}			WARN	
	
	#####################
	# Variables
	#####################
	${ListZeroIndex}	Set Variable					0
	${ScanCount}		Set Variable					7
	${ListZeroIndex}	Convert To Integer				${ListZeroIndex}
	${ScanCount}		Convert To Integer				${ScanCount}		
	${PreXMLSubmit-LeadFirstRow-Dictionary}				Create Dictionary					
	${PostXMLSubmit-LeadFirstRow-Dictionary}			Create Dictionary
	${PreXMLSubmitLead}									Create Dictionary
	${PostXMLSubmitScanLead}							Create Dictionary
	${PreXMLSubmitCust}									Create Dictionary
	${PostXMLSubmitScanCust}							Create Dictionary
	${DictionaryOfLeadRowDataDic}						Create Dictionary
	${DictionaryOfCustRowDataDic}						Create Dictionary
	Set Suite Variable	${DictionaryOfLeadRowDataDic}	
	Set Suite Variable	${DictionaryOfCustRowDataDic}	
	Set Suite Variable	${PreXMLSubmitLead}		  		
	Set Suite Variable	${PostXMLSubmitScanLead}
	Set Suite Variable	${PreXMLSubmitCust}		  		
	Set Suite Variable	${PostXMLSubmitScanLead}
	Set Suite Variable 	${PostXMLSubmitScanCust}
	
	
	Set Suite Variable	${UpdatedValueStatus}		  	${EMPTY}
	Set Suite Variable	${ScanCount}
	Set Suite Variable	${ListZeroIndex}
	
	${REF_DICT}=		Create Dictionary
	Set Suite Variable 	${REF_DICT}
	
	[Return]				${Scenario Setup}
	

*** Settings ***
Documentation		This is a resource file for DT web service related keywords


*** Keywords ***


# FD Phase III Test Setup		[Arguments]		${FILENAME}
	# [Documentation]			This keyword returns the working folder
	# ...						Pre-requisite : N/A
	# ...						Note: 		  : N/A
	# ...						Return Type   : String
	# ...				  		Author        : Naveed Hasan (Naveed.Hasan@dealtertrack.com)
	# ...						Creation Date : N/A
	# ...						Update Date\By: N/A
	# # Run Keyword And Ignore Error	WS_CommonUtil.KillProcessByName	iexplorer.exe
	# ${SCRIPT_DIR}		Get Current Working Directory		${FILENAME}	
	# ${RESOURCE}			Set Variable						${SCRIPT_DIR}
	# ${RESOURCE}			WS_CommonUtil.trimFromRight			${RESOURCE}				1
	# Set Suite Variable	${RESOURCE}	

# # Validate Nodes : Given Request XML Finance Driver
	# # [Arguments]				${WS_URL}	${SOAP_ACTION}	${USERNAME}		${PASSWORD}		${WS_REQUEST_XML}	${WS_INITIAL}	@{NODE_LIST}			
	# # [Documentation]			To validate the Node Value Pair in a Reponse XML where Request XML required
	# # ...						Information (e.g. SOAP ACTION, WS URL etc) for the WS was provided as input.
	# # ...						Keyword Return Pass/Fail
	# # ...						Pre-requisite : System needs to be in Permission Page
	# # ...						Note: 		  : N/A
	# # ...						Return Type   : Bolean
	# # ...				  		Author        : Naveed Hasan (Naveed.Hasan@dealtertrack.com)
	# # ...						Creation Date : 22th Nov 2013
	# # ...						Update Date\By: N/A
	# # ##########################
	# # # Local Variables
	# # ##########################	
	# # ${EMPTY}					Set Variable				\
	# # ${FailureList} 				Create List
	# # ${REQUEST_FILE}				Catenate					SEPARATOR=			${WS_INITIAL}		PhaseIIIRequestXML.txt
	# # ${RESPONSE_FILE}				Catenate					SEPARATOR=			${WS_INITIAL}		PhaseIIIResponseXML.txt
	
	# # WS_CommonUtil.Write_String_To_File							${RESOURCE}\\WebService\\Request\\${REQUEST_FILE}	${WS_REQUEST_XML}
	# # ##########################
	# # # Send WSDL Request
	# # ##########################
	# # ${RESPONSECODE}				${ERRORTEXT}				${RESPONSETEXT}				Send Request With Request XML Finance Driver	${WS_URL}	${SOAP_ACTION}	${WS_REQUEST_XML}	${USERNAME} 	${PASSWORD}
	# # WS_CommonUtil.Write_String_To_File						${RESOURCE}\\WebService\\Response\\${RESPONSE_FILE}		${RESPONSETEXT}
	# # Set Test Variable			${RESPONSECODE}
	# # Set Test Variable			${RESPONSETEXT}
	# # Set Test Variable			${ERRORTEXT}
	
	# # Log			${RESPONSECODE}
	# # Log			${RESPONSETEXT}
	# # Run Keyword If              '${RESPONSECODE}'!= '200'         Fail         FD Request was not successful. You have received response code: ${RESPONSECODE}. The error message is: ${RESPONSETEXT}.
	# # Run Keyword If				'${ERRORTEXT}'!='Nothing'	Fail		${WS_REF} Web Service Returned Error : ${ERRORTEXT} So Exiting Node Validation
	# # #########################
	# # #   Validation Logic
	# # #########################
	# # :For 	${ITEM}  	IN 		@{NODE_LIST} 
	# # \		${FOUND}			WS_CommonUtil.FindStringInString					    ${RESPONSETEXT}		${ITEM}
	# # \		${FAIL_DESC}		Run Keyword If			'${FOUND}'=='-1'		 		Catenate 			SEPARATOR=:			Node Failed 		${ITEM}
	# # \							Run Keyword If			'${FAIL_DESC}'!='None'			Append To List		${FailureList}		${FAIL_DESC}

	# # #########################
	# # #   Keyword Fail Loop
	# # #########################	
	# # ${FAILED_ITEM}				FindStringInString			  str(${FailureList})		Failed
	# # Run Keyword If				'${FAILED_ITEM}'!='-1'		  Fail Scanner		    	${FailureList}		Node Validation Failed For Nodes PrequalAlice WS

###############################################################################################################	
####################################### Phase II Keywords #######################################
###############################################################################################################

# Set Dealership				[Arguments]				${WEB_SERVICE}		${EXCELFILE}			${ROW_NUM}
	# [Documentation]			This keyword is is used to set the dealership ID
	# ...						Keyword Return True, otherwise False.
	# ...						Pre-requisite : N/A
	# ...						Note: 		  : N/A
	# ...						Return Type   : boolean
	# ...				  		Author        : Manisha Gadekar (Manisha.Gadekar@dealertrack.com)
	# ...						Creation Date : 
	# ...						Update Date\By: Manisha Gadekar - 18th Oct 2013
	
	# Log			${ROW_NUM}
	# # Call keyword to switch dealership to desired dealership
	# ${PD_DEALER_NUM}=			Get Excel Cell Value		${EXCELFILE}			${ROW_NUM}			PartnerDealerIds
	# ${PD_DEALER_NUM}=			Get Substring		${PD_DEALER_NUM}		0		6
	
	# Set Suite Variable			${PD_DEALER_NUM}
# #-------------------------------------------------------------------------------------------------------------------------	

Navigate To Customer Archive
	[Documentation]		This keyword navigates to Customer Archive page
	...						Keyword Return True, otherwise False.
	...						Pre-requisite : N/A
	...						Note: 		  : N/A
	...						Return Type   : boolean
	...				  		Author        : Manisha Gadekar (Manisha.Gadekar@dealertrack.com)
	...						Creation Date : 
	...						Update Date\By: N/A

	# Click on Apps & Contract tab
	
	Wait Until Page Contains Element            //iframe[@id='iFrm']		error=Navigate to Customer Archive page is not successful. Page is not loaded correctly. Please check.
	Select Frame                                iFrm
	Wait Until Page Contains Element            //frame[@name='nav']
	Select Frame                                nav
	# sleep 	3s
	Execute Javascript                          window.document.getElementById('tabAppA').onclick()
	# sleep										5s
	Wait Until Keyword Succeeds               120s		3s			Page Should Contain Element             //a[@id='CreditArchive'] 			loglevel=NONE
	Press Key								//a[@id='CreditArchive']				\\13
	Unselect Frame
	Wait Until Page Contains Element            //iframe[@id='iFrm']		error=Navigate to Customer Archive page is not successful. Page is not loaded correctly. Please check.
	Select Frame                                iFrm
	Wait Until Page Contains Element            //frame[@name='main']
	Select Frame                                main
	# Wait Until Keyword Succeeds               120s                   3s                   Page Should Contain Element             //table[@id='DataGridArchive'] 			loglevel=NONE	
	
	Wait Until Keyword Succeeds               120s                   3s                   Page Should Contain Element 			//input[@id='btnSearch']		loglevel=NONE
	
	Unselect Frame
# #-------------------------------------------------------------------------------------------------------------------------	
Navigate To Customer Inquiry
	[Documentation]		This keyword navigates to Customer Archive page
	...						Keyword Return True, otherwise False.
	...						Pre-requisite : N/A
	...						Note: 		  : N/A
	...						Return Type   : boolean
	...				  		Author        : Manisha Gadekar (Manisha.Gadekar@dealertrack.com)
	...						Creation Date : 
	...						Update Date\By: N/A

	# Click on Apps & Contract tab
	
	Wait Until Page Contains Element            //iframe[@id='iFrm']	error=Navigate to Customer Inquiry page is not successful. Page is not loaded correctly. Please check.
	Select Frame                                iFrm
	Wait Until Page Contains Element            //frame[@name='nav']
	Select Frame                                nav
	sleep 	3s
	Execute Javascript                          window.document.getElementById('tabAppA').onclick()
	sleep										5s
	Wait Until Keyword Succeeds               120s                   3s                   Page Should Contain Element             //a[@id='CBINQ'] 			loglevel=NONE
	Press Key									//a[@id='CBINQ']				\\13
	sleep	3s
	Unselect Frame
	
	# Veryfing the text on page
	Wait Until Page Contains Element            //iframe[@id='iFrm']
	Select Frame                                iFrm
	Wait Until Page Contains Element            //frame[@name='main']
	Select Frame                                main
	
	Wait Until Keyword Succeeds               120s                   3s                   Page Should Contain Element             //*[text()='Customer Inquiry ']  			loglevel=NONE
	sleep	3s
	Unselect Frame
# #-------------------------------------------------------------------------------------------------------------------------	

Navigate To My Leads
	[Documentation]		This keyword navigates to My Lead Page
	...						Keyword Return True, otherwise False.
	...						Pre-requisite : N/A
	...						Note: 		  : N/A
	...						Return Type   : boolean
	...				  		Author        : Manisha Gadekar (Manisha.Gadekar@dealertrack.com)
	...						Creation Date : 
	...						Update Date\By: Manisha Gadekar (01 June 2015)

	WriteToFile			${LogFile}				Y			Navigate To My Leads>>>
	
	# Click on Leads tab
	${FRM_FOUND}		Run Keyword and Return Status		Wait Until Page Contains Element            //iframe[@id='iFrm']	3
	Run Keyword If		${FRM_FOUND}==False		Unselect Frame
	Select Frame                                iFrm
	Wait Until Page Contains Element            //frame[@name='nav']
	Select Frame                                nav
	Execute Javascript                          window.document.getElementById('tabLeads_SNA').onclick()
	# Wait Until Keyword Succeeds               120s                   3s                   Page Should Contain Element             //a[@id='LeadsMngr'] 			loglevel=NONE
	# Press Key									//a[@id='LeadsMngr']				\\13
	
	Wait Until Keyword Succeeds               120s                   3s                   Page Should Contain Element             //a[@id='LeadsMngr2'] 			loglevel=NONE	
	Press Key									//a[@id='LeadsMngr2']				\\13
	
	Unselect Frame
	
	# Veryfing the text on page
	Wait Until Page Contains Element            //iframe[@id='iFrm']
	Select Frame                                iFrm
	Wait Until Page Contains Element            //frame[@name='main']
	Select Frame                                main
	
#	${heading}=		Selenium2Library.Get Text 		//table[@class='main_l']/tbody/tr/td/div[1]
	
	Wait Until Keyword Succeeds               120s                   3s                   Page Should Contain Element             //table[@id='DGLeadsReport'] 	My Leads Page is not loaded.	loglevel=NONE
	#//*[text()='My Leads']  		Text My Leads is not shown on page.		loglevel=NONE
	Unselect Frame
# #-------------------------------------------------------------------------------------------------------------------------	

Navigate To Transmission Status Page
	[Documentation]		This keyword navigates to Transmission Status Page
	...						Keyword Return True, otherwise False.
	...						Pre-requisite : N/A
	...						Note: 		  : N/A
	...						Return Type   : boolean
	...				  		Author        : Manisha Gadekar (Manisha.Gadekar@dealertrack.com)
	...						Creation Date : 
	...						Update Date\By: N/A
	
	# Click on Apps & Contract tab
	Unselect Frame
	Wait Until Page Contains Element            //iframe[@id='iFrm']	error=Navigate to Transmission Status page is not successful. Page is not loaded correctly. Please check.
	Select Frame                                iFrm
	Wait Until Page Contains Element            //frame[@name='nav']
	Select Frame                                nav
	Execute Javascript                          window.document.getElementById('tabAppA').onclick()
	sleep										5s
	Wait Until Keyword Succeeds               120s                   3s                   Page Should Contain Element             //a[@id='AppTrans'] 			loglevel=NONE
	Press Key									//a[@id='AppTrans']				\\13
	Unselect Frame
	
	# Veryfing the text on page
	Wait Until Page Contains Element            //iframe[@id='iFrm']
	Select Frame                                iFrm
	Wait Until Page Contains Element            //frame[@name='main']
	Select Frame                                main

	Wait Until Keyword Succeeds               120s                   3s                   Page Should Contain Element             //*[text()='Transmission Status ']  		Text Transmission Status is not shown on page.		loglevel=NONE
	# Wait Until Keyword Succeeds             120s        3s         Page Should Contain Element            //table[@id='DataGridTran']		 	Transmission status page is not loded.		loglevel=NONE		
	Unselect Frame
# #-------------------------------------------------------------------------------------------------------------------------
	
Navigate To App Status Page
	[Documentation]		This keyword navigates to Application Status Page
	...						Keyword Return True, otherwise False.
	...						Pre-requisite : N/A
	...						Note: 		  : N/A
	...						Return Type   : boolean
	...				  		Author        : Manisha Gadekar (Manisha.Gadekar@dealertrack.com)
	...						Creation Date : 
	...						Update Date\By: N/A
	# Click on Apps & Contract tab
	Wait Until Page Contains Element            //iframe[@id='iFrm']	error=Navigate to App Status page is not successful. Page is not loaded correctly. Please check.
	Select Frame                                iFrm
	Wait Until Page Contains Element            //frame[@name='nav']
	Select Frame                                nav
	Execute Javascript                          window.document.getElementById('tabAppA').onclick()
	sleep										5s

	Wait Until Keyword Succeeds               120s                   3s                   Page Should Contain Element             //a[@id='AppStatus'] 			loglevel=NONE
	Press Key									//a[@id='AppStatus']				\\13
	Unselect Frame
	
	# Veryfing the text on page
	Wait Until Page Contains Element            //iframe[@id='iFrm']
	Select Frame                                iFrm
	Wait Until Page Contains Element            //frame[@name='main']
	Select Frame                                main

	Wait Until Keyword Succeeds               120s                   3s                   Page Should Contain Element             //*[text()='Application Status']  	Text Application Status is not shown on page.		loglevel=NONE
	Unselect Frame
# #-------------------------------------------------------------------------------------------------------------------------	
Navigate To DealQueue
	[Documentation]			This keyword is used to navigate to DealQueue 
	...						Keyword Return True, otherwise False.
	...						Pre-requisite : N/A
	...						Note: 		  : N/A
	...						Return Type   : Boolean
	...				  		Author        : Manisha Gadekar (Manisha.Gadekar@dealertrack.com)
	...						Creation Date : 23th Aug 2013
	...						Update Date\By: N/A
	
	Log		Navigate To Deal Queue Page	
	Unselect Frame	
	Wait Until Page Contains Element            //iframe[@id='iFrm']	error=Navigate to Deal Queue page is not successful. Page is not loaded correctly. Please check.
	Select Frame                                iFrm
	Wait Until Page Contains Element            //frame[@name='nav']
	Select Frame                                nav
	Execute Javascript                          window.document.getElementById('tabAppA').onclick()
	Wait Until Keyword Succeeds              	60s                   3s                   Page Should Contain Element           //a[@id='DecTrk']			 			loglevel=NONE		
	Press Key									//a[@id='DecTrk']				\\13
	
	Unselect Frame
	
	Wait Until Page Contains Element            //iframe[@id='iFrm']
	Select Frame                                iFrm
	Wait Until Page Contains Element            //frame[@name='main']
	Select Frame                                main
	# sleep 	2s
	
	Wait Until Keyword Succeeds              	60s                   3s                   Page Should Contain Element             //table[@id='Table1'] 		Table is not shown on Deal Queue page.		loglevel=NONE
	
	Unselect Frame
# #-------------------------------------------------------------------------------------------------------------------------	
Navigate to Customer Folders
	[Documentation]		This keyword navigates to Customer Folder page in Compliance.
	...						Keyword Return True, otherwise False.
	...						Pre-requisite : N/A
	...						Note: 		  : N/A
	...						Return Type   : boolean
	...				  		Author        : Manisha Gadekar (Manisha.Gadekar@dealertrack.com)
	...						Creation Date : 
	...						Update Date\By: N/A
	
	WriteToFile			${logfile}			Y		Navigate to Customer Folders>>>
	
	Unselect Frame
	Wait Until Page Contains Element            //iframe[@id='iFrm']		error=Navigate to Customer Folder page is not successful. Page is not loaded correctly. Please check.
	Select Frame                                iFrm
	Wait Until Page Contains Element            //frame[@name='nav']
	Select Frame                                nav
	
	Wait Until Keyword Succeeds               120s                   3s                   Page Should Contain Element            //a[@id='tabReportsA']			Reports tab is not found. 	loglevel=NONE
	# sleep 	3s
	Execute Javascript                          window.document.getElementById('tabReportsA').onclick()
	# sleep										5s
	Wait Until Keyword Succeeds               120s                   3s                   Page Should Contain Element             //a[@id='AutoComply'] 			loglevel=NONE
	Press Key									//a[@id='AutoComply']				\\13
	# sleep	3s
	Wait Until Keyword Succeeds               120s		3s			Page Should Contain Element             //a[@id='CustomerFiles'] 			loglevel=NONE
	Press Key									//a[@id='CustomerFiles']				\\13
	# sleep	3s
	
	Wait Until Keyword Succeeds               120s                   3s                   Page Should Contain Element             //*[text()='Customer Folders']  	Customer Folders Page is not loaded. Text Customer Folders is not shown on page.		loglevel=NONE
	Unselect Frame
# #-------------------------------------------------------------------------------------------------------------------------	

Navigate To CRM
	[Documentation]		This keyword navigates to FD Preferences page by clicking on CRM tab
	...						Keyword Return True, otherwise False.
	...						Pre-requisite : N/A
	...						Note: 		  : N/A
	...						Return Type   : boolean
	...				  		Author        : Manisha Gadekar (Manisha.Gadekar@dealertrack.com)
	...						Creation Date : 
	...						Update Date\By: N/A

	Wait Until Page Contains Element            //iframe[@id='iFrm']
	Select Frame                                iFrm
	Wait Until Page Contains Element            //frame[@name='nav']
	Select Frame                                nav
	sleep 	3s
	Execute Javascript                          window.document.getElementById('tabCRM_SNA').onclick()
	sleep										5s
	Wait Until Keyword Succeeds               120s		3s			Page Should Contain Element             //a[@id='LeadsPrefCombCRM'] 			loglevel=NONE
	Press Key									//a[@id='LeadsPrefCombCRM']				\\13
	sleep	3s
	Unselect Frame
	
	Wait Until Page Contains Element            //iframe[@id='iFrm']
	Select Frame                                iFrm
	Wait Until Page Contains Element            //frame[@name='main']
	Select Frame                                main
	
	Wait Until Keyword Succeeds               120s                   3s                   Page Should Contain Element             //*[text()='Leads Preferences']  			loglevel=NONE
	
	sleep	5s
	
	# Select Partner Integration (FinanceDriver) radion button
	Select A Radio Button		LeadSetup_PartnerIntegration
	
	sleep	5s
	Wait Until Keyword Succeeds               120s		3s			Page Should Contain Element             //input[@id='SetLeadSetup']	 			loglevel=NONE
	Press Key									//input[@id='SetLeadSetup']					\\13
	sleep	5s
	Unselect Frame
# #-------------------------------------------------------------------------------------------------------------------------		

Search On Page			[Arguments]		${S_DROPDOWN}		${OPTION}			${S_TEXTBOX}		${SEARCHVAL}	${S_BTN}
	[Documentation]		This keyword searches the record on Customer Archive page by required dropdown option.
	...						Keyword Return True, otherwise False.
	...						Pre-requisite : N/A
	...						Note: 		  : N/A
	...						Return Type   : boolean
	...				  		Author        : Manisha Gadekar (Manisha.Gadekar@dealertrack.com)
	...						Creation Date : 
	...						Update Date\By: N/A

	Wait Until Page Contains Element            //iframe[@id='iFrm']
	Select Frame                                iFrm
	Wait Until Page Contains Element            //frame[@name='main']
	Select Frame                                main
	sleep 	3s
	Wait Until Keyword Succeeds               120s                   3s                   Page Should Contain Element             ${S_DROPDOWN} 			loglevel=NONE
	Select from List		${S_DROPDOWN}			${OPTION}
	sleep	3s
	Unselect Frame
	
	Wait Until Page Contains Element            //iframe[@id='iFrm']
	Select Frame                                iFrm
	Wait Until Page Contains Element            //frame[@name='main']
	Select Frame                                main
	sleep 	2s
	# type name of profile
	Wait Until Keyword Succeeds               120s                   3s                   Page Should Contain Element             ${S_TEXTBOX} 			loglevel=NONE
	Input Text						${S_TEXTBOX}					${SEARCHVAL}
	# click on search button
	sleep		2s
	Unselect Frame
	sleep	2s
	
	Wait Until Page Contains Element            //iframe[@id='iFrm']
	Select Frame                                iFrm
	Wait Until Page Contains Element            //frame[@name='main']
	Select Frame                                main
	sleep 	2s
	#Click Button					${S_BTN}	
	Wait Until Keyword Succeeds               120s                   3s                   Page Should Contain Element             //input[@id='btnSearch'] 			loglevel=NONE
	Press Key				//input[@id='btnSearch']		\\13
	# sleep		5s
	Unselect Frame
# #-------------------------------------------------------------------------------------------------------------------------	

Navigate To Customer Detail Page
	[Documentation]		This keyword navigates to Customer Details Page
	...						Keyword Return True, otherwise False.
	...						Pre-requisite : N/A
	...						Note: 		  : N/A
	...						Return Type   : boolean
	...				  		Author        : Manisha Gadekar (Manisha.Gadekar@dealertrack.com)
	...						Creation Date : 
	...						Update Date\By: N/A

	Log		***** Navigate To Customer Detail Page *****
	Wait Until Page Contains Element            //iframe[@id='iFrm']
	Select Frame                                iFrm
	Wait Until Page Contains Element            //frame[@name='main']
	Select Frame                                main
	sleep 	5s
	Wait Until Keyword Succeeds               120s                   3s                   Page Should Contain Element             //a[@id='DataGridArchive__ctl3_Hyperlink1'] 			loglevel=NONE
	Press Key			//a[@id='DataGridArchive__ctl3_Hyperlink1']			\\13
	Wait Until Keyword Succeeds               120s            3s               Page Should Contain Element             //*[text()='Customer Detail']  			loglevel=NONE
	sleep	3s
	Unselect Frame
# #-------------------------------------------------------------------------------------------------------------------------	
	
Modify Prequalifications and Routing section
	[Documentation]		This keywords stores the original setting of bureau selected and then changes it. Also verifies that the changed setting is saved.
	...						Keyword Return True, otherwise False.
	...						Pre-requisite : N/A
	...						Note: 		  : N/A
	...						Return Type   : boolean
	...				  		Author        : Manisha Gadekar (Manisha.Gadekar@dealertrack.com)
	...						Creation Date : 
	...						Update Date\By: N/A

	sleep	5s
	Wait Until Page Contains Element            //iframe[@id='iFrm']
	Select Frame                                iFrm
	Wait Until Page Contains Element            //frame[@name='main']
	Select Frame                                main
	sleep 	5s
	Wait Until Keyword Succeeds               120s                   3s                   Page Should Contain Element             //a[@href='/FinanceDriver/DealerPartnerIntegration/PrequalificationAndRouting?IsEditMode=True'] 			loglevel=NONE	
	
	# Click on Edit button
	Press Key									//a[@href='/FinanceDriver/DealerPartnerIntegration/PrequalificationAndRouting?IsEditMode=True']					\\13
	
	Wait Until Keyword Succeeds               120s            3s               Page Should Contain Element             //*[text()='Leads Partner Integration | Prequalification & Routing']  			loglevel=NONE	

	# get status of radio buttons
	${ISCHECKED1}=		Selenium2Library.Get Element Attribute		//input[@id='bureauprovider0']@checked 	 
	${ISCHECKED2}=		Selenium2Library.Get Element Attribute		//input[@id='bureauprovider1']@checked 	 
	${ISCHECKED3}=		Selenium2Library.Get Element Attribute		//input[@id='bureauprovider2']@checked 	 	
	
	Run Keyword If		'${ISCHECKED1}'=='true'		Log		Current Bureau selected is: Equifax
	...		ELSE IF		'${ISCHECKED2}'=='true'		Log		Current Bureau selected is: Experian
	...		ELSE IF		'${ISCHECKED3}'=='true'		Log		Current Bureau selected is: TransUnion

	# save value of oroginal setting
	${ORG_BUREAU}=	Run Keyword If		'${ISCHECKED1}'=='true'		Set Variable		Equifax
	...		ELSE IF		'${ISCHECKED2}'=='true'						Set Variable		Experian
	...		ELSE IF		'${ISCHECKED3}'=='true'						Set Variable		TransUnion
	
	Set Test Variable	${ORG_BUREAU}
	
	${NEW_BUREAU}= 	Set Variable	None
	
	# if original bureau is Euifax, set new bureau as Experian
	Run Keyword If		'${ORG_BUREAU}'=='Equifax'		Select A Radio Button		bureauprovider1
	${NEW_BUREAU}=		Run Keyword If		'${ORG_BUREAU}'=='Equifax'		Set Variable		Experian		ELSE		Set Variable	${NEW_BUREAU}
	
	# if original bureau is Experian, set new bureau as TransUnion
	Run Keyword If		'${ORG_BUREAU}'=='Experian'		Select A Radio Button		bureauprovider2
	${NEW_BUREAU}=		Run Keyword If		'${ORG_BUREAU}'=='Experian'		Set Variable		TransUnion		ELSE		Set Variable	${NEW_BUREAU}
	
	# if original bureau is TransUnion, set new bureau as Experian
	Run Keyword If		'${ORG_BUREAU}'=='TransUnion'		Select A Radio Button		bureauprovider0
	${NEW_BUREAU}=		Run Keyword If		'${ORG_BUREAU}'=='TransUnion'		Set Variable		Equifax		ELSE		Set Variable	${NEW_BUREAU}
	
	Set Test Variable	${NEW_BUREAU}		# name ofmodified bureau
	
	# Click on Save Button
	Press Key		//input[@id='SavePrequalificationAndRouting']		\\13
	
	sleep	5s
	Wait Until Keyword Succeeds               120s            3s               Page Should Contain Element             //div[@id='DTform']/table[2]/tbody/tr[2]/td/span[@class='lineup'] 			loglevel=NONE	
	# read bureau name dispayed on page
	${CHANGEDBUREAUNAME}=		Get Text		//div[@id='DTform']/table[2]/tbody/tr[2]/td/span[@class='lineup']
	
	# verify if the bureau name is expected name
	Should Be Equal As Strings		${CHANGEDBUREAUNAME}			${NEW_BUREAU}			Modified Bureau name is not shown on 'Leads Partner Integration | Edit Setup' page. Expected Bureau name: ${NEW_BUREAU}. Actual bureau name: ${CHANGEDBUREAUNAME}			values=False

	sleep	3s
	Unselect Frame
# #-------------------------------------------------------------------------------------------------------------------------	

# Modify Prequalifications Criteria Settings
	# [Arguments]		${NEW_CR_SCORE}		${NEW_YRS_JOB}	${NEW_ANN_INCOME}		${NEW_BANKRUPT}		${NEW_TOT_SAT}		${NEW_ONLY_RUN}
	# [Documentation]		This keyword is used to modify Prequalifications Criteria Settings
	# ...						Keyword Return True, otherwise False.
	# ...						Pre-requisite : N/A
	# ...						Note: 		  : N/A
	# ...						Return Type   : boolean
	# ...				  		Author        : Manisha Gadekar (Manisha.Gadekar@dealertrack.com)
	# ...						Creation Date : 
	# ...						Update Date\By: N/A

	# sleep	5s
	# Wait Until Page Contains Element            //iframe[@id='iFrm']
	# Select Frame                                iFrm
	# Wait Until Page Contains Element            //frame[@name='main']
	# Select Frame                                main
	# sleep 	7s
	
	# # Click on Edit button
	# Wait Until Keyword Succeeds       120s      3s         Page Should Contain Element             //a[@href='/FinanceDriver/DealerPartnerIntegration/PrequalificationAndRouting?IsEditMode=True'] 		Edit button is not found.	loglevel=NONE		
	# Press Key									//a[@href='/FinanceDriver/DealerPartnerIntegration/PrequalificationAndRouting?IsEditMode=True']					\\13

	# sleep	3s
	
	# # wait until page is loaded
	# # Wait Until Keyword Succeeds       180s      3s          Page Should Contain Element             //*[text()='Leads Partner Integration | Prequalification & Routing']  	Text 'Leads Partner Integration | Prequalification & Routing' was expected, but was not found on UI.		loglevel=NONE	
	# Wait Until Keyword Succeeds       120s      3s          Page Should Contain Element             //input[@id='SavePrequalificationAndRouting'] 		Page 'Leads Partner Integration | Prequalification & Routing' is not loded correctly.		loglevel=NONE	
	
	# # change credit score
	# Wait Until Keyword Succeeds       180s      3s          Page Should Contain Element             //input[@id='CreditScoreTierRules_0__RuleCriteriaValue']  	 	'Credit Score' text box is not found.		loglevel=NONE	
	# Wait Until Element is Enabled		//input[@id='CreditScoreTierRules_0__RuleCriteriaValue']		10
	# Input Text		//input[@id='CreditScoreTierRules_0__RuleCriteriaValue']		${NEW_CR_SCORE}
	
	# # change years at job
	# #PrequalificationRules_1__RuleCriteriaValue
	# # NonCreditScoreRules_1__RuleCriteriaValue
	# # NonCreditScoreRules_2__RuleCriteriaValue
	# # NonCreditScoreRules_3__RuleCriteriaValue
	
	# Wait Until Keyword Succeeds       180s      3s          Page Should Contain Element             //input[@id='NonCreditScoreRules_0__RuleCriteriaValue']  	 	'Years at Currect Job' text box is not found.		loglevel=NONE	
	# Wait Until Element is Enabled		//input[@id='NonCreditScoreRules_0__RuleCriteriaValue']		10
	# Input Text		//input[@id='NonCreditScoreRules_0__RuleCriteriaValue']		${NEW_YRS_JOB}
	
	# # change annual income
	# Wait Until Keyword Succeeds       180s      3s          Page Should Contain Element             //input[@id='NonCreditScoreRules_1__RuleCriteriaValue']  	 	'Annual Income' text box is not found.		loglevel=NONE	
	# Wait Until Element is Enabled		//input[@id='NonCreditScoreRules_1__RuleCriteriaValue']		10
	# Input Text		//input[@id='NonCreditScoreRules_1__RuleCriteriaValue']	 	${NEW_ANN_INCOME}
	
	# # change total banruptcies
	# Wait Until Keyword Succeeds       180s      3s          Page Should Contain Element             //input[@id='NonCreditScoreRules_2__RuleCriteriaValue']  	 	'Total Bankruptcies' text box is not found.		loglevel=NONE	
	# Wait Until Element is Enabled		//input[@id='NonCreditScoreRules_2__RuleCriteriaValue']		10
	# Input Text		//input[@id='NonCreditScoreRules_2__RuleCriteriaValue']		${NEW_BANKRUPT}
	
	# # change total open sat
	# Wait Until Keyword Succeeds       180s      3s          Page Should Contain Element             //input[@id='NonCreditScoreRules_3__RuleCriteriaValue']  	 	'Total Open Satisfactory Tradelines' text box is not found.		loglevel=NONE	
	# Wait Until Element is Enabled		//input[@id='NonCreditScoreRules_3__RuleCriteriaValue']		10
	# Input Text		//input[@id='NonCreditScoreRules_3__RuleCriteriaValue']		${NEW_TOT_SAT}
	
	# # toggle checkbox
	# Run Keyword If		'${NEW_ONLY_RUN}'=='Select'		Select/Unselect Checkbox		IsApplyPrimaryRule		Select	
	# ... 	ELSE IF		'${NEW_ONLY_RUN}'=='Unselect'		Select/Unselect Checkbox		IsApplyPrimaryRule		Unselect	
	
	# #Press Key		//input[@id='IsApplyPrimaryRule'] 		\\13
	# sleep		5s
	# Press Key		//input[@id='SavePrequalificationAndRouting']		\\13

	# Wait Until Keyword Succeeds               120s                   3s                   Page Should Contain Element             //*[text()='Leads Partner Integration | Edit Setup'] 			loglevel=NONE	
	
	# #sleep 	5s
	# Unselect Frame
# #-------------------------------------------------------------------------------------------------------------------------	

Modify Preferences Settings	
	[Arguments]				${NEW_YRSJOB}		${NEW_INCOME}		${NEW_RATE}		${NEW_PASS}		${NEW_FAIL}		${NEW_EMAIL1}		${NEW_CRMEMAIL}		${MODORRESTORE}
	[Documentation]			This keyword is used to modify settings of Prequalifications & Routing
	...						Keyword Return True, otherwise False.
	...						Pre-requisite : N/A
	...						Note: 		  : N/A
	...						Return Type   : boolean
	...				  		Author        : Manisha Gadekar (Manisha.Gadekar@dealertrack.com)
	...						Creation Date : 
	...						Update Date\By: N/A
	
	sleep	5s
	Wait Until Page Contains Element            //iframe[@id='iFrm']
	Select Frame                                iFrm
	Wait Until Page Contains Element            //frame[@name='main']
	Select Frame                                main
	#sleep 	15s
	sleep	5s
	#-------------------- Prequalification and routing section-------------------------
	# Click on Edit button
	Wait Until Keyword Succeeds               120s                   3s                   Page Should Contain Element            //a[@href='/FinanceDriver/DealerPartnerIntegration/PrequalificationAndRouting?IsEditMode=True']			 			loglevel=NONE		
	Press Key									//a[@href='/FinanceDriver/DealerPartnerIntegration/PrequalificationAndRouting?IsEditMode=True']					\\13
	
	Wait Until Keyword Succeeds               120s            3s               Page Should Contain Element             //*[text()='Leads Partner Integration | Prequalification & Routing']  			loglevel=NONE	
	${NEW_BUREAU}= 	Set Variable	None

	# if original bureau is Euifax, set new bureau as Experian
	Run Keyword If		'${ORG_BUREAU}'=='Equifax' and '${MODORRESTORE}'=='Modify'		Select A Radio Button		bureauprovider1
	${NEW_BUREAU}=		Run Keyword If		'${ORG_BUREAU}'=='Equifax'		Set Variable		Experian		ELSE		Set Variable	${NEW_BUREAU}
	
	# if original bureau is Experian, set new bureau as TransUnion
	Run Keyword If		'${ORG_BUREAU}'=='Experian' and '${MODORRESTORE}'=='Modify'		Select A Radio Button		bureauprovider2
	${NEW_BUREAU}=		Run Keyword If		'${ORG_BUREAU}'=='Experian'		Set Variable		TransUnion		ELSE		Set Variable	${NEW_BUREAU}
	
	# if original bureau is TransUnion, set new bureau as Experian
	Run Keyword If		'${ORG_BUREAU}'=='TransUnion' and '${MODORRESTORE}'=='Modify'		Select A Radio Button		bureauprovider0
	${NEW_BUREAU}=		Run Keyword If		'${ORG_BUREAU}'=='TransUnion'		Set Variable		Equifax		ELSE		Set Variable	${NEW_BUREAU}
	
	# Restoring original setting
	Run Keyword If		'${ORG_BUREAU}'=='Equifax' and '${MODORRESTORE}'=='Restore'			Select A Radio Button		bureauprovider0
	Run Keyword If		'${ORG_BUREAU}'=='Experian' and '${MODORRESTORE}'=='Restore'			Select A Radio Button		bureauprovider1
	Run Keyword If		'${ORG_BUREAU}'=='TransUnion' and '${MODORRESTORE}'=='Restore'			Select A Radio Button		bureauprovider2
	
	${NEW_BUREAU}=		Run Keyword If		'${ORG_BUREAU}'=='Equifax' and '${MODORRESTORE}'=='Restore'		Set Variable		Equifax		ELSE		Set Variable	${NEW_BUREAU}
	${NEW_BUREAU}=		Run Keyword If		'${ORG_BUREAU}'=='Experian' and '${MODORRESTORE}'=='Restore'		Set Variable		Experian		ELSE		Set Variable	${NEW_BUREAU}
	${NEW_BUREAU}=		Run Keyword If		'${ORG_BUREAU}'=='TransUnion' and '${MODORRESTORE}'=='Restore'		Set Variable		TransUnion		ELSE		Set Variable	${NEW_BUREAU}

	Set Test Variable	${NEW_BUREAU}		# name ofmodified bureau
	
	sleep	7s
	# change years at job
	Input Text		//input[@id='PrequalificationRules_1__RuleCriteriaValue']		${NEW_YRSJOB}
	
	sleep	2s
	# change annual income
	Input Text		//input[@id='PrequalificationRules_2__RuleCriteriaValue']	 	${NEW_INCOME}
	
	# change buy markup rate
	sleep	2s
	Input Text		//input[@id='RateMarkup']		${NEW_RATE}
	
	# Lender routing part
	Select From List By Label			//select[@id='LenderRoutingList_0__DealerSettings_PrimeLenders_0__LenderId']		${NEW_PASS}
	sleep	2s
	
	Select From List By Label			//select[@id='LenderRoutingList_0__DealerSettings_SubPrimeLenders_0__LenderId']		${NEW_FAIL}
	sleep	2s
	
	# click on save button
	Press Key		//input[@id='SavePrequalificationAndRouting']				\\13
	
	sleep	3s
	Unselect Frame
	
	#--------------------- Notifications and Messaging section -----------------
	Wait Until Page Contains Element            //iframe[@id='iFrm']
	Select Frame                                iFrm
	Wait Until Page Contains Element            //frame[@name='main']
	Select Frame                                main
	
	# Edit Notifications and Messaging section
	Wait Until Keyword Succeeds               120s                   3s                   Page Should Contain Element            //a[@href='/FinanceDriver/DealerPartnerIntegration/NotificationAndMessaging?IsEditMode=True']			 			loglevel=NONE		
	Press Key									//a[@href='/FinanceDriver/DealerPartnerIntegration/NotificationAndMessaging?IsEditMode=True']					\\13
	
	Wait Until Keyword Succeeds               120s            3s               Page Should Contain Element             //*[text()='Leads Partner Integration | Notifications & Messaging']  			loglevel=NONE	
	
	# change email address
	Input Text				//input[@id='NotificationEmailAddresses_0_']		${NEW_EMAIL1}
	sleep	2s
	# change CRM email
	Input Text				//input[@id='AdfEmail']			${NEW_CRMEMAIL}
	sleep	2s
	# save changes
	Press Key			//input[@id='SaveNotificationsAndMessaging']			\\13
	Wait Until Keyword Succeeds               120s                   3s                   Page Should Contain Element             //*[text()='Leads Partner Integration | Edit Setup'] 			loglevel=NONE	
	sleep 	5s
	Unselect Frame
# #-------------------------------------------------------------------------------------------------------------------------	
	
# Lead Validation On My Leads Page				[Arguments]			${EXCELFILE}		${ROW_NUM}		${EXP_LEADTYPE}		${PASSORFAIL}	${STATUS}	${BUBBLEVALIDATION}
	# [Documentation]			This keyword is called after sending valid Lead request. It performs validations on My Leads page.
	# ...						Keyword Return True, otherwise False.
	# ...						Pre-requisite : N/A
	# ...						Note: 		  : N/A
	# ...						Return Type   : boolean
	# ...				  		Author        : Manisha Gadekar (Manisha.Gadekar@dealertrack.com)
	# ...						Creation Date : 12th Aug 2013
	# ...						Update Date\By: N/A
	
	# # Navigate to My leads page
	# Navigate To My Leads
	
	# ${EXCELVAL}=	Get Excel Cell Value	${EXCELFILE}			${ROW_NUM}			LastName
	
	# # Search record on page
	# Search On Page			SearchByDropDown		last_name			SearchEntryTextBox		${EXCELVAL}		btnSearch
	
	# # adding wait time for refreshing the page		
	# sleep		10s
	
	# # Get values from excel file for comparision
	# Get Expected Values From Excel For Validation		${EXCELFILE}		${ROW_NUM}
	
	# # Validation On My Leads Page		Time-being
	# Validation On My Leads Page		${EXCELFILE}			${ROW_NUM}			${EXP_LEADTYPE}		${PASSORFAIL}		${STATUS}		${BUBBLEVALIDATION}
# #-------------------------------------------------------------------------------------------------------------------------	

# Validation On My Leads Page			[Arguments]			${EXCELFILE}		${ROW}			${EXP_LEADTYPE}			${PASSORFAIL}		${STATUS}		${BUBBLEVALIDATION}
	# [Documentation]			This keyword performs validations on My Leads Page. Validates all columns on the page.
	# ...						Keyword Return True, otherwise False.
	# ...						Pre-requisite : N/A
	# ...						Note: 		  : N/A
	# ...						Return Type   : boolean
	# ...				  		Author        : Manisha Gadekar (Manisha.Gadekar@dealertrack.com)
	# ...						Creation Date : 7th Aug 2013
	# ...						Update Date\By: N/A
	
	# Log		 *****Validation On My Leads Page***** 
	
	# Log 	***** Applicant Name Validation *****	
	# Log 	Applicant Name Validation 		WARN
	# ${STR1}=			Catenate		SEPARATOR=			${SPACE}				${FIRSTNAME}
	# ${EXP_APPLICANT}=		Catenate		SEPARATOR=,  		${LASTNAME}				${STR1}
	
	# # get value from table
	# ${ACT_APPLICANT}=		Get Data From Table Cell 		DGLeadsReport		2		3
	
	# Run Keyword If 		'${ACT_APPLICANT}'=='None'		Fail			Unable to get value in Applicant column on My Leads Page. The record you are searching for is not found on My Leads page. 
	# ${ACT_NAME}=		Evaluate		str('${ACT_APPLICANT}').strip()
	# # Compare values. Expected value first and then actual value
	# Should Be Equal As Strings			${EXP_APPLICANT}		${ACT_NAME}		Comparision of Applicant Name failed on My Leads Page. Expected value: ${EXP_APPLICANT}. Actual Value: ${ACT_NAME}. Please make sure that FD - Web Service is working fine as the expected record is not shown on My Leads page.		values=False

	# Log 	***** Vehicle Validation *****
	# Log 	Vehicle Validation 		WARN
	# ${V_YEAR}= 		Get Excel Cell Value		${EXCELFILE}			${ROW}		Year
	# ${V_MAKE}=		Get Excel Cell Value		${EXCELFILE}			${ROW}		Make
	# ${V_MODEL}=		Get Excel Cell Value		${EXCELFILE}			${ROW}		Model
	
	# ${EXP_VEHICLE}=			Catenate			${V_YEAR}	${V_MAKE}	${V_MODEL}
	
	# ${EXP_VEHICLE}=		Evaluate			str('${EXP_VEHICLE}').upper()
	
	# ${ACT_VEHICLE}=		Get Data From Table Cell 		DGLeadsReport		2		4
	
	# Should Be Equal As Strings			${EXP_VEHICLE}		${ACT_VEHICLE}		Comparision of Vehicle failed on My Leads Page. Expected value: ${EXP_VEHICLE}. Actual Value: ${ACT_VEHICLE}. Please make sure that FD - Web Service is working fine as the expected record is not shown on My Leads page.		values=False

	# Log 	***** Source Validation *****
	# Log 	Source Validation 		WARN
	# ${ACT_SOURCE}=		Get Data From Table Cell 		DGLeadsReport		2		5
	# ${ACT_SOURCE}=		Evaluate		str('${ACT_SOURCE}').strip()
	
	# ${EXP_SRC}= 		Get Excel Cell Value		${EXCELFILE}			${ROW}			PartnerId
	
	# ${EXP_SRC}=			Run Keyword If		'${EXP_SRC}'=='AJK'		Set Variable	Auto Jockey 			ELSE		Set Variable		${EXP_SRC}
	# ${EXP_SRC}=			Run Keyword If		'${EXP_SRC}'=='GMC'		Set Variable	Gmac Smart Auction 		ELSE		Set Variable		${EXP_SRC}
	# ${EXP_SRC}=		Evaluate		str('${EXP_SRC}').strip()
	
	# Should Be Equal As Strings			${EXP_SRC}		${ACT_SOURCE}		Comparision of Source failed on My Leads Page. Expected value: ${EXP_SRC}. Actual Value: ${ACT_SOURCE}. Please make sure that FD - Web Service is working fine as the expected record is not shown on My Leads page.		values=False
	
	# Log 	***** Lead Type Validation *****
	# Log 	Lead Type Validation 		WARN
	# ${ACT_LEADTYPE}=		Get Data From Table Cell 		DGLeadsReport			2		6
	# ${ACT_LEADTYPE}=		Evaluate		str('${ACT_LEADTYPE}').strip()
	# Should Be Equal As Strings			${EXP_LEADTYPE}		${ACT_LEADTYPE}		Comparision of Lead Type failed on My Leads Page. Expected value: ${EXP_LEADTYPE}. Actual Value: ${ACT_LEADTYPE}. Please make sure that FD - Web Service is working fine as the expected record is not shown on My Leads page.		values=False
	
	# # ---------- Lead type bubble validation
	# Log		***** Validation of Prequal Bubble *****
	# Run Keyword If		'${BUBBLEVALIDATION}'=='BubbleValidation'		My Leads Page - Prequal Pass Or Fail Validation		 ${PASSORFAIL}		ELSE		Log 		No Pre-qualified bubble validation is done
	
	# # ELSE - it will continue below
	# Log 	***** Created (Date) Validation *****
	# Log 	Date Validation 		WARN
	# ${MM}		${DD}=		Get Time			month,day
	# ${EXP_DATE}=				Catenate		SEPARATOR=/			${MM}		${DD}
	
	# ${ACT_CREATED}=		Get Data From Table Cell 		DGLeadsReport		2		7
	
	# @{ACT_CRT_LIST}=		Split String		${ACT_CREATED}
	
	# ${ACT_DATE}=			Get From List		${ACT_CRT_LIST}			0
	
	# Should Be Equal			${EXP_DATE}			${ACT_DATE}			Comparison of dates failed on My Leads Page. Expected value: ${EXP_DATE}. Actual Value: ${ACT_DATE}. Please make sure that FD - Web Service is working fine as the expected record is not shown on My Leads page.		values=False
	
	# Log 	***** Assigned to Validation *****
	# Log 	Assigned To Validation 		WARN
	# ${ACT_ASSIGNTO}=		Get Data From Table Cell 		DGLeadsReport		2		8
	# # Compare values
	# Should Be Equal As Strings			Unassigned 		${ACT_ASSIGNTO}		Comparision of Assigned To failed on My Leads Page. Expected value: Unassigned. Actual Value: ${ACT_ASSIGNTO}. Please make sure that FD - Web Service is working fine as the expected record is not shown on My Leads page.		values=False	

	# Log 	***** Status Validation *****
	# Log 	Status Validation 		WARN
	# ${ACT_STATUS_SH}=		Get Data From Table Cell 		DGLeadsReport		2		9
	# ${ACT_STATUS}=		Evaluate		str('${ACT_STATUS_SH}').strip()
	
	# # Compare values
	# Should Be Equal As Strings			${STATUS} 		${ACT_STATUS}		Comparision of Status failed on My Leads Page. Expected value: ${STATUS}. Actual Value: ${ACT_STATUS}. Please make sure that FD - Web Service is working fine as the expected record is not shown on My Leads page.		values=False		
	# sleep	2s
# # #-------------------------------------------------------------------------------------------------------------------------	
	
Navigate To Lead Detail Page
	[Documentation]		This keyword navigates to Lead Details Page
	...						Keyword Return True, otherwise False.
	...						Pre-requisite : N/A
	...						Note: 		  : N/A
	...						Return Type   : boolean
	...				  		Author        : Manisha Gadekar (Manisha.Gadekar@dealertrack.com)
	...						Creation Date : 8th Aug 2013
	...						Update Date\By: N/A

	Log		***** Navigate To Lead Detail Page *****
	Wait Until Page Contains Element            //iframe[@id='iFrm']
	Select Frame                                iFrm
	Wait Until Page Contains Element            //frame[@name='main']
	Select Frame                                main
	sleep 	5s
	Wait Until Keyword Succeeds               120s                   3s                   Page Should Contain Element           //a[@id='DGLeadsReport_ctl02_link']			 			loglevel=NONE		
	Press Key			//a[@id='DGLeadsReport_ctl02_link']			\\13
	
	Wait Until Keyword Succeeds               120s                   3s                   Page Should Contain Element             //*[text()='Lead Detail'] 			loglevel=NONE
	Unselect Frame
# #-------------------------------------------------------------------------------------------------------------------------	

# Decision The Application		
	# [Arguments]			${EXCELFILE}			${ROW_NUM}			${DECISION}
	# [Documentation]			This keyword is used to navigate to DealQueue and then perform required decision on Application.
	# ...						Keyword Return True, otherwise False.
	# ...						Pre-requisite : N/A
	# ...						Note: 		  : N/A
	# ...						Return Type   : Boolean
	# ...				  		Author        : Manisha Gadekar (Manisha.Gadekar@dealertrack.com)
	# ...						Creation Date : 23th Aug 2013
	# ...						Update Date\By: N/A
	
	# # Switch dealership for decisioning
	# ${PD_DEALER_NUM}=		Set Variable			${DECISIONDEALER}		
	
	# # call keyword to switch dealerswitch
	# DealerSwitch
	
	# # Go to DealQueue
	# Navigate To DealQueue
	
	# # Get values from excel file for comparision
	# Get Expected Values From Excel For Validation		${EXCELFILE}			${ROW_NUM}

	# sleep	2s
	# # Search the record on UI
	# Search On Page		cmbSearch		Applicant Last Name			txtSearchValue			${LASTNAME}			btnSearch
	
	# sleep	5s
	# # Call a keyword to check if correct record is found
	# Validate Record For Decision		${EXCELFILE}			${ROW_NUM}
	
	# # Select the record
	# Wait Until Page Contains Element            //iframe[@id='iFrm']
	# Select Frame                                iFrm
	# Wait Until Page Contains Element            //frame[@name='main']
	# Select Frame                                main
	# sleep 	5s
	
	# #Click Link			//a[@id='DataGridArchive__ctl3_Hyperlink1']
	# Run Keyword If 		'${ROW_FOUND}'=='2'		Press Key			//a[@id='dgDealQueue_ctl03_Hyperlink2']			\\13
	# ...	ELSE IF			'${ROW_FOUND}'=='3'		Press Key			//a[@id='dgDealQueue_ctl04_Hyperlink2']			\\13
	# ...	ELSE IF			'${ROW_FOUND}'=='4'		Press Key			//a[@id='dgDealQueue_ctl05_Hyperlink2']			\\13
	# ...	ELSE IF			'${ROW_FOUND}'=='5'		Press Key			//a[@id='dgDealQueue_ctl06_Hyperlink2']			\\13
	# ...	ELSE IF			'${ROW_FOUND}'=='6'		Press Key			//a[@id='dgDealQueue_ctl07_Hyperlink2']			\\13
	# ...	ELSE IF			'${ROW_FOUND}'=='7'		Press Key			//a[@id='dgDealQueue_ctl08_Hyperlink2']			\\13
	# ...	ELSE IF			'${ROW_FOUND}'=='8'		Press Key			//a[@id='dgDealQueue_ctl09_Hyperlink2']			\\13
	# ...	ELSE IF			'${ROW_FOUND}'=='9'		Press Key			//a[@id='dgDealQueue_ctl10_Hyperlink2']			\\13
	# ...	ELSE IF			'${ROW_FOUND}'=='10'		Press Key			//a[@id='dgDealQueue_ctl11_Hyperlink2']			\\13
	# ...	ELSE IF			'${ROW_FOUND}'=='11'		Press Key			//a[@id='dgDealQueue_ctl12_Hyperlink2']			\\13
	# ...	ELSE IF			'${ROW_FOUND}'=='12'		Press Key			//a[@id='dgDealQueue_ctl13_Hyperlink2']			\\13
	# ...	ELSE IF			'${ROW_FOUND}'=='13'		Press Key			//a[@id='dgDealQueue_ctl14_Hyperlink2']			\\13
	# ...	ELSE IF			'${ROW_FOUND}'=='14'		Press Key			//a[@id='dgDealQueue_ctl15_Hyperlink2']			\\13
	# ...	ELSE IF			'${ROW_FOUND}'=='15'		Press Key			//a[@id='dgDealQueue_ctl16_Hyperlink2']			\\13
	# ...	ELSE			Fail					Unable to find record on Deal Queue page.
	
	# sleep	5s
	# Unselect Frame
	# sleep 	10s
	
	# Run Keyword If		'${DECISION}'=='Approve'			Approve Application			Approve
	# Run Keyword If		'${DECISION}'=='CounterOffer'		Approve Application			CounterOffer
	# Run Keyword If		'${DECISION}'=='Decline'			Decline Application			
	
	# sleep	2s
# #-------------------------------------------------------------------------------------------------------------------------		
Approve Application
	[Arguments]				${DECISION}  
	[Documentation]			This keyword is used to select radio button, enter required values and then submit the decision (Approve or Counteroffer)
	...						Keyword Return True, otherwise False.
	...						Pre-requisite : N/A
	...						Note: 		  : N/A
	...						Return Type   : Boolean
	...				  		Author        : Manisha Gadekar (Manisha.Gadekar@dealertrack.com)
	...						Creation Date : 23th Aug 2013
	...						Update Date\By: N/A
	
	Log 	${DECISION}
	# sleep	3s
	#Unselect Frame
	#Sleep  3s
	Wait Until Page Contains Element            //iframe[@id='iFrm']
	Select Frame                                iFrm
	Wait Until Page Contains Element            //frame[@name='main']
	Select Frame                                main
	# sleep 	5s
	
	Wait Until Keyword Succeeds               120s      3s        Page Should Contain Element           //input[@id='AppDecisionEdit_radioApproved']			 			loglevel=NONE		
	# click on Approve radio
	Mouse Down		//input[@id='AppDecisionEdit_radioApproved']
	sleep 	1s
	Mouse Up		//input[@id='AppDecisionEdit_radioApproved']
	
	sleep	2s
	${APPROVE_TERM}=		Get Value		//input[@id='AppDecisionEdit_txtTerm']
	
	Set Test Variable		${APPROVE_TERM}
	sleep	1s
	
	# click on Counter radio
	Run Keyword If		'${DECISION}'=='CounterOffer'		Mouse Down		//input[@id='AppDecisionEdit_radioCounter']
	Run Keyword If		'${DECISION}'=='CounterOffer'		Mouse Up		//input[@id='AppDecisionEdit_radioCounter']
	sleep	2s
	Run Keyword If		'${DECISION}'=='CounterOffer'		Input Text			//input[@id='AppDecisionEdit_txtAmount']		20000

	sleep	1s
	Run Keyword If		'${DECISION}'=='CounterOffer'		Input Text			//input[@id='AppDecisionEdit_txtTerm']		36

	# sleep	2s
	# Input Text			//input[@id='AppDecisionEdit_txtMoneyFactor']		10
	# sleep 	1s
	sleep 	1s
	${stat}=			Run Keyword And Return Status 		Page Should Contain Element 	//input[@id='AppDecisionEdit_txtBuyRate']
	Run Keyword If 		'${stat}'=='True'					Input Text			//input[@id='AppDecisionEdit_txtBuyRate']		11
	Run Keyword If 		'${stat}'=='True'					sleep 		1s
	
	${stat}=			Run Keyword And Return Status 		Page Should Contain Element		//input[@id='AppDecisionEdit_txtBuyRate']	
	Run Keyword If 		'${stat}'=='True'					Input Text			//input[@id='AppDecisionEdit_txtBuyRate']		1
	
	Run Keyword If 		'${stat}'=='True'					Sleep 		1s
	
	${stat}=			Run Keyword And Return Status 		Page Should Contain Element		//input[@id='AppDecisionEdit_txtTier']	
	Run Keyword If 		'${stat}'=='True'					Input Text			//input[@id='AppDecisionEdit_txtTier']			2

	Run Keyword If 		'${stat}'=='True'					sleep 		1s
	
	${stat}=			Run Keyword And Return Status 		Page Should Contain Element		//input[@id='AppDecisionEdit_txtMonthlyPymt']	
	Run Keyword If 		'${stat}'=='True'					Input Text			//input[@id='AppDecisionEdit_txtMonthlyPymt']		100

	Run Keyword If 		'${stat}'=='True'					sleep 		1s
	
	Press Key		//input[@id='btn_SubmitDec']		\\13
	
	sleep		3s
	
	Run Keyword If			'${DECISION}'=='Approve'			Press Key		//input[@id='btnAppSubmit']			\\13
	Run Keyword If			'${DECISION}'=='CounterOffer'		Press Key		//input[@id='btnSubmit']			\\13
	
	sleep	5s
	Unselect Frame
# #-------------------------------------------------------------------------------------------------------------------------		
# Validate Record For Decision		
	# [Arguments]			${EXCELFILE}			${ROW_NUM}			
	# [Documentation]			This keyword is used to check that the correct record is found for decision.
	# ...						Keyword Return True, otherwise False.
	# ...						Pre-requisite : N/A
	# ...						Note: 		  : N/A
	# ...						Return Type   : Boolean
	# ...				  		Author        : Manisha Gadekar (Manisha.Gadekar@dealertrack.com)
	# ...						Creation Date : 23th Aug 2013
	# ...						Update Date\By: N/A
	
	# Log			Searching record for Decision		WARN
	
	# :FOR		${ROW}												IN RANGE								2									15
	# \			Log													${ROW}									# Log current row number
	# \       	${ACT_DEALER_SH}=		Get Data From Table Cell 		dgDealQueue		${ROW}		7
	# \			Run Keyword If 		'${ACT_DEALER_SH}'=='None'			Fail			Unable to get value in Dealer ID column on Deal Queue Page. 
	# \			${ACT_DEALER}=		Evaluate		str('${ACT_DEALER_SH}').strip()
	# \			${STAT}=		Run Keyword And Return Status		Should Be Equal As Strings			${ORG_DEALERSHIP}			${ACT_DEALER}
	# \			${ROW_FOUND}=		Run Keyword If		${STAT}		Set Variable	${ROW}
	# \			Run Keyword If		${STAT}		Exit For Loop
	
	# Set Test Variable		${ROW_FOUND}
	# ${ROW}=			Run Keyword If		'${ROW_FOUND}'!='None'			Evaluate		${ROW_FOUND}-${1}			ELSE		Fail	Required record is not found on Deal Queue page.
	# Log			Got Record at row: ${ROW}		WARN

	# # Check date
	# Log		***** Date Validation *****
	# Log			Validating Date		WARN
	# ${EXPDATE}=		Get Current Date
	# Set Test Variable	${EXPDATE}
	
	# ${ACTDATESHOWN}=		Get Data From Table Cell 		dgDealQueue		${ROW_FOUND}		1
	# @{ACTDATE}=			Split String		${ACTDATESHOWN}
	# ${DATE_SHOWN}=		Get From List		${ACTDATE}		0

	# # Compare values
	# Should Be Equal As Strings			${EXPDATE}		${DATE_SHOWN}		Comparision of Dates failed. Expected value: ${EXPDATE}. Actual Value: ${DATE_SHOWN}. The record you are searching is not found on Deal Queue page.		values=False
	
	# # check Applicant Name shown
	# Log		***** Applicant Name Validation *****
	# Log			Validating Applicant Name		WARN
	# ${EXP_APPLICANT}=		Catenate		SEPARATOR=,  		${LASTNAME}				${FIRSTNAME}
	# ${EXP_APPLICANT}=		Run Keyword If		'${MIDDLENAME}'!='${EMPTY}'		Catenate		${EXP_APPLICANT}		${MIDDLENAME}		ELSE		Set Variable	${EXP_APPLICANT}
	
	# # get value from table
	# ${ACT_APPLICANT}=		Get Data From Table Cell 		dgDealQueue		${ROW_FOUND}		4
	
	# Run Keyword If 		'${ACT_APPLICANT}'=='None'		Fail			Unable to get value in Applicant column on Deal Queue Page. 
	# ${ACT_NAME}=		Evaluate		str('${ACT_APPLICANT}').strip()
	# # Compare values. Expected value first and then actual value
	# Should Be Equal As Strings			${EXP_APPLICANT}		${ACT_NAME}		Comparision of Applicant Name failed. Expected value: ${EXP_APPLICANT}. Actual Value: ${ACT_NAME}. The record you are searching is not found on Deal Queue page.		values=False
	
	# # check status
	# Log		***** Status Validation *****
	# Log			Validating Status		WARN
	# ${ACT_STAT}=		Get Data From Table Cell 		dgDealQueue		${ROW_FOUND}		5
	# Run Keyword If 		'${ACT_STAT}'=='None'		Fail			Unable to get value in Status column on Deal Queue Page. 
	# ${ACT_STATUS}=		Evaluate		str('${ACT_STAT}').strip()
	# # Compare values. Expected value first and then actual value
	# Should Be Equal As Strings			New		${ACT_STATUS}		Comparision of Status failed. Expected value: New. Actual Value: ${ACT_STATUS}. The record you are searching is not found on Deal Queue page.		values=False	
# #-------------------------------------------------------------------------------------------------------------------------	

Decline Application   [Arguments]   
	[Documentation]			This keyword is used to select 'Decline' radio button, enter required values and then submit the decision (Decline)
	...						Keyword Return True, otherwise False.
	...						Pre-requisite : N/A
	...						Note: 		  : N/A
	...						Return Type   : Boolean
	...				  		Author        : Manisha Gadekar (Manisha.Gadekar@dealertrack.com)
	...						Creation Date : 29th Aug 2013
	...						Update Date\By: N/A
	
	
	sleep	3s
	Wait Until Page Contains Element            //iframe[@id='iFrm']
	Select Frame                                iFrm
	Wait Until Page Contains Element            //frame[@name='main']
	Select Frame                                main
	sleep 	5s
	
	# click on Approve radio
	Wait Until Keyword Succeeds               120s                   3s                   Page Should Contain Element           //input[@id='AppDecisionEdit_radioDecline']			 			loglevel=NONE		
	Mouse Down		//input[@id='AppDecisionEdit_radioDecline']
	Mouse Up		//input[@id='AppDecisionEdit_radioDecline']
	
	# select reason to decline
	sleep	1s
	Select From List		//select[@id='reason_list']			Insufficient number of credit references provided
	sleep	1s
	# Click on Enter button
	Press Key		//input[@value='Enter']		\\13
	
	# Submit button
	sleep	3s
	Press Key		//input[@id='btn_SubmitDec']		\\13
	
	# Next submit button
	sleep		5s
	Press Key		//input[@id='btnDecSubmit']			\\13

	sleep	5s
	Unselect Frame
# #-------------------------------------------------------------------------------------------------------------------------		

#################################### Phase III Keywords ####################################	
	
Navigate To Prequal TRU
	[Documentation]			This keyword checks asynchronous response using Prequal Test Response Utility
	...						Pre-requisite : N/A
	...						Note: 		  : N/A
	...						Arguments: 	  : N/A
	...				  		Author        : Manisha Gadekar (manisha.gadekar@dealertrack.com)
	...						Creation Date : 05 Dec 2013
	...						Update Date\By: N/A
	
	# Navigate to site Admin
	Navigate to Site Admin
	
	# click Site support utility
	Press Key		//a[@href='../utilities/index.aspx']		\\13
	Wait Until Keyword Succeeds               120s                   3s                   Page Should Contain Element             //*[text()='Technical Support'] 			loglevel=NONE

	# click on Prequal response files
	Press Key		//a[@href='/Utilities/FinanceDriver/PrequalResponses.aspx']		\\13
	
# #-------------------------------------------------------------------------------------------------------------------------			
Navigate Again To Customer Archive Page
	[Documentation]			This keyword navigates to Customer Archive Page again if the required record is not found. This is done to refresh the page.
	...						Pre-requisite : N/A
	...						Note: 		  : N/A
	...						Arguments: 	  : N/A
	...				  		Author        : Manisha Gadekar (manisha.gadekar@dealertrack.com)
	...						Creation Date : 03 Dec 2013
	...						Update Date\By: N/A
	
	Unselect Frame
	
	Wait Until Page Contains Element            //iframe[@id='iFrm']		error=Navigate to Customer Archive page is not successful. Page is not loaded correctly. Please check.
	Select Frame                                iFrm
	Wait Until Page Contains Element            //frame[@name='nav']
	Select Frame                                nav
	# sleep 	3s
	Execute Javascript                          window.document.getElementById('tabAppA').onclick()
	# sleep										5s
	Wait Until Keyword Succeeds               120s		3s			Page Should Contain Element             //a[@id='CreditArchive'] 	CreditArchive link not found.		loglevel=NONE
	Press Key								//a[@id='CreditArchive']				\\13
	
	# wait until page is loaded
	# Wait Until Keyword Succeeds               120s                   3s                   Page Should Contain Element             //*[text()='Customer Archive'] 		Text Customer Archive is not shown on page.		loglevel=NONE
	# sleep	1s
	Unselect Frame
	
	# Veryfing the text on page
	Wait Until Page Contains Element            //iframe[@id='iFrm']
	Select Frame                                iFrm
	Wait Until Page Contains Element            //frame[@name='main']
	Select Frame                                main
	
	# wait until page is loaded
	# Wait Until Keyword Succeeds               120s                   3s                   Page Should Contain Element             //*[text()='Customer Archive'] 		Text Customer Archive is not shown on page.		loglevel=NONE
	Wait Until Keyword Succeeds               120s                   3s                   Page Should Contain Element             //table[@id='DataGridArchive'] 			loglevel=NONE	
	# sleep	3s
	# Unselect Frame
# #-------------------------------------------------------------------------------------------------------------------------		
	
Navigate Again To My Leads Page
	[Documentation]			This keyword navigates to My Leads page again if the required record is not found. This is done to refresh the page.
	...						Pre-requisite : N/A
	...						Note: 		  : N/A
	...						Arguments: 	  : N/A
	...				  		Author        : Manisha Gadekar (manisha.gadekar@dealertrack.com)
	...						Creation Date : 04 Dec 2013
	...						Update Date\By: Manisha Gadekar - 20 Dec 2013
	
	Unselect Frame
	# Click on Leads tab
	Wait Until Page Contains Element            //iframe[@id='iFrm']	error=Navigate to My Leads page is not successful. Page is not loaded correctly. Please check.
	Select Frame                                iFrm
	Wait Until Page Contains Element            //frame[@name='nav']
	Select Frame                                nav
	
	Execute Javascript                          window.document.getElementById('tabLeads_SNA').onclick()
	
	# Wait Until Keyword Succeeds               120s                   3s                   Page Should Contain Element             //a[@id='LeadsMngr'] 			loglevel=NONE
	# Press Key									//a[@id='LeadsMngr']				\\13
	
	Wait Until Keyword Succeeds               120s                   3s                   Page Should Contain Element             //a[@id='LeadsMngr2'] 			loglevel=NONE
	Press Key									//a[@id='LeadsMngr2']				\\13
	
	
	Unselect Frame
	
	# Veryfing the text on page
	Wait Until Page Contains Element            //iframe[@id='iFrm']
	Select Frame                                iFrm
	Wait Until Page Contains Element            //frame[@name='main']
	Select Frame                                main
	
	# Wait Until Keyword Succeeds               120s                   3s                   Page Should Contain Element             //*[text()='My Leads ']  		Text My Leads is not shown on page.		loglevel=NONE
	Wait Until Keyword Succeeds               120s                   3s                   Page Should Contain Element             //table[@id='DGLeadsReport'] 		My Leads Page is not loaded.	loglevel=NONE
	
	
Check Record On My Leads Page		[Arguments]		${ROW}	
	[Documentation]			This keyword reads the date and compares it with expected name. The result of the match is send to parent keyword.
	...						Pre-requisite : N/A
	...						Note: 		  : N/A
	...						Arguments: 	  : N/A
	...				  		Author        : Manisha Gadekar (manisha.gadekar@dealertrack.com)
	...						Creation Date : 20 Dec 2013
	...						Update Date\By: N/A
	
	Log 	***** Created (Date) Validation *****
	${MM}		${DD}=		Get Time			month,day
	${EXP_DATE}=				Catenate		SEPARATOR=/			${MM}		${DD}
	
	Wait Until Keyword Succeeds     120s     3s      Page Should Contain Element             //table[@id='DGLeadsReport']/tbody/tr[${ROW}]/td[7]  		Date is not shown on page.		loglevel=NONE

	# read actual date
	Wait Until Page Contains Element		//table[@id='DGLeadsReport']/tbody/tr[${ROW}]/td[7]		10s
	# # # # Wait Until Element Is Visible			//table[@id='DGLeadsReport']/tbody/tr[${ROW}]/td[7]		10s
	${ACT_CREATED}=			Get Text		//table[@id='DGLeadsReport']/tbody/tr[${ROW}]/td[7]
	@{ACT_CRT_LIST}=		Split String		${ACT_CREATED}
	${ACT_DATE}=			Get From List		${ACT_CRT_LIST}			0
	# compare values and send result
	${FOUND1}=	Run Keyword And Return Status		Should Be Equal			${EXP_DATE}			${ACT_DATE}			Comparison of dates failed on My Leads Page. Expected value: ${EXP_DATE}. Actual Value: ${ACT_DATE}. Please make sure that FD - Web Service is working fine as the expected record is not shown on My Leads page.		values=False

	[Return]		${FOUND1}
# #-------------------------------------------------------------------------------------------------------------------------		

Decision The Request
	[Arguments]				${DECISION}	
	[Documentation]			This keyword is used to navigate to DealQueue and then perform required decision on Application.
	...						Keyword Return True, otherwise False.
	...						Pre-requisite : N/A
	...						Note: 		  : N/A
	...						Return Type   : Boolean
	...				  		Author        : Manisha Gadekar (Manisha.Gadekar@dealertrack.com)
	...						Creation Date : 17th Dec 2013
	...						Update Date\By: N/A
	
	${ROW_FOUND}=		Set Variable	2
	# Select the record
	Wait Until Page Contains Element            //iframe[@id='iFrm']
	Select Frame                                iFrm
	Wait Until Page Contains Element            //frame[@name='main']
	Select Frame                                main
	sleep 	5s
	
	#Click Link			//a[@id='DataGridArchive__ctl3_Hyperlink1']
	Run Keyword If 		'${ROW_FOUND}'=='2'		Press Key			//a[@id='dgDealQueue_ctl03_Hyperlink2']			\\13
	...	ELSE			Fail					Unable to find record on Deal Queue page.
	
	sleep	5s
	Unselect Frame
	sleep 	10s
	
	Run Keyword If		'${DECISION}'=='Approve'			Approve Request			Approve
	Run Keyword If		'${DECISION}'=='CounterOffer'		Approve Request			CounterOffer
	Run Keyword If		'${DECISION}'=='Decline'			Decline Request			
	
	sleep	2s
# #-------------------------------------------------------------------------------------------------------------------------		

Navigate To DealQueue Bulk
	[Documentation]			This keyword is used to navigate to DealQueue 
	...						Keyword Return True, otherwise False.
	...						Pre-requisite : N/A
	...						Note: 		  : N/A
	...						Return Type   : Boolean
	...				  		Author        : Manisha Gadekar (Manisha.Gadekar@dealertrack.com)
	...						Creation Date : 23th Aug 2013
	...						Update Date\By: N/A
	
	Log		Navigate To Deal Queue Page		WARN
	Wait Until Page Contains Element            //iframe[@id='iFrm']
	Select Frame                                iFrm
	Wait Until Page Contains Element            //frame[@name='nav']
	Select Frame                                nav
	# sleep 	5s
	#Click Element								${APPSNCONTRACT_TAB}	
	Execute Javascript                          window.document.getElementById('tabAppA').onclick()
	# sleep										5s
	Wait Until Keyword Succeeds               120s                   3s                   Page Should Contain Element           //a[@id='DecTrk']			 			loglevel=NONE		
	Press Key									//a[@id='DecTrk']				\\13
	
	# sleep	2s
	Unselect Frame
	
Decision Bulk Requests	
	[Arguments]				${ROW}
	Wait Until Page Contains Element            //iframe[@id='iFrm']
	Select Frame                                iFrm
	Wait Until Page Contains Element            //frame[@name='main']
	Select Frame                                main
	sleep 	2s
	
	Wait Until Keyword Succeeds               120s                   3s                   Page Should Contain Element             //*[text()='Deal Queue '] 			loglevel=NONE
	
	# Select All in dropdown and click on Submit
	Select From List		//select[@id='cmbBranch']			All
	sleep	2s
	
	# Click on submit button
	Press Key		//input[@id='btnSubmit']			\\13
	
	Wait Until Keyword Succeeds               120s     3s       Page Should Contain Element             //table[@id='dgDealQueue'] 			loglevel=NONE
	
	Log		${ROW}
	${XY}=		Evaluate		int(${ROW})+1
	Press Key			//a[@id='dgDealQueue_ctl0${XY}_Hyperlink2']			\\13
	
	sleep	2s
	
	Run Keyword If		'${EXP_DECISION}'=='Approve'			Approve Request			Approve
	Run Keyword If		'${EXP_DECISION}'=='CounterOffer'		Approve Request			CounterOffer
	Run Keyword If		'${EXP_DECISION}'=='Decline'			Decline Request			
	
	Unselect Frame
	
Approve Request
	[Arguments]				${DECISION}
	[Documentation]			This keyword is used to select radio button, enter required values and then submit the decision (Approve or Counteroffer)
	...						Keyword Return True, otherwise False.
	...						Pre-requisite : N/A
	...						Note: 		  : N/A
	...						Return Type   : Boolean
	...				  		Author        : Manisha Gadekar (Manisha.Gadekar@dealertrack.com)
	...						Creation Date : 17th Dec 2013
	...						Update Date\By: N/A
	
	Wait Until Keyword Succeeds        120s        3s          Page Should Contain Element           //input[@id='AppDecisionEdit_radioApproved']			loglevel=NONE		
	sleep	2s
	# click on Approve radio
	Run Keyword If		'${DECISION}'=='Approve'		Mouse Down		//input[@id='AppDecisionEdit_radioApproved']
	Run Keyword If		'${DECISION}'=='Approve'		Mouse Up		//input[@id='AppDecisionEdit_radioApproved']
	
	sleep	1s
	Wait Until Keyword Succeeds        120s        3s          Page Should Contain Element           //input[@id='AppDecisionEdit_txtAmount']			loglevel=NONE
	${APPROVE_AMOUNT}=		Run Keyword If		'${DECISION}'=='Approve'		Get Value		//input[@id='AppDecisionEdit_txtAmount']
	...						ELSE		Set Variable		${COUNTER_AMT}
	
	Set Test Variable		${APPROVE_AMOUNT}
	
	sleep	1s
	Wait Until Keyword Succeeds        120s        3s          Page Should Contain Element           //input[@id='AppDecisionEdit_txtTerm']			loglevel=NONE
	${APPROVE_TERM}=		Run Keyword If		'${DECISION}'=='Approve'		Get Value		//input[@id='AppDecisionEdit_txtTerm']
	...						ELSE		Set Variable		${COUNTER_TERM}	
	Set Test Variable		${APPROVE_TERM}
	
	sleep	1s
	
	# click on Counter radio
	Wait Until Keyword Succeeds        120s        3s          Page Should Contain Element           //input[@id='AppDecisionEdit_radioCounter']		loglevel=NONE
	Run Keyword If		'${DECISION}'=='CounterOffer'		Mouse Down		//input[@id='AppDecisionEdit_radioCounter']
	Run Keyword If		'${DECISION}'=='CounterOffer'		Mouse Up		//input[@id='AppDecisionEdit_radioCounter']
	sleep	2s
	Run Keyword If		'${DECISION}'=='CounterOffer'		Input Text			//input[@id='AppDecisionEdit_txtAmount']		${COUNTER_AMT}
	sleep	1s
	Run Keyword If		'${DECISION}'=='CounterOffer'		Input Text			//input[@id='AppDecisionEdit_txtTerm']			${COUNTER_TERM}	
	
	${BUY_RATE}=		Run Keyword If		'${FINANCEMETHOD}'!='Lease'	 	Evaluate		1		ELSE	Set Variable	${EMPTY}
	Set Test Variable	${BUY_RATE}
	
	sleep	2s
	Run Keyword If		'${FINANCEMETHOD}'!='Lease'	 Input Text			//input[@id='AppDecisionEdit_txtBuyRate']		${BUY_RATE}
	sleep	1s
	Input Text			//input[@id='AppDecisionEdit_txtTier']			2
	sleep	1s
	Press Key		//input[@id='btn_SubmitDec']		\\13
	
	sleep		3s
	
	Run Keyword If			'${DECISION}'=='Approve'			Press Key		//input[@id='btnAppSubmit']			\\13
	Run Keyword If			'${DECISION}'=='CounterOffer'		Press Key		//input[@id='btnSubmit']			\\13
	
	sleep	3s
	
# #-------------------------------------------------------------------------------------------------------------------------		
	
Check Record For Decision		
	[Documentation]			This keyword is used to check that the correct record is found for decision.
	...						Keyword Return True, otherwise False.
	...						Pre-requisite : N/A
	...						Note: 		  : N/A
	...						Return Type   : Boolean
	...				  		Author        : Manisha Gadekar (Manisha.Gadekar@dealertrack.com)
	...						Creation Date : 17th Dec 2013
	...						Update Date\By: N/A
	
	Log			Searching record for Decision		WARN
	Wait Until Page Contains Element            //iframe[@id='iFrm']
	Select Frame                                iFrm
	Wait Until Page Contains Element            //frame[@name='main']
	Select Frame                                main
	sleep	5s
	
	Wait Until Keyword Succeeds        120s        3s          Page Should Contain Element           //table[@id='dgDealQueue']/tbody/tr[${ROW}]/td[7]		loglevel=NONE
	
	:FOR		${ROW}					IN RANGE								2									15
	\			Log													${ROW}									# Log current row number
	\			Wait Until Page Contains Element		//table[@id='dgDealQueue']/tbody/tr[${ROW}]/td[7]		10s
	\			# # # # Wait Until Element Is Visible			//table[@id='dgDealQueue']/tbody/tr[${ROW}]/td[7]		10s
	\       	${ACT_DEALER_SH}=		Get Text	//table[@id='dgDealQueue']/tbody/tr[${ROW}]/td[7]
	\			Run Keyword If 		'${ACT_DEALER_SH}'=='None'			Fail			Unable to get value in Dealer ID column on Deal Queue Page. 
	\			${ACT_DEALER}=		Evaluate		str('${ACT_DEALER_SH}').strip()
	\			${STAT}=		Run Keyword And Return Status		Should Be Equal As Strings			${ORG_DEALERSHIP}			${ACT_DEALER}
	\			${FOUND}=		Run Keyword If		${STAT}		Check Record On Deal Queue		${ROW}
	\			${ROW_FOUND}=		Run Keyword If		${FOUND}		Set Variable	${ROW}
	\			Run Keyword If		${FOUND}		Exit For Loop
	
	Set Test Variable		${ROW_FOUND}
	Log			Got Record at row: ${ROW_FOUND}		WARN

	# check status
	Log		***** Status Validation *****
	Log			Validating Status		WARN
	Wait Until Keyword Succeeds        120s        3s          Page Should Contain Element           //table[@id='dgDealQueue']/tbody/tr[${ROW_FOUND}]/td[5] 	Status is not found on the page.		loglevel=NONE
	Wait Until Page Contains Element		//table[@id='dgDealQueue']/tbody/tr[${ROW_FOUND}]/td[5]		10s
	# # # # Wait Until Element Is Visible			//table[@id='dgDealQueue']/tbody/tr[${ROW_FOUND}]/td[5]		10s
	${ACT_STAT}=		Get Text	//table[@id='dgDealQueue']/tbody/tr[${ROW_FOUND}]/td[5]
	Run Keyword If 		'${ACT_STAT}'=='None'		Fail			Unable to get value in Status column on Deal Queue Page. 
	${ACT_STATUS}=		Evaluate		str('${ACT_STAT}').strip()
	
	# Compare values. Expected value first and then actual value
	Should Be Equal As Strings			New		${ACT_STATUS}		Comparision of Status failed. Expected value: New. Actual Value: ${ACT_STATUS}. The record you are searching is not found on Deal Queue page.		values=False	

	Unselect Frame
# #-------------------------------------------------------------------------------------------------------------------------	
Check Record On Deal Queue	[Arguments]		${ROW}
	[Documentation]			This keyword is used to validate the record details
	...						Keyword Return True, otherwise False.
	...						Pre-requisite : N/A
	...						Note: 		  : N/A
	...						Return Type   : Boolean
	...				  		Author        : Manisha Gadekar (Manisha.Gadekar@dealertrack.com)
	...						Creation Date : 19th Dec 2013
	...						Update Date\By: N/A
	
	##### Date comparison #####
	# date
	${EXPDATE}=		Get Current Date
	Set Test Variable	${EXPDATE}

	Wait Until Keyword Succeeds        120s        3s          Page Should Contain Element           //table[@id='dgDealQueue']/tbody/tr[${ROW}]/td[1]	 	Date is not found on the page.		loglevel=NONE
	Wait Until Page Contains Element		//table[@id='dgDealQueue']/tbody/tr[${ROW}]/td[1]		10s
	# # # # Wait Until Element Is Visible			//table[@id='dgDealQueue']/tbody/tr[${ROW}]/td[1]		10s
	${ACTDATESHOWN}=		Get Text	//table[@id='dgDealQueue']/tbody/tr[${ROW}]/td[1]
	@{ACTDATE}=			Split String		${ACTDATESHOWN}
	${DATE_SHOWN}=		Get From List		${ACTDATE}		0

	# Compare values
	${RES}=		Run Keyword And Return Status	Should Be Equal As Strings			${EXPDATE}		${DATE_SHOWN}		Comparision of Dates failed. Expected value: ${EXPDATE}. Actual Value: ${DATE_SHOWN}. The record you are searching is not found on Deal Queue page.		values=False
	${FOUND1}=		Run Keyword If		${RES}		Set Variable	True
	
	##### Applicant Name comparison #####
	# applicant name
	${EXP_APPLICANT}=		Catenate		SEPARATOR=,  		${LASTNAME}				${FIRSTNAME}
	${EXP_APPLICANT}=		Run Keyword If		'${MIDDLENAME}'!='${EMPTY}'		Catenate		${EXP_APPLICANT}		${MIDDLENAME}		ELSE		Set Variable	${EXP_APPLICANT}

	Wait Until Keyword Succeeds        120s        3s          Page Should Contain Element           //table[@id='dgDealQueue']/tbody/tr[${ROW}]/td[4]/a	 	Applicant name is not found on the page.		loglevel=NONE	
	Wait Until Page Contains Element		//table[@id='dgDealQueue']/tbody/tr[${ROW}]/td[4]/a		10s
	# # # # Wait Until Element Is Visible			//table[@id='dgDealQueue']/tbody/tr[${ROW}]/td[4]/a		10s
	${ACT_APPLICANT}=		Get Text	//table[@id='dgDealQueue']/tbody/tr[${ROW}]/td[4]/a
	${ACT_NAME}=			Run Keyword If		'${FOUND1}'=='True'		Evaluate		str('${ACT_APPLICANT}').strip()		ELSE	Set Variable	${EMPTY}
	${RES}=					Run Keyword If		'${FOUND1}'=='True'		Run Keyword And Return Status		Should Be Equal As Strings			${EXP_APPLICANT}		${ACT_NAME}		Comparision of Applicant Name failed. Expected value: ${EXP_APPLICANT}. Actual Value: ${ACT_NAME}. The record you are searching is not found on Deal Queue page.		values=False
	${FOUND1}=			Run Keyword If		${RES}		Set Variable	True
	... 	ELSE		Set Variable		False
	
	[Return]	${FOUND1}
# #-------------------------------------------------------------------------------------------------------------------------		
	
Decline Request
	[Documentation]			This keyword is used to select 'Decline' radio button, enter required values and then submit the decision (Decline)
	...						Keyword Return True, otherwise False.
	...						Pre-requisite : N/A
	...						Note: 		  : N/A
	...						Return Type   : Boolean
	...				  		Author        : Manisha Gadekar (Manisha.Gadekar@dealertrack.com)
	...						Creation Date : 17th Dec 2013
	...						Update Date\By: N/A
	
	${APPROVE_AMOUNT}=		Set Variable		${EMPTY}
	${APPROVE_TERM}=		Set Variable		${EMPTY}
	${BUY_RATE}=			Set Variable		${EMPTY}
	
	Set Test Variable		${APPROVE_AMOUNT}
	Set Test Variable		${APPROVE_TERM}
	Set Test Variable		${BUY_RATE}
	
	# click on Approve radio
	Wait Until Keyword Succeeds               120s                   3s                   Page Should Contain Element           //input[@id='AppDecisionEdit_radioDecline']			 			loglevel=NONE		
	Mouse Down		//input[@id='AppDecisionEdit_radioDecline']
	Mouse Up		//input[@id='AppDecisionEdit_radioDecline']
	
	# select reason to decline
	sleep	1s
	Select From List		//select[@id='reason_list']			Insufficient number of credit references provided
	
	sleep	1s
	# Click on Enter button
	Wait Until Keyword Succeeds        120s        3s          Page Should Contain Element           //input[@value='Enter']	 	Enter button is not found on the page.		loglevel=NONE	
	Press Key		//input[@value='Enter']		\\13
	
	# Submit button
	sleep	3s
	Press Key		//input[@id='btn_SubmitDec']		\\13
	
	# Next submit button
	sleep		5s
	Press Key		//input[@id='btnDecSubmit']			\\13
	
	# sleep	5s
	# Unselect Frame
# #-------------------------------------------------------------------------------------------------------------------------		

Navigate To Preferences		[Arguments]		${PrefsSection}
	[Documentation]		This keyword navigates to FD Preferences page
	...						Keyword Return True, otherwise False.
	...						Pre-requisite : N/A
	...						Note: 		  : N/A
	...						Return Type   : boolean
	...				  		Author        : Manisha Gadekar (Manisha.Gadekar@dealertrack.com)
	...						Creation Date : 16 Jan 2014
	...						Update Date\By: Manisha Gadekar (01 June 2015)

	#We're going to "Edit Preferences" page via direct url (old way is way too slow). I commented out all code below (TomH).

	WriteToFile			${logfile}			Y		Navigate To Preferences>>>			
	
	${PrefsURL}=		Run Keyword If	'${PrefsSection}'=='PrequalificationsAndRouting'	Set Variable		${URL_BASE}${URL_PREFS_PrequalificationsAndRouting}
	...	ELSE IF							'${PrefsSection}'=='NotificationsAndMessaging'		Set Variable		${URL_BASE}${URL_PREFS_NotificationsAndMessaging}
	...	ELSE																				Set Variable		${PrefsURL}
	WriteToFile			${logfile}			Y		PrefsURL=${PrefsURL}

	# ${PrefsURL}=		Run Keyword If	'${PrefsSection}'=='PrequalificationsAndRouting'	Set Variable		https://www.qa.dealertrack.com/FinanceDriver/DealerPartnerIntegration/PrequalificationAndRouting?IsEditMode=True
	# ...	ELSE IF							'${PrefsSection}'=='NotificationsAndMessaging'		Set Variable		https://www.qa.dealertrack.com/FinanceDriver/DealerPartnerIntegration/NotificationAndMessaging?IsEditMode=True
	# ...	ELSE																				Set Variable		${PrefsURL}

	Go To				${PrefsURL}	
	
	# # # # sleep 3s
	# # # ${FRM_FOUND}               Run Keyword and Return Status              Wait Until Page Contains Element            //iframe[@id='iFrm']         3
    # # # Run Keyword If                 ${FRM_FOUND}==False                   Unselect Frame

	# # # Wait Until Page Contains Element            //iframe[@id='iFrm']
	# # # Select Frame                                iFrm
	# # # Wait Until Page Contains Element            //frame[@name='nav']
	# # # Select Frame                                nav
	# # # #sleep 	5s
	# # # Execute Javascript                          window.document.getElementById('tabLeads_SNA').onclick()
	# # # # sleep										5s
	# # # Wait Until Keyword Succeeds               120s                   3s                   Page Should Contain Element             //a[@id='LeadsPrefCombLeads'] 			loglevel=NONE
	# # # Press Key									//a[@id='LeadsPrefCombLeads']				\\13
	# # # # sleep	3s
	# # # Unselect Frame
	
	# # # Wait Until Page Contains Element            //iframe[@id='iFrm']
	# # # Select Frame                                iFrm
	# # # Wait Until Page Contains Element            //frame[@name='main']
	# # # Select Frame                                main

	# # # # wait until page is loaded
	# # # #Wait Until Keyword Succeeds               120s        3s     Page Should Contain Element             //*[text()='Leads Preferences']  			loglevel=NONE
	# # # Wait Until Keyword Succeeds               120s        3s     Page Should Contain Element             //input[@id='LeadSetup_PartnerIntegration'] 	Preferences page is not loaded.		loglevel=NONE
	# # # #sleep	5s
	
	# # # # Select Partner Integration (FinanceDriver) radion button
	# # # Select A Radio Button		LeadSetup_PartnerIntegration
	
	# # # # sleep	3s
	# # # Wait Until Keyword Succeeds        120s        3s          Page Should Contain Element          //input[@id='SetLeadSetup']	 	Element not found on the page.		loglevel=NONE	
	# # # Press Key									//input[@id='SetLeadSetup']					\\13

	# # # # wait until page is loaded
	# # # Wait Until Keyword Succeeds       120s         3s           Page Should Contain Element         //input[@id='SetLeadSetup']    Preferences Page is not loaded.		loglevel=NONE
	# # # #//*[text()='Leads Partner Integration | Edit Setup']  			loglevel=NONE
	
	# # # # sleep	3s
	# # # Unselect Frame
	
# #-------------------------------------------------------------------------------------------------------------------------	
	
Verify On My Leads Page After Decision		[Arguments]				${ROW}
	[Documentation]			This keyword performs validation on record found on My Leads Page
	...						Pre-requisite : N/A
	...						Note: 		  : N/A
	...						Arguments: 	  : N/A
	...				  		Author        : Manisha Gadekar (manisha.gadekar@dealertrack.com)
	...						Creation Date : 04 Dec 2013
	...						Update Date\By: Manisha Gadekar - 20 Dec 2013
	sleep	1s
	
	Wait Until Page Contains Element            //iframe[@id='iFrm']	error=Navigate to My Leads page is not successful. Page is not loaded correctly. Please check.
	Select Frame                                iFrm
	Wait Until Page Contains Element            //frame[@name='main']
	Select Frame                                main
	
	Wait Until Keyword Succeeds             120s        3s         Page Should Contain Element            //table[@id='DGLeadsReport']		 			loglevel=NONE		

	Log		${ROW}
	# Log		 ***** Validation On My Leads Page ***** 		WARN
	# Log 	***** Applicant Name Validation *****	
	# Log 	Applicant Name Validation 		WARN
	${STR1}=			Catenate		SEPARATOR=			${SPACE}				${FIRSTNAME}
	${EXP_APPLICANT}=		Catenate		SEPARATOR=,  		${LASTNAME}				${STR1}
	
	# name
	Wait Until Page Contains Element		//table[@id='DGLeadsReport']/tbody/tr[${ROW}]/td[3]/a		10s
	# # # # Wait Until Element Is Visible			//table[@id='DGLeadsReport']/tbody/tr[${ROW}]/td[3]/a		10s
	${ACT_APPLICANT_SH}=		Get Text		//table[@id='DGLeadsReport']/tbody/tr[${ROW}]/td[3]/a
	Run Keyword If 		'${ACT_APPLICANT_SH}'=='None'			Fail			Unable to get value in Applicant Name column on My Leads Page. 
	${ACT_APPLICANT}=		Evaluate		str('${ACT_APPLICANT_SH}').strip()
	Should Be Equal As Strings			${EXP_APPLICANT}			${ACT_APPLICANT_SH}		Comparison of Applicant name failed on My Leads Page. Expected value: ${EXP_APPLICANT}. Actual Value: ${ACT_APPLICANT_SH}. Please make sure that FD - Web Service is working fine as the expected record is not shown on My Leads page.		values=False
	
	# date
	${MM}		${DD}=		Get Time			month,day
	${EXP_DATE}=				Catenate		SEPARATOR=/			${MM}		${DD}
	
	# read actual date
	Wait Until Page Contains Element		//table[@id='DGLeadsReport']/tbody/tr[${ROW}]/td[7]		10s
	# # # # Wait Until Element Is Visible			//table[@id='DGLeadsReport']/tbody/tr[${ROW}]/td[7]		10s
	${ACT_CREATED}=			Get Text		//table[@id='DGLeadsReport']/tbody/tr[${ROW}]/td[7]
	@{ACT_CRT_LIST}=		Split String		${ACT_CREATED}
	${ACT_DATE}=			Get From List		${ACT_CRT_LIST}			0
	# compare values and send result
	Should Be Equal			${EXP_DATE}			${ACT_DATE}			Comparison of dates failed on My Leads Page. Expected value: ${EXP_DATE}. Actual Value: ${ACT_DATE}. Please make sure that FD - Web Service is working fine as the expected record is not shown on My Leads page.		values=False
	
	################################################
	Log 	***** Lead Type Validation *****
	# Log 	Lead Type Validation 		WARN
	
	${EXP_LEADTYPE}=		Run Keyword If 		'${EXP_DECISION}'=='Approve'		Set Variable	Approved
	... 				ELSE IF		'${EXP_DECISION}'=='CounterOffer'			Set Variable	Counter Offer
	... 				ELSE IF		'${EXP_DECISION}'=='Decline' 				Set Variable	Declined
	...					ELSE		Set Variable		${EXP_LEADTYPE}
	
	Wait Until Page Contains Element		//table[@id='DGLeadsReport']/tbody/tr[${ROW}]/td[6]		10s
	# # # # Wait Until Element Is Visible			//table[@id='DGLeadsReport']/tbody/tr[${ROW}]/td[6]		10s
	${ACT_LEADTYPE}=		Get Text		//table[@id='DGLeadsReport']/tbody/tr[${ROW}]/td[6]
	${ACT_LEADTYPE}=		Evaluate		str('${ACT_LEADTYPE}').strip()
	Should Be Equal As Strings			${EXP_LEADTYPE}		${ACT_LEADTYPE}		Comparision of Lead Type failed on My Leads Page. Expected value: ${EXP_LEADTYPE}. Actual Value: ${ACT_LEADTYPE}. Please make sure that FD - Web Service is working fine as the expected record is not shown on My Leads page.		values=False
	
	Unselect Frame
# # #-------------------------------------------------------------------------------------------------------------------------		

##################################################
Login To Prequal TRU
	[Documentation]			This keyword logs into Prequalification Test Response Utility
	...						Pre-requisite : N/A
	...						Note: 		  : N/A
	...						Arguments: 	  : N/A
	...				  		Author        : Manisha Gadekar (manisha.gadekar@dealertrack.com)
	...						Creation Date : 
	...						Update Date\By: N/A
	# Log		Checking asynchronous response using Prequal Test Response Utility		WARN
	${PREQ_TRU_BR}=		Open Browser	${PREQTRU_URL}		${BROWSER}
	Set Suite Variable		${PREQ_TRU_BR}
	
	Maximize Browser Window
	Wait Until Keyword Succeeds             120s        3s         Page Should Contain Element            ${LOGIN_EDIT}		 	LoginID textbox is not found.		loglevel=NONE
	# login to the application
	Input Text                  ${LOGIN_EDIT}      ${USER_ID}
	sleep	2s
	Input Password              ${PASSWORD_EDIT}   ${USER_PASSWORD}
	Sleep   2s
	
	Run Keyword If                 '${BROWSER}'=='ff'        Click Element                     //input[@id='_login']
	...								ELSE					 Press Key                         ${LOGIN_BTN}                  \\13
	Wait Until Keyword Succeeds               120s                   3s                   Page Should Contain Element             //*[text()='Prequalification Response Files'] 	Text Prequalification Response Files is not shown on page.		loglevel=NONE

Login To CreditApp TRU
	[Documentation]			This keyword logs into CreditApp Test Response Utility
	...						Pre-requisite : N/A
	...						Note: 		  : N/A
	...						Arguments: 	  : N/A
	...				  		Author        : Manisha Gadekar (manisha.gadekar@dealertrack.com)
	...						Creation Date : 
	...						Update Date\By: N/A
	# Log		Checking asynchronous response using App Test Response Utility		WARN
	${APP_TRU_BR}=		Open Browser	${APPTRU_URL}		${BROWSER}
	Set Suite Variable		${APP_TRU_BR}
	
	Maximize Browser Window
	
	# login to the application
	Wait Until Keyword Succeeds             120s        3s         Page Should Contain Element            ${LOGIN_EDIT}		 	LoginID textbox is not found.		loglevel=NONE
	Input Text                  ${LOGIN_EDIT}      ${USER_ID}
	sleep	2s
	Input Password              ${PASSWORD_EDIT}   ${USER_PASSWORD}
	Sleep   2s
	
	Run Keyword If                 '${BROWSER}'=='ff'        Click Element                     //input[@id='_login']
	...								ELSE					 Press Key                         ${LOGIN_BTN}                  \\13
	Wait Until Keyword Succeeds               120s                   3s                   Page Should Contain Element             //*[text()='Credit Application Response Files']  		Text Credit Application Response Files is not shown on page.		loglevel=NONE
	
	
Scan My Leads Page
	Unselect Frame
	${PostXMLSubmitScanLead}		Retain Lead Data						5
	Set Suite Variable				${PostXMLSubmitScanLead}
	
# Decision Keywords
	# [Documentation]			This keyword calls keywords to perform decisioning.
	# ...						Pre-requisite : N/A
	# ...						Note: 		  : N/A
	# ...						Arguments: 	  : N/A
	# ...				  		Author        : Manisha Gadekar (manisha.gadekar@dealertrack.com)
	# ...						Creation Date : 
	# ...						Update Date\By: N/A
	# DealerSwitch
	# Navigate To DealQueue
	# sleep	3s
	# Decision Bulk Requests		2
	
Go For My Leads After Decision	
	[Documentation]			This keyword calls keywords to navigate to My Leads page and perform validations after decisioning based on various conditions.
	...						Pre-requisite : N/A
	...						Note: 		  : N/A
	...						Arguments: 	  : N/A
	...				  		Author        : Manisha Gadekar (manisha.gadekar@dealertrack.com)
	...						Creation Date : 
	...						Update Date\By: N/A
	Run Keyword If		'${VERSION}'=='FD-1.0' and '${FINANCEMETHOD}'=='Retail' and '${IS_COMM_PROP}'!='Pass'  			My Leads Page Post Decision Keywords
	Run Keyword If		'${VERSION}'=='FD-1.1' and '${FINANCEMETHOD}'=='Retail' and '${IS_COMM_PROP}'!='Pass' and '${IS_COAPP_PRESENT}'!='True'			My Leads Page Post Decision Keywords
	Run Keyword If		'${VERSION}'=='FD-1.2' and '${IS_D2I}'=='non-D2I' and '${IS_COAPP_PRESENT}'!='True'		My Leads Page Post Decision Keywords
	Run Keyword If		'${VERSION}'=='FD-1.2' and '${IS_D2I}'=='D2I'		My Leads Page Post Decision Keywords

My Leads Page Post Decision Keywords
	[Documentation]			This keyword calls keywords to navigate to My Leads page and perform validations after decisioning based on various conditions.
	...						Pre-requisite : N/A
	...						Note: 		  : N/A
	...						Arguments: 	  : N/A
	...				  		Author        : Manisha Gadekar (manisha.gadekar@dealertrack.com)
	...						Creation Date : 
	...						Update Date\By: N/A
	Navigate To My Leads
	Log		Check My Leads Page after decision	WARN
	sleep	3S
	Verify On My Leads Page After Decision			2
	
# # # Get Matching Prequal File Name		[Arguments]		${FILE}
	# # # [Documentation]			This keyword finds the prequal file similar to credit app file
	# # # ...						Pre-requisite : N/A
	# # # ...						Note: 		  : N/A
	# # # ...						Arguments: 	  : N/A
	# # # ...				  		Author        : Sanjay Dubey
	# # # ...						Creation Date : 
	# # # ...						Update Date\By: Manisha Gadekar
	
	# # # ${REQUEST}		Get Binary File		${RESOURCE}\\Input\\${VERSION}\\05 Chained Transactions\\${FILE}
	# # # ${R_XML}		Parse XML		${REQUEST}
	# # # ${WS_REQUEST_XML}=		Set Variable	${R_XML}
	# # # Set Test Variable		${WS_REQUEST_XML}
	
	# # # ${FN}	Run Keyword If 		'${VERSION}'=='FD-1.0'		Set Variable		.//FirstName
	# # # ...		ELSE		Set Variable		.//PrimaryApplicant/ApplicantInfo/FirstName
	
	# # # ${LN}	Run Keyword If 		'${VERSION}'=='FD-1.0'		Set Variable		.//LastName
	# # # ...		ELSE		Set Variable		.//PrimaryApplicant/ApplicantInfo/LastName
	
	
	# # # ${PASSED}=				Run Keyword And Return Status		XML.Get Element Text		${R_XML}	${FN}		
	# # # ${FN}=		Run Keyword If		${PASSED}		XML.Get Element Text		${R_XML}			${FN}
	# # # ...			ELSE		XML.Get Element Text		${R_XML}		.//PrimaryApplicant/FirstName		
	
	# # # ${PASSED}=				Run Keyword And Return Status		XML.Get Element Text		${R_XML}	${LN}		
	# # # ${LN}=		Run Keyword If		${PASSED}		XML.Get Element Text		${R_XML}			${LN}
	# # # ...			ELSE		XML.Get Element Text		${R_XML}		.//PrimaryApplicant/LastName		
	
	# # # # ${FN}		Get Element Text	${R_XML}	${FN}
	# # # # ${LN}		Get Element Text	${R_XML}	${LN}
	
	# # # #### Get Finance method
	# # # # ${NODE_NAME}=			Convert To String			.//FinanceMethod
	# # # # ${PASSED}=				Run Keyword And Return Status		XML.Get Element Text		${R_XML}			${NODE_NAME}	
	# # # # ${FIN_METHOD}=		Run Keyword If		${PASSED}		XML.Get Element Text		${R_XML}			${NODE_NAME}
	# # # # ...						ELSE				Set Variable	Retail
	
	# # # @{NAME_LIST} =		Split String		${FILE}			
	# # # ${FIN_METHOD}=				Get From List			${NAME_LIST}			0
	
	# # # #### Get Vehicle Condition - New, Used or Demo
	# # # ${NODE_NAME}=			Convert To String			.//VehicleInfo/VehicleCondition
	# # # # ${VEH_CONDITION}=		XML.Get Element Text		${R_XML}			${NODE_NAME}
	# # # ${PASSED}=				Run Keyword And Return Status		XML.Get Element Text		${R_XML}			${NODE_NAME}
	# # # ${VEH_CONDITION}=		Run Keyword If		${PASSED}		XML.Get Element Text		${R_XML}			${NODE_NAME}
	# # # ...						ELSE				Get Vehicle Condition From Credit App File Name		${FILE}
	# # # ${VEH_CON_CAP}=			Evaluate	str('${VEH_CONDITION}').upper()
	
	# # # ### Ind or Joint
	# # # ${IS_COAPP_PRESENT}=	Decide If Co-applicant Present
	# # # ${APP_TYPE}=		Run Keyword If		'${IS_COAPP_PRESENT}'!='True'		Set Variable	Indiv
	# # # ...					ELSE		Set Variable		Joint
	
	# # # # ${PREQ_PATTERN}= 	Run Keyword If		'${VERSION}'!='FD-1.0'		Catenate	SEPARATOR=		*	${FIN_METHOD}	*	${VEH_CONDITION}	*	${APP_TYPE}		*	${FN}	${Space}	${LN}	*	2	*.xml
	# # # # ...					ELSE				Catenate	SEPARATOR=		*	${FN}	${Space}	${LN}	*	${VEH_CON_CAP}	*	2	*.xml

	# # # ${PREQ_PATTERN}= 	Run Keyword If		'${VERSION}'!='FD-1.0'		Catenate	SEPARATOR=		*	${FIN_METHOD}	*	${VEH_CONDITION}	*	${APP_TYPE}		*	${FN}	${Space}	${LN}	*	2	*.xml
	# # # ...					ELSE				Catenate	SEPARATOR=		*	${FN}	${Space}	${LN}	*	2	*.xml
	
	# # # ${PASSED}=				Run Keyword And Return Status		List Files In Directory               ${RESOURCE}\\Input\\${VERSION}\\05 Chained Transactions         ${PREQ_PATTERN}
	
	# # # @{MATCHED_FILENAME}       Run Keyword If		${PASSED}	List Files In Directory               ${RESOURCE}\\Input\\${VERSION}\\05 Chained Transactions         ${PREQ_PATTERN}
	# # # ...						ELSE		Fail		Matching Prequal xml file is not found. Please make sure that it is present in required folder.
	
	# # # [Return]	@{MATCHED_FILENAME}[0]

	
# # # Get Matching Lead File Name		[Arguments]		${FILE}
	# # # [Documentation]			This keyword seraches files in Chained Transactions folder and returns Lead file name similar to CreditApp file name.
	# # # ...						Pre-requisite : N/A
	# # # ...						Note: 		  : N/A
	# # # ...						Arguments: 	  : N/A
	# # # ...				  		Author        : Manisha Gadekar (manisha.gadekar@dealertrack.com)
	# # # ...						Creation Date : 
	# # # ...						Update Date\By: N/A
	
	# # # ${REQUEST}		Get Binary File		${RESOURCE}\\Input\\${VERSION}\\05 Chained Transactions\\${FILE}
	# # # ${R_XML}		Parse XML		${REQUEST}
	# # # ${WS_REQUEST_XML}=		Set Variable	${R_XML}
	# # # Set Test Variable		${WS_REQUEST_XML}
	
	# # # ${FN}	Run Keyword If 		'${VERSION}'=='FD-1.0'		Set Variable		.//FirstName
	# # # ...		ELSE		Set Variable		.//PrimaryApplicant/ApplicantInfo/FirstName
	
	# # # ${LN}	Run Keyword If 		'${VERSION}'=='FD-1.0'		Set Variable		.//LastName
	# # # ...		ELSE		Set Variable		.//PrimaryApplicant/ApplicantInfo/LastName
	
	# # # ${FN}		Get Element Text	${R_XML}	${FN}
	# # # ${LN}		Get Element Text	${R_XML}	${LN}
	
	# # # #### Get Finance method
	# # # ${NODE_NAME}=			Convert To String			.//FinanceMethod
	# # # ${PASSED}=				Run Keyword And Return Status		XML.Get Element Text		${R_XML}			${NODE_NAME}	
	
	# # # # ${FIN_METHOD}=		Run Keyword If		${PASSED}		XML.Get Element Text		${R_XML}			${NODE_NAME}
	# # # # ...						ELSE				Set Variable	Retail
	
	# # # @{NAME_LIST} =		Split String		${FILE}			
	# # # ${FIN_METHOD}=				Get From List			${NAME_LIST}			0
	
	# # # #### Get Vehicle Condition - New, Used or Demo
	# # # ${NODE_NAME}=			Convert To String			.//VehicleInfo/VehicleCondition
	# # # ${NODE_NAME1}=			Convert To String			.//VehicleInformation/VehicleCondition
	# # # # ${VEH_CONDITION}=		XML.Get Element Text		${R_XML}			${NODE_NAME}
	# # # ${PASSED}=				Run Keyword And Return Status		XML.Get Element Text		${R_XML}			${NODE_NAME}
	# # # ${PASSED1}=				Run Keyword And Return Status		XML.Get Element Text		${R_XML}			${NODE_NAME1}
	
	# # # ${VEH_CONDITION}=		Run Keyword If		${PASSED}		XML.Get Element Text		${R_XML}			${NODE_NAME}
	# # # ...						ELSE IF				${PASSED1}		XML.Get Element Text		${R_XML}			${NODE_NAME1}
	# # # ...						ELSE				Get Vehicle Condition From Credit App File Name		${FILE}
	
	# # # ${VEH_CON_CAP}=			Evaluate	str('${VEH_CONDITION}').upper()
	
	# # # ### Ind or Joint
	# # # ${IS_COAPP_PRESENT}=	Decide If Co-applicant Present
	# # # ${APP_TYPE}=		Run Keyword If		'${IS_COAPP_PRESENT}'!='True'		Set Variable	Indiv
	# # # ...					ELSE		Set Variable		Joint
	
	# # # ${LEAD_PATTERN}		Run Keyword If		'${VERSION}'!='FD-1.0'		Catenate	SEPARATOR=		*	${FIN_METHOD}	*	${VEH_CONDITION}	*	${APP_TYPE}		*	${FN}	${Space}	${LN}	*	3	*.xml
	# # # ...					ELSE				Catenate	SEPARATOR=		*	${FN}	${Space}	${LN}	*	${VEH_CON_CAP}	*	3	*.xml
	
	# # # ${PASSED}=				Run Keyword And Return Status		List Files In Directory               ${RESOURCE}\\Input\\${VERSION}\\05 Chained Transactions         ${LEAD_PATTERN}
	
	# # # @{MATCHED_FILENAME}        Run Keyword If		${PASSED}	List Files In Directory               ${RESOURCE}\\Input\\${VERSION}\\05 Chained Transactions         ${LEAD_PATTERN}
	# # # ...						ELSE		Fail		Matching Lead xml file is not found. Please make sure that it is present in required folder.
	
	# # # [Return]	@{MATCHED_FILENAME}[0]

Retain Cust Data 	[Arguments]			${TrailsMax}
	[Documentation]			This keyword scans Customer Acrhive page to check that new record is added.
	...						Pre-requisite : N/A
	...						Note: 		  : N/A
	...						Arguments: 	  : N/A
	...				  		Author        : Manisha Gadekar (manisha.gadekar@dealertrack.com)
	...						Creation Date : 
	...						Update Date\By: N/A
	:FOR 	${Index}	IN RANGE	1	${TrailsMax}		#10
	\	${UpdatedValueStatus}	Compare Two Dimentional Dictionary		${PreXMLSubmitCust}		${PostXMLSubmitScanCust}
	\ 	Run Keyword If			'${UpdatedValueStatus}'=='False'		Exit For Loop
	\	${PostXMLSubmitScanCust}										Refresh And Retain Cust Data
	Set Suite Variable			${UpdatedValueStatus}
	Log			${PostXMLSubmitScanCust}
	[Return]					${PostXMLSubmitScanCust}	
	
Stabilize Page Load
	Unselect Frame
	Sleep			2s
	Wait Until Page Contains Element            	//iframe[@id='iFrm']	error=Navigate to page is not successful. Page is not loaded correctly. Please check.
	Select Frame                                	iFrm
	Wait Until Page Contains Element            	//frame[@name='main']
	Select Frame                                	main
	
Navigate To Customer Archive Update
	[Documentation]			This keyword navigates again to Customer Archive page to refresh it. 
	...						Gathers first few records (Set by ScanCount variable in Initial Partner Dealer Setup keyword) and males a list of it.
	...						Pre-requisite : N/A
	...						Note: 		  : N/A
	...						Arguments: 	  : N/A
	...				  		Author        : Manisha Gadekar (manisha.gadekar@dealertrack.com)
	...						Creation Date : 
	...						Update Date\By: Manisha Gadekar 23 Jun 2015
	
	WriteToFile			${LogFile}				Y			Navigate To Customer Archive Update>>>
	
	# Switch Browser		${BR}
	${FRM_FOUND}		Run Keyword and Return Status		Wait Until Page Contains Element            //iframe[@id='iFrm']	3
	Run Keyword If		${FRM_FOUND}==False		Unselect Frame
	Wait Until Page Contains Element            //iframe[@id='iFrm']		error=Navigate to Customer Archive page is not successful. Page is not loaded correctly. Please check.
	Select Frame                                iFrm
	Wait Until Page Contains Element            //frame[@name='nav']
	Select Frame                                nav
	${STATUS}		Wait Until Keyword Succeeds		20    2   Page Should Contain Element 		//a[@id='tabAppA']	
	Execute Javascript                          window.document.getElementById('tabAppA').onclick()
	sleep										1s
	Wait Until Keyword Succeeds               120s		3s			Page Should Contain Element             //a[@id='CreditArchive'] 			loglevel=NONE
	Press Key								//a[@id='CreditArchive']				\\13
	
	Wait Until Keyword Succeeds               120s                   3s                   Page Should Contain Element             //*[text()='Customer Archive'] 		Text Customer Archive is not shown on page.		loglevel=NONE
	Stabilize Page Load
	sleep 		2s
	${ret}=		Run Keyword And Return Status 			Page Should Contain Element		//table[@id='DataGridArchive']		Text Customer Archive is not shown on page.		loglevel=NONE
	
	${temp_dict}=	Create Dictionary
	Run Keyword If 		'${ret}'!='True'		Return From Keyword 	${temp_dict}
	
	${STATUS}		Wait Until Keyword Succeeds		120    3   	Page Should Contain Element		//table[@id='DataGridArchive']		Text Customer Archive is not shown on page.		loglevel=NONE
	${STATUS}		Wait Until Keyword Succeeds		120    3   	Page Should Contain Element		//table[@id='DataGridArchive']/tbody/tr		Text Customer Archive is not shown on page.		loglevel=NONE
	
	${Count}		Get Matching Xpath Count		//table[@id='DataGridArchive']/tbody/tr
	${Count}		Set Variable					${ScanCount}
	
	${DictionaryOfCustDataDic}						Retain Cust Row Data						${Count}
	
	Unselect Frame
	[Return]										${DictionaryOfCustDataDic}
	
Refresh And Retain Cust Data
	[Documentation]			This keyword refreshes Customer Archive Page to check if new record is shown or not
	...						Pre-requisite : N/A
	...						Note: 		  : N/A
	...						Arguments: 	  : N/A
	...				  		Author        : Manisha Gadekar (manisha.gadekar@dealertrack.com)
	...						Creation Date : 
	...						Update Date\By: N/A
	${EMPTYLIST}				Create List	
	${RefreshListName}			Set Variable 				${EMPTYLIST}
	${RefreshListTime}			Set Variable 				${EMPTYLIST}
	# Switch Browser											${BR}
	Unselect Frame
	Navigate To Customer Archive
	Wait Until Page Contains Element            //iframe[@id='iFrm']
	Select Frame                                iFrm
	Wait Until Page Contains Element            //frame[@name='main']
	Select Frame                                main
	sleep	2s
	
	# Wait Until Keyword Succeeds      120s	3s         Page Should Contain Element 	//form[@id='CBArchiveForm']/div[1]/table/tbody/tr/td			Customer Archive table is not found.		loglevel=NONE
	# ${txt}=		Get Text		//form[@id='CBArchiveForm']/div[1]/table/tbody/tr/td
	
	# Run Keyword And Continue On Failure 	Should Contain 		${txt}		Customer Archive	Text Customer Archive is not shown on page.		loglevel=NONE
	
	# Wait Until Keyword Succeeds               				120s	3s                   	Page Should Contain Element		//*[text()='Customer Archive']  		Text Customer Archive is not shown on page.		loglevel=NONE
	# Wait Until Keyword Succeeds               				120s	3s                   	Page Should Contain Element		//*[text()='Customer Archive']  		Text Customer Archive is not shown on page.		loglevel=NONE
	
	sleep 		2s
	${ret}=		Run Keyword And Return Status 			Page Should Contain Element		//table[@id='DataGridArchive']		Text Customer Archive is not shown on page.		loglevel=NONE
	${temp_dict}=	Create Dictionary
	Run Keyword If 		'${ret}'!='True'		Return From Keyword 	${temp_dict}
	#end here
	Wait Until Keyword Succeeds               				120s	3s                   	Page Should Contain Element 	//table[@id='DataGridArchive']			Customer Archive table is not found.		loglevel=NONE
	${STATUS}=					Run Keyword And Return Status		Page Should Contain Element 	//table[@id='DataGridArchive']
	${Count}=		Run Keyword If		${Status}					Get Matching Xpath Count	//table[@id='DataGridArchive']/tbody/tr
	...				ELSE				Fail	Unable to get rows of Customer Archive table.
	Run Keyword If				'${Count}'=='0'		Fail	System Failed To Read Customer Archive Data So Exiting Test
	${Count}					Set Variable				${ScanCount}
	${PostXMLSubmitScanCust}								Retain Cust Row Data  		${Count}
	Set Suite Variable			${PostXMLSubmitScanCust}	
	Set Suite Variable			${PostXMLSubmitScanCust}
	[Return]					${PostXMLSubmitScanCust}	

Retain Element Text	[Arguments]		${ElementXpath}
	[Documentation]			This keyword refreshes Customer Archive Page to check if new record is shown or not
	...						Pre-requisite : N/A
	...						Note: 		  : N/A
	...						Arguments: 	  : N/A
	...				  		Author        : Naveed Hasan
	...						Creation Date : 
	...						Update Date\By: N/A
	Wait Until Keyword Succeeds 	40s		1s             Page Should Contain Element		${ElementXpath} 		Element Failed To Be Recognized So Exiting Reading Text Value Of Element : ${ElementXpath}		loglevel=NONE
	:FOR	${Index}	IN RANGE	1		5
	\	Wait Until Page Contains Element		${ElementXpath}		10s
	\	# # # # Wait Until Element Is Visible			${ElementXpath}		10s
	\	${ValueRead}	Get Text				${ElementXpath}
	\					Run Keyword If			'${ValueRead}'!='${EMPTY}'		Exit For Loop
	Run Keyword If		${Index}>5 and ('${ValueRead}'!='${EMPTY}' or '${ValueRead}'!='None')	Fail	Element Text Value Reading Failed For Element With Xpath : ${ElementXpath}
	[Return]			${ValueRead}
	
Compare Dictionary	[Arguments]		${DictSource}			${DictDestination}
	[Documentation]			This keyword compares dictionaries. Mainly used to check if new record is added to page or not.
	...						Pre-requisite : N/A
	...						Note: 		  : N/A
	...						Arguments: 	  : N/A
	...				  		Author        : Naveed Hasan
	...						Creation Date : 
	...						Update Date\By: N/A
	
	${Status}				Set Variable			False
	@{DictKeys}				Get Dictionary Keys		${DictSource}
	:FOR	${Item} 		IN 		@{DictKeys}	
	\	${Status}			Run Keyword And Return Status	Should Be Equal As Strings		${DictSource['Applicant']}	${DictDestination['Applicant']}		#${DictSource['${Item}']}	${DictDestination['${Item}']}
	#\	${Status}			Evaluate				'${DictSource['${Item}']}'=='${DictDestination['${Item}']}'
	\	Run Keyword If		'${Status}'!='True'		Exit For Loop
	[Return]				${Status}
	
Compare Two Dimentional Dictionary	[Arguments]		${DictSource}		${DictDestination}
	[Documentation]			This keyword 2D compares dictionaries. Mainly used to check if new record is added to page or not.
	...						Pre-requisite : N/A
	...						Note: 		  : N/A
	...						Arguments: 	  : N/A
	...				  		Author        : Naveed Hasan
	...						Creation Date : 
	...						Update Date\By: N/A
	${Status}				Set Variable			False
	Log Dictionary 			${DictSource}
	Log Dictionary 			${DictDestination}
	@{DictKeys}				Get Dictionary Keys		${DictSource}
	:For	${Item} 		IN 		@{DictKeys} 
	\	${Status}			Compare Dictionary		${DictSource['${Item}']}	${DictDestination['${Item}']}
	\	Run Keyword If		'${Status}'!='True'		Exit For Loop
	[Return]				${Status}

Retain Cust Row Data   [Arguments]	${Count}
	[Documentation]			This keyword reads data rows from Customer archive page and saves it to dictionary. Mainly used to check if new record is added to page or not.
	...						Pre-requisite : N/A
	...						Note: 		  : N/A
	...						Arguments: 	  : N/A
	...				  		Author        : Manisha Gadekar
	...						Creation Date : 
	...						Update Date\By: N/A
	
	${PreXMLSubmitCust}			Copy Dictionary					${PreXMLSubmitCust}
	Set Suite Variable			${PreXMLSubmitCust}	
	Wait Until Keyword Succeeds 	40s		1s          Page Should Contain Element		//table[@id='DataGridArchive']/tbody/tr[1]/td[1] 		Element not found: //table[@id='DataGridArchive']/tbody/tr[1]/td[1]		loglevel=NONE
	
	:FOR  						${Item}   IN RANGE				1  ${Count}				#${Count}+1		
	\	Sleep 					1s
	\	${DataDictionary}		Create Dictionary	
	\	${Row_stat}=			Run Keyword And Return Status 		Page Should Contain Element		//table[@id='DataGridArchive']/tbody/tr[${Item}]/td[2] 		Element not found: //table[@id='DataGridArchive']/tbody/tr[${Item}]/td[2]		loglevel=NONE
	\	Run Keyword If 			'${Row_stat}'!='True'		Exit For Loop
	\	Wait Until Keyword Succeeds 	40s		1s          Page Should Contain Element		//table[@id='DataGridArchive']/tbody/tr[${Item}]/td[1] 		Element not found: //table[@id='DataGridArchive']/tbody/tr[${Item}]/td[1]		loglevel=NONE
	\	${STATUS}=				Run Keyword and Return Status 		Page Should Contain Element		//table[@id='DataGridArchive']/tbody/tr[${Item}]/td[1] 		Element not found: //table[@id='DataGridArchive']/tbody/tr[${Item}]/td[1]		loglevel=NONE
	# \	Wait Until Page Contains Element		//table[@id='DataGridArchive']/tbody/tr[${Item}]/td[1]		10s
	\	${Temp}=				Run Keyword If		${STATUS}		Get Text	//table[@id='DataGridArchive']/tbody/tr[${Item}]/td[1]
	\	...						ELSE		Set Variable		${EMPTY}
	\	Set To Dictionary		${DataDictionary}		  		Date				${Temp}	
	\	Wait Until Keyword Succeeds 	40s		1s          Page Should Contain Element		//table[@id='DataGridArchive']/tbody/tr[${Item}]/td[2] 		Element not found: //table[@id='DataGridArchive']/tbody/tr[${Item}]/td[2]		loglevel=NONE
	\	${STATUS}=				Run Keyword and Return Status 		Page Should Contain Element		//table[@id='DataGridArchive']/tbody/tr[${Item}]/td[2] 		Element not found: //table[@id='DataGridArchive']/tbody/tr[${Item}]/td[2]		loglevel=NONE
	\	Wait Until Page Contains Element		//table[@id='DataGridArchive']/tbody/tr[${Item}]/td[2]		10s
	\	# # # # Wait Until Element Is Visible			//table[@id='DataGridArchive']/tbody/tr[${Item}]/td[2]		10s
	\	${Temp}					Run Keyword If		${STATUS}		Get Text	//table[@id='DataGridArchive']/tbody/tr[${Item}]/td[2]
	\	...						ELSE		Set Variable		${EMPTY}
	\	Set To Dictionary		${DataDictionary}		    	Applicant			${Temp}	
	\	Wait Until Keyword Succeeds 	40s		1s          Page Should Contain Element		//table[@id='DataGridArchive']/tbody/tr[${Item}]/td[4] 		Element not found: //table[@id='DataGridArchive']/tbody/tr[${Item}]/td[4]		loglevel=NONE
	\	${STATUS}=				Run Keyword and Return Status 		Page Should Contain Element		//table[@id='DataGridArchive']/tbody/tr[${Item}]/td[1] 		Element not found: //table[@id='DataGridArchive']/tbody/tr[${Item}]/td[4]		loglevel=NONE
	# \	Wait Until Page Contains Element		//table[@id='DataGridArchive']/tbody/tr[${Item}]/td[4]		10s
	\	${Temp}					Run Keyword If		${STATUS}		Get Text		//table[@id='DataGridArchive']/tbody/tr[${Item}]/td[4]
	\	...						ELSE		Set Variable		${EMPTY}
	\	Set To Dictionary		${DataDictionary}		     	CBScore					${Temp}	
	\	Set To Dictionary		${DictionaryOfCustRowDataDic}		DicItem-0${Item}	${DataDictionary}		
	[Return]					${DictionaryOfCustRowDataDic}		
	
	
Go to My Lead Page and Confirm new Record Added		[Arguments]		${TIME_OUT}=120		${INT_TIME}=10
	[Documentation]			This keyword checks if new record is shown on My Leads page or not
	...						Pre-requisite : N/A
	...						Note: 		  : N/A
	...						Arguments: 	  : N/A
	...				  		Author        : Sanjay Dubey (sanjay.dubey@dealertrack.com)
	...						Creation Date : 
	...						Update Date\By: N/A
	
	${Iter_Count}		Evaluate	${TIME_OUT}/${INT_TIME}
	:For	${I}	IN RANGE	0		${Iter_Count}
	\	Sleep	10s
	\	Navigate To My Leads
	\	@{Records_Now}		Scan My Lead Page
	\	Log		${Records_Last}
	\	Log		${Records_Now}
	\	${stat}=	Run Keyword And Return Status 	List Should Contain Value 		${Records_Now}		${EMPTY}
	\	Run Keyword If 	'${stat}'=='True'	Fail 	There is some issue while reading the records on My Leads page. Please check.
	\	${Lists_Matched}		Run Keyword and Return Status		Lists Should Be Equal		${Records_Last}		${Records_Now}
	\	Unselect Frame
	\	@{Records_Last}		Copy List	${Records_Now}
	\	Set Test Variable		@{Records_Last}
	\	Run Keyword If		${Lists_Matched}==False		Exit For Loop
	#	...		ELSE	Copy List	${Records_Now}
	
	Run Keyword If		${Lists_Matched}==True				Fail		New record is not appeared on My Leads Page after ${TIME_OUT} seconds

Scan My Lead Page
	[Documentation]			This keyword adds first 5 records of My leads page in to dictionary
	...						Pre-requisite : N/A
	...						Note: 		  : N/A
	...						Arguments: 	  : N/A
	...				  		Author        : Sanjay Dubey (sanjay.dubey@dealertrack.com)
	...						Creation Date : 
	...						Update Date\By: Manisha Gadekar (01 Jun 2015)
	
	Wait Until Page Contains Element            //iframe[@id='iFrm']	error=Navigate to My Leads page is not successful. Page is not loaded correctly. Please check.
	Select Frame                                iFrm
	Wait Until Page Contains Element            //frame[@name='main']
	Select Frame                                main
	
	Wait Until Keyword succeeds        	60     10         Page Should Contain Element         //table[@id='DGLeadsReport']		loglevel=NONE
	
	@{RecordsList}		Create List
	
	:For	${I}	IN RANGE	2		7
	\	sleep 	2s
	\	Wait Until Keyword succeeds        	60     10         Page Should Contain Element         //table[@id='DGLeadsReport']/tbody/tr[${I}]/td[3]/a	Error in reading record on My Leads page 	loglevel=NONE
	\	${I_Row_Record}		Get Text		//table[@id='DGLeadsReport']/tbody/tr[${I}]/td[3]/a
	\	Append To List		${RecordsList}		${I_Row_Record}

	Log List 	${RecordsList}	
	[Return]	@{RecordsList}

Teardown - Close Browsers
	[Documentation]			This keyword closes all IE browsers on exit
	...						Pre-requisite : N/A
	...						Note: 		  : N/A
	...						Arguments: 	  : N/A
	...				  		Author        : Manisha Gadekar
	...						Creation Date : 
	...						Update Date\By: 
	
	# WS_CommonUtil.KillProcessIE
	Close All Browsers	

Retain Lead Data
	[Documentation]			This keyword calls keywords to compare dictionaries Pre and Post req submission
	...						Pre-requisite : N/A
	...						Note: 		  : N/A
	...						Arguments: 	  : N/A
	...				  		Author        : Naveed Hasan (naveed.hasan@dealertrack.com)
	...						Creation Date : 
	...						Update Date\By: 
	
    [Arguments]    ${TrailsMax}
    : FOR    ${Index}    IN RANGE    1    ${TrailsMax}+1    #10
    \    ${UpdatedValueStatus}    Compare Two Dimentional Dictionary    ${PreXMLSubmitLead}    ${PostXMLSubmitScanLead}
    \    Run Keyword If    '${UpdatedValueStatus}'=='False'    Exit For Loop
    \    ${PostXMLSubmitScanLead}    Refresh And Retain Lead Data
    Set Suite Variable    ${UpdatedValueStatus}
    Run Keyword If    ${UpdatedValueStatus}==True    Run Keyword and Continue on Failure    Fail    New Record not added to my lead page. Verified ${TrailsMax} times.
    [Return]    ${PostXMLSubmitScanLead}

Navigate To My Leads Update
	[Documentation]			This keyword refreshes My leads page to check for new record
	...						Pre-requisite : N/A
	...						Note: 		  : N/A
	...						Arguments: 	  : N/A
	...				  		Author        : Naveed Hasan (naveed.hasan@dealertrack.com)
	...						Creation Date : 
	...						Update Date\By: 
	
    Log    Navigate To My Leads Update    warn
    Unselect Frame
    Wait Until Page Contains Element    //iframe[@id='iFrm']    error=error=Navigate to My Leads page is not successful. Page is not loaded correctly. Please check.
    Select Frame    iFrm
    Wait Until Page Contains Element    //frame[@name='nav']
    Select Frame    nav
    ${STATUS}    Wait Until Keyword Succeeds    20    2    Page Should Contain Element    //a[@id='tabLeads_SNA']
    Execute Javascript    window.document.getElementById('tabLeads_SNA').onclick()
    Sleep    1s
    Unselect Frame
    ${STATUS}    Wait Until Keyword Succeeds    20    2    Page Should Contain Element    //iframe[@id='iFrm']
    Select Frame    iFrm
    ${STATUS}    Wait Until Keyword Succeeds    20    2    Page Should Contain Element    //frame[@name='nav']
    Select Frame    nav
    Sleep    1s
    ${STATUS}    Wait Until Keyword Succeeds    20    2    Page Should Contain Element    //a[text()='My Leads']
    Press Key    //a[text()='My Leads']    \\13
    ${STATUS}    Wait Until Keyword Succeeds    20    2    Page Should Contain Element    //a[@id='tabLeads_SNA']
    Stabilize Page Load
    ${STATUS}    Wait Until Keyword Succeeds    20    2    Page Should Contain Element    //table[@id='DGLeadsReport']
    ${STATUS}    Wait Until Keyword Succeeds    30    2    Page Should Contain Element    //tr[@id='LeadsGridRow']
    Focus    //tr[@id='LeadsGridRow']
    ${Count}    Get Matching Xpath Count    //tr[@class='small']
    ${Count}    Set Variable    ${ScanCount}
    ${DictionaryOfLeadDataDic}    Retain Lead Row Data    ${Count}
    [Return]    ${DictionaryOfLeadDataDic}

Refresh And Retain Lead Data
	[Documentation]			This keyword refreshes My leads page and adds records to dictionary.
	...						Pre-requisite : N/A
	...						Note: 		  : N/A
	...						Arguments: 	  : N/A
	...				  		Author        : Naveed Hasan (naveed.hasan@dealertrack.com)
	...						Creation Date : 
	...						Update Date\By: 
	
    ${EMPTYLIST}    Create List
    ${RefreshListName}    Set Variable    ${EMPTYLIST}
    ${RefreshListTime}    Set Variable    ${EMPTYLIST}
    Execute Javascript    location.reload(true);
    Wait Until Keyword Succeeds    120s    3s    Page Should Contain Element    //*[text()='My Leads ']    Text My Leads is not shown on page.    loglevel=NONE
    Switch Browser    ${BR}
    Stabilize Page Load
    ${STATUS}    Wait Until Keyword Succeeds    20    2    Page Should Contain Element    //tr[@class='small']
    ${Count}    Get Matching Xpath Count    //tr[@class='small']
    Run Keyword If    '${Count}'=='0'    Fail    System Failed To Read Lead Data So Exiting Test
    ${Count}    Set Variable    ${ScanCount}
    ${PostXMLSubmitScanLead}    Retain Lead Row Data    ${Count}
    Set Suite Variable    ${PostXMLSubmitScanLead}
    #Set Suite Variable    ${PostXMLSubmitScanLead}
    [Return]    ${PostXMLSubmitScanLead}
	
Retain Lead Row Data
    [Arguments]    ${Count}
	[Documentation]			This keyword copies Lead page data to dictionary
	...						Pre-requisite : N/A
	...						Note: 		  : N/A
	...						Arguments: 	  : N/A
	...				  		Author        : Naveed Hasan (naveed.hasan@dealertrack.com)
	...						Creation Date : 
	...						Update Date\By: 
	
    ${PreXMLSubmitLead}    Copy Dictionary    ${PreXMLSubmitLead}
    Set Suite Variable    ${PreXMLSubmitLead}
    : FOR    ${Item}    IN RANGE    1    ${Count}    #${Count}+1
    \    ${DataDictionary}    Create Dictionary
    \    ${Temp}    Retain Element Text    //*[@class='small'][${Item}]/td[3]
    \    Set To Dictionary    ${DataDictionary}    Applicant    ${Temp}
    \    ${Temp}    Retain Element Text    //*[@class='small'][${Item}]/td[4]
    \    Set To Dictionary    ${DataDictionary}    Vehicle    ${Temp}
    \    ${Temp}    Retain Element Text    //*[@class='small'][${Item}]/td[5]
    \    Set To Dictionary    ${DataDictionary}    Source    ${Temp}
    \    ${Temp}    Retain Element Text    //*[@class='small'][${Item}]/td[6]
    \    Set To Dictionary    ${DataDictionary}    Lead Type    ${Temp}
    \    ${Temp}    Retain Element Text    //*[@class='small'][${Item}]/td[7]
    \    Set To Dictionary    ${DataDictionary}    Created    ${Temp}
    \    @{Created}    Split String    ${DataDictionary['Created']}    separator=
    \    @{Minutes}    Split String    @{Created}[1]    separator=:
    \    Set To Dictionary    ${DictionaryOfLeadRowDataDic}    DicItem-0${Item}    ${DataDictionary}
    [Return]    ${DictionaryOfLeadRowDataDic}

Login Only If Required
	[Documentation]			This KW logins to app if not logged in earlier
	...				  		Author        : Manisha Gadekar (Manisha.Gadekar@dealtertrack.com)
	...						Creation Date : 31 Mar 2015
	...						Update Date\By: NA

	WriteToFile			${logfile}				Y					Login Only If Required>>>
	
	Run Keyword if		'${USER_ID}'=='${Empty}'	Fail	variable User_ID is empty. Please use correct user to be logged in.
	Run Keyword if		'${USER_PASSWORD}'=='${Empty}'	Fail	 variable USER_PASSWORD is empty. Please use correct password to be logged in.
	
	# ${Is_Base_Condition}	Run Keyword If 		'${Current_User}'=='${USER_ID}'		Run Keyword and Return Status		Wait Until Keyword succeeds		20	5s	Page Should contain Element		//a[@id='tabAppA']
	# ...		ELSE	Set Variable	False
	
	# Run Keyword If			${Is_Base_Condition} and '${Current_User}'=='${USER_ID}'		Return From Keyword
	Run Keyword If			'${Current_User}'=='${USER_ID}'		Return From Keyword
	
	# Log 		Dealership: ${PD_DEALER_NUM} 	warn
	Set Suite Variable	${Current_User}		${USER_ID}

	Run Keyword If	'${BROWSER}'=='ie'		Login		ELSE		Login2

# Initial Test Setup 	    [Arguments]		${SCENARIO_FILE}		
	# [Documentation]			This keyword to produce Scenario Dictionary Variable from Scenario Configuartaion file
	# ...						Keyword Return Dictionary Data
	# ...						Pre-requisite: N/A
	# ...						Note: 		 : 
	# ...						Return Type : Dictionary
	# ...				  		Author  : Manisha Gadekar (Manisha.Gadekar@dealtertrack.com)
	# ...						Creation Date: 4th Jun 2015
	# ...						Update Date\By: NA

	# ${CONFIGUARATION_XML}		WS_CommonUtil.Read_From_File_To_String		${RESOURCE}\\Setup\\${SCENARIO_FILE}
	# ${Scenario Setup} 			Create Dictionary 
	
	
	# #Partner Id#
	# @{CONFIGUARATION_ITEMS} 	Create List							PartnerId
	# ${Data}			Return Values From Child Node			${CONFIGUARATION_XML}	@{CONFIGUARATION_ITEMS}
	
	# # Log				Partner Reference : \t${Data}		Warn
	# Set To Dictionary		${Scenario Setup}			Partner Id			${Data}
	# Log			${Scenario Setup}
	# #Partner Dealer Id#
	# @{CONFIGUARATION_ITEMS} 	Create List							PartnerDealerId
	# ${Data}			Return Values From Child Node			${CONFIGUARATION_XML}	@{CONFIGUARATION_ITEMS}
	
	# # Log				Partner Dealer Id : \t${Data}		Warn
	# Set To Dictionary		${Scenario Setup}			Partner Dealer Id			${Data}
	# Log			${Scenario Setup}
	
	# Set Suite Variable		${Scenario Setup}
	
	# ##############################################
	# # Added on 24th March for use of Dictionary
	# ##############################################
	# #####################
	# # Variables
	# #####################
	# ${ListZeroIndex}	Set Variable					0
	# ${ScanCount}		Set Variable					7
	# ${ListZeroIndex}	Convert To Integer				${ListZeroIndex}
	# ${ScanCount}		Convert To Integer				${ScanCount}		
	# ${PreXMLSubmit-LeadFirstRow-Dictionary}				Create Dictionary					
	# ${PostXMLSubmit-LeadFirstRow-Dictionary}			Create Dictionary
	# ${PreXMLSubmitLead}									Create Dictionary
	# ${PostXMLSubmitScanLead}							Create Dictionary
	# ${PreXMLSubmitCust}									Create Dictionary
	# ${PostXMLSubmitScanCust}							Create Dictionary
	# ${DictionaryOfLeadRowDataDic}						Create Dictionary
	# ${DictionaryOfCustRowDataDic}						Create Dictionary
	# Set Suite Variable	${DictionaryOfLeadRowDataDic}	
	# Set Suite Variable	${DictionaryOfCustRowDataDic}	
	# Set Suite Variable	${PreXMLSubmitLead}		  		
	# Set Suite Variable	${PostXMLSubmitScanLead}
	# Set Suite Variable	${PreXMLSubmitCust}		  		
	# Set Suite Variable	${PostXMLSubmitScanLead}
	
	# Set Suite Variable	${UpdatedValueStatus}		  	${EMPTY}
	# Set Suite Variable	${ScanCount}
	# Set Suite Variable	${ListZeroIndex}
	
	# [Return]				${Scenario Setup}

Convert Date to epoch Seconds	[Arguments]		${Date_Value}		${Date_Format}=%m-%d-%Y
	[Documentation]			This Keyword will convert the given date to time duration in seconds from epoch for a given time format
	...					${Date_Value} :Should be the date required to be converted.
	...					${Date_Format}: here you can mention the format of you date input. accordinglypython will convert it to standard format
	...					Uses : 	Convert Date to epoch Seconds	03-20-2015, 2:40:36		%m-%d-%Y, %H:%M:%S
	...							Convert Date to epoch Seconds	03-20-2015 2:40:36		%m-%d-%Y %H:%M:%S
	...							Convert Date to epoch Seconds	03-20-2015				%m-%d-%Y
	...							Convert Date to epoch Seconds	03-20-2015 2:40:36 pm		%m-%d-%Y %H:%M:%S
	...				  		Author        : Sanjay Dubey (Sanjay.dubey@dealtertrack.com)
	...						Creation Date : 30 Mar 2015
	...						Update Date\By: Manisha Gadekar
	
	${Date_Value}	set Variable	${Date_Value.upper()}
	Log		${Date_Value}		
	${IsPM}		Find String In String	${Date_Value}		PM
	${Date_Value}	Replace String		${Date_Value}	PM		${Empty}
	${Date_Value}	Replace String		${Date_Value}	AM		${Empty}
	# Convert to string		'${Date_Format}'
	${Date_Value}	set Variable	${Date_Value.strip()}
	Log		${Date_Value}	
	${date} =	Convert Date	${Date_Value} 	timestamp	False	${Date_Format}
	# Log		${date}		warn
	Log		${date}		
	
	${hrs}	Get Time	hour	${date}
	Log		${hrs}	
	
	${SECS}		Get Time  epoch  ${date}
	Log		${SECS}		
	
	${hrs}= 	Convert To Integer 		${hrs}
	${X}=		Evaluate 	${IsPM}>${0}
	${Y}=		Evaluate 	${hrs}<${12} 
	
	### In Case of AM/PM mentioned and is it PM 12 hours= 12*60*60 = 43200 should be added.
	${SECS}=		Run Keyword If		${X} and ${Y} 		Evaluate	${SECS} + 43200	
	...		ELSE	Set Variable		${SECS}
	
	[Return]	${SECS}

##################################################################################
# From Health Checkup 
##################################################################################

Send FD Request 			[Arguments] 	${VERSION}		${PARTNERID}	${DEALERID}		${WS_REQUEST_XML}	${Filename}		${Servicename}
	[Documentation]			This is a common keyword used to send any type of FD request like Prequal, Lead, Credit App, Chained, Partner Info
	...						Parameters passed are used for selecting correct request
	...						Pre-requisite: ${WS Setup} dictionary is set with correct values
	...						Note: 		 
	...						Return Type : 
	...				  		Author  : Manisha Gadekar (Manisha.Gadekar@dealtertrack.com)
	...						Creation Date: 
	...						Update Date\By: 24 Jun 2015	

	# Set up parameters to send request
	${WS_URL}=		Catenate 	SEPARATOR=		${WS Setup['Url']}		${WS Setup['Service']}
	${Username}=	Set Variable	${WS Setup['User Name']}
	${Password}=	Set Variable	${WS Setup['Password']}
	${WS_REQUEST_XML}=		Convert To String 	${WS_REQUEST_XML}
	# Send CB Req
	${RESPONSECODE}		${ERRORTEXT}	${RESPONSETEXT}			Send Request With Request XML Finance Driver	${WS_URL}	${EMPTY}	${WS_REQUEST_XML}	${Username}		${Password}
	Set Test Variable			${RESPONSECODE}
	Set Test Variable			${RESPONSETEXT}
	Set Test Variable			${ERRORTEXT}
	
	${time}=	Get Time
	${time}=	Convert To String 	${time}
	${time}=	Replace String 		${time}		:	-
	
	# Write Response in a file 
	${F_name}=		WS_CommonUtil.trimFromRight			${Filename}				4
	${RESPONSE_FILE}		Catenate	SEPARATOR=			${F_name}		_${time}.xml
	WS_CommonUtil.Write_String_To_File		${RESOURCE}\\Other\\WebService\\Response\\${RESPONSE_FILE}	${RESPONSETEXT}
	
	${REQUEST_FILE}		Catenate	SEPARATOR=			${F_name}		_${time}.xml
	WS_CommonUtil.Write_String_To_File		${RESOURCE}\\Other\\WebService\\Request\\${REQUEST_FILE}		${WS_REQUEST_XML}
	
	Log			${RESPONSECODE}
	Log			${RESPONSETEXT}

	Run Keyword And Continue On Failure		Run Keyword If	'${RESPONSECODE}'!= '200'		Fail 		Your Request: ${Servicename} is not successful. You have received response code: ${RESPONSECODE}. The error message is: ${RESPONSETEXT}.
	# Run Keyword If          '${RESPONSECODE}'!= '200'       Fail        Your Request: ${Servicename} is not successful. You have received response code: ${RESPONSECODE}. The error message is: ${RESPONSETEXT}.
	Run Keyword If			'${ERRORTEXT}'!='Nothing'		Fail		${Servicename}: Web Service Returned Error : ${ERRORTEXT} So Exiting Node Validation
	
	Run Keyword If          '${RESPONSECODE}'== '200'       Log 		Request: ${Servicename} is successful 	

###############################################################################################################################################	
Send FD Request 2 			[Arguments] 	${VERSION}		${PARTNERID}	${DEALERID}		${WS_REQUEST_XML}	${Filename}		${Servicename}
###############################################################################################################################################
	[Documentation]			This is a common keyword used to send any type of FD request like Prequal, Lead, Credit App, Chained, Partner Info
	...						Parameters passed are used for selecting correct request
	...						Pre-requisite: ${WS Setup} dictionary is set with correct values
	...						Note: 		 
	...						Return Type : 
	...				  		Author  : Manisha Gadekar (Manisha.Gadekar@dealtertrack.com)
	...						Creation Date: 
	...						Update Date\By: 24 Jun 2015

	WriteToFile			${logfile}		Y		Send FD Request 2>>>
	
	# Set up parameters to send request
	${WS_URL}=		Catenate 	SEPARATOR=		${WS Setup['Url']}		${WS Setup['Service']}
	${Username}=	Set Variable	${WS Setup['User Name']}
	${Password}=	Set Variable	${WS Setup['Password']}
	${WS_REQUEST_XML}=		Convert To String 	${WS_REQUEST_XML}
	# Send CB Req
	${RESPONSECODE}		${ERRORTEXT}	${RESPONSETEXT}			Send Request With Request XML Finance Driver	${WS_URL}	${EMPTY}	${WS_REQUEST_XML}	${Username}		${Password}
	Set Test Variable			${RESPONSECODE}
	Set Test Variable			${RESPONSETEXT}
	Set Test Variable			${ERRORTEXT}
	
	${time}=	Get Time
	${time}=	Convert To String 	${time}
	${time}=	Replace String 		${time}		:	-
	
	# Write Response in a file 
	${F_name}=		WS_CommonUtil.trimFromRight			${Filename}				4
	${RESPONSE_FILE}		Catenate	SEPARATOR=			${F_name}		_${time}.xml
	WS_CommonUtil.Write_String_To_File		${RESOURCE}\\Other\\WebService\\Response\\${RESPONSE_FILE}		${RESPONSETEXT}
	
	${REQUEST_FILE}		Catenate	SEPARATOR=			${F_name}		_${time}.xml
	WS_CommonUtil.Write_String_To_File		${RESOURCE}\\Other\\WebService\\Request\\${REQUEST_FILE}		${WS_REQUEST_XML}
	
	Log			${RESPONSECODE}
	Log			${RESPONSETEXT}

	#QQQ TomH - New version of this for Process All Xml. Can't modify original version as it would change the behavior in a way that the existing calling routines are
	#not expecting... Change is that non-200s will not set a Fail at all here. This will be managed in Process All Xml. We need to be able to send xml that is expected 
	#to fail and as long as the error is what we are expecting then the testcase passes.
	# Run Keyword And Continue On Failure		Run Keyword If	'${RESPONSECODE}'!= '200'		Fail 		Your Request: ${Servicename} is not successful. You have received response code: ${RESPONSECODE}. The error message is: ${RESPONSETEXT}.
	# Run Keyword If          '${RESPONSECODE}'!= '200'       Fail        Your Request: ${Servicename} is not successful. You have received response code: ${RESPONSECODE}. The error message is: ${RESPONSETEXT}.
	Run Keyword If			'${ERRORTEXT}'!='Nothing'		Fail		${Servicename}: Web Service Returned Error : ${ERRORTEXT} So Exiting Node Validation
	Run Keyword If          '${RESPONSECODE}'== '200'       Log 		Request: ${Servicename} is successful 	
	Run Keyword If          '${RESPONSECODE}'!= '200'       Log 		Request: ${Servicename} has failed
	
###############################################################################################################################################	
Send FD Request ADFLead		[Arguments] 	${VERSION}		${PARTNERID}	${DEALERID}		${WS_REQUEST_XML}	${Filename}		${Servicename}
###############################################################################################################################################
	[Documentation]			This is a common keyword used to send any type of FD request like Prequal, Lead, Credit App, Chained, Partner Info
	...						Parameters passed are used for selecting correct request
	...						Pre-requisite: ${WS Setup} dictionary is set with correct values
	...						Note: 		 
	...						Return Type : 
	...				  		Author  : Manisha Gadekar (Manisha.Gadekar@dealtertrack.com)
	...						Creation Date: 
	...						Update Date\By: 24 Jun 2015

	WriteToFile			${logfile}		Y		Send FD Request ADFLead>>>
	
	# Set up parameters to send request
	${WS_URL}=		Catenate 	SEPARATOR=		${WS Setup['Url']}		${WS Setup['Service']}
	${Username}=	Set Variable	${WS Setup['User Name']}
	${Password}=	Set Variable	${WS Setup['Password']}
	${WS_REQUEST_XML}=		Convert To String 	${WS_REQUEST_XML}
	# Send CB Req
	
	WriteToFile			${logfile}			Y		WS_URL=${WS_URL}
	# WriteToFile			${logfile}			Y		WS_REQUEST_XML=${WS_REQUEST_XML}
	# WriteToFile			${logfile}			Y		Username}=${Username}
	# WriteToFile			${logfile}			Y		Password=${Password}
	
	${RESPONSECODE}		${ERRORTEXT}	${RESPONSETEXT}			Send Request With Request XML ADFLead	${WS_URL}	${EMPTY}	${WS_REQUEST_XML}	${Username}		${Password}
	Set Test Variable			${RESPONSECODE}
	Set Test Variable			${RESPONSETEXT}
	Set Test Variable			${ERRORTEXT}
	
	${time}=	Get Time
	${time}=	Convert To String 	${time}
	${time}=	Replace String 		${time}		:	-
	
	# Write Response in a file 
	${F_name}=		WS_CommonUtil.trimFromRight			${Filename}				4
	${RESPONSE_FILE}		Catenate	SEPARATOR=			${F_name}		_${time}.xml
	WS_CommonUtil.Write_String_To_File		${RESOURCE}\\Other\\WebService\\Response\\${RESPONSE_FILE}		${RESPONSETEXT}
	
	${REQUEST_FILE}		Catenate	SEPARATOR=			${F_name}		_${time}.xml
	WS_CommonUtil.Write_String_To_File		${RESOURCE}\\Other\\WebService\\Request\\${REQUEST_FILE}		${WS_REQUEST_XML}
	
	Log			${RESPONSECODE}
	Log			${RESPONSETEXT}

	#QQQ TomH - New version of this for Process All Xml. Can't modify original version as it would change the behavior in a way that the existing calling routines are
	#not expecting... Change is that non-200s will not set a Fail at all here. This will be managed in Process All Xml. We need to be able to send xml that is expected 
	#to fail and as long as the error is what we are expecting then the testcase passes.
	# Run Keyword And Continue On Failure		Run Keyword If	'${RESPONSECODE}'!= '200'		Fail 		Your Request: ${Servicename} is not successful. You have received response code: ${RESPONSECODE}. The error message is: ${RESPONSETEXT}.
	# Run Keyword If          '${RESPONSECODE}'!= '200'       Fail        Your Request: ${Servicename} is not successful. You have received response code: ${RESPONSECODE}. The error message is: ${RESPONSETEXT}.
	Run Keyword If			'${ERRORTEXT}'!='Nothing'		Fail		${Servicename}: Web Service Returned Error : ${ERRORTEXT} So Exiting Node Validation
	Run Keyword If          '${RESPONSECODE}'== '200'       Log 		Request: ${Servicename} is successful 	
	Run Keyword If          '${RESPONSECODE}'!= '200'       Log 		Request: ${Servicename} has failed	
	
	
Perform Setup Check
	[Documentation]			This keyword sends CB 1.1 request to check that CB service is working. 
	...						Used as initial setup check. Sets the preferences based on the credit scrore returned.
	...						Pre-requisite: 
	...						Note: 		 
	...						Return Type : 
	...				  		Author  : Manisha Gadekar (Manisha.Gadekar@dealtertrack.com)
	...						Creation Date: 
	...						Update Date\By: 24 Jun 2015

###############################################	
Take Initial Snapshot Of Customer Archive Page
###############################################
	
	WriteToFile			${logfile}				Y					Take Initial Snapshot Of Customer Archive Page>>>	
	
	# # # #################################
	# # # # Check logged in dealership
	# # # ${Bottom_Line}=		Get Logged In Dealership
	# # # ${Bottom_Line}=		Convert To String 	${Bottom_Line}
	# # # ${Bottom_Line}=		Replace String 		${Bottom_Line}		'		${EMPTY}
	# # # ${stat}=			Run Keyword If		'${Bottom_Line}'!='${EMPTY}'	Run Keyword And Return Status 	Should Contain 	${Bottom_Line}		${DEALERID}
	# # # ...					ELSE 				Set Variable 					False
	# # # ${Bottom_Line}=		Replace String		${Bottom_Line}		(		%
	# # # ${Bottom_Line}=		Replace String		${Bottom_Line}		)		%	
	# # # ${Temp1}			${ActualDealer}		${Temp2}=					Split String			${Bottom_Line}		%		2
	# # # WriteToFile			${logfile}			Y							Was the switch successful? Expected=${DEALERID}. Actual=${ActualDealer}.
	# # # Run Keyword If 		'${stat}'!='True'	Dealer Switch To Dealer 	${DEALERID}		
	# # # #################################
	
	${PreXMLSubmitCust}			Navigate To Customer Archive Update
	${PostXMLSubmitScanCust}	Set Variable				${PreXMLSubmitCust}
	Set Suite Variable			${PostXMLSubmitScanCust}	
	Set Suite Variable			${PreXMLSubmitCust}	
	Log Dictionary				${PreXMLSubmitCust}	
	Log Dictionary				${PostXMLSubmitScanCust}	
	
Check If Record Added To Customer Archive Page	
	#Get snapshot of UI post sending req and compare
	${PostXMLSubmitScanCust}=		Retain Cust Data			20
	Log Dictionary					${PostXMLSubmitScanCust}
	Set Suite Variable				${PostXMLSubmitScanCust}
	Unselect Frame
	Log Dictionary		${PreXMLSubmitCust}
	Log Dictionary		${PostXMLSubmitScanCust}
	Log 	${UpdatedValueStatus}
	
	
Verify Record On Customer Archive Page		[Arguments]			${ROW}
	[Documentation]			This keyword checks the record on Customer Archive Page
	...						Pre-requisite: 
	...						Note: 		 
	...						Return Type : 
	...				  		Author  : Manisha Gadekar (Manisha.Gadekar@dealtertrack.com)
	...						Creation Date: 
	...						Update Date\By: 24 Jun 2015

	# sleep	1s
	
	Wait Until Page Contains Element            //iframe[@id='iFrm']
	Select Frame                                iFrm
	Wait Until Page Contains Element            //frame[@name='main']
	Select Frame                                main
	
	Wait Until Keyword Succeeds       120s    3s         Page Should Contain Element            //table[@id='DataGridArchive']		 			loglevel=NONE
	Log		${ROW}
	${ROW}=		Convert To Integer		${ROW}
	# Get today's date
	${EXPDATE}=		Get Current Date			# existing keyword from phase II
	Set Test Variable	${EXPDATE}
	
	# Date
	Wait Until Keyword Succeeds      120s          3s        Page Should Contain Element        //table[@id='DataGridArchive']/tbody/tr[${ROW}]/td[1]		Element not found:Date in table		loglevel=NONE
	Wait Until Page Contains Element		//table[@id='DataGridArchive']/tbody/tr[${ROW}]/td[1]		10s
	# # # # Wait Until Element Is Visible			//table[@id='DataGridArchive']/tbody/tr[${ROW}]/td[1]		10s
	${ACT_DATE_SH}=		Get Text		//table[@id='DataGridArchive']/tbody/tr[${ROW}]/td[1]
	Run Keyword If 		'${ACT_DATE_SH}'=='None'			Fail			Unable to get value in Date column on Customer Archive Page. 
	${ACT_DATE}=		Evaluate		str('${ACT_DATE_SH}').strip()
	Should Be Equal As Strings			${EXPDATE}			${ACT_DATE}		Comparision of Date failed on Customer Archive page. Expected value: ${EXPDATE}. Actual Value: ${ACT_DATE}. 		values=False
	
	# app name
	${STR1}=				Catenate		SEPARATOR=			${SPACE}				${FIRSTNAME}
	${EXP_APPLICANT}=		Catenate		SEPARATOR=,  		${LASTNAME}				${STR1}
	${STR2}=				Catenate		SEPARATOR=		${MIDDLENAME}			.	
	${EXP_APPLICANT}=		Run Keyword If		'${MIDDLENAME}'!='${EMPTY}'		Catenate		${EXP_APPLICANT}		${STR2}		ELSE		Set Variable	${EXP_APPLICANT}
	${EXP_APPLICANT}=		Evaluate		str('${EXP_APPLICANT}').lower()
	
	###########################
	${DELAY}=		Set Variable	90
	${TIME_FRACTION}=	Set Variable	5
	
	${COUNT}			Evaluate				${DELAY}/${TIME_FRACTION}
	${COUNT}			Convert To Integer		${COUNT}
	${SCAN}				Set Variable			0

	Wait Until Keyword Succeeds    120s    3s    Page Should Contain Element    //table[@id='DataGridArchive']/tbody/tr[${ROW}]/td[2]/a    Applicant name is not shown on Customer Archive Page.    loglevel=NONE
	:For		${LOOP}		IN RANGE	1			${COUNT} + 1
	\	Sleep				${TIME_FRACTION}s
	\	Wait Until Page Contains Element		//table[@id='DataGridArchive']/tbody/tr[${ROW}]/td[2]/a		10s
	\	# # # # Wait Until Element Is Visible			//table[@id='DataGridArchive']/tbody/tr[${ROW}]/td[2]/a		10s
	\	${ACT_APPLICANT}=		Get Text		//table[@id='DataGridArchive']/tbody/tr[${ROW}]/td[2]/a
	\	${ACT_NAME}=		Evaluate		str('${ACT_APPLICANT}').strip()
	\	${ACT_NAME}=		Evaluate		str('${ACT_APPLICANT}').lower()
	\	${FS_NAME}=			Evaluate		str('${FIRSTNAME}').lower()
	\	${LS_NAME}=			Evaluate		str('${LASTNAME}').lower()
	\ 	${EXEC_STATUS1}=			Run Keyword And Continue On Failure		Run Keyword And Return Status		Should Contain			${ACT_NAME}		${FS_NAME}		Comparision of Applicant Name failed. Expected First name value: ${FIRSTNAME}. Actual Value: ${ACT_NAME}. Please make sure that FD - Credit App Web Service is working fine as the expected record is not shown on Customer Archive page.		values=False
	\ 	${EXEC_STATUS2}=			Run Keyword And Continue On Failure		Run Keyword And Return Status		Should Contain			${ACT_NAME}		${LS_NAME}			Comparision of Applicant Name failed. Expected Last name value: ${LASTNAME}. Actual Value: ${ACT_NAME}. Please make sure that FD - Credit App Web Service is working fine as the expected record is not shown on Customer Archive page.		values=False
	\   ${SCAN}				Evaluate			${SCAN} + 1
	\ 	Run Keyword If		'${EXEC_STATUS1}'=='True' and '${EXEC_STATUS2}'=='True'			Exit For Loop
	\	...		ELSE		Navigate Again To Customer Archive Page
	
	Run Keyword If		'${EXEC_STATUS1}'!='True' or '${EXEC_STATUS2}'!='True' 	Fail		Comparision of Applicant Name failed. Expected value: ${EXP_APPLICANT}. Actual Value: ${ACT_NAME}. Please make sure that FD - Credit App Web Service is working fine as the expected record is not shown on App Status page.
	
	# Credit Score validation
	${DELAY}=		Set Variable	30	#60
	${TIME_FRACTION}=	Set Variable	5
	
	${COUNT}			Evaluate				${DELAY}/${TIME_FRACTION}
	${COUNT}			Convert To Integer		${COUNT}
	${SCAN}				Set Variable			0
	
	Wait Until Keyword Succeeds    60s    3s    Page Should Contain Element    //table[@id='DataGridArchive']/tbody/tr[${ROW}]/td[4]/span    Credit score is not shown on Customer Archive Page.    loglevel=NONE
	:For		${LOOP}		IN RANGE	1			${COUNT} + 1
	\	Sleep				${TIME_FRACTION}s	
	\	Wait Until Page Contains Element		//table[@id='DataGridArchive']/tbody/tr[${ROW}]/td[4]/span		10s
	\	${SCORE1}=		Get Text		//table[@id='DataGridArchive']/tbody/tr[${ROW}]/td[4]/span
	\	${SCORE1}=		Run Keyword If		'${SCORE1}'=='None'		Set Variable		${EMPTY}		ELSE		Set Variable	${SCORE1}
	\	@{SCORE1_LIST}=		Run Keyword If		'${SCORE1}'!= '${EMPTY}'		Split String		${SCORE1}			-		ELSE		Set Variable		${EMPTY}		${EMPTY}
	\	${SCORE1_NAME}=			Get From List		${SCORE1_LIST}		0
	\	Set Test Variable		${SCORE1_NAME}
	\	${CREDIT_SCORE}=		Get From List		${SCORE1_LIST}		1		
	\	Convert To String		${CREDIT_SCORE}
	\	Set Test Variable		${CREDIT_SCORE}
	\	${EXEC_STATUS1}=		Run Keyword And Continue On Failure			Run Keyword If 		'${CREDIT_SCORE}'!='${EMPTY}'	Set Variable	True	ELSE	Set Variable	False
	\   ${SCAN}				Evaluate			${SCAN} + 1
	\ 	Run Keyword If		'${EXEC_STATUS1}'=='True'							Exit For Loop
	\	...		ELSE		Navigate Again To Customer Archive Page
	
	Set Test Variable		${CREDIT_SCORE}
	
	sleep 	2s
	# Run Keyword And Continue On Failure			Run Keyword If 		'${CREDIT_SCORE}'=='${EMPTY}'		Fail		Applicant Credit score is not shown on Customer Archive Page.
	Wait Until Page Contains Element		//table[@id='DataGridArchive']		10s
	Log 		${ROW}		
	${stat2}=		Run Keyword And Return Status 	Get Text		//table[@id='DataGridArchive']/tbody/tr[${ROW}]/td[5]/span
	${SCORE2}=		Run Keyword If 		'${stat2}'=='True'	Get Text		//table[@id='DataGridArchive']/tbody/tr[${ROW}]/td[5]/span
	...				ELSE 		Set Variable 	${EMPTY}
	${SCORE2}=		Run Keyword If		'${SCORE2}'=='None'		Set Variable		${EMPTY}		ELSE		Set Variable	${SCORE2}
	@{SCORE2_LIST}=		Run Keyword If		'${SCORE2}'!= '${EMPTY}'		Split String		${SCORE2}			-		ELSE		Set Variable		${EMPTY}		${EMPTY}
	${SCORE2_NAME}=			Get From List		${SCORE2_LIST}		0
	${CREDIT_SCORE2}=		Get From List		${SCORE2_LIST}		1		
	
	${stat3}=		Run Keyword And Return Status 	Get Text		//table[@id='DataGridArchive']/tbody/tr[${ROW}]/td[6]/span
	${SCORE3}=		Run Keyword If 		'${stat3}'=='True'	Get Text		//table[@id='DataGridArchive']/tbody/tr[${ROW}]/td[6]/span
	...				ELSE 		Set Variable 	${EMPTY}
	${SCORE3}=		Run Keyword If		'${SCORE3}'=='None'		Set Variable		${EMPTY}		ELSE		Set Variable	${SCORE3}
	@{SCORE3_LIST}=		Run Keyword If		'${SCORE3}'!= '${EMPTY}'		Split String		${SCORE3}			-		ELSE		Set Variable		${EMPTY}		${EMPTY}
	${SCORE3_NAME}=			Get From List		${SCORE3_LIST}		0
	${CREDIT_SCORE3}=		Get From List		${SCORE3_LIST}		1		
	
	Set Suite Variable 		${CREDIT_SCORE}
	Set Suite Variable 		${SCORE2}
	Set Suite Variable 		${SCORE3}
	
	# Run Keyword If 		'${CREDIT_SCORE}'!='${EMPTY}' and '${SCORE2}'!='${EMPTY}' and '${SCORE3}'!='${EMPTY}'		Set Required Preferences	Set2
	# ...					ELSE 		Set Required Preferences	Set3
	
Set Required Preferences	[Arguments]		${Set}
	[Documentation]			This keyword sets bureau to Equifax if not already.
	...						Then sets the required prefrences settings.
	...						Pre-requisite: 
	...						Note: 		 
	...						Return Type : 
	...				  		Author  : Manisha Gadekar (Manisha.Gadekar@dealtertrack.com)
	...						Creation Date: 
	...						Update Date\By: 24 Jun 2015

	WriteToFile			${logfile}			Y		Set Required Preferences>>>	
	
	# Switch to required FD dealership to set pref.
	Unselect Frame
	${DEALERID}=		Get From Dictionary		 ${Scenario Setup}		Partner Dealer Id FD
	${DEALERID}=			Get Substring		${DEALERID}		0		6
	${ORG_DEALERSHIP}=		Set Variable		${DEALERID}
	Set Suite Variable		${ORG_DEALERSHIP}
	
	${PD_DEALER_NUM}=	Set Variable 	${DEALERID}	
    Dealer Switch To Dealer			${DEALERID}	

	Navigate To Preferences		PrequalificationsAndRouting	
	
	# Select Equifax If Not Already
	# modify prequal settings
	Log		Modify Prequalifications Criteria Settings		
	Run Keyword If 		'${Set}'=='Set2'	Check Bureau And Modify Prequalifications Criteria Settings		${PREF_CB_SCORE}		${PREF_YRS_JOB}		${PREF_INCOME}		${PREF_BANKRUPT}		${PREF_SATIS}		${PREF_RADIO}
	... 	ELSE		Check Bureau And Modify Prequalifications Criteria Settings		${EMPTY}		${PREF_YRS_JOB}		${EMPTY}		${EMPTY}		${EMPTY}		${EMPTY}
	
 # # # Send Extra Request
	# # # [Documentation]			This keyword sends FD 1.1 CB request. This is used just to have record on Customer archive page.
	# # # ...						Pre-requisite: 
	# # # ...						Note: 		 
	# # # ...						Return Type : 
	# # # ...				  		Author  : Manisha Gadekar (Manisha.Gadekar@dealtertrack.com)
	# # # ...						Creation Date: 
	# # # ...						Update Date\By: 24 Jun 2015

	# # # # setting up input folder
    # # # ${FOLDER_NAME}=    Set Variable    ${RESOURCE}\\${FOLDER_PATH}\\2 CBWS
    # # # Set Suite Variable    ${FOLDER_NAME}
    
	# # # # Set values for all variables
	# # # ${VERSION}			Set Variable 			1.1
	
	# # # # Call kw to send CBWS request
	# # # Call FD Credit Bureau Service		${VERSION}	${FOLDER_NAME}
	
Go For CBWS Request 	[Arguments]		${VERSION}		${FOLDER_NAME}
	[Documentation]			This keyword sends checks for CB input files in given folder matching the format and then sends request.
	...						Pre-requisite: 
	...						Note: 		 
	...						Return Type : 
	...				  		Author  : Manisha Gadekar (Manisha.Gadekar@dealtertrack.com)
	...						Creation Date: 
	...						Update Date\By: 24 Jun 2015
	
	
	${Global_Dict}=			Create Dictionary
	
	@{LIST_FILENAMES}    	List Files In Directory    ${FOLDER_NAME}    *.xml
    ${COUNT_FILES}=    		Get Length    ${LIST_FILENAMES}
	Log 	Total Files: ${COUNT_FILES}	
	Set Suite Variable 		${COUNT_FILES}	
	
	# Get List of App files in folder
	${PATTERN}= 	Catenate	SEPARATOR=		*	CB	*	${VERSION}		*.xml
	${PASSED}=		Run Keyword And Return Status		List Files In Directory      ${FOLDER_NAME}         ${PATTERN}
	
	@{FILENAMES}       Run Keyword If		${PASSED}	List Files In Directory        ${FOLDER_NAME}         ${PATTERN}      
	...						ELSE		Fail		No Credit App file is found in folder ${FOLDER_NAME}
	
	${len}= 	Get Length 		${FILENAMES}
	Log			CBWS files: ${len}	
	
	Run Keyword If 		'${len}'=='${0}'		Fail 	No File is found matching the pattern CB * ${Version} in ${FOLDER_NAME}.
	
	:FOR 	${Item}			IN RANGE 	0 	${len}
	\		${FILENAME}=	Get From List 	${FILENAMES}	${Item}
	\		Set Suite Variable 	${FILENAME}
	\		Log 			${FILENAME}			
	\		${WS_REQUEST_XML}=		Read From File To String 	${FOLDER_NAME}\\${Filename}
	\		Log 	${WS_REQUEST_XML}
	\		${WS_REQUEST_XML}=		Set Variable 		${WS_REQUEST_XML}
	\		# Replace PartnerID and DealerID with required values
	\		${PTR_Id}=				Return Node Value  		${WS_REQUEST_XML}			<PartnerId>					</PartnerId>
	\		${LENDLR_Id}=			Return Node Value  		${WS_REQUEST_XML}			<LenderDealerId>			</LenderDealerId>
	\		${PTRDLR_Id}=			Return Node Value  		${WS_REQUEST_XML}			<PartnerDealerId>			</PartnerDealerId>
	\		${WS_REQUEST_XML}=		Replace String 			${WS_REQUEST_XML}	<PartnerId>${PTR_Id}</PartnerId>		<PartnerId>${PARTNERID}</PartnerId>
	\		${WS_REQUEST_XML}=		Run Keyword If 			'${VERSION}'=='1.0' and '${REPLACE_PARTNER}'=='y'		Replace String 		${WS_REQUEST_XML}	<LenderDealerId>${LENDLR_Id}</LenderDealerId>		<LenderDealerId>${DEALERID}</LenderDealerId>
	\		...						ELSE					Set Variable 		${WS_REQUEST_XML}
	\		${WS_REQUEST_XML}=		Run Keyword If 			'${VERSION}'=='1.1' and '${REPLACE_PARTNER}'=='y'		Replace String 		${WS_REQUEST_XML}	<PartnerDealerId>${PTRDLR_Id}</PartnerDealerId>		<PartnerDealerId>${DEALERID}</PartnerDealerId>
	\		...						ELSE					Set Variable 	${WS_REQUEST_XML}
	\		Log 	${WS_REQUEST_XML}
	\		${FN}=		Set Variable		.//Applicant/FirstName
	\		${LN}=		Set Variable		.//Applicant/LastName
	\		${MN}=		Set Variable		.//Applicant/MiddleInitial
	\		${PASSED}=		Run Keyword And Return Status		XML.Get Element Text		${WS_REQUEST_XML}			${FN}		
	\		${FIRSTNAME}=	Run Keyword If		${PASSED}		XML.Get Element Text		${WS_REQUEST_XML}			${FN}
	\		...				ELSE		XML.Get Element Text		${WS_REQUEST_XML}		.//PrimaryApplicant/FirstName		
	\		${PASSED}=		Run Keyword And Return Status		XML.Get Element Text		${WS_REQUEST_XML}	${LN}		
	\		${LASTNAME}=	Run Keyword If		${PASSED}		XML.Get Element Text		${WS_REQUEST_XML}			${LN}
	\		...				ELSE		XML.Get Element Text		${WS_REQUEST_XML}		.//PrimaryApplicant/LastName
	\		${PASSED}=		Run Keyword And Return Status		XML.Get Element Text		${WS_REQUEST_XML}	${LN}		
	\		${MIDDLENAME}=	Run Keyword If		${PASSED}		XML.Get Element Text		${WS_REQUEST_XML}			${MN}
	\		...				ELSE		XML.Get Element Text		${WS_REQUEST_XML}		.//PrimaryApplicant/MiddleInitial
	\		Set Suite Variable 		${FIRSTNAME}
	\		Set Suite Variable 		${LASTNAME}
	\		Set Suite Variable 		${MIDDLENAME}
	
	\		${LN}=					Set Variable		.//CoApplicant/LastName
	\		${ISCOAPP}=				Run Keyword And Return Status		XML.Get Element Text			${WS_REQUEST_XML}			${LN}
	\		Set Suite Variable 		${ISCOAPP}
	\		${FN}=		Set Variable		.//CoApplicant/FirstName
	\		${LN}=		Set Variable		.//CoApplicant/LastName
	\		${MN}=		Set Variable		.//CoApplicant/MiddleInitial
	\		${COFIRSTNAME}=		Run Keyword If 		${ISCOAPP} 		XML.Get Element Text		${WS_REQUEST_XML}			${FN}
	\		...					ELSE 				Set Variable 	${EMPTY}
	\		${COLASTNAME}=		Run Keyword If 		${ISCOAPP} 		XML.Get Element Text		${WS_REQUEST_XML}			${LN}
	\		...					ELSE 				Set Variable 	${EMPTY}
	\		${COMIDDLENAME}=	Run Keyword If 		${ISCOAPP} 		XML.Get Element Text		${WS_REQUEST_XML}			${MN}
	\		...					ELSE 				Set Variable 	${EMPTY}
	\		Set Suite Variable 		${COFIRSTNAME}
	\		Set Suite Variable 		${COLASTNAME}
	\		Set Suite Variable 		${COMIDDLENAME}
	
	\		Set Suite Variable		${WS_REQUEST_XML}
	\		Send FD Request 		${VERSION}		${PARTNERID}	${DEALERID}		${WS_REQUEST_XML}	${Filename}		${Servicename}	
	\		${PTR_REF}= 			Run Keyword If 		'${RESPONSECODE}'=='200'	Get Element Text		${RESPONSETEXT}			.//PartnerReferenceId
	\		...						ELSE 				Set Variable 		${EMPTY}
	\		Set Suite Variable 		${PTR_REF}
	\		Set To Dictionary		${REF_DICT}			PTR_REF			${PTR_REF}
	\		Set Suite Variable 		${REF_DICT}
	\		Log Dictionary 			${REF_DICT}
	# \		Write To Flat Log File	
	# \		Write Ref To Flat File 	PTR_REF 	${PTR_REF}
	
	\		${Request_Dict}=		Add Details Of Request To Dictionary
	\		Log Dictionary 			${Request_Dict}
	\		Set To Dictionary 		${Request_Dict}		Partner REF		${PTR_REF}
	\		Log Dictionary 			${Request_Dict}
	\		Set To Dictionary		${Global_Dict}		${Item}		${Request_Dict}
	\		Log Dictionary 			${Global_Dict}
	\		Set Suite Variable 		${Global_Dict}
	
Add Details Of Request To Dictionary
	${Request_Dict}= 	Create Dictionary
	
	Set To Dictionary		${Request_Dict}		Environment 	${Environment}
	Set To Dictionary		${Request_Dict}		Version	 		${VERSION}
	Set To Dictionary 		${Request_Dict}		First Name		${FIRSTNAME}
	Set To Dictionary 		${Request_Dict}		Last Name		${LASTNAME}
	Set To Dictionary 		${Request_Dict}		Middle Name		${MIDDLENAME}
	
	Set To Dictionary 		${Request_Dict}		Input Folder	${FOLDER_NAME}
	Set To Dictionary 		${Request_Dict}		Partner ID		${PARTNERID}
	Set To Dictionary 		${Request_Dict}		Dealer ID		${DEALERID}
	Set To Dictionary 		${Request_Dict}		Filename		${FILENAME}
	
	Log 	${ISCOAPP}
	Set To Dictionary 		${Request_Dict}		CoApp First Name	${COFIRSTNAME}
	Set To Dictionary 		${Request_Dict}		CoApp Last Name		${COLASTNAME}
	Set To Dictionary 		${Request_Dict}		CoApp Middle Name	${COMIDDLENAME}
	
	Log Dictionary		${Request_Dict}
	
	[Return]		${Request_Dict}

HC Tear Down	
	${len}=		Get Length 		${Global_Dict}
	
	:FOR 	${I}	IN RANGE 	0	${len}
	\		Set Test Message 	\n---------------	append=yes
	\		Set Test Message 	\nReq: ${I+1}		append=yes
	\		${req_dict}=	Get From Dictionary		${Global_Dict}		${I}
	\		Log Details Dict To Report 		${req_dict}
	\		${stat}=			Run Keyword And Return status 	Get From Dictionary		${req_dict}		Prequal REF
	\		${Prequal REF}=		Run Keyword If 		${stat}		Get From Dictionary		${req_dict}		Prequal REF
	\		...					ELSE 				Set Variable 	${EMPTY}
	\		Set Test Message 	\nPrequal REF: ${Prequal REF}		append=yes
	
	\		${stat}=			Run Keyword And Return status 	Get From Dictionary		${req_dict}		Lead REF
	\		${Lead REF}=		Run Keyword If 		${stat}		Get From Dictionary		${req_dict}		Lead REF
	\		...					ELSE 				Set Variable 	${EMPTY}
	\		Set Test Message 	\nLead REF: ${Lead REF}		append=yes
	
	\		${stat}=			Run Keyword And Return status 	Get From Dictionary		${req_dict}		App REF
	\		${App REF}=			Run Keyword If 		${stat}		Get From Dictionary		${req_dict}		App REF
	\		...					ELSE 				Set Variable 	${EMPTY}
	\		Set Test Message 	\nAPP REF: ${App REF}		append=yes
	
	\		${stat}=			Run Keyword And Return status 	Get From Dictionary		${req_dict}		Partner REF
	\		${Partner REF}=		Run Keyword If 		${stat}		Get From Dictionary		${req_dict}		Partner REF
	\		...					ELSE 				Set Variable 	${EMPTY}
	\		Set Test Message 	\nPartner REF: ${Partner REF}		append=yes
	
	\		${stat}=			Run Keyword And Return status 	Get From Dictionary		${req_dict}		TPP_DT_APP_ID
	\		${TPP_APP_ID}=		Run Keyword If 		${stat}		Get From Dictionary		${req_dict}		TPP_DT_APP_ID
	\		...					ELSE 				Set Variable 	${EMPTY}
	\		Set Test Message 	\nTPP_DT_APP_ID: ${TPP_APP_ID}		append=yes
	
HC Tear Down With Request Name
	Log List 	${Req_Name}
	${len2}=	Get Length 		${Req_Name}
	${len}=		Get Length 		${Global_Dict}
	
	Run Keyword And Ignore Error 	Should Be Equal		${len}	${len2}		Length of dictionaries is not same for ${Req_Name} and ${Global_Dict}
	
	:FOR 	${I}	IN RANGE 	0	${len}
	\		${foldername}=		Get From List 	${Req_Name}		${I}
	\		Set Test Message 	\n---------------	append=yes
	\		Set Test Message 	\nReq: ${I+1} ${foldername}		append=yes
	\		${req_dict}=	Get From Dictionary		${Global_Dict}		${I}
	\		Log Details Dict To Report 		${req_dict}
	\		${stat}=			Run Keyword And Return status 	Get From Dictionary		${req_dict}		Prequal REF
	\		${Prequal REF}=		Run Keyword If 		${stat}		Get From Dictionary		${req_dict}		Prequal REF
	\		...					ELSE 				Set Variable 	${EMPTY}
	\		Set Test Message 	\nPrequal REF: ${Prequal REF}		append=yes
	
	\		${stat}=			Run Keyword And Return status 	Get From Dictionary		${req_dict}		Lead REF
	\		${Lead REF}=		Run Keyword If 		${stat}		Get From Dictionary		${req_dict}		Lead REF
	\		...					ELSE 				Set Variable 	${EMPTY}
	\		Set Test Message 	\nLead REF: ${Lead REF}		append=yes
	
	\		${stat}=			Run Keyword And Return status 	Get From Dictionary		${req_dict}		App REF
	\		${App REF}=			Run Keyword If 		${stat}		Get From Dictionary		${req_dict}		App REF
	\		...					ELSE 				Set Variable 	${EMPTY}
	\		Set Test Message 	\nAPP REF: ${App REF}		append=yes
	
	\		${stat}=			Run Keyword And Return status 	Get From Dictionary		${req_dict}		Partner REF
	\		${Partner REF}=		Run Keyword If 		${stat}		Get From Dictionary		${req_dict}		Partner REF
	\		...					ELSE 				Set Variable 	${EMPTY}
	\		Set Test Message 	\nPartner REF: ${Partner REF}		append=yes
	
	\		${stat}=			Run Keyword And Return status 	Get From Dictionary		${req_dict}		TPP_DT_APP_ID
	\		${TPP_APP_ID}=		Run Keyword If 		${stat}		Get From Dictionary		${req_dict}		TPP_DT_APP_ID
	\		...					ELSE 				Set Variable 	${EMPTY}
	\		Set Test Message 	\nTPP_DT_APP_ID: ${TPP_APP_ID}		append=yes
	
HC Tear Down Chained
	Log Dictionary 		${Chained_Dict}
	${len}=		Get Length 		${Chained_Dict}
	
	Log List 	${Directories}
	
	# ${issvn}=	Run Keyword And Return Status 	List Should Contain Value 	${Directories}		.svn
	
	Remove Values From List 	${Directories}		.svn
	Log 		${Directories}	
	${len2}= 	Get length 		${Directories}
	
	Run Keyword And Ignore Error 	Should Be Equal 	${len}		${len2}		Length of dictionaries is not same ${Chained_Dict} and ${Directories}.
	
	:FOR 	${I}	IN RANGE 	0	${len}	
	\		${folder_name}=		Get From List 		${Directories}		${I}
	\		Set Test Message 	\n--------------- 	append=yes
	\		Set Test Message 	\nSet: ${I+1} ${folder_name}		append=yes
	\		${dict2}=	Get From Dictionary		${Chained_Dict}		${I}
	\		Log Details Of Inner Dict 		${dict2}
	
Write Data To Global Dict 		
	
	${Request_Dict}=		Add Details Of Request To Dictionary
	Log Dictionary 			${Request_Dict}
	Set To Dictionary 		${Request_Dict}		Prequal REF		${PREQUAL_REF}
	Set To Dictionary 		${Request_Dict}		Lead REF		${LEAD_REF}
	Set To Dictionary 		${Request_Dict}		App REF			${APP_REF}
	
	Log Dictionary 			${Request_Dict}
		
	[Return] 	${Request_Dict}
	
Log Details Of Inner Dict 		[Arguments]		${dict2}	
	${len2}=	Get Length 		${dict2}
	
	:FOR 	${I}	IN RANGE 	0	${len2}
	\		Set Test Message 	\n---------------	append=yes
	\		Set Test Message 	\nReq: ${I+1}		append=yes
	\		${req_dict}=	Get From Dictionary		${dict2}		${I}
	\		Log Details Dict To Report 		${req_dict}
	
	\		${stat}=			Run Keyword And Return status 	Get From Dictionary		${req_dict}		Prequal REF
	\		${Prequal REF}=		Run Keyword If 		${stat}		Get From Dictionary		${req_dict}		Prequal REF
	\		...					ELSE 				Set Variable 	${EMPTY}
	\		Set Test Message 	\nPrequal REF: ${Prequal REF}		append=yes
	
	\		${stat}=			Run Keyword And Return status 	Get From Dictionary		${req_dict}		Lead REF
	\		${Lead REF}=		Run Keyword If 		${stat}		Get From Dictionary		${req_dict}		Lead REF
	\		...					ELSE 				Set Variable 	${EMPTY}
	\		Set Test Message 	\nLead REF: ${Lead REF}		append=yes
	
	\		${stat}=			Run Keyword And Return status 	Get From Dictionary		${req_dict}		App REF
	\		${App REF}=			Run Keyword If 		${stat}		Get From Dictionary		${req_dict}		App REF
	\		...					ELSE 				Set Variable 	${EMPTY}
	\		Set Test Message 	\nAPP REF: ${App REF}		append=yes
	
	
	
Log Details Dict To Report 		[Arguments]		${req_dict}
	${length}=		Get Length 		${req_dict}
	
	${Env}=		Get From Dictionary		${req_dict}		Environment
	Set Test Message 	\nEnvironment: ${Env}		append=yes
	
	${Ver}=		Get From Dictionary		${req_dict}		Version
	Set Test Message 	\nVersion: ${Ver}		append=yes
	
	${Partner ID}=		Get From Dictionary		${req_dict}		Partner ID
	Set Test Message 	\nPartner ID: ${Partner ID}		append=yes
	
	${Dealer ID}=		Get From Dictionary		${req_dict}		Dealer ID
	Set Test Message 	\nDealer ID: ${Dealer ID}		append=yes
	
	${Input Folder}=	Get From Dictionary		${req_dict}		Input Folder
	Set Test Message 	\nInput Folder: ${Input Folder}		append=yes
	
	${File_name}=	Get From Dictionary		${req_dict}		Filename
	Set Test Message 	\nFile name: ${File_name}		append=yes
	
	${LAST NAME}=		Get From Dictionary		${req_dict}		Last Name
	Set Test Message 	\nLast Name: ${LAST NAME}		append=yes
	
	${First Name}=		Get From Dictionary		${req_dict}		First Name
	Set Test Message 	\nFirst Name: ${First Name}		append=yes
	
	# ${CO LAST NAME}=	Run Keyword If 		${ISCOAPP}	Get From Dictionary		${req_dict}		CoApp Last Name
	# Run Keyword If 		${ISCOAPP}		Set Test Message 	\nCo-App Last Name: ${CO LAST NAME}		append=yes
	
	# ${CO First NAME}=	Run Keyword If 		${ISCOAPP}	Get From Dictionary		${req_dict}		CoApp First Name
	# Run Keyword If 		${ISCOAPP}		Set Test Message 	\nCo-App First Name: ${CO First NAME}		append=yes
	
	${stat}=			Run Keyword And Return Status 		Get From Dictionary		${req_dict}		CoApp Last Name
	${CO LAST NAME}=	Run Keyword If 		${stat}			Get From Dictionary		${req_dict}		CoApp Last Name
	...					ELSE 				Set Variable 			${EMPTY}
	Run Keyword If 		${stat}				Set Test Message 		\nCo-App Last Name: ${CO LAST NAME}		append=yes
	
	${stat}=			Run Keyword And Return Status 		Get From Dictionary		${req_dict}		CoApp First Name
	${CO First NAME}=	Run Keyword If 		${stat}			Get From Dictionary		${req_dict}		CoApp First Name
	...					ELSE 			Set Variable 		${EMPTY}
	Run Keyword If 		${stat}			Set Test Message 	\nCo-App First Name: ${CO First NAME}		append=yes
	
	
Write To Flat Log File
	
	Append To File		${Logs_File_Path}/${Flat_Log_File}		${Environment}:
	Append To File		${Logs_File_Path}/${Flat_Log_File}		${SPACE}	
	Append To File		${Logs_File_Path}/${Flat_Log_File}		${FD_SERVICE}:${SPACE}
	Append To File		${Logs_File_Path}/${Flat_Log_File}		${FOLDER_NAME}:${SPACE}
	Append To File		${Logs_File_Path}/${Flat_Log_File}		${Filename}:${SPACE}
	Append To File		${Logs_File_Path}/${Flat_Log_File}		${PARTNERID}-${DEALERID}:${SPACE}
	Append To File		${Logs_File_Path}/${Flat_Log_File}		${LASTNAME}, ${FIRSTNAME}:${SPACE}
	
Write Ref To Flat File 	[Arguments]		${REF_Name} 	${REF_ID}
	Append To File		${Logs_File_Path}/${Flat_Log_File}		${REF_Name} = ${REF_ID}
	
# Dealer Switch To Dealer 	[Arguments]	${DEALER_NUM}	
	# [Documentation]			This keyword switches dealership to given dealer id.
	# ...						Pre-requisite: 
	# ...						Note: 		 
	# ...						Return Type : 
	# ...				  		Author  : Manisha Gadekar (Manisha.Gadekar@dealtertrack.com)
	# ...						Creation Date: 
	# ...						Update Date\By: 24 Jun 2015

	# Unselect Frame
	# ${FRAME_STATUS}			Run Keyword And Return Status		Wait Until Keyword Succeeds   30s	1s    Page Should Contain Element 	iFrm
	# Select Frame			iFrm
	# ${FRAME_STATUS}			Run Keyword And Return Status		Wait Until Keyword Succeeds   30s	1s    Page Should Contain Element 	nav
	# Select Frame			nav
	# ${ELEMENT_STATUS}		Run Keyword And Return Status		Wait Until Keyword Succeeds   30s	1s    Page Should Contain Element 	//a[@href='DTAdminCommon/Dealer/DlrSwitch/DealerSearch.aspx']
	
	# Run Keyword If			${ELEMENT_STATUS}==True				Press Key					  //a[@href='DTAdminCommon/Dealer/DlrSwitch/DealerSearch.aspx']			\\13
	# ...						ELSE								Fail						  Switch Link Failed To Display So Exiting Test
	# Unselect Frame
	
	# ${FRAME_STATUS}			Run Keyword And Return Status		Wait Until Keyword Succeeds   30s	1s    Page Should Contain Element 	iFrm
	# Select Frame			iFrm
	# ${FRAME_STATUS}			Run Keyword And Return Status		Wait Until Keyword Succeeds   30s	1s    Page Should Contain Element 	main
	# Select Frame			main
	# ${PAGE_STATUS}			Run Keyword And Return Status		Wait Until Keyword Succeeds   30s	5s    Page Should Contain Element 	//input[@id='BtnSwitch']
	# Log						Switch Page Display Status:\t${PAGE_STATUS}	
	# ${EXEC_STATUS}			Run Keyword And Return Status		Wait Until Keyword Succeeds                     60s          10s               Page Should Contain Element 		//input[@id='TxtSwitchDealer']		Dealer Switch textbox is not found.
	
	# Input Text				//input[@id='TxtSwitchDealer']					${DEALER_NUM}
	# sleep 					2s
	# Wait Until Keyword Succeeds   30s	1s    Page Should Contain Element 	//input[@name='BtnSwitch']	 	Switch button is not found.		loglevel=None
	# Press Key				//input[@name='BtnSwitch']					\\13
	# sleep					7s
	
	# Unselect Frame
	
Dealer Switch To Dealer 	[Arguments]	${DEALER_NUM}	
	[Documentation]			This keyword switches dealership to given dealer id.
	...						Pre-requisite: 
	...						Note: 		 
	...						Return Type : 
	...				  		Author  : Manisha Gadekar (Manisha.Gadekar@dealtertrack.com)
	...						Creation Date: 
	...						Update Date\By: 24 Jun 2015

	WriteToFile			${logfile}				Y					Dealer Switch To Dealer>>>${DEALER_NUM}
	
	Unselect Frame
	# ${FRAME_STATUS}			Run Keyword And Return Status		Wait Until Keyword Succeeds   30s	1s    Page Should Contain Element 	iFrm
	# Select Frame			iFrm
	# ${FRAME_STATUS}			Run Keyword And Return Status		Wait Until Keyword Succeeds   30s	1s    Page Should Contain Element 	nav
	# Select Frame			nav
	# ${ELEMENT_STATUS}		Run Keyword And Return Status		Wait Until Keyword Succeeds   30s	1s    Page Should Contain Element 	//a[@href='DTAdminCommon/Dealer/DlrSwitch/DealerSearch.aspx']
	
	Wait Until Keyword Succeeds   240s	3s   	Page Should Contain Element 	//iframe[@id='iFrm']	Frame is not loaded on FD Preferences page.
	Wait Until Page Contains Element            //iframe[@id='iFrm']
	Select Frame                                iFrm
	Wait Until Page Contains Element            //frame[@name='nav']
	Select Frame                                nav
	
	Wait Until Keyword Succeeds   240s	3s   	Page Should Contain Element 	 //a[@href='DTAdminCommon/Dealer/DlrSwitch/DealerSearch.aspx']		 Switch Link Failed To Display So Exiting Test		loglevel=None
	Press Key					  //a[@href='DTAdminCommon/Dealer/DlrSwitch/DealerSearch.aspx']			\\13
	
	# Run Keyword If			${ELEMENT_STATUS}==True				Press Key					  //a[@href='DTAdminCommon/Dealer/DlrSwitch/DealerSearch.aspx']			\\13
	# ...						ELSE								Fail						  Switch Link Failed To Display So Exiting Test
	Unselect Frame
	
	# ${FRAME_STATUS}			Run Keyword And Return Status		Wait Until Keyword Succeeds   30s	1s    Page Should Contain Element 	iFrm
	# Select Frame			iFrm
	# ${FRAME_STATUS}			Run Keyword And Return Status		Wait Until Keyword Succeeds   30s	1s    Page Should Contain Element 	main
	# Select Frame			main
	# ${PAGE_STATUS}			Run Keyword And Return Status		Wait Until Keyword Succeeds   30s	5s    Page Should Contain Element 	//input[@id='BtnSwitch']
	# Log						Switch Page Display Status:\t${PAGE_STATUS}	
	# ${EXEC_STATUS}			Run Keyword And Return Status		Wait Until Keyword Succeeds                     60s          10s               Page Should Contain Element 		//input[@id='TxtSwitchDealer']		Dealer Switch textbox is not found.
	
	Wait Until Keyword Succeeds   240s	3s   	Page Should Contain Element 	//iframe[@id='iFrm']	Frame is not loaded on FD Preferences page.
	Wait Until Page Contains Element            //iframe[@id='iFrm']
	Select Frame                                iFrm
	Wait Until Page Contains Element            //frame[@name='main']
	Select Frame                                main
	
	Wait Until Keyword Succeeds   240s	3s   	Page Should Contain Element 	 //input[@id='TxtSwitchDealer']		 Switch textbox Failed To Display So Exiting Test		loglevel=None
	
	Input Text				//input[@id='TxtSwitchDealer']					${DEALER_NUM}
	sleep 					2s
	Wait Until Keyword Succeeds   30s	1s    Page Should Contain Element 		//input[@name='BtnSwitch']	 	Switch button is not found.		loglevel=None
	Press Key				//input[@name='BtnSwitch']					\\13
	sleep					10s
	
	Unselect Frame
	
Check Bureau And Modify Prequalifications Criteria Settings
	[Arguments]		${NEW_CR_SCORE}		${NEW_YRS_JOB}	${NEW_ANN_INCOME}		${NEW_BANKRUPT}		${NEW_TOT_SAT}		${NEW_ONLY_RUN}
	[Documentation]			This keyword checks which bureas is set by default. If not Equifax then sets it to Equifax.
	...						Also sets Prequalification settings
	...						Pre-requisite: 
	...						Note: 		 
	...						Return Type : 
	...				  		Author  : Manisha Gadekar (Manisha.Gadekar@dealtertrack.com)
	...						Creation Date: 
	...						Update Date\By: 24 Jun 2015

	# # # Wait Until Keyword Succeeds   240s	3s   	Page Should Contain Element 	//iframe[@id='iFrm']	Frame is not loaded on FD Preferences page.
	# # # Wait Until Page Contains Element            //iframe[@id='iFrm']
	# # # Select Frame                                iFrm
	# # # Wait Until Page Contains Element            //frame[@name='main']
	# # # Select Frame                                main
	
	# # # # Click on Edit button
	# # # Wait Until Keyword Succeeds       240s      3s         Page Should Contain Element             //a[@href='/FinanceDriver/DealerPartnerIntegration/PrequalificationAndRouting?IsEditMode=True'] 		Edit button is not found.	loglevel=NONE		
	# # # Press Key									//a[@href='/FinanceDriver/DealerPartnerIntegration/PrequalificationAndRouting?IsEditMode=True']					\\13

	# wait until page is loaded
	Wait Until Keyword Succeeds       240s      3s          Page Should Contain Element             //input[@id='SavePrequalificationAndRouting'] 		Page 'Leads Partner Integration | Prequalification & Routing' is not loded correctly.		loglevel=NONE	
	
	
	################
	# Set Experian
	Page Should Contain Element 	//input[@id='bureauprovider1']		Radio button for Experian is not found. Please check if Bureau Sodes are set for the dealership.
	
	${ISCHECKED1}=		Selenium2Library.Get Element Attribute		//input[@id='bureauprovider1']@checked 	 
	sleep 	1s
	Run Keyword If		'${ISCHECKED1}'!='true'		Select A Radio Button		bureauprovider1
	sleep 	1s
	
	#############
	# change credit score
	Wait Until Keyword Succeeds       240s      3s          Page Should Contain Element             //input[@id='CreditScoreTierRules_0__RuleCriteriaValue']  	 	'Credit Score' text box is not found.		loglevel=NONE	
	Wait Until Element is Enabled		//input[@id='CreditScoreTierRules_0__RuleCriteriaValue']		10
	# Input Text		//input[@id='CreditScoreTierRules_0__RuleCriteriaValue']		${NEW_CR_SCORE}
	
	${status_enabled}=			Run Keyword And Return Status 		Input Text		//input[@id='CreditScoreTierRules_0__RuleCriteriaValue']		${NEW_CR_SCORE}
	
	Run Keyword If 		'${status_enabled}'!='True' 	Remove Credit Score Ranges		${NEW_CR_SCORE}
	
	# change years at job
	Wait Until Keyword Succeeds       240s      3s          Page Should Contain Element             //input[@id='NonCreditScoreRules_0__RuleCriteriaValue']  	 	'Years at Currect Job' text box is not found.		loglevel=NONE	
	Wait Until Element is Enabled		//input[@id='NonCreditScoreRules_0__RuleCriteriaValue']		10
	Input Text		//input[@id='NonCreditScoreRules_0__RuleCriteriaValue']		${NEW_YRS_JOB}
	
	# change annual income
	Wait Until Keyword Succeeds       240s      3s          Page Should Contain Element             //input[@id='NonCreditScoreRules_1__RuleCriteriaValue']  	 	'Annual Income' text box is not found.		loglevel=NONE	
	Wait Until Element is Enabled		//input[@id='NonCreditScoreRules_1__RuleCriteriaValue']		10
	Input Text		//input[@id='NonCreditScoreRules_1__RuleCriteriaValue']	 	${NEW_ANN_INCOME}
	
	# change total banruptcies
	Wait Until Keyword Succeeds       240s      3s          Page Should Contain Element             //input[@id='NonCreditScoreRules_2__RuleCriteriaValue']  	 	'Total Bankruptcies' text box is not found.		loglevel=NONE	
	Wait Until Element is Enabled		//input[@id='NonCreditScoreRules_2__RuleCriteriaValue']		10
	Input Text		//input[@id='NonCreditScoreRules_2__RuleCriteriaValue']		${NEW_BANKRUPT}
	
	# change total open sat
	Wait Until Keyword Succeeds       240s      3s          Page Should Contain Element             //input[@id='NonCreditScoreRules_3__RuleCriteriaValue']  	 	'Total Open Satisfactory Tradelines' text box is not found.		loglevel=NONE	
	Wait Until Element is Enabled		//input[@id='NonCreditScoreRules_3__RuleCriteriaValue']		10
	Input Text		//input[@id='NonCreditScoreRules_3__RuleCriteriaValue']		${NEW_TOT_SAT}
	
	# toggle checkbox
	Run Keyword If		'${NEW_ONLY_RUN}'=='Select'		Select/Unselect Checkbox		IsApplyPrimaryRule		Select	
	... 	ELSE IF		'${NEW_ONLY_RUN}'=='Unselect'		Select/Unselect Checkbox		IsApplyPrimaryRule		Unselect	
	
	sleep		2s
	Press Key		//input[@id='SavePrequalificationAndRouting']		\\13

	Wait Until Keyword Succeeds               180s                   3s                   Page Should Contain Element             //*[text()='Leads Partner Integration | Edit Setup'] 			loglevel=NONE	
	Unselect Frame
	
	
Go For Prequalification Request 		[Arguments] 	${VERSION}		${FOLDER_NAME}	
	[Documentation]			This keyword sends checks for Prequal input files in given folder matching the format and then sends request.
	...						Pre-requisite: 
	...						Note: 		 
	...						Return Type : 
	...				  		Author  : Manisha Gadekar (Manisha.Gadekar@dealtertrack.com)
	...						Creation Date: 
	...						Update Date\By: 24 Jun 2015
	Log 	${FOLDER_NAME}
	Log 	${FOLDER_NAME}
	${Global_Dict}=		Create Dictionary
	
	@{LIST_FILENAMES}    List Files In Directory    ${FOLDER_NAME}    *.xml
    ${COUNT_FILES}=    Get Length    ${LIST_FILENAMES}
	Log 	Total Files: ${COUNT_FILES}	
	
	# Get List of App files in folder
	${PATTERN}= 	Catenate	SEPARATOR=		*	2	*	Prequal		*.xml
	${PASSED}=		Run Keyword And Return Status		List Files In Directory      ${FOLDER_NAME}         ${PATTERN}
	
	@{FILENAMES}       Run Keyword If		${PASSED}	List Files In Directory        ${FOLDER_NAME}         ${PATTERN}      
	...						ELSE		Fail		No Prequal file is found in folder ${FOLDER_NAME}
	
	${len}= 	Get Length 		${FILENAMES}
	Log			Prequal files: ${len}	
	
	Run Keyword If 		'${len}'=='${0}'		Fail 	No File is found matching the pattern 2 * Prequal in ${FOLDER_NAME}.
	
	:FOR 	${Item}			IN RANGE 	0 	${len}
	\		${FILENAME}=	Get From List 	${FILENAMES}	${Item}
	\		Set Suite Variable 			${FILENAME}
	\		Log 			${FILENAME}			
	\		${WS_REQUEST_XML}=		Read From File To String 	${FOLDER_NAME}\\${Filename}
	\		Log 	${WS_REQUEST_XML}
	\		${WS_REQUEST_XML}=		Set Variable 		${WS_REQUEST_XML}
	\		# Replace PartnerID and DealerID with required values
	\		${PTR_Id}=				Return Node Value  		${WS_REQUEST_XML}			<PartnerId>			</PartnerId>
	\		${PTRDLR_Id}=			Return Node Value  		${WS_REQUEST_XML}			<a:string>			</a:string>
	\		${WS_REQUEST_XML}=		Run Keyword If 			'${REPLACE_PARTNER}'=='y'	Replace String 			${WS_REQUEST_XML}		<PartnerId>${PTR_Id}</PartnerId>		<PartnerId>${PARTNERID}</PartnerId>
	\		...						ELSE 					Set Variable 				${WS_REQUEST_XML}
	\		${WS_REQUEST_XML}=		Run Keyword If 			'${REPLACE_PARTNER}'=='y'	Replace String 			${WS_REQUEST_XML}		<a:string>${PTRDLR_Id}</a:string>		<a:string>${DEALERID}</a:string>
	\		...						ELSE 					Set Variable 				${WS_REQUEST_XML}
	\		Log 	${WS_REQUEST_XML}
	\		${FN}=		Set Variable		.//Applicant/FirstName
	\		${LN}=		Set Variable		.//Applicant/LastName
	\		${MN}=		Set Variable		.//Applicant/MiddleInitial
	\		${PASSED}=		Run Keyword And Return Status		XML.Get Element Text		${WS_REQUEST_XML}			${FN}		
	\		${FIRSTNAME}=	Run Keyword If		${PASSED}		XML.Get Element Text		${WS_REQUEST_XML}			${FN}
	\		...				ELSE		XML.Get Element Text		${WS_REQUEST_XML}		.//PrimaryApplicant/FirstName		
	\		${PASSED}=		Run Keyword And Return Status		XML.Get Element Text		${WS_REQUEST_XML}	${LN}		
	\		${LASTNAME}=	Run Keyword If		${PASSED}		XML.Get Element Text		${WS_REQUEST_XML}			${LN}
	\		...				ELSE		XML.Get Element Text		${WS_REQUEST_XML}		.//PrimaryApplicant/LastName
	\		${PASSED}=		Run Keyword And Return Status		XML.Get Element Text		${WS_REQUEST_XML}	${LN}		
	\		${MIDDLENAME}=	Run Keyword If		${PASSED}		XML.Get Element Text		${WS_REQUEST_XML}			${MN}
	\		...				ELSE		XML.Get Element Text		${WS_REQUEST_XML}		.//PrimaryApplicant/MiddleInitial
	\		Set Suite Variable 		${FIRSTNAME}
	\		Set Suite Variable 		${LASTNAME}
	\		Set Suite Variable 		${MIDDLENAME}
	\		Set Suite Variable		${WS_REQUEST_XML}
	\		Send FD Request 		${VERSION}		${PARTNERID}	${DEALERID}		${WS_REQUEST_XML}	${Filename}		${Servicename}	
	\		${PREQUAL_REF}= 		Run Keyword If 		'${RESPONSECODE}'=='200'	Get Element Text		${RESPONSETEXT}		.//PrequalificationReferenceNumber
	\		...						ELSE 				Set Variable 		${EMPTY}
	\		Set Suite Variable 		${PREQUAL_REF}
	\		Set To Dictionary		${REF_DICT}			PREQUAL_REF			${PREQUAL_REF}
	\		Set Suite Variable 		${REF_DICT}
	\		Log Dictionary 			${REF_DICT}	
	
	\		${LN}=					Set Variable		.//CoApplicant/ApplicantInfo/LastName
	\		${ISCOAPP}=				Run Keyword And Return Status		XML.Get Element Text		${WS_REQUEST_XML}			${LN}
	\		Set Suite Variable 		${ISCOAPP}
	\		${FN}=		Set Variable		.//CoApplicant/ApplicantInfo/FirstName
	\		${LN}=		Set Variable		.//CoApplicant/ApplicantInfo/LastName
	\		${MN}=		Set Variable		.//CoApplicant/ApplicantInfo/MiddleInitial
	\		${COFIRSTNAME}=		Run Keyword If 		${ISCOAPP} 		XML.Get Element Text		${WS_REQUEST_XML}			${FN}
	\		...						ELSE		Set Variable		${EMPTY}
	\		${COLASTNAME}=		Run Keyword If 		${ISCOAPP} 		XML.Get Element Text		${WS_REQUEST_XML}			${LN}
	\		...						ELSE		Set Variable		${EMPTY}
	\		${COMIDDLENAME}=	Run Keyword If 		${ISCOAPP} 		XML.Get Element Text		${WS_REQUEST_XML}			${MN}
	\		...						ELSE		Set Variable		${EMPTY}
	
	\		Set Suite Variable 		${COFIRSTNAME}
	\		Set Suite Variable 		${COLASTNAME}
	\		Set Suite Variable 		${COMIDDLENAME}

	
	\		${Request_Dict}=		Add Details Of Request To Dictionary
	\		Log Dictionary 			${Request_Dict}
	\		Set To Dictionary 		${Request_Dict}		Prequal REF		${PREQUAL_REF}
	\		Log Dictionary 			${Request_Dict}
	\		Set To Dictionary		${Global_Dict}		${Item}		${Request_Dict}
	\		Log Dictionary 			${Global_Dict}
	\		Set Suite Variable 		${Global_Dict}
		

	
Go For Lead Request 	[Arguments]		${VERSION}		${FOLDER_NAME}
	[Documentation]			This keyword sends checks for Lead input files in given folder matching the format and then sends request.
	...						Pre-requisite: 
	...						Note: 		 
	...						Return Type : 
	...				  		Author  : Manisha Gadekar (Manisha.Gadekar@dealtertrack.com)
	...						Creation Date: 
	...						Update Date\By: 24 Jun 2015	
	
	# ${Global_Dict}=		Create Dictionary
	# Set Suite Variable 	${Global_Dict}
	
	@{LIST_FILENAMES}    List Files In Directory    ${FOLDER_NAME}    *.xml
    ${COUNT_FILES}=    Get Length    ${LIST_FILENAMES}
	Log 	Total Files: ${COUNT_FILES}	
	
	# Get List of Lead files in folder
	${PATTERN}= 	Catenate	SEPARATOR=		*	3	*	Lead		*.xml
	${PASSED}=		Run Keyword And Return Status		List Files In Directory      ${FOLDER_NAME}         ${PATTERN}
	
	@{FILENAMES}       Run Keyword If		${PASSED}	List Files In Directory        ${FOLDER_NAME}         ${PATTERN}      
	...						ELSE		Fail		No Prequal file is found in folder ${FOLDER_NAME}
	
	${len}= 	Get Length 		${FILENAMES}
	Log			Lead files: ${len}	
	
	Run Keyword If 		'${len}'=='${0}'		Fail 	No File is found matching the pattern 3 * Lead in ${FOLDER_NAME}.
	
	:FOR 	${Item}			IN RANGE 	0 	${len}
	\		${FILENAME}=	Get From List 	${FILENAMES}	${Item}
	\		Set Suite Variable 			${FILENAME}
	\		Log 			${FILENAME}			
	\		${WS_REQUEST_XML}=		Read From File To String 	${FOLDER_NAME}\\${Filename}
	\		Log 	${WS_REQUEST_XML}
	\		${WS_REQUEST_XML}=		Set Variable 		${WS_REQUEST_XML}
	\		# Replace PartnerID and DealerID with required values
	\		${PTR_Id}=				Return Node Value  		${WS_REQUEST_XML}			<PartnerId>				</PartnerId>
	\		${PTRDLR_Id}=			Return Node Value  		${WS_REQUEST_XML}			<PartnerDealerId>		</PartnerDealerId>
	\		${WS_REQUEST_XML}=		Run Keyword If 			'${REPLACE_PARTNER}'=='y'	Replace String 			${WS_REQUEST_XML}		<PartnerId>${PTR_Id}</PartnerId>		<PartnerId>${PARTNERID}</PartnerId>
	\		...						ELSE 					Set Variable 				${WS_REQUEST_XML}
	\		${WS_REQUEST_XML}=		Run Keyword If 			'${REPLACE_PARTNER}'=='y'	Replace String 			${WS_REQUEST_XML}		<PartnerDealerId>${PTRDLR_Id}</PartnerDealerId>		<PartnerDealerId>${DEALERID}</PartnerDealerId>
	\		...						ELSE 					Set Variable 				${WS_REQUEST_XML}
	\		Log 	${WS_REQUEST_XML}
	\		${FN}=		Set Variable		.//PrimaryApplicant/FirstName
	\		${LN}=		Set Variable		.//PrimaryApplicant/LastName
	\		${MN}=		Set Variable		.//PrimaryApplicant/MiddleInitial
	\		${FIRSTNAME}=	XML.Get Element Text		${WS_REQUEST_XML}			${FN}
	\		${LASTNAME}=	XML.Get Element Text		${WS_REQUEST_XML}			${LN}
	\		${MIDDLENAME}=	XML.Get Element Text		${WS_REQUEST_XML}			${MN}
	\		Set Suite Variable 		${FIRSTNAME}
	\		Set Suite Variable 		${LASTNAME}
	\		Set Suite Variable 		${MIDDLENAME}
	\		Set Suite Variable		${WS_REQUEST_XML}
	\		Send FD Request 		${VERSION}		${PARTNERID}	${DEALERID}		${WS_REQUEST_XML}	${Filename}		${Servicename}	
	\		${LEAD_REF}= 			Run Keyword If 		'${RESPONSECODE}'=='200'	Get Element Text		${RESPONSETEXT}		.//LeadReferenceNumber
	\		...						ELSE 				Set Variable 		${EMPTY}
	\		Set Suite Variable 		${LEAD_REF}
	\		Set To Dictionary		${REF_DICT}			LEAD_REF			${LEAD_REF}
	\		Set Suite Variable 		${REF_DICT}
	\		Log Dictionary 			${REF_DICT}

	\		${LN}=					Set Variable		.//CoApplicant/ApplicantInfo/LastName
	\		${ISCOAPP}=				Run Keyword And Return Status		XML.Get Element Text		${WS_REQUEST_XML}			${LN}
	\		Set Suite Variable 		${ISCOAPP}
	\		${FN}=		Set Variable		.//CoApplicant/ApplicantInfo/FirstName
	\		${LN}=		Set Variable		.//CoApplicant/ApplicantInfo/LastName
	\		${MN}=		Set Variable		.//CoApplicant/ApplicantInfo/MiddleInitial
	\		${COFIRSTNAME}=		Run Keyword If 		${ISCOAPP} 		XML.Get Element Text		${WS_REQUEST_XML}			${FN}
	\		...						ELSE		Set Variable		${EMPTY}
	\		${COLASTNAME}=		Run Keyword If 		${ISCOAPP} 		XML.Get Element Text		${WS_REQUEST_XML}			${LN}
	\		...						ELSE		Set Variable		${EMPTY}
	\		${COMIDDLENAME}=	Run Keyword If 		${ISCOAPP} 		XML.Get Element Text		${WS_REQUEST_XML}			${MN}
	\		...						ELSE		Set Variable		${EMPTY}
	
	\		Set Suite Variable 		${COFIRSTNAME}
	\		Set Suite Variable 		${COLASTNAME}
	\		Set Suite Variable 		${COMIDDLENAME}

	\		${Request_Dict}=		Add Details Of Request To Dictionary
	\		Log Dictionary 			${Request_Dict}
	\		Set To Dictionary 		${Request_Dict}		Lead REF		${LEAD_REF}
	\		Log Dictionary 			${Request_Dict}
	\		Set To Dictionary		${Global_Dict}		${Item}		${Request_Dict}
	\		Log Dictionary 			${Global_Dict}
	\		Set Suite Variable 		${Global_Dict}
	
	
	
Go For Credit App Request 		[Arguments]		${VERSION}		${FOLDER_NAME}		${IS_Compliance}
	[Documentation]			This keyword sends checks for Credit App input files in given folder matching the format and then sends request.
	...						Pre-requisite: 
	...						Note: 		 
	...						Return Type : 
	...				  		Author  : Manisha Gadekar (Manisha.Gadekar@dealtertrack.com)
	...						Creation Date: 
	...						Update Date\By: 24 Jun 2015
	
	${Global_Dict}=			Create Dictionary
	
	${FirstNameDict}		Create Dictionary
	${LastNameDict}			Create Dictionary
	${MidNameDict}			Create Dictionary
	${COFirstNameDict}		Create Dictionary
	${COLastNameDict}		Create Dictionary
	${COMidNameDict}		Create Dictionary
	
	@{LIST_FILENAMES}    List Files In Directory    ${FOLDER_NAME}    *.xml
    ${COUNT_FILES}=    Get Length    ${LIST_FILENAMES}
	Log 	Total Files: ${COUNT_FILES}	
	Set Suite Variable 		${COUNT_FILES}
	
	# Get List of App files in folder
	${PATTERN}= 	Catenate	SEPARATOR=		*	4	*	App		*.xml
	${PASSED}=		Run Keyword And Return Status		List Files In Directory      ${FOLDER_NAME}         ${PATTERN}
	
	@{FILENAMES}       Run Keyword If		${PASSED}	List Files In Directory        ${FOLDER_NAME}         ${PATTERN}      
	...						ELSE		Fail		No Prequal file is found in folder ${FOLDER_NAME}
	
	${len}= 	Get Length 		${FILENAMES}
	Log			App files: ${len}	
	
	${No_Files}= 	Set Variable 	${len}
	Set Suite Variable 		${No_Files}
	
	Run Keyword If 		'${len}'=='${0}'		Fail 	No File is found matching the pattern 4 * App in ${FOLDER_NAME}.
	
	:FOR 	${Item}			IN RANGE 		0 		${len}
	\		${FILENAME}=	Get From List 	${FILENAMES}	${Item}
	\		Log 			${FILENAME}		
	\		Set Suite Variable 			${FILENAME}	
	\		${WS_REQUEST_XML}=		Read From File To String 	${FOLDER_NAME}\\${Filename}
	\		Log 	${WS_REQUEST_XML}
	\		${WS_REQUEST_XML}=		Convert To String 	${WS_REQUEST_XML}
	\		# Replace PartnerID and DealerID with required values
	\		${PTR_Id}=				Return Node Value  		${WS_REQUEST_XML}			<PartnerId>				</PartnerId>
	\		${PTRDLR_Id}=			Return Node Value  		${WS_REQUEST_XML}			<PartnerDealerId>		</PartnerDealerId>
	\		${WS_REQUEST_XML}=		Run Keyword If 			'${REPLACE_PARTNER}'=='y'	Replace String 			${WS_REQUEST_XML}		<PartnerId>${PTR_Id}</PartnerId>		<PartnerId>${PARTNERID}</PartnerId>
	\		...						ELSE 					Set Variable 				${WS_REQUEST_XML}
	\		${WS_REQUEST_XML}=		Run Keyword If 			'${REPLACE_PARTNER}'=='y'	Replace String 			${WS_REQUEST_XML}		<PartnerDealerId>${PTRDLR_Id}</PartnerDealerId>		<PartnerDealerId>${DEALERID}</PartnerDealerId>
	\		...						ELSE 					Set Variable 				${WS_REQUEST_XML}
	\		######## Compliance ##########
	\		${LN}=					Set Variable		.//PrimaryApplicant/ApplicantInfo/LastName
	\		${LASTNAME}=			XML.Get Element Text		${WS_REQUEST_XML}			${LN}
	#\		${Random_str1}=			Generate Random String    4   	[LOWER]	#[LOWER]
	\		${Random_str1}=			Generate Random String    3   	[LOWER]	#[LOWER]
	\		${LN1}=					Catenate 		SEPARATOR=		${LASTNAME}		${Random_str1}
	\		${SS1}=					Set Variable		.//PrimaryApplicant/ApplicantInfo/SSN
	\		${SSN}=					XML.Get Element Text		${WS_REQUEST_XML}			${SS1}
	#\		${Random_SSN}=			Generate Random String    9   [NUMBERS]
	#\		${Random_Number}=		WS_CommonUtil.CreateRandomNumberInRange		5	1	9
	#\		${Random_SSN}=			Catenate		SEPARATOR= 		${Random_Number}	5768
	\		${SSN2}=			Remove string	${SSN}	-
	\		${Random_Number}=		WS_CommonUtil.CreateRandomNumberInRange		4	1	9
	\		${SSN5}=			WS_CommonUtil.GetSubStringFromAStringByPositions	${SSN2}	0	5
	\		${Random_SSN}=			Catenate		SEPARATOR=		${SSN5}		${Random_Number}
	\		Log				Appl Random_SSN=${Random_SSN}		
	\		# last name
	\		${WS_REQUEST_XML}=		Run Keyword If 			'${IS_Compliance}'=='Compliance'	Replace String 			${WS_REQUEST_XML}		<a:LastName>${LASTNAME}</a:LastName>		<a:LastName>${LN1}</a:LastName>
	\		...						ELSE 					Set Variable 				${WS_REQUEST_XML}
	\		# SSN
	\		${WS_REQUEST_XML}=		Run Keyword If 			'${IS_Compliance}'=='Compliance'	Replace String 			${WS_REQUEST_XML}		<a:SSN>${SSN}</a:SSN>		<a:SSN>${Random_SSN}</a:SSN>
	\		...						ELSE 					Set Variable 				${WS_REQUEST_XML}
	\		Log 					${WS_REQUEST_XML}
	\		##############################
	\		### Co-App ###
	\		${LN}=					Set Variable		.//CoApplicant/ApplicantInfo/LastName
	\		${ISCOAPP}=				Run Keyword And Return Status		XML.Get Element Text			${WS_REQUEST_XML}			${LN}
	\		Set Suite Variable 		${ISCOAPP}
	\		${COLASTNAME}=			Run Keyword If		${ISCOAPP}		XML.Get Element Text		${WS_REQUEST_XML}			${LN}
	\		...						ELSE		Set Variable		${EMPTY}
	#\		${Random_str1}=			Generate Random String    4   	[LOWER]	#[LOWER]
	\		${Random_str1}=			Generate Random String    3   	[LOWER]	#[LOWER]	
	\		${LN1}=					Catenate 		SEPARATOR=		${COLASTNAME}		${Random_str1}
	\		${SS1}=					Set Variable		.//CoApplicant/ApplicantInfo/SSN
	\		${SSN}=					Run Keyword If		${ISCOAPP}	XML.Get Element Text		${WS_REQUEST_XML}			${SS1}
	\		...						ELSE		Set Variable		${EMPTY}
	#\		${Random_Number}=		WS_CommonUtil.CreateRandomNumberInRange		5	1	9
	#\		${Random_SSN}=			Catenate		SEPARATOR= 		${Random_Number}	4657
	\		${SSN2}=			Remove string	${SSN}	-
	\		${Random_Number}=		WS_CommonUtil.CreateRandomNumberInRange		4	1	9
	\		${SSN5}=			WS_CommonUtil.GetSubStringFromAStringByPositions	${SSN2}	0	5
	\		${Random_SSN}=			Catenate		SEPARATOR=		${SSN5}		${Random_Number}
	\		Log				Coapp Random_SSN=${Random_SSN}		
	\		${WS_REQUEST_XML}=		Run Keyword If 		${ISCOAPP} and '${IS_Compliance}'=='Compliance'		WS_CommonUtil.rreplace	${WS_REQUEST_XML}		<a:LastName>${COLASTNAME}</a:LastName>	<a:LastName>${LN1}</a:LastName>		${1}
	\		...						ELSE 					Set Variable 				${WS_REQUEST_XML}
	\		${WS_REQUEST_XML}=		Run Keyword If 		${ISCOAPP} and '${IS_Compliance}'=='Compliance'		WS_CommonUtil.rreplace	${WS_REQUEST_XML}		<a:SSN>${SSN}</a:SSN>	<a:SSN>${Random_SSN}</a:SSN>		${1}
	\		...						ELSE 					Set Variable 				${WS_REQUEST_XML}
	\		##############################
	\		Log 	${WS_REQUEST_XML}
	\		# Applicant details
	\		${FN}=		Set Variable		.//PrimaryApplicant/ApplicantInfo/FirstName
	\		${LN}=		Set Variable		.//PrimaryApplicant/ApplicantInfo/LastName
	\		${MN}=		Set Variable		.//PrimaryApplicant/ApplicantInfo/MiddleInitial
	\		${FIRSTNAME}=	XML.Get Element Text		${WS_REQUEST_XML}			${FN}
	\		${LASTNAME}=	XML.Get Element Text		${WS_REQUEST_XML}			${LN}
	\		${MIDDLENAME}=	XML.Get Element Text		${WS_REQUEST_XML}			${MN}
	\		Set Suite Variable 		${FIRSTNAME}
	\		Set Suite Variable 		${LASTNAME}
	\		Set Suite Variable 		${MIDDLENAME}
	\		#################################
	\		# Co-Applicant details
	\		${FN}=		Set Variable		.//CoApplicant/ApplicantInfo/FirstName
	\		${LN}=		Set Variable		.//CoApplicant/ApplicantInfo/LastName
	\		${MN}=		Set Variable		.//CoApplicant/ApplicantInfo/MiddleInitial
	\		${COFIRSTNAME}=		Run Keyword If 		${ISCOAPP} 		XML.Get Element Text		${WS_REQUEST_XML}			${FN}
	\		...					ELSE 				Set Variable 	${EMPTY}
	\		${COLASTNAME}=		Run Keyword If 		${ISCOAPP} 		XML.Get Element Text		${WS_REQUEST_XML}			${LN}
	\		...					ELSE 				Set Variable 	${EMPTY}
	\		${COMIDDLENAME}=	Run Keyword If 		${ISCOAPP} 		XML.Get Element Text		${WS_REQUEST_XML}			${MN}
	\		...					ELSE 				Set Variable 	${EMPTY}
	\		Set Suite Variable 		${COFIRSTNAME}
	\		Set Suite Variable 		${COLASTNAME}
	\		Set Suite Variable 		${COMIDDLENAME}
	\		#################################
	\		Set To Dictionary 	${FirstNameDict}	${Item}		${FIRSTNAME}
	\		Set To Dictionary 	${LastNameDict}		${Item}		${LASTNAME}
	\		Set To Dictionary 	${MidNameDict}		${Item}		${MIDDLENAME}
	\		Set To Dictionary 	${COFirstNameDict}	${Item}		${COFIRSTNAME}
	\		Set To Dictionary 	${COLastNameDict}	${Item}		${COLASTNAME}
	\		Set To Dictionary 	${COMidNameDict}	${Item}		${COMIDDLENAME}
	\		Set Suite Variable 		${FirstNameDict}
	\		Set Suite Variable 		${LastNameDict}
	\		Set Suite Variable 		${COFirstNameDict}
	\		Set Suite Variable 		${COLastNameDict}
	\		Set Suite Variable 		${MidNameDict}
	\		Set Suite Variable 		${COMidNameDict}
	\		#################################
	\		Set Suite Variable		${WS_REQUEST_XML}
	\		Send FD Request 		${VERSION}		${PARTNERID}	${DEALERID}		${WS_REQUEST_XML}	${Filename}		${Servicename}	
	\		${LEAD_REF}= 			Run Keyword If 		'${RESPONSECODE}'=='200'	Get Element Text		${RESPONSETEXT}		.//LeadReferenceNumber
	\		...						ELSE 				Set Variable 		${EMPTY}
	\		Set Suite Variable 		${LEAD_REF}
	\		${APP_REF}= 			Run Keyword If 		'${RESPONSECODE}'=='200'	Get Element Text		${RESPONSETEXT}		.//ApplicationReferenceNumber
	\		...						ELSE 				Set Variable 		${EMPTY}
	\		Set Suite Variable 		${APP_REF}
	\		${PREQUAL_REF}= 		Run Keyword If 		'${RESPONSECODE}'=='200'	Get Element Text		${RESPONSETEXT}		.//PrequalificationReferenceNumber
	\		...						ELSE 				Set Variable 		${EMPTY}
	\		Set Suite Variable 		${PREQUAL_REF}
	\		Set To Dictionary		${REF_DICT}			PREQUAL_REF			${PREQUAL_REF}
	\		Set To Dictionary		${REF_DICT}			LEAD_REF			${LEAD_REF}
	\		Set To Dictionary		${REF_DICT}			APP_REF				${APP_REF}
	\		Set Suite Variable 		${REF_DICT}
	\		Log Dictionary 			${REF_DICT}
	\		Log Dictionary 			${FirstNameDict}
	\		Log Dictionary 			${LastNameDict}
	\		Log Dictionary 			${COFirstNameDict}
	\		Log Dictionary 			${COLastNameDict}
	\		Log Dictionary	 		${MidNameDict}
	\		Log Dictionary 			${COMidNameDict}
	\		${Request_Dict}=		Add Details Of Request To Dictionary
	\		Log Dictionary 			${Request_Dict}
	\		Set To Dictionary 		${Request_Dict}		Prequal REF		${PREQUAL_REF}
	\		Set To Dictionary 		${Request_Dict}		Lead REF		${LEAD_REF}
	\		Set To Dictionary 		${Request_Dict}		App REF			${APP_REF}
	
	\		Log Dictionary 			${Request_Dict}
	
	# \		#################################################################
	# \		# Making changes below to add few more values to Global dict. Required for My Leads page
	# \		${Request_Dict}=	Add My Leads Page Required Data to Dictionary 		${WS_REQUEST_XML}	${Request_Dict}

	# \		#################################################################
	\		Set To Dictionary		${Global_Dict}		${Item}		${Request_Dict}
	\		Log Dictionary 			${Global_Dict}
	\		Set Suite Variable 		${Global_Dict}
	
Send Chained Requests 	[Arguments]		${Folder_n}	${VERSION}	
	[Documentation]			This keyword checks the folder name and based on the name of folder keywords are called.
	...						Pre-requisite: 
	...						Note: 		 
	...						Return Type : 
	...				  		Author  : Manisha Gadekar (Manisha.Gadekar@dealtertrack.com)
	...						Creation Date: 
	...						Update Date\By: 24 Jun 2015
	Log 		${Folder_n}
	Log 		${VERSION}
	
	@{FolderNameList}= 		Split String	${Folder_n}	+
	Log List 	${FolderNameList}	
	
	${FirstType}=		Get From List 		${FolderNameList}	0
	${SecondType}=		Get From List 		${FolderNameList}	1
	${Passed}=			Run Keyword And Return Status 	Get From List 		${FolderNameList}	2
	${ThirdType}=		Run Keyword If 		${Passed}	Get From List 		${FolderNameList}	2
	...					ELSE 				Set Variable 		${EMPTY}
	
	${FirstType}=		Evaluate		str('${FirstType}').strip()
	${SecondType}=		Evaluate		str('${SecondType}').strip()
	${ThirdType}=		Evaluate		str('${ThirdType}').strip()
	
	Log 	${FirstType}		
	Log 	${SecondType}		
	Log 	${ThirdType}		 
	
	Set Suite Variable 		${FirstType}
	Set Suite Variable 		${SecondType}
	Set Suite Variable 		${ThirdType}
	
	Run Keyword If 			'${FirstType}'=='Lead'			Send Lead Plus		${Folder_n}
	Run Keyword If 			'${FirstType}'=='Prequal'		Send Prequal Plus 	${Folder_n}
	
	
	
Send Lead Plus		[Arguments]		${Folder_n}	
	[Documentation]			This keyword searches for Lead request, sends Lead request. Then based on the folder name update service is called.
	...						Pre-requisite: 
	...						Note: 		 
	...						Return Type : 
	...				  		Author  : Manisha Gadekar (Manisha.Gadekar@dealtertrack.com)
	...						Creation Date: 
	...						Update Date\By: 24 Jun 2015
	
	${Global_Dict}= 		Create Dictionary
	
	${PARTNERID}=		Get From Dictionary		${Scenario Setup}		Partner Id FD
	${DEALERID}=		Get From Dictionary		${Scenario Setup}		Partner Dealer Id FD
	${Environment}=		Get From Dictionary		${Scenario Setup}		Environment
	${Servicename}=		Set Variable 			FD 1.2 Leads
	# set services tag
	${FD_SERVICE}= 	Set Variable 		${VERSION}-1:Lead
	Set Suite Variable 		${PARTNERID}
	Set Suite Variable 		${DEALERID}
	
    # Setting Web Service parameters. This returns URL, Username, Password and Service in form of a dictionary.
    Web Service Setup    ${Environment}    ${FD_SERVICE}    ${Environment}-FD:${PARTNERID}    ${PARTNERID}
	Log 	${WS Setup}
	
	@{LIST_FILENAMES}    List Files In Directory    ${FOLDER_NAME}\\${Folder_n}    *.xml
    ${COUNT_FILES}=    Get Length    ${LIST_FILENAMES}
	Log 	Total Files: ${COUNT_FILES}	
	
	# Get lead files
	# Get List of Lead files in folder
	${PATTERN}= 	Catenate	SEPARATOR=		*	3	*	LeadXml		*.xml
	${PASSED}=		Run Keyword And Return Status		List Files In Directory      ${FOLDER_NAME}\\${Folder_n}         ${PATTERN}
	
	@{FILENAMES}       Run Keyword If		${PASSED}	List Files In Directory        ${FOLDER_NAME}\\${Folder_n}         ${PATTERN}      
	...						ELSE		Fail		No Lead file is found in folder ${FOLDER_NAME}\\${Folder_n}
	
	${len}= 	Get Length 		${FILENAMES}
	Log			Lead files: ${len}	
	
	Run Keyword If 		'${len}'=='${0}'		Fail 	No File is found matching the pattern 3 * LeadXml in ${FOLDER_NAME}\\${Folder_n}.
	
	:FOR 	${Item}			IN RANGE 	0 	${len}
	\		${FD_SERVICE}= 	Set Variable 		${VERSION}-1:Lead
	\		Web Service Setup    ${Environment}    ${FD_SERVICE}    ${Environment}-FD:${PARTNERID}    ${PARTNERID}
	\		Log 	${WS Setup}
	\		${FILENAME}=	Get From List 	${FILENAMES}	${Item}
	\		Set Suite Variable 			${FILENAME}
	\		Log 			${FILENAME}			
	\		${WS_REQUEST_XML}=		Read From File To String 	${FOLDER_NAME}\\${Folder_n}\\${Filename}
	\		Log 	${WS_REQUEST_XML}
	\		${WS_REQUEST_XML}=		Convert To String 		${WS_REQUEST_XML}
	\		# Replace PartnerID and DealerID with required values
	\		${PTR_Id}=				Return Node Value  		${WS_REQUEST_XML}			<PartnerId>				</PartnerId>
	\		${PTRDLR_Id}=			Return Node Value  		${WS_REQUEST_XML}			<PartnerDealerId>		</PartnerDealerId>
	\		${WS_REQUEST_XML}=		Run Keyword If 			'${REPLACE_PARTNER}'=='y'	Replace String 			${WS_REQUEST_XML}		<PartnerId>${PTR_Id}</PartnerId>		<PartnerId>${PARTNERID}</PartnerId>
	\		...						ELSE 					Set Variable 				${WS_REQUEST_XML}
	\		${WS_REQUEST_XML}=		Run Keyword If 			'${REPLACE_PARTNER}'=='y'	Replace String 			${WS_REQUEST_XML}		<PartnerDealerId>${PTRDLR_Id}</PartnerDealerId>		<PartnerDealerId>${DEALERID}</PartnerDealerId>
	\		...						ELSE 					Set Variable 				${WS_REQUEST_XML}
	\		Log 	${WS_REQUEST_XML}
	\		${FN}=		Set Variable		.//PrimaryApplicant/FirstName
	\		${LN}=		Set Variable		.//PrimaryApplicant/LastName
	\		${MN}=		Set Variable		.//PrimaryApplicant/MiddleInitial
	\		${FIRSTNAME}=	XML.Get Element Text		${WS_REQUEST_XML}			${FN}
	\		${LASTNAME}=	XML.Get Element Text		${WS_REQUEST_XML}			${LN}
	\		${MIDDLENAME}=	XML.Get Element Text		${WS_REQUEST_XML}			${MN}
	\		Set Suite Variable 		${FIRSTNAME}
	\		Set Suite Variable 		${LASTNAME}
	\		Set Suite Variable 		${MIDDLENAME}
	\		Set Suite Variable		${WS_REQUEST_XML}
	\		Send FD Request 		${VERSION}		${PARTNERID}	${DEALERID}		${WS_REQUEST_XML}	${Filename}		${Servicename}	
	\		${LEAD_REF}= 			Run Keyword If 		'${RESPONSECODE}'=='200'	Get Element Text		${RESPONSETEXT}		.//LeadReferenceNumber
	\		...						ELSE 				Set Variable 		${EMPTY}
	\		Set Suite Variable 		${LEAD_REF}
	\		Log 		Lead Ref no: ${LEAD_REF}	
	\		Set To Dictionary		${REF_DICT}			LEAD_REF			${LEAD_REF}
	\		Run Keyword If 			'${SecondType}'=='MenuDriver'	Send Update Request With Lead Ref		${FOLDER_NAME}\\${Folder_n}	${LEAD_REF}		${VERSION}-1:LeadUpdate2	FD ${VERSION} MenuDriver	MenuDriver
	\		${Lead+Menu_Ref}=		Run Keyword If 			'${SecondType}'=='MenuDriver'	Set Variable 	${LEAD_REF}
	\		...						ELSE 					Set Variable 					${Lead+Menu_Ref}
	\		Set Suite Variable 		${Lead+Menu_Ref}
	\		Run Keyword If 			'${SecondType}'=='MenuDriver'	Set To Dictionary		${REF_DICT}			MD_REF			${LEAD_REF}
	\		${Lead+Menu_FileName}=	Run Keyword If 			'${SecondType}'=='MenuDriver'	Set Variable 	${FILENAME}	
	\		...						ELSE 					Set Variable 					${Lead+Menu_FileName}
	\		Set Suite Variable 		${Lead+Menu_FileName}
	\		Run Keyword If 			'${SecondType}'=='PayCalc'		Send Update Request With Lead Ref		${FOLDER_NAME}\\${Folder_n}	${LEAD_REF}		${VERSION}-1:LeadUpdate3	FD ${VERSION} PayCalc		PayCalc
	\		${Lead+PC_Ref}=			Run Keyword If 			'${SecondType}'=='PayCalc'		Set Variable 	${LEAD_REF}
	\		...						ELSE 					Set Variable 					${Lead+PC_Ref}
	\		Set Suite Variable 		${Lead+PC_Ref}
	\		${Lead+PC_FileName}=	Run Keyword If 			'${SecondType}'=='PayCalc'	Set Variable 	${FILENAME}	
	\		...						ELSE 					Set Variable 					${Lead+PC_FileName}
	\		Set Suite Variable 		${Lead+PC_FileName}
	\		Run Keyword If 			'${SecondType}'=='PayCalc'	Set To Dictionary		${REF_DICT}			PayCalc_REF			${LEAD_REF}
	\		Run Keyword If 			'${ThirdType}'=='${EMPTY}'		Log 	Chain ended.
	\		Set Suite Variable 		${REF_DICT}
	\		Log Dictionary 			${REF_DICT}
	
	\		${LN}=					Set Variable		.//CoApplicant/ApplicantInfo/LastName
	\		${ISCOAPP}=				Run Keyword And Return Status		XML.Get Element Text			${WS_REQUEST_XML}			${LN}
	\		Set Suite Variable 		${ISCOAPP}
	\		${FN}=		Set Variable		.//CoApplicant/ApplicantInfo/FirstName
	\		${LN}=		Set Variable		.//CoApplicant/ApplicantInfo/LastName
	\		${MN}=		Set Variable		.//CoApplicant/ApplicantInfo/MiddleInitial
	\		${COFIRSTNAME}=		Run Keyword If 		${ISCOAPP} 		XML.Get Element Text		${WS_REQUEST_XML}			${FN}
	\		...					ELSE 				Set Variable 	${EMPTY}
	\		${COLASTNAME}=		Run Keyword If 		${ISCOAPP} 		XML.Get Element Text		${WS_REQUEST_XML}			${LN}
	\		...					ELSE 				Set Variable 	${EMPTY}
	\		${COMIDDLENAME}=	Run Keyword If 		${ISCOAPP} 		XML.Get Element Text		${WS_REQUEST_XML}			${MN}
	\		...					ELSE 				Set Variable 	${EMPTY}
	\		Set Suite Variable 		${COFIRSTNAME}
	\		Set Suite Variable 		${COLASTNAME}
	\		Set Suite Variable 		${COMIDDLENAME}

	\		${Request_Dict}=		Add Details Of Request To Dictionary
	\		Log Dictionary 			${Request_Dict}
	\		Set To Dictionary 		${Request_Dict}		Lead REF		${LEAD_REF}
	
	\		Log Dictionary 			${Request_Dict}
	\		Set To Dictionary		${Global_Dict}		${Item}		${Request_Dict}
	\		Log Dictionary 			${Global_Dict}
	\		Set Suite Variable 		${Global_Dict}
	
	
	
	
Send Prequal Plus 	[Arguments]		${Folder_n}	
	[Documentation]			This keyword searches for Prequal request, sends request. Then based on the folder name update service is called.
	...						Pre-requisite: 
	...						Note: 		 
	...						Return Type : 
	...				  		Author  : Manisha Gadekar (Manisha.Gadekar@dealtertrack.com)
	...						Creation Date: 
	...						Update Date\By: 24 Jun 2015

	${Global_Dict}=		Create Dictionary
	
	${PARTNERID}=		Get From Dictionary		${Scenario Setup}		Partner Id FD
	${DEALERID}=		Get From Dictionary		${Scenario Setup}		Partner Dealer Id FD
	${Environment}=		Get From Dictionary		${Scenario Setup}		Environment
	${Servicename}=		Set Variable 			FD 1.2 Prequalifications
	Set Suite Variable 		${PARTNERID}
	Set Suite Variable 		${DEALERID}
	
	# set services tag
	${FD_SERVICE}= 	Set Variable 		${VERSION}-1:Prequalify
	
    # Setting Web Service parameters. This returns URL, Username, Password and Service in form of a dictionary.
    Web Service Setup    ${Environment}    ${FD_SERVICE}    ${Environment}-FD:${PARTNERID}    ${PARTNERID}
	Log 	${WS Setup}
	
	@{LIST_FILENAMES}    List Files In Directory    ${FOLDER_NAME}\\${Folder_n}    *.xml
    ${COUNT_FILES}=    Get Length    ${LIST_FILENAMES}
	Log 	Total Files: ${COUNT_FILES}	
	
	# Get lead files
	# Get List of Lead files in folder
	${PATTERN}= 	Catenate	SEPARATOR=		*	2	*	Prequal		*.xml
	${PASSED}=		Run Keyword And Return Status		List Files In Directory      ${FOLDER_NAME}\\${Folder_n}         ${PATTERN}
	
	@{FILENAMES}       Run Keyword If		${PASSED}	List Files In Directory        ${FOLDER_NAME}\\${Folder_n}         ${PATTERN}      
	...						ELSE		Fail		No Prequal file is found in folder ${FOLDER_NAME}\\${Folder_n}
	
	${len}= 	Get Length 		${FILENAMES}
	Log			Prequal files: ${len}	
	
	Run Keyword If 		'${len}'=='${0}'		Fail 	No File is found matching the pattern 2 * Prequal in ${FOLDER_NAME}\\${Folder_n}.
	
	:FOR 	${Item}			IN RANGE 	0 	${len}
	\		${FD_SERVICE}= 	Set Variable 		${VERSION}-1:Prequalify
	\    	Web Service Setup    ${Environment}    ${FD_SERVICE}    ${Environment}-FD:${PARTNERID}    ${PARTNERID}
	\		Log 	${WS Setup}
	\		${FILENAME}=	Get From List 	${FILENAMES}	${Item}
	\		Set Suite Variable 			${FILENAME}
	\		Log 			${FILENAME}			
	\		${WS_REQUEST_XML}=		Read From File To String 	${FOLDER_NAME}\\${Folder_n}\\${Filename}
	\		Log 	${WS_REQUEST_XML}
	\		${WS_REQUEST_XML}=		Convert To String 		${WS_REQUEST_XML}
	\		# Replace PartnerID and DealerID with required values
	\		${PTR_Id}=				Return Node Value  		${WS_REQUEST_XML}			<PartnerId>			</PartnerId>
	\		${PTRDLR_Id}=			Return Node Value  		${WS_REQUEST_XML}			<a:string>			</a:string>
	\		${WS_REQUEST_XML}=		Run Keyword If 			'${REPLACE_PARTNER}'=='y'	Replace String 			${WS_REQUEST_XML}		<PartnerId>${PTR_Id}</PartnerId>		<PartnerId>${PARTNERID}</PartnerId>
	\		...						ELSE 					Set Variable 				${WS_REQUEST_XML}
	\		${WS_REQUEST_XML}=		Run Keyword If 			'${REPLACE_PARTNER}'=='y'	Replace String 			${WS_REQUEST_XML}		<a:string>${PTRDLR_Id}</a:string>		<a:string>${DEALERID}</a:string>
	\		...						ELSE 					Set Variable 				${WS_REQUEST_XML}
	\		Log 	${WS_REQUEST_XML}
	\		${FN}=		Set Variable		.//Applicant/FirstName
	\		${LN}=		Set Variable		.//Applicant/LastName
	\		${MN}=		Set Variable		.//Applicant/MiddleInitial
	\		${PASSED}=		Run Keyword And Return Status		XML.Get Element Text		${WS_REQUEST_XML}			${FN}		
	\		${FIRSTNAME}=	Run Keyword If		${PASSED}		XML.Get Element Text		${WS_REQUEST_XML}			${FN}
	\		...				ELSE		XML.Get Element Text		${WS_REQUEST_XML}		.//PrimaryApplicant/FirstName		
	\		${PASSED}=		Run Keyword And Return Status		XML.Get Element Text		${WS_REQUEST_XML}	${LN}		
	\		${LASTNAME}=	Run Keyword If		${PASSED}		XML.Get Element Text		${WS_REQUEST_XML}			${LN}
	\		...				ELSE		XML.Get Element Text		${WS_REQUEST_XML}		.//PrimaryApplicant/LastName
	\		${PASSED}=		Run Keyword And Return Status		XML.Get Element Text		${WS_REQUEST_XML}	${LN}		
	\		${MIDDLENAME}=	Run Keyword If		${PASSED}		XML.Get Element Text		${WS_REQUEST_XML}			${MN}
	\		...				ELSE		XML.Get Element Text		${WS_REQUEST_XML}		.//PrimaryApplicant/MiddleInitial
	\		Set Suite Variable 		${FIRSTNAME}
	\		Set Suite Variable 		${LASTNAME}
	\		Set Suite Variable 		${MIDDLENAME}
	\		Set Suite Variable		${WS_REQUEST_XML}
	\		Send FD Request 		${VERSION}		${PARTNERID}	${DEALERID}		${WS_REQUEST_XML}	${Filename}		${Servicename}	
	\		${PREQUAL_REF}=			Get Element Text		${RESPONSETEXT}		.//PrequalificationReferenceNumber
	\		Set Suite Variable 		${PREQUAL_REF}
	\		Log 		Prequal Ref no: ${PREQUAL_REF}	
	\		Run Keyword If 			'${SecondType}'=='Lead'			Send Lead Req With Prequal Ref		${FOLDER_NAME}\\${Folder_n}	${PREQUAL_REF}
	\		Run Keyword If 			'${ThirdType}'=='${EMPTY}'		Log 	Chain ended.
	\		Run Keyword If 			'${ThirdType}'=='App'			Send App Req With Prequal Ref And Lead Ref 		${FOLDER_NAME}\\${Folder_n}	${PREQUAL_REF}		${LEAD_REF}

	\		${LN}=					Set Variable		.//CoApplicant/ApplicantInfo/LastName
	\		${ISCOAPP}=				Run Keyword And Return Status		XML.Get Element Text			${WS_REQUEST_XML}			${LN}
	\		Set Suite Variable 		${ISCOAPP}
	\		${FN}=		Set Variable		.//CoApplicant/ApplicantInfo/FirstName
	\		${LN}=		Set Variable		.//CoApplicant/ApplicantInfo/LastName
	\		${MN}=		Set Variable		.//CoApplicant/ApplicantInfo/MiddleInitial
	\		${COFIRSTNAME}=		Run Keyword If 		${ISCOAPP} 		XML.Get Element Text		${WS_REQUEST_XML}			${FN}
	\		...					ELSE 				Set Variable 	${EMPTY}
	\		${COLASTNAME}=		Run Keyword If 		${ISCOAPP} 		XML.Get Element Text		${WS_REQUEST_XML}			${LN}
	\		...					ELSE 				Set Variable 	${EMPTY}
	\		${COMIDDLENAME}=	Run Keyword If 		${ISCOAPP} 		XML.Get Element Text		${WS_REQUEST_XML}			${MN}
	\		...					ELSE 				Set Variable 	${EMPTY}
	\		Set Suite Variable 		${COFIRSTNAME}
	\		Set Suite Variable 		${COLASTNAME}
	\		Set Suite Variable 		${COMIDDLENAME}

	\		${Request_Dict}=		Add Details Of Request To Dictionary
	\		Log Dictionary 			${Request_Dict}
	\		Set To Dictionary 		${Request_Dict}		Prequal REF		${PREQUAL_REF}
	\		Set To Dictionary 		${Request_Dict}		Lead REF		${LEAD_REF}
	\		Set To Dictionary 		${Request_Dict}		App REF			${APP_REF}
	\		Log Dictionary 			${Request_Dict}
	\		Set To Dictionary		${Global_Dict}		${Item}		${Request_Dict}
	\		Log Dictionary 			${Global_Dict}
	\		Set Suite Variable 		${Global_Dict}
	
Send Update Request With Lead Ref		[Arguments]		${PATH}		${LEAD_REF}		${FD_SERVICE}	${Servicename}	${Type}
	[Documentation]			This keyword sends required type (MD or PayCalc) of request with lead ref no added to it.
	...						Pre-requisite: 
	...						Note: 		 
	...						Return Type : 
	...				  		Author  : Manisha Gadekar (Manisha.Gadekar@dealtertrack.com)
	...						Creation Date: 
	...						Update Date\By: 24 Jun 2015

	# Setting Web Service parameters. This returns URL, Username, Password and Service in form of a dictionary.
    Web Service Setup    ${Environment}    ${FD_SERVICE}    ${Environment}-FD:${PARTNERID}    ${PARTNERID}
	Log 	${WS Setup}
	
	${WS_URL}=		Catenate	SEPARATOR= 		${WS Setup['Url']}		${WS Setup['Service']}
	
	# Find MD xml file
	${PATTERN}= 	Run Keyword If 		'${Type}'=='MenuDriver'		Catenate	SEPARATOR=		*	LeadMenuXML		*.xml
	...				ELSE IF				'${Type}'=='PayCalc'		Catenate	SEPARATOR=		*	LeadPayCalc		*.xml
	...				ELSE				Set Variable 				${EMPTY}
	${PASSED}=		Run Keyword And Return Status		List Files In Directory      ${PATH}         ${PATTERN}
	
	@{MATCHED_FILENAME}       Run Keyword If		${PASSED}	List Files In Directory        ${PATH}         ${PATTERN}      
	...						ELSE		Fail		${Type} file is not found. Please make sure that it is present in required folder: ${PATH}.
	
	# get correct CreditApp file name
	${MDLead_File}=		Get From List	${MATCHED_FILENAME}		0
	Log 		MDLead File Name: ${MDLead_File}		
	
	# Change the PartnerId and PartnerDealerId
	${WS_REQUEST_XML}=		Read From File To String 	${PATH}\\${MDLead_File}
	Log 	${WS_REQUEST_XML}
	
	${PTR_Id}=				Return Node Value  		${WS_REQUEST_XML}			<PartnerId>				</PartnerId>
	${PTRDLR_Id}=			Return Node Value  		${WS_REQUEST_XML}			<PartnerDealerId>		</PartnerDealerId>
	
	${WS_REQUEST_XML}=		Run Keyword If 			'${REPLACE_PARTNER}'=='y'	Replace String 		${WS_REQUEST_XML}	<PartnerId>${PTR_Id}</PartnerId>		<PartnerId>${PARTNERID}</PartnerId>
	${WS_REQUEST_XML}=		Run Keyword If 			'${REPLACE_PARTNER}'=='y'	Replace String 		${WS_REQUEST_XML}	<PartnerDealerId>${PTRDLR_Id}</PartnerDealerId>		<PartnerDealerId>${DEALERID}</PartnerDealerId>

	# Add Lead Ref no.
	${WS_REQUEST_XML}=		Run Keyword If 		'${LEAD_REF}'!='${EMPTY}'	Replace String 		${WS_REQUEST_XML}	<LeadReferenceNumber i:nil="true"/>		<LeadReferenceNumber>${LEAD_REF}</LeadReferenceNumber>
	...						ELSE 				Set Variable 		${WS_REQUEST_XML}
	Log 	${WS_REQUEST_XML}
	Set Suite Variable		${WS_REQUEST_XML}
	# Send MD Req
	Send FD Request 		${VERSION}		${PARTNERID}	${DEALERID}		${WS_REQUEST_XML}	${MDLead_File}		${Servicename}
	
	${LD_REF}=  	Run Keyword If 		'${RESPONSECODE}'=='200'	Get Element Text		${RESPONSETEXT}		.//LeadReferenceNumber
	...						ELSE 				Set Variable 		${EMPTY}
	
	Log		Lead Update using MD: Lead Ref ID:${LD_REF}		
	
	Should Be Equal As Strings 		${LEAD_REF}		${LD_REF}	Lead ref no. in ${Type} did not match with lead ref. no passed. Expected: ${LEAD_REF}. Actual: ${LD_REF}.		values=False
	Run Keyword If 		'${LEAD_REF}'=='${LD_REF}'	Log 		Lead ref no. in ${Type} MATCHED with lead ref. no passed. Expected: ${LEAD_REF}. Actual: ${LD_REF}.		

	
	
Send Lead Req With Prequal Ref		[Arguments]		${PATH}		${PREQUAL_REF}	
	[Documentation]			This keyword searches for Lead request, updates it with Prequal ref and then sends request.
	...						Pre-requisite: 
	...						Note: 		 
	...						Return Type : 
	...				  		Author  : Manisha Gadekar (Manisha.Gadekar@dealtertrack.com)
	...						Creation Date: 
	...						Update Date\By: 24 Jun 2015

	# set services tag
	${FD_SERVICE}= 		Set Variable 		${VERSION}-1:Lead
	${Servicename}=		Set Variable 			FD ${VERSION} Lead
    
	# Setting Web Service parameters. This returns URL, Username, Password and Service in form of a dictionary.
    Web Service Setup    ${Environment}    ${FD_SERVICE}    ${Environment}-FD:${PARTNERID}    ${PARTNERID}
	Log 	${WS Setup}
	
	${WS_URL}=		Catenate	SEPARATOR= 		${WS Setup['Url']}		${WS Setup['Service']}
	
	# Find Lead xml file
	${PATTERN}= 	Catenate	SEPARATOR=		*	${FIRSTNAME} 	*	${LASTNAME}		*	3 	*	Lead	*.xml
	${PASSED}=		Run Keyword And Return Status		List Files In Directory      ${PATH}         ${PATTERN}
	
	@{MATCHED_FILENAME}       Run Keyword If		${PASSED}	List Files In Directory        ${PATH}         ${PATTERN}      
	...						ELSE		Fail		Lead file is not found. Please make sure that it is present in required folder: ${PATH}.
	
	# get correct CreditApp file name
	${filename}=		Get From List	${MATCHED_FILENAME}		0
	Log 		Lead File Name: ${filename}		
	
	# Change the PartnerId and PartnerDealerId
	${WS_REQUEST_XML}=		Read From File To String 	${PATH}\\${filename}
	Log 	${WS_REQUEST_XML}

	${PTR_Id}=				Return Node Value  		${WS_REQUEST_XML}			<PartnerId>				</PartnerId>
	${PTRDLR_Id}=			Return Node Value  		${WS_REQUEST_XML}			<PartnerDealerId>		</PartnerDealerId>
	
	${WS_REQUEST_XML}=		Run Keyword If 			'${REPLACE_PARTNER}'=='y'	Replace String 		${WS_REQUEST_XML}	<PartnerId>${PTR_Id}</PartnerId>		<PartnerId>${PARTNERID}</PartnerId>
	${WS_REQUEST_XML}=		Run Keyword If 			'${REPLACE_PARTNER}'=='y'	Replace String 		${WS_REQUEST_XML}	<PartnerDealerId>${PTRDLR_Id}</PartnerDealerId>		<PartnerDealerId>${DEALERID}</PartnerDealerId>

	# Add Lead Ref no.
	${WS_REQUEST_XML}=		Run Keyword If 		'${PREQUAL_REF}'!='${EMPTY}'	Replace String 		${WS_REQUEST_XML}	<PrequalificationReferenceNumber i:nil="true"/>		<PrequalificationReferenceNumber>${PREQUAL_REF}</PrequalificationReferenceNumber>
	...						ELSE 				Set Variable 		${WS_REQUEST_XML}
	Log 	${WS_REQUEST_XML}
	Set Suite Variable		${WS_REQUEST_XML}
	# Send  Req
	Send FD Request 		${VERSION}		${PARTNERID}	${DEALERID}		${WS_REQUEST_XML}	${filename}		${Servicename}
	
	${PQ_REF}=		Run Keyword If 		'${RESPONSECODE}'=='200'	Get Element Text		${RESPONSETEXT}		.//PrequalificationReferenceNumber
	...						ELSE 				Set Variable 		${EMPTY}
	
	Log		Lead with Prequal ref: Prequal Ref ID:${PQ_REF}		
	
	${LEAD_REF}=  	Run Keyword If 		'${RESPONSECODE}'=='200'	Get Element Text		${RESPONSETEXT}		.//LeadReferenceNumber
	...						ELSE 				Set Variable 		${EMPTY}
	
	Log		Lead with Prequal ref: Lead Ref ID:${LEAD_REF}		
	Set Suite Variable 		${LEAD_REF}
	
	Should Be Equal As Strings 		${PREQUAL_REF}		${PQ_REF}	Prequal ref no. in Lead did not match with Prequal ref. no passed. Expected: ${PREQUAL_REF}. Actual: ${PQ_REF}.		values=False
	Run Keyword If 		'${PREQUAL_REF}'=='${PQ_REF}'	Log 		Prequal ref no. in Lead MATCHED with Prequal ref. no passed.		

	Set To Dictionary		${REF_DICT}			PREQUAL_REF			${PREQUAL_REF}
	Set To Dictionary		${REF_DICT}			LEAD_REF			${LEAD_REF}
	
	Set Suite Variable 		${REF_DICT}
	Log Dictionary 			${REF_DICT}

	
Send App Req With Prequal Ref And Lead Ref 		[Arguments]		${PATH}		${PREQUAL_REF}		${LEAD_REF}	
	[Documentation]			This keyword searches for Credit app request, updates it with Prequal ref, lead ref and then sends request.
	...						Pre-requisite: 
	...						Note: 		 
	...						Return Type : 
	...				  		Author  : Manisha Gadekar (Manisha.Gadekar@dealtertrack.com)
	...						Creation Date: 
	...						Update Date\By: 24 Jun 2015

	# set services tag
	${FD_SERVICE}= 		Set Variable 		${VERSION}-1:App
	${Servicename}=		Set Variable 			FD ${VERSION} App
    
	# Setting Web Service parameters. This returns URL, Username, Password and Service in form of a dictionary.
    Web Service Setup    ${Environment}    ${FD_SERVICE}    ${Environment}-FD:${PARTNERID}    ${PARTNERID}
	Log 	${WS Setup}
	
	${WS_URL}=		Catenate	SEPARATOR= 		${WS Setup['Url']}		${WS Setup['Service']}
	
	# Find App xml file
	${PATTERN}= 	Catenate	SEPARATOR=		*	${FIRSTNAME} 	*	${LASTNAME}		*	4 	*	App	*.xml
	${PASSED}=		Run Keyword And Return Status		List Files In Directory      ${PATH}         ${PATTERN}
	
	@{MATCHED_FILENAME}       Run Keyword If		${PASSED}	List Files In Directory        ${PATH}         ${PATTERN}      
	...							ELSE		Fail		App file is not found. Please make sure that it is present in required folder: ${PATH}.
	
	# get correct CreditApp file name
	${filename}=		Get From List	${MATCHED_FILENAME}		0
	Log 			App File Name: ${filename}		
	
	# Change the PartnerId and PartnerDealerId
	${WS_REQUEST_XML}=		Read From File To String 	${PATH}\\${filename}
	Log 	${WS_REQUEST_XML}
	Set Suite Variable		${WS_REQUEST_XML}
	${PTR_Id}=				Return Node Value  		${WS_REQUEST_XML}			<PartnerId>				</PartnerId>
	${PTRDLR_Id}=			Return Node Value  		${WS_REQUEST_XML}			<PartnerDealerId>		</PartnerDealerId>
	
	${WS_REQUEST_XML}=		Run Keyword If 			'${REPLACE_PARTNER}'=='y'	Replace String 		${WS_REQUEST_XML}	<PartnerId>${PTR_Id}</PartnerId>		<PartnerId>${PARTNERID}</PartnerId>
	${WS_REQUEST_XML}=		Run Keyword If 			'${REPLACE_PARTNER}'=='y'	Replace String 		${WS_REQUEST_XML}	<PartnerDealerId>${PTRDLR_Id}</PartnerDealerId>		<PartnerDealerId>${DEALERID}</PartnerDealerId>

	# Add Prequal Ref no.
	${WS_REQUEST_XML}=		Run Keyword If 		'${PREQUAL_REF}'!='${EMPTY}'	Replace String 		${WS_REQUEST_XML}	<PrequalificationReferenceNumber i:nil="true"/>		<PrequalificationReferenceNumber>${PREQUAL_REF}</PrequalificationReferenceNumber>
	...						ELSE 				Set Variable 		${WS_REQUEST_XML}
	Log 	${WS_REQUEST_XML}
	
	# Add Lead Ref no.
	${WS_REQUEST_XML}=		Run Keyword If 		'${LEAD_REF}'!='${EMPTY}'	Replace String 		${WS_REQUEST_XML}	<LeadReferenceNumber i:nil="true"/>		<LeadReferenceNumber>${LEAD_REF}</LeadReferenceNumber>
	...						ELSE 				Set Variable 		${WS_REQUEST_XML}
	Log 	${WS_REQUEST_XML}
	Set Suite Variable		${WS_REQUEST_XML}
	# Send Req
	Send FD Request 		${VERSION}		${PARTNERID}	${DEALERID}		${WS_REQUEST_XML}	${filename}		${Servicename}
	
	${PQ_REF}=		Get Element Text		${RESPONSETEXT}		.//PrequalificationReferenceNumber
	Log		Lead with Prequal ref: Prequal Ref ID:${PQ_REF}		
	
	${LD_REF}=  	Get Element Text		${RESPONSETEXT}		.//LeadReferenceNumber
	Log		Lead with Prequal ref: Lead Ref ID:${LD_REF}		
	
	${APP_REF}=  	Get Element Text		${RESPONSETEXT}		.//ApplicationReferenceNumber
	Log		App with Prequal ref and Lead Ref: App Ref ID:${APP_REF}		
	Set Suite Variable 		${APP_REF}

	Should Be Equal As Strings 		${PREQUAL_REF}		${PQ_REF}	Prequal ref no. in App did not match with Prequal ref. no passed. Expected: ${PREQUAL_REF}. Actual: ${PQ_REF}.	values=False
	Run Keyword If 		'${PREQUAL_REF}'=='${PQ_REF}'	Log 		Prequal ref no. in App MATCHED with Prequal ref. no passed. Expected: ${PREQUAL_REF}. Actual: ${PQ_REF}.		

	Should Be Equal As Strings 		${LEAD_REF}		${LD_REF}		Lead ref no. in App did not match with Prequal ref. no passed. Expected: ${PREQUAL_REF}. Actual: ${PQ_REF}.		values=False
	Run Keyword If 		'${LEAD_REF}'=='${LD_REF}'	Log 		Lead ref no. in App MATCHED with Prequal ref. no passed. Expected: ${LEAD_REF}. Actual: ${LD_REF}.		
	
	# add all reference ids to dictionary
	Set To Dictionary		${REF_DICT}			PREQUAL_REF			${PREQUAL_REF}
	Set To Dictionary		${REF_DICT}			LEAD_REF			${LEAD_REF}
	Set To Dictionary		${REF_DICT}			APP_REF				${APP_REF}
	Set Suite Variable 		${REF_DICT}
	Log Dictionary 			${REF_DICT}
	
Call FD Credit Bureau Service	[Arguments]		${VERSION}	${PATH}
	[Documentation]			This keyword sends credit bureau requests.
	...						Pre-requisite: 
	...						Note: 		 
	...						Return Type : 
	...				  		Author  : Manisha Gadekar (Manisha.Gadekar@dealtertrack.com)
	...						Creation Date: 
	...						Update Date\By: 24 Jun 2015

	# Set values for all variables
	${PARTNERID}=		Get From Dictionary		${Scenario Setup}		Partner Id CB
	${DEALERID}=		Get From Dictionary		${Scenario Setup}		Partner Dealer Id CB
	${Environment}=		Get From Dictionary		${Scenario Setup}		Environment
	${Servicename}=		Set Variable 			FD ${VERSION} CBWS
	Set Suite Variable 		${PARTNERID}
	Set Suite Variable 		${DEALERID}
	
	# set services tag
	${FD_SERVICE}= 	Run Keyword If 		'${Environment}'=='QA'		Set Variable 		${VERSION}:CB-RF-Yes
	...				ELSE 				Set Variable				${VERSION}:DEV-CB-RF-Yes
	
    # Setting Web Service parameters. This returns URL, Username, Password and Service in form of a dictionary.
    Web Service Setup    ${Environment}    ${FD_SERVICE}    ${Environment}-CB:${PARTNERID}    ${PARTNERID}
	Log 	${WS Setup}
	
	# Send Request
	Go For CBWS Request 	${VERSION}		${PATH}
	
Call FD Prequalification Service	[Arguments]		${VERSION}		${FOLDER_NAME}
	[Documentation]			This keyword sends Prequal requests.
	...						Pre-requisite: 
	...						Note: 		 
	...						Return Type : 
	...				  		Author  : Manisha Gadekar (Manisha.Gadekar@dealtertrack.com)
	...						Creation Date: 
	...						Update Date\By: 24 Jun 2015

	${PARTNERID}=		Get From Dictionary		${Scenario Setup}		Partner Id FD
	${DEALERID}=		Get From Dictionary		${Scenario Setup}		Partner Dealer Id FD
	${Environment}=		Get From Dictionary		${Scenario Setup}		Environment
	${Servicename}=		Set Variable 			FD ${VERSION} Prequalifications
	# set services tag
	${FD_SERVICE}= 	Set Variable 		${VERSION}-1:Prequalify
	Set Suite Variable 		${PARTNERID}
	Set Suite Variable 		${DEALERID}
	
    # Setting Web Service parameters. This returns URL, Username, Password and Service in form of a dictionary.
    Web Service Setup    ${Environment}    ${FD_SERVICE}    ${Environment}-FD:${PARTNERID}    ${PARTNERID}
	Log 	${WS Setup}
	
	# Call keyword to send Prequal requests
	Go For Prequalification Request 		${VERSION}		${FOLDER_NAME}
    	
Call FD Lead Service 	[Arguments]		${VERSION}		${FOLDER_NAME}
	[Documentation]			This keyword sends Lead requests.
	...						Pre-requisite: 
	...						Note: 		 
	...						Return Type : 
	...				  		Author  : Manisha Gadekar (Manisha.Gadekar@dealtertrack.com)
	...						Creation Date: 
	...						Update Date\By: 24 Jun 2015
	${PARTNERID}=		Get From Dictionary		${Scenario Setup}		Partner Id FD
	${DEALERID}=		Get From Dictionary		${Scenario Setup}		Partner Dealer Id FD
	${Environment}=		Get From Dictionary		${Scenario Setup}		Environment
	${Servicename}=		Set Variable 			FD ${VERSION} Leads
	# set services tag
	${FD_SERVICE}= 	Set Variable 		${VERSION}-1:Lead
	Set Suite Variable 		${PARTNERID}
	Set Suite Variable 		${DEALERID}
	
    # Setting Web Service parameters. This returns URL, Username, Password and Service in form of a dictionary.
    Web Service Setup    ${Environment}    ${FD_SERVICE}    ${Environment}-FD:${PARTNERID}    ${PARTNERID}
	Log 	${WS Setup}
	
	# Call keyword to send Lead requests
	Go For Lead Request 		${VERSION}		${FOLDER_NAME}
			

Call FD CreditApp Service 	[Arguments]		${VERSION}		${FOLDER_NAME}	${IS_Compliance}
	[Documentation]			This keyword sends Credit App requests.
	...						Pre-requisite: 
	...						Note: 		 
	...						Return Type : 
	...				  		Author  : Manisha Gadekar (Manisha.Gadekar@dealtertrack.com)
	...						Creation Date: 
	...						Update Date\By: 24 Jun 2015
	
	${Servicename}=		Set Variable 			FD ${VERSION} CreditApps
	# set services tag
	${FD_SERVICE}= 	Set Variable 		${VERSION}-1:App
	Set Suite Variable 		${PARTNERID}
	Set Suite Variable 		${DEALERID}
	
    # Setting Web Service parameters. This returns URL, Username, Password and Service in form of a dictionary.
    Web Service Setup    ${Environment}    ${FD_SERVICE}    ${Environment}-FD:${PARTNERID}    ${PARTNERID}
	Log 	${WS Setup}
	
	# Call keyword to send Credit App requests
	Go For Credit App Request 		${VERSION}		${FOLDER_NAME}		${IS_Compliance}
	
Call FD Chained Requests 	[Arguments]		${VERSION}		${FOLDER_NAME}
	[Documentation]			This keyword sends FD Chained requests.
	...						Pre-requisite: 
	...						Note: 		 
	...						Return Type : 
	...				  		Author  : Manisha Gadekar (Manisha.Gadekar@dealtertrack.com)
	...						Creation Date: 
	...						Update Date\By: 24 Jun 2015
	
	${Chained_Dict}=	Create Dictionary
	
	${PARTNERID}=		Get From Dictionary		${Scenario Setup}		Partner Id FD
	${DEALERID}=		Get From Dictionary		${Scenario Setup}		Partner Dealer Id FD
	${Environment}=		Get From Dictionary		${Scenario Setup}		Environment
	Set Suite Variable 		${PARTNERID}
	Set Suite Variable 		${DEALERID}
	

	@{DirList}=		List Directories In Directory		${FOLDER_NAME}
	Log List 		${DirList}
	
	# Removing .svn in case of execution from Jenkins
	Remove Values From List 	${DirList}		.svn
	
	@{Directories}=		Copy List	${DirList}
	
	Set Suite Variable 	@{Directories}
	
	${len}=			Get Length 		${DirList}
	Log 	Total folders: ${len}
    
	:FOR 	${Item}			IN RANGE 			0 		${len}
	\		${Folder_n}=		Get From List 		${DirList}	${Item}
	\		Log 			${Folder_n}	
	\		${IS_SVN}=		Run Keyword And Return Status 	Should Contain 		${Folder_n}		svn
	\		Run Keyword If 	'${IS_SVN}'!='True'		Send Chained Requests 	${Folder_n}	${VERSION}
	\		Run Keyword If 	'${IS_SVN}'!='True'		Set To Dictionary		${Chained_Dict}		${Item}		${Global_Dict}
	\		Run Keyword If 	'${IS_SVN}'!='True'		Log Dictionary		${Chained_Dict}	
	
	Log Dictionary		${Chained_Dict}	
	Set Suite Variable 	${Chained_Dict}	

Go For DDF And Return DDF XML		[Arguments]		${LEAD_REF}
	[Documentation]		This keyword validates the DDF.
	...					1. For now checks if Lead node is returned in DDF. That makes sure that DDF is generated.

	
	# set services tag
	${FD_SERVICE}= 		Run Keyword If 		'${Environment}'!='DEV'		Set Variable 		${VERSION}-1:DDF
	...					ELSE 			Set Variable 		${VERSION}-1:DEV-DDF
	
    # Setting Web Service parameters. This returns URL, Username, Password and Service in form of a dictionary.
    Web Service Setup    ${Environment}    ${FD_SERVICE}    ${Environment}-FD:${PARTNERID}    ${PARTNERID}
	Log 	${WS Setup}

	Sleep 	90s		#60s
	
	${DDF_URL}=		Catenate 	SEPARATOR=		${WS Setup['Service']}	${LEAD_REF}
	${DDF_BR}	${NodeContent}=		Open DDF And Check Lead Node 	${DDF_URL}
	
	# ${stat}=	Check Node In DDF 	${NodeContent}	ApprovalStatus
	# Run Keyword If 						'${stat}'!='True'		Fail	Node <a:ApprovalStatus>AppSubmitted</a:ApprovalStatus> is not found in DDF. This is not expected.
	[Return]		${NodeContent}

Open DDF And Check Lead Node 	[Arguments]		${DDF_URL}
	
	${DDF_BR}=		Open Browser	${DDF_URL}		${BROWSER}
	Set Suite Variable		${DDF_BR}
	Switch Browser			${DDF_BR}
	sleep 	2s
	
	# read DDF
	${NodeContent}=		Get Source
	Log 				${NodeContent}
	Set Suite Variable 	${NodeContent}
	
	${NODE}=		Set Variable 		Lead
	
	${stat}=		Run Keyword And Return Status 	Get Elements		${NodeContent}		.//${NODE}
	Run Keyword If 	'${stat}'!='True'	Fail 		Lead node is not found on DDF page. Please check.
	@{ELEMENTS}		Get Elements		${NodeContent}		.//${NODE}
	${COUNT}		Get Length			${ELEMENTS}
	
	# check that Lead node is present. If not fail.
	Run Keyword If 		${COUNT}==0 	Fail 		No DDF is generated for Lead Reference Id: ${LEAD_REF}
		
	[Return]	${DDF_BR}	${NodeContent}
	
Check Node In DDF 	[Arguments]		${NodeContent}		${Node_Name}
	
	${Status}=		Set Variable		${EMPTY}
	${NODE}=		Set Variable 		${Node_Name}
	${NODE}=		Convert To String 	${NODE}
	@{ELEMENTS}		Get Elements		${NodeContent}		.//${NODE}
	${COUNT}		Get Length			${ELEMENTS}
	
	# :FOR		${ELEMENT}		IN		@{ELEMENTS}   
	# \			${NODE_CONTENT}			XML.Get Element Text		${ELEMENT}
	# \			Log 					${NODE_CONTENT}
	# \			${Status}=				Run Keyword And Return Status 	Should Contain 		${NODE_CONTENT}		${Node_Name}
	# \			Run Keyword If 			'${Status}'=='True'		Exit For Loop
	
	${Status}=	Run Keyword If 		${COUNT}>0 		Set Variable 	True
	...			ELSE 			Set Variable 		False
	
	# Run Keyword If 						'${Status}'!='True'		Fail	Node ${Node_Name} is not found in DDF. This is not expected.
	[Return]	${Status}
	
Call FD PartnerInfo Service 	[Arguments]		${VERSION}		${FOLDER_NAME}	
	[Documentation]			This keyword sends FD PartnerInfo requests.
	...						Pre-requisite: 
	...						Note: 		 
	...						Return Type : 
	...				  		Author  : Manisha Gadekar (Manisha.Gadekar@dealtertrack.com)
	...						Creation Date: 
	...						Update Date\By: 24 Jun 2015
	# Set values for all variables
	${PARTNERID}=		Get From Dictionary		${Scenario Setup}		Partner Id FD
	${DEALERID}=		Get From Dictionary		${Scenario Setup}		Partner Dealer Id FD
	${Environment}=		Get From Dictionary		${Scenario Setup}		Environment
	${Servicename}=		Set Variable 			FD ${VERSION} PartnerInfo
	
	Set Suite Variable 		${PARTNERID}
	Set Suite Variable 		${DEALERID}
	Set Suite Variable 		${Environment}
	Set Suite Variable 		${Servicename}
	${PREQUAL_REF}= 	Set Variable 	${EMPTY}
	${LEAD_REF}= 	Set Variable 	${EMPTY}
	${APP_REF}= 	Set Variable 	${EMPTY}
	
	# set services tag
	${FD_SERVICE}= 	Set Variable 		${VERSION}-1:PartnerInfo
	
    # Setting Web Service parameters. This returns URL, Username, Password and Service in form of a dictionary.
    Web Service Setup    ${Environment}    ${FD_SERVICE}    ${Environment}-FD:${PARTNERID}    ${PARTNERID}
	Log 	${WS Setup}
	
	# Call keyword to send Credit App requests
	Go For PartnerInfo Request 		${VERSION}		${FOLDER_NAME}

Go For PartnerInfo Request 	[Arguments]		${VERSION}		${FOLDER_NAME}	
	[Documentation]			This keyword sends PartnerInfo requests.
	...						Pre-requisite: 
	...						Note: 		 
	...						Return Type : 
	...				  		Author  : Manisha Gadekar (Manisha.Gadekar@dealtertrack.com)
	...						Creation Date: 
	...						Update Date\By: 24 Jun 2015
	
	# ${Global_Dict}=			Create Dictionary
	
	@{LIST_FILENAMES}    List Files In Directory    ${FOLDER_NAME}    *.xml
    ${COUNT_FILES}=    Get Length    ${LIST_FILENAMES}
	Log 	Total Files: ${COUNT_FILES}	
	
	# Get List of App files in folder
	${PATTERN}= 	Catenate	SEPARATOR=		*	PartnerInfo		*.xml
	${PASSED}=		Run Keyword And Return Status		List Files In Directory      ${FOLDER_NAME}         ${PATTERN}
	
	@{FILENAMES}       Run Keyword If		${PASSED}	List Files In Directory        ${FOLDER_NAME}         ${PATTERN}      
	...						ELSE		Fail		No PartnerInfo file is found in folder ${FOLDER_NAME}
	
	${len}= 	Get Length 		${FILENAMES}
	Log			PartnerInfo files: ${len}	
	
	Run Keyword If 		'${len}'=='${0}'		Fail 	No File is found matching the pattern PartnerInfo in ${FOLDER_NAME}.
	
	:FOR 	${Item}			IN RANGE 		0 		${len}
	\		Log				${Item}
	\		${FILENAME}=	Get From List 	${FILENAMES}	${Item}
	\		Log 			${FILENAME}			
	\		Set Suite Variable 			${FILENAME}
	\		${WS_REQUEST_XML}=		Read From File To String 	${FOLDER_NAME}\\${Filename}
	\		Log 	${WS_REQUEST_XML}
	\		${WS_REQUEST_XML}=		Convert To String 		${WS_REQUEST_XML}
	\		${PTR_Id}=				Return Node Value  		${WS_REQUEST_XML}			<PartnerId>				</PartnerId>
	\		${WS_REQUEST_XML}=		Run Keyword If 			'${REPLACE_PARTNER}'=='y'	Replace String 			${WS_REQUEST_XML}		<PartnerId>${PTR_Id}</PartnerId>		<PartnerId>${PARTNERID}</PartnerId>
	\		...						ELSE 					Set Variable 				${WS_REQUEST_XML}
	\		Log 	${WS_REQUEST_XML}
	\		Set Suite Variable		${WS_REQUEST_XML}
	\		Send FD Request 		${VERSION}		${PARTNERID}	${DEALERID}		${WS_REQUEST_XML}	${Filename}		${Servicename}
	\		${Request_Dict}=		Add Details Of Request To Dictionary
	\		Log Dictionary 			${Request_Dict}
	\		Set To Dictionary 		${Request_Dict}		First Name		${FIRSTNAME}
	\		Set To Dictionary 		${Request_Dict}		Last Name		${LASTNAME}
	\		Set To Dictionary 		${Request_Dict}		CoApp First Name	${COFIRSTNAME}
	\		Set To Dictionary 		${Request_Dict}		CoApp Last Name		${COLASTNAME}
	\		Log Dictionary 			${Request_Dict}
	\		Set To Dictionary		${Global_Dict}		${Item}		${Request_Dict}
	\		Log Dictionary 			${Global_Dict}
	\		Set Suite Variable 		${Global_Dict}
	
Call FD GetLeads Service	[Arguments]		${VERSION}	${LEAD_REF}		${LASTNAME}		${FD_SERVICE}	${F_Name}
	[Documentation]			This keyword checks FD GetLeads service
	...						Pre-requisite: 
	...						Note: 		 
	...						Return Type : 
	...				  		Author  : Manisha Gadekar (Manisha.Gadekar@dealtertrack.com)
	...						Creation Date: 
	...						Update Date\By: 24 Jun 2015
	
	# Set values for all variables
	${PARTNERID}=		Get From Dictionary		${Scenario Setup}		Partner Id FD
	${DEALERID}=		Get From Dictionary		${Scenario Setup}		Partner Dealer Id FD
	${Environment}=		Get From Dictionary		${Scenario Setup}		Environment
	${Servicename}=		Set Variable 			FD ${VERSION} GetLeads
	
	# Setting Web Service parameters. This returns URL, Username, Password and Service in form of a dictionary.
    Web Service Setup    ${Environment}    ${FD_SERVICE}    ${Environment}-FD:${PARTNERID}    ${PARTNERID}
	Log 	${WS Setup}
	
	${LASTNAME}=		Replace String 		${LASTNAME}		${SPACE}		+							#spaces need to be replaced with +	
	
	${GetLeadURL}=		Catenate 	SEPARATOR=		${WS Setup['Url']}		${WS Setup['Service']}		${LEAD_REF}
	${GetLeadURL}=		Replace String 		${GetLeadURL}	QQQ				${PARTNERID}
	${GetLeadURL}=		Replace String 		${GetLeadURL}	999999			${DEALERID}
	${GetLeadURL}=		Replace String 		${GetLeadURL}	LASTNAME		${LASTNAME}
	Set Suite Variable	${GetLeadURL}						#TH
	Log 				${GetLeadURL}		warn			#TH - I added the warn
	
	# Send GET Request
	Send Get Request	${GetLeadURL}		${WS Setup['User Name']}	${WS Setup['Password']}		${F_Name}
	
	[Return]	${RESPONSETEXT}			#QQQ TH	- I added the return		

#################################################################################################################################################
GetLeads Service Setup	[Arguments]		${VERSION}		${LookupType}	${RefID}	${Identifier}		${FD_SERVICE}	${F_Name}	#${PARTNERID}
#################################################################################################################################################
	[Documentation]			This keyword checks FD GetLeads service
	#LookupType: 1=lastname, 2=email, 3=partnerefid
	#Identifier: lastname or emailaddress

	WriteToFile			${logfile}		Y		GetLeads Service Setup>>>
	
	${GetLeadURL}=		Set Variable	${EMPTY}
	
	WriteToFile			${logfile}		N		LookupType=${LookupType}
	WriteToFile			${logfile}		N		RefID=${RefID}
	WriteToFile			${logfile}		N		Identifier=${Identifier}
	WriteToFile			${logfile}		N		FD_SERVICE=${FD_SERVICE}
	WriteToFile			${logfile}		N		F_Name=${F_Name}
	WriteToFile			${logfile}		N		PARTNERID=${PARTNERID}
	
	# Set values for all variables
	# ${DEALERID}=		Get From Dictionary		${Scenario Setup}		Partner Dealer Id FD
	# ${Environment}=		Get From Dictionary		${Scenario Setup}		Environment
	${Servicename}=		Set Variable 			FD ${VERSION} GetLeads
	
	Web Service Setup2	${FD_SERVICE}    	FD					${PARTNERID}
	
	${Identifier}=		Replace String 		${Identifier}		${SPACE}		+				#spaces need to be replaced with + (example, Joe New+Mexico)	

	# 1 Lastname: /financedriver/v1.2/lead/?partnerid=AJK&partnerdealerid=5288900&lastname=Credco&leadrefid=160000000000367626
	# 2 Email: /financedriver/v1.2/lead/?partnerid=AJK&partnerdealerid=5288900&email=charliecredco@subdomain.email.com&leadrefid=160000000000367626
	# 3 PartnerRefID: /financedriver/v1.2/lead/?partnerid=AJK&partnerdealerid=1001000&lastname=Boyd&partnerreferencenumber=sdaf8768sdf
	
	${GetLeadURL}=		Run Keyword If		'${LookupType}'== '1'			Catenate 			SEPARATOR=		${WS Setup['Url']}		${WS Setup['Service']}		${RefID}	ELSE 	Set Variable	${GetLeadURL}
	${GetLeadURL}=		Run Keyword If		'${LookupType}'== '1'			Replace String 		${GetLeadURL}	QQQ				${PARTNERID}	ELSE 	Set Variable	${GetLeadURL}
	${GetLeadURL}=		Run Keyword If		'${LookupType}'== '1'			Replace String 		${GetLeadURL}	999999			${DEALERID}		ELSE 	Set Variable	${GetLeadURL}
	${GetLeadURL}=		Run Keyword If		'${LookupType}'== '1'			Replace String 		${GetLeadURL}	LASTNAME		${Identifier}	ELSE 	Set Variable	${GetLeadURL}

	${GetLeadURL}=		Run Keyword If		'${LookupType}'== '2'			Catenate 			SEPARATOR=		${WS Setup['Url']}		${WS Setup['Service']}		${RefID}		ELSE 	Set Variable	${GetLeadURL}
	${GetLeadURL}=		Run Keyword If		'${LookupType}'== '2'			Replace String 		${GetLeadURL}	QQQ				${PARTNERID}	ELSE 	Set Variable	${GetLeadURL}
	${GetLeadURL}=		Run Keyword If		'${LookupType}'== '2'			Replace String 		${GetLeadURL}	999999			${DEALERID}		ELSE 	Set Variable	${GetLeadURL}
	${GetLeadURL}=		Run Keyword If		'${LookupType}'== '2'			Replace String 		${GetLeadURL}	EMAIL			${Identifier}	ELSE 	Set Variable	${GetLeadURL}

	${GetLeadURL}=		Run Keyword If		'${LookupType}'== '3'			Catenate 			SEPARATOR=		${WS Setup['Url']}		${WS Setup['Service']}		${RefID}	ELSE 	Set Variable	${GetLeadURL}
	${GetLeadURL}=		Run Keyword If		'${LookupType}'== '3'			Replace String 		${GetLeadURL}	QQQ				${PARTNERID}	ELSE 	Set Variable	${GetLeadURL}
	${GetLeadURL}=		Run Keyword If		'${LookupType}'== '3'			Replace String 		${GetLeadURL}	999999			${DEALERID}		ELSE 	Set Variable	${GetLeadURL}
	${GetLeadURL}=		Run Keyword If		'${LookupType}'== '3'			Replace String 		${GetLeadURL}	LASTNAME		${Identifier}	ELSE 	Set Variable	${GetLeadURL}
	
	WriteToFile			${logfile}			Y				GetLeadURL=${GetLeadURL}	
	
	##########################################################################################################
	Send Get Request	${GetLeadURL}		${WS Setup['User Name']}	${WS Setup['Password']}		${F_Name}	
	##########################################################################################################
	
	[Return]	${RESPONSETEXT}	

##########################################################################################	
Send Get Request 	[Arguments]		${URL}		${Username}		${Password}		${F_Name}
##########################################################################################

	WriteToFile			${logfile}		Y		Send Get Request>>>
	WriteToFile			${logfile}		Y		URL=${URL}
	
	################################################################################################################
	${RESPONSECODE}	${RESPONSETEXT}=	Run Keyword and Continue On Failure		WS_CommonUtil.Send_Get_Request		${URL}		${Username}		${Password}		
	################################################################################################################	
	
	WriteToFile			${logfile}		Y		GetRequestResponseCode=${RESPONSECODE}
	# WriteToFile			${logfile}		Y		GetRequestErrorText=${ERRORTEXT}
	# WriteToFile			${logfile}		Y		GetRequestResponseText=${RESPONSETEXT}	
	
	# Log 	${RESPONSECODE}	
	# Log 	${RESPONSETEXT}	
	
	Set Suite Variable 		${RESPONSECODE}
	Set Suite Variable 		${RESPONSETEXT}
	# Set Suite Variable 		${ERRORTEXT}	
	
	${RESPONSE_FILE}							Catenate	SEPARATOR=		${F_Name}_GET_Response.xml
	WS_CommonUtil.Write_String_To_File		${RESOURCE}\\Other\\WebService\\Response\\${RESPONSE_FILE}		${RESPONSETEXT}
	Set Suite Variable 						${RESPONSE_FILE}
	
	Run Keyword If      '${RESPONSECODE}'!= '200'		WriteToFile				${logfile}	Y	Send Get Request Failed | Response does not contain node <LeadReferenceNumber>.	
	Run Keyword If		'${RESPONSECODE}'!= '200'		WriteToErrorLog			${ErrorLog}		Send Get Request Failed | Your Request is not successful. You have received response code: ${RESPONSECODE}. The error message is: ${RESPONSETEXT}.
	Run Keyword If      '${RESPONSECODE}'!= '200'       Fail        			Your Request is not successful. You have received response code: ${RESPONSECODE}. The error message is: ${RESPONSETEXT}.
	Run Keyword If      '${RESPONSECODE}'== '200'       Log 					Request is successful 	

	# Validation of Response - Verify that Lead ref no. node is present in the response
	${CountNodes}=		Get Element Count				${RESPONSETEXT}			.//LeadReferenceNumber

	Run Keyword If      '${CountNodes}'=='0'			WriteToFile				${logfile}	Y	Send Get Request Failed | Response does not contain node <LeadReferenceNumber>.	
	Run Keyword If      '${CountNodes}'=='0'			WriteToErrorLog			${ErrorLog}		Send Get Request Failed | Response does not contain node <LeadReferenceNumber>.
	Run Keyword If 		'${CountNodes}'=='0'			Fail 					Response does not contain node <LeadReferenceNumber>
	
	@{ELEMENTS}			Get Elements					${RESPONSETEXT}			.//LeadReferenceNumber
	${COUNT}			Get Length		${ELEMENTS}
	:FOR		${ELEMENT}		IN		@{ELEMENTS}   
	\			${NODE_CONTENT}			Element To String		${ELEMENT}
	\			Log 					${NODE_CONTENT}
	\			${NODE_CONTENT}=		Convert To String 		${NODE_CONTENT}
	\			Should Contain 			${NODE_CONTENT}			<LeadReferenceNumber>		Node <LeadReferenceNumber> is not found in Response.
	\			${temp_str}=			Remove String 			${NODE_CONTENT}				<LeadReferenceNumber>
	\			Log 					${temp_str}
	\			${GET_LEAD_REF}=		Remove String 			${temp_str}					</LeadReferenceNumber>
	
	Set Suite Variable 		${GET_LEAD_REF}
	
##########################################################################################	
Send Get Request2 	[Arguments]		${URL}		${Username}		${Password}		${F_Name}
##########################################################################################

	WriteToFile			${logfile}		Y		Send Get Request>>>

	################################################################################################################
	${RESPONSECODE}	${RESPONSETEXT}=	WS_CommonUtil.Send_Get_Request		${URL}		${Username}		${Password}		
	################################################################################################################	
	
	WriteToFile			${logfile}		Y		GetRequestResponseCode=${RESPONSECODE}
	
	# Log 	${RESPONSECODE}	
	# Log 	${RESPONSETEXT}	
	
	Set Suite Variable 		${RESPONSECODE}
	Set Suite Variable 		${RESPONSETEXT}
	
	${RESPONSE_FILE}							Catenate	SEPARATOR=		${F_Name}_GET_Response.xml
	WS_CommonUtil.Write_String_To_File		${RESOURCE}\\Other\\WebService\\Response\\${RESPONSE_FILE}		${RESPONSETEXT}
	Set Suite Variable 						${RESPONSE_FILE}
	
	Run Keyword If		'${RESPONSECODE}'!= '200'		WriteToErrorLog			${ErrorLog}		Send Get Request Failed | Your Request is not successful. You have received response code: ${RESPONSECODE}. The error message is: ${RESPONSETEXT}.
	Run Keyword If      '${RESPONSECODE}'!= '200'       Fail        			Your Request is not successful. You have received response code: ${RESPONSECODE}. The error message is: ${RESPONSETEXT}.
	Run Keyword If      '${RESPONSECODE}'== '200'       Log 					Request is successful 	

	Set Suite Variable 		${GET_LEAD_REF}

	
Validate Record On My Leads Page
	[Documentation]			This keyword validates record on My Leads page. Checks Applicant name and date.
	...						Pre-requisite: 
	...						Note: 		 
	...						Return Type : 
	...				  		Author  : Manisha Gadekar (Manisha.Gadekar@dealtertrack.com)
	...						Creation Date: 
	...						Update Date\By: 24 Jun 2015
	
	sleep	1s
	
	Wait Until Page Contains Element            //iframe[@id='iFrm']	error=Navigate to My Leads page is not successful. Page is not loaded correctly. Please check.
	Select Frame                                iFrm
	Wait Until Page Contains Element            //frame[@name='main']
	Select Frame                                main
	
	Wait Until Keyword Succeeds             120s        3s         Page Should Contain Element            //table[@id='DGLeadsReport']		 Leads table is not found.			loglevel=NONE		

	${ROW}=		Set Variable 	2
	
	${STR1}=			Catenate		SEPARATOR=			${SPACE}				${FIRSTNAME}
	${EXP_APPLICANT1}=		Catenate		SEPARATOR=,  		${LASTNAME}				${STR1}
	${EXP_APPLICANT}=		Evaluate	str('${EXP_APPLICANT1}').lower()
	
	######################
	${DELAY}=		Set Variable	90
	${TIME_FRACTION}=	Set Variable	5
	
	${COUNT}			Evaluate				${DELAY}/${TIME_FRACTION}
	${COUNT}			Convert To Integer		${COUNT}
	${SCAN}				Set Variable			0
	
	Wait Until Keyword Succeeds       120s         3s       Page Should Contain Element       //table[@id='DGLeadsReport']/tbody/tr[${ROW}]/td[3]/a		Applicant name is not shown on the page.		loglevel=NONE
	
	:For		${LOOP}		IN RANGE	1			${COUNT} + 1
	\	Sleep				${TIME_FRACTION}s
	\	Wait Until Keyword succeeds     60      10      Page Should Contain Element           //table[@id='DGLeadsReport']/tbody/tr[${ROW}]/td[3]/a
	\	Wait Until Page Contains Element		//table[@id='DGLeadsReport']/tbody/tr[${ROW}]/td[3]/a		10s
	\	${ACT_APPLICANT_SH1}=		Get Text		//table[@id='DGLeadsReport']/tbody/tr[${ROW}]/td[3]/a
	\	${ACT_APPLICANT_SH}=		Evaluate	str('${ACT_APPLICANT_SH1}').lower()
	\	Run Keyword If 		'${ACT_APPLICANT_SH}'=='None'			Fail			Unable to get value in Applicant Name column on My Leads Page. 
	\	${ACT_APPLICANT}=		Evaluate		str('${ACT_APPLICANT_SH}').strip()
	\ 	${EXEC_STATUS1}=			Run Keyword And Continue On Failure		Run Keyword And Return Status		Should Be Equal As Strings			${EXP_APPLICANT}			${ACT_APPLICANT_SH}		Comparison of Applicant name failed on My Leads Page. Expected value: ${EXP_APPLICANT}. Actual Value: ${ACT_APPLICANT_SH}. Please make sure that FD - Web Service is working fine as the expected record is not shown on My Leads page.		values=False
	\   ${SCAN}				Evaluate			${SCAN} + 1
	\ 	Run Keyword If		'${EXEC_STATUS1}'=='True'							Exit For Loop
	\	...		ELSE		Navigate Again To My Leads Page

	Should Be Equal As Strings			${EXP_APPLICANT}			${ACT_APPLICANT_SH}		Comparison of Applicant name failed on My Leads Page. Expected value: ${EXP_APPLICANT}. Actual Value: ${ACT_APPLICANT_SH}. Please make sure that FD - Web Service is working fine as the expected record is not shown on My Leads page.		values=False
	
	###################
	# date
	${YY}	${MM}	${DD}=		Get Time			year,month,day
	${EXP_DATE}=				Catenate		SEPARATOR=/			${MM}		${DD}
	
	# read actual date
	Wait Until Keyword succeeds     60      10      Page Should Contain Element           //table[@id='DGLeadsReport']/tbody/tr[${ROW}]/td[7]
	Wait Until Page Contains Element		//table[@id='DGLeadsReport']/tbody/tr[${ROW}]/td[7]		10s
	# # # # Wait Until Element Is Visible			//table[@id='DGLeadsReport']/tbody/tr[${ROW}]/td[7]		10s
	${ACT_CREATED}=			Get Text		//table[@id='DGLeadsReport']/tbody/tr[${ROW}]/td[7]
	@{ACT_CRT_LIST}=		Split String		${ACT_CREATED}
	${ACT_DATE}=			Get From List		${ACT_CRT_LIST}			0
	# compare values and send result
	Should Be Equal			${EXP_DATE}			${ACT_DATE}			Comparison of dates failed on My Leads Page. Expected value: ${EXP_DATE}. Actual Value: ${ACT_DATE}. Please make sure that FD - Web Service is working fine as the expected record is not shown on My Leads page.		values=False

################################################################	
Take Snapshot Of My Leads Page		#[Arguments]		${DEALERID}
################################################################
	[Documentation]			This keyword creates list of 5 records of My Leads page.
	...						Pre-requisite: 
	...						Note: 		 
	...						Return Type : 
	...				  		Author  : Manisha Gadekar (Manisha.Gadekar@dealtertrack.com)
	...						Creation Date: 
	...						Update Date\By: 24 Jun 2015
	
	WriteToFile			${logfile}				Y						Take Snapshot Of My Leads Page>>>
	
	# ${DEALERID}=		Get Substring			${DEALERID}				0		6
	
	# # # #################################
	# # # # Check logged in dealership
	# # # ${Bottom_Line}=		Get Logged In Dealership
	# # # WriteToFile			${logfile}			Y								DTPageStatusLine=${Bottom_Line}
	# # # ${Bottom_Line}=		Run Keyword If 		'${Bottom_Line}'!='${EMPTY}'	Convert To String 	${Bottom_Line}
	# # # ${Bottom_Line}=		Run Keyword If 		'${Bottom_Line}'!='${EMPTY}'	Replace String 		${Bottom_Line}		'		${EMPTY}
	# # # ${stat}=			Run Keyword If		'${Bottom_Line}'!='${EMPTY}'	Run Keyword And Return Status 	Should Contain 	${Bottom_Line}		${DEALERID}
	# # # ...					ELSE 				Set Variable 					False
	# # # ${Bottom_Line}=		Run Keyword If 		'${Bottom_Line}'!='${EMPTY}'	Replace String		${Bottom_Line}		(		%
	# # # ${Bottom_Line}=		Run Keyword If 		'${Bottom_Line}'!='${EMPTY}'	Replace String		${Bottom_Line}		)		%	
	# # # ${Temp1}	${ActualDealer}		${Temp2}=			Run Keyword If 		'${Bottom_Line}'!='${EMPTY}'	Split String	${Bottom_Line}		%		2
	# # # # Run Keyword If 		'${Bottom_Line}'!='${EMPTY}'	WriteToFile					${logfile}			Y							Was the switch successful? Expected=${DEALERID}. Actual=${ActualDealer}.
	# # # Run Keyword If 		'${stat}'=='False'				WriteToFile					${logfile}			Y							Switch not successful - Expected=${DEALERID}. Actual=${ActualDealer}.
	# # # Run Keyword If 		'${stat}'=='False'				Dealer Switch To Dealer 	${DEALERID}		
	# # # Run Keyword If 		'${Bottom_Line}'=='${EMPTY}'	WriteToFile					${logfile}			Y							Switch not successful - can't detect that switch was successful.
	# # # Run Keyword If 		'${Bottom_Line}'=='${EMPTY}'	Dealer Switch To Dealer 	${DEALERID}		
	# # # #################################	

	${val}=				Get Variable Value 		${BR}
	WriteToFile			${logfile}				Y			val(Browser)=${val}					
	
	# # # # ${DEALERID}=		Get From Dictionary		${Scenario Setup}		Partner Dealer Id FD
	# # # ${DEALERID}=		Get Substring			${DEALERID}				0		6
	
	# # # ${switchdealer}=	Get From Dictionary		${Scenario Setup}		SwitchDealership
	
	# # # ${DEALERID}=		Run Keyword If 		'${Environment}'=='DEV'		Set Variable	${switchdealer}
	# # # ...					ELSE				Set Variable				${DEALERID}
	
	Run Keyword If 		'${val}'!='None'	Switch Browser 		${BR}
	...		ELSE 		Login to DT And Switch Dealership		${DEALERID}

	# # # # Check logged in dealership
	# # # ${Bottom_Line}=		Get Logged In Dealership
	# # # ${stat}=			Run Keyword If		'${Bottom_Line}'!='${EMPTY}'	Run Keyword And Return Status 	Should Contain 	${Bottom_Line}		${DEALERID}
	# # # ...					ELSE 				Set Variable 					False
	
	# # # Run Keyword If 		'${stat}'!='True' 	Dealer Switch To Dealer 	${DEALERID}	

	# Navigate to My Leads
	Navigate To My Leads

	# Make list of first 5 records
	@{Records_Last}			Scan My Lead Page
	Unselect Frame
	Set Test Variable		@{Records_Last}	
	
	
Check If Mediator Is Working
	[Documentation]			This keyword checks if new record is added to My Leads page and then validates it.
	...						Pre-requisite: 
	...						Note: 		 
	...						Return Type : 
	...				  		Author  : Manisha Gadekar (Manisha.Gadekar@dealtertrack.com)
	...						Creation Date: 
	...						Update Date\By: 24 Jun 2015
	# adding some wait time so that record will be shown on UI
	sleep 	15s
	
	${New_Record_Added}=	Run Keyword and Return Status		Go to My Lead Page and Confirm new Record Added
	Run Keyword If		${New_Record_Added}==False		Fail 	Mediator: Record is not added on My Leads page after sending FD Leads request. Please check.
	# Check on UI that record appears on My Leads page
	Validate Record On My Leads Page
	
Login to DT And Switch Dealership
	[Arguments]				${DEALERID}
	[Documentation]			This keyword logs in to DT site and switches dealership.
	...						Pre-requisite: 
	...						Note: 		 
	...						Return Type : 
	...				  		Author  : Manisha Gadekar (Manisha.Gadekar@dealtertrack.com)
	...						Creation Date: 
	...						Update Date\By: 24 Jun 2015
	
	WriteToFile			${logfile}				Y					Login to DT And Switch Dealership>>>
	
	# Login
	Login Only If Required
	
	Log 		${DEALERID}		warn
	
	${Switch_Dealer_Id}=	Get Substring		${DEALERID}		0		6
    
	# ${Environment}=		Get From Dictionary		 ${Scenario Setup}		Environment
	# Log 		${Environment}
	
	# ${Dealership_id}=	Get From Dictionary		${Scenario Setup}		SwitchDealership
	
	# Dealer Switch
	# ${PD_DEALER_NUM}=	Set Variable 	${DEALERID}	
	# ${DEALERID}=		Run Keyword If 		'${Environment}'=='DEV'		Set Variable 	${Dealership_id}
	# ...					ELSE 				Set Variable 	${Switch_Dealer_Id}	
	
	WriteToFile			${logfile}				Y					Switch To Dealer=${Switch_Dealer_Id}
    
	Dealer Switch To Dealer 	${Switch_Dealer_Id}
	
Get Logged In Dealership

	WriteToFile		${LogFile}		Y		Get Logged In Dealership>>>

	Unselect Frame
	${FRAME_STATUS}			Run Keyword And Return Status		Wait Until Keyword Succeeds   30s	1s    Page Should Contain Element 	iFrm
	Select Frame			iFrm
	${FRAME_STATUS}			Run Keyword And Return Status		Wait Until Keyword Succeeds   30s	1s    Page Should Contain Element 	bottom
	Select Frame			bottom
	
	${stat}=	Run Keyword And Return Status 	Wait Until Keyword Succeeds    60s        3s         Page Should Contain Element            //form[@id='form1']//table/tbody/tr/td/font		 	Bottom frame on the page is not loaded.		loglevel=NONE
	${text}=	Run Keyword If 		${stat}			Get Text 		//form[@id='form1']//table/tbody/tr/td/font
	...			ELSE 		Set Variable 			${EMPTY}
	
	Unselect Frame
	
	[Return]				${text}
	
Verify Partner Posts		[Arguments]		${FD_SERVICE}	${REF_ID}	${TABLE_ID}		${ROW}	${COLUMN}	${Service_Name}
	[Documentation]			This keyword verifies if Test Response Utility is working or not.
	...						Pre-requisite: 
	...						Note: 		 
	...						Return Type : 
	...				  		Author  : Manisha Gadekar (Manisha.Gadekar@dealtertrack.com)
	...						Creation Date: 03 Jul 2015
	...						Update Date\By: NA
	
	Web Service Setup    ${Environment}    ${FD_SERVICE}    ${Environment}-FD:${PARTNERID}    ${PARTNERID}
	Log 	${WS Setup}
	
	# Create URL string
	${TRU_URL}=		Catenate 	SEPARATOR=		${LOGINURL}		${WS Setup['Service']}
	
	Run Keyword If 		'${GRID}'!='True' and '${BROWSER}'=='ie'	Disable IE Security Settings
	
	# Open browser to URL
	${BR_Val}=		Get Variable Value		${TRU_BR}
	
	${TRU_BR}=			Run Keyword If 		'${BR_Val}'=='None' and '${GRID}'!='True' 	Open Browser	${TRU_URL}		${BROWSER}
	...					ELSE IF				'${BR_Val}'=='None' and '${GRID}'=='True'	Open Browser	${TRU_URL}		${BROWSER}		alias=main	remote_url=http://${SELENIUM_HOST}:${SELENIUM_PORT}/wd/hub		desired_capabilities=ignoreProtectedModeSettings:True
	...					ELSE 		Set Variable 		${TRU_BR}
	
	Run Keyword If 		'${BR_Val}'!='None' 	Run Keywords	 	Switch Browser 		${TRU_BR}  	AND 	Go To 	${TRU_URL}
	
	# ${TRU_BR}=			Open Browser	${TRU_URL}		${BROWSER}
	
	Set Suite Variable		${TRU_BR}
	Maximize Browser Window
	
	# Login to Prequal TRU
	Run Keyword If 		'${BR_Val}'=='None' 	Login to Test Response Utilities 		${TRU_URL}	${Service_Name}
	
	# Search on page with reference id
	Search On TRU Page 		${REF_ID}	${Service_Name}
	
	# Perform basic validation on page
	Perform Validation On TRU Page		${TABLE_ID}		${ROW}	${COLUMN}	${REF_ID}	${Service_Name}
	
Login to Test Response Utilities 		
	[Arguments]		${URL}	${Service_Name}
	[Documentation]			This keyword logs into TRU page
	...						Pre-requisite: 
	...						Note: 		 
	...						Return Type : 
	...				  		Author  : Manisha Gadekar (Manisha.Gadekar@dealtertrack.com)
	...						Creation Date: 03 Jul 2015
	...						Update Date\By: NA
	
	
	
	# Wait till page is loaded
	Wait Until Keyword Succeeds             60s        3s         Page Should Contain Element            ${LOGIN_EDIT}		 	LoginID textbox is not found on ${Service_Name} Test Response Utilities Page.		loglevel=NONE
	
	# login to the application
	Input Text                  ${LOGIN_EDIT}      ${USER_ID}
	sleep	1s
	Input Password              ${PASSWORD_EDIT}   ${USER_PASSWORD}
	Sleep   1s
	
	# click Login button
	Run Keyword If                 '${BROWSER}'=='ff'       Click Element      //input[@id='_login']
	...								ELSE					Press Key          ${LOGIN_BTN}                  \\13
	
	# wait for page load
	Wait Until Keyword Succeeds    60s   	3s     			Page Should Contain Element             //input[@id='ButtonSearchByRefId'] 	    ${Service_Name} Test Response utilities page is not loaded.		loglevel=NONE

Search On TRU Page 		[Arguments]		${REF_ID}	${Service_Name}
	[Documentation]			This keyword performs the serach on TRU page for given ref id
	...						Pre-requisite: 
	...						Note: 		 
	...						Return Type : 
	...				  		Author  : Manisha Gadekar (Manisha.Gadekar@dealtertrack.com)
	...						Creation Date: 03 Jul 2015
	...						Update Date\By: NA
	# make sure that the page is loaded
	Wait Until Keyword Succeeds    60s      3s              Page Should Contain Element             //input[@id='TextBoxRefId'] 	   	 ${Service_Name} Test Response utilities page is not loaded.		loglevel=NONE
	
	# enter reference id to search for
	Input Text 			//input[@id='TextBoxRefId'] 		${REF_ID}
	Sleep 				1s
	
	# Click on Search button
	WriteToFile			${logfile}			Y			Requesting Post for ${Service_Name}		
	Press Key 			//input[@id='ButtonSearchByRefId']		\\13

	sleep 	3s
	
	# # wait till page is loaded
	# ${stat}=	Run Keyword And Return Status 	 Wait Until Keyword Succeeds    30s      5s   Page Should Contain Element             //table[@id='GridView1'] 	   	 No record is not shown on ${Service_Name} Test Response Utilities Page for Reference ID:${REF_ID}.		loglevel=NONE	
	
	# Run Keyword If 		'${stat}'=='False'		Press Key 			//input[@id='ButtonSearchByRefId']		\\13
	# Run Keyword If 		'${stat}'=='False'		Wait Until Keyword Succeeds    60s      5s      Page Should Contain Element             //table[@id='GridView1'] 	   	 No record is not shown on ${Service_Name} Test Response Utilities Page for Reference ID:${REF_ID}.		loglevel=NONE	  
	
	${DELAY}=		Set Variable	25	
	# ${DELAY}=		Set Variable	90
	${TIME_FRACTION}=	Set Variable	5
	
	${COUNT}			Evaluate				${DELAY}/${TIME_FRACTION}
	${COUNT}			Convert To Integer		${COUNT}
	${SCAN}				Set Variable			0
	
	Run Keyword And Ignore Error 		Wait Until Keyword Succeeds    30s      3s   Page Should Contain Element           //table[@id='GridView1'] 	No record is shown on ${Service_Name} Test Response Utilities Page for Reference ID:${REF_ID}.		loglevel=NONE	
	
	# Wait Until Keyword Succeeds    60s      3s   Page Should Contain Element             //table[@id='GridView1'] 	   	 No record is shown on ${Service_Name} Test Response Utilities Page for Reference ID:${REF_ID}.		loglevel=NONE	
	# Press Key 			//input[@id='ButtonSearchByRefId']		\\13
	
	:For		${LOOP}		IN RANGE	1			${COUNT} + 1
	\	WriteToFile			${logfile}			Y			Sleeping for ${TIME_FRACTION}			
	\	Sleep				${TIME_FRACTION}s
	# \	Wait Until Keyword succeeds     60      10      Page Should Contain Element           //table[@id='GridView1'] 
	\	${EXEC_STATUS1}=		Run Keyword And Continue On Failure		Run Keyword And Return Status	Page Should Contain Element           //table[@id='GridView1'] 
	\   ${SCAN}				Evaluate			${SCAN} + 1
	\ 	Run Keyword If		'${EXEC_STATUS1}'=='True'							Exit For Loop
	\	...		ELSE		Press Key 			//input[@id='ButtonSearchByRefId']		\\13
	\	WriteToFile			${logfile}			Y			Retried request for ${Service_Name}			

	Run Keyword If		'${EXEC_STATUS1}'!='True'	Fail 	Timeout exceeded. No record is shown on ${Service_Name} Test Response Utilities Page for Reference ID:${REF_ID}.	
	
Perform Validation On TRU Page	[Arguments]		${TABLE_ID}		${ROW}	${COLUMN}	${EXP_DATA}		${Service_Name}
	[Documentation]			This keyword verifies that the Ref id shown in table matches the Ref Id searched for
	...						Pre-requisite: 
	...						Note: 		 
	...						Return Type : 
	...				  		Author  : Manisha Gadekar (Manisha.Gadekar@dealtertrack.com)
	...						Creation Date: 03 Jul 2015
	...						Update Date\By: NA
	
	# make sure that the page is loaded
	WriteToFile			${logfile}			Y			Waiting for post response...
	Wait Until Keyword Succeeds    	60s      3s              Page Should Contain Element             //table[@id='${TABLE_ID}'] 	   	 Search Table is not shown on ${Service_Name} Test Response Utilities Page.		loglevel=NONE		
	# Wait Until Keyword Succeeds    	60s      3s              Page Should Contain Element             //table[@id='${TABLE_ID}'] 	   	 Search Table is not shown on ${Service_Name} Test Response Utilities Page.		loglevel=NONE	
	
	# read data from table
	${TBL_DATA}=	Get Text		//table[@id='${TABLE_ID}']/tbody/tr[${ROW}]/td[${COLUMN}]
	
	# compare ref ids
	Should Be Equal As Strings 		${EXP_DATA}		${TBL_DATA}		Expected and Actual values do not match on ${Service_Name} Test Response Utilities Page. Expected: ${EXP_DATA}. Actual Value: ${TBL_DATA}.
	
Send TPP Request 	[Arguments]		${VERSION}	${PARTNERID}	${DEALERID}		${WS_REQUEST_XML}	${Filename}		${Servicename}
	# Set up parameters to send request
	${WS_URL}=		Set Variable	${WS Setup['Service']}
	
	${Username}=	Set Variable	${WS Setup['User Name']}
	${Password}=	Set Variable	${WS Setup['Password']}
	${WS_REQUEST_XML}=		Convert To String 	${WS_REQUEST_XML}
	
	Log 			${WS_REQUEST_XML}
	
	# Send CB Req
	${RESPONSECODE}		${ERRORTEXT}	${RESPONSETEXT}			Send TPP Request Finance Driver		${WS_URL}		${WS_REQUEST_XML}	${Username}		${Password}
	Set Test Variable			${RESPONSECODE}
	Set Test Variable			${RESPONSETEXT}
	Set Test Variable			${ERRORTEXT}
	
	# Write Response in a file 
	${F_name}=		WS_CommonUtil.trimFromRight			${Filename}				4
	${RESPONSE_FILE}		Catenate	SEPARATOR=			${F_name}		_${VERSION}	_TPP_Response.txt
	WS_CommonUtil.Write_String_To_File		${RESOURCE}\\Other\\WebService\\Response\\${RESPONSE_FILE}		${RESPONSETEXT}
	
	Log			Code: ${RESPONSECODE}	
	Log			Response: ${RESPONSETEXT} 	
	Run Keyword If          '${RESPONSECODE}'!= '200'       Fail        Your Request: ${Servicename} is not successful. You have received response code: ${RESPONSECODE}. The error message is: ${RESPONSETEXT}.
	Run Keyword If			'${ERRORTEXT}'!='Nothing'		Fail		${Servicename}: Web Service Returned Error : ${ERRORTEXT} So Exiting Node Validation
	
	Run Keyword If          '${RESPONSECODE}'== '200'       Log 		Request: ${Servicename} is successful 	

Send TPP Request Finance Driver		[Arguments]		${URL}		${XML_REQUEST} 	${USERNAME}	 ${PASSWORD}			
	[Documentation]			This keyword is common for all web services and used to send TPP request for given Request XML.
	
	${RESPONSECODE}			${ERRORTEXT}	${RESPONSETEXT}=		Run Keyword If		${GRID}==False		WS_CommonUtil.Send_TPP_Request       ${WS_URL}		${XML_REQUEST}		${USERNAME}		${PASSWORD}		${RESOURCE}\\Other\\WebService
	...		ELSE			WS_CommonUtil.Send_TPP_Request       ${WS_URL}		${XML_REQUEST}		${USERNAME}		${PASSWORD}		${RESOURCE}/Other/WebService
	[Return]				${RESPONSECODE}			${ERRORTEXT}	${RESPONSETEXT}
	
Call TPP Service	[Arguments]		${VERSION}		${FOLDER_NAME}
	
	${PARTNERID}=		Get From Dictionary		${Scenario Setup}		Lender Id TPP
	${DEALERID}=		Get From Dictionary		${Scenario Setup}		Dealer Id TPP
	${Environment}=		Get From Dictionary		${Scenario Setup}		Environment
	${Servicename}=		Set Variable 			FD ${VERSION} TPP
	Set Suite Variable 		${PARTNERID}
	Set Suite Variable 		${DEALERID}
	
	${FD_SERVICE}= 	Set Variable 		${VERSION}-1:TPP
	
	${FD_SERVICE}=	Run Keyword If 		'${Environment}'=='DEV'		Set Variable 	${VERSION}-1:DEV-TPP
	...				ELSE 				Set Variable 				${FD_SERVICE}		
	
    # Setting Web Service parameters. This returns URL, Username, Password and Service in form of a dictionary.
    Web Service Setup    ${Environment}    ${FD_SERVICE}    ${Environment}-FD:${PARTNERID}    ${PARTNERID}
	Log 	${WS Setup}
	
	${WS_URL}=			Get From Dictionary 	${WS Setup}		Service
	Set Suite Variable 	${WS_URL}
	
	# Send requests
	Go For TPP Request		${VERSION}		${FOLDER_NAME}
	
Go For TPP Request 		[Arguments]		${VERSION}		${FOLDER_NAME}	
	[Documentation]			This keyword sends checks for Credit App input files in given folder matching the format and then sends request.
	...						Pre-requisite: 
	...						Note: 		 
	...						Return Type : 
	...				  		Author  : Manisha Gadekar (Manisha.Gadekar@dealtertrack.com)
	...						Creation Date: 
	...						Update Date\By: 24 Jun 2015
	
	${Global_Dict}=		Create Dictionary
	# ${Request_Dict}=		Create Dictionary
	
	@{LIST_FILENAMES}    List Files In Directory    ${FOLDER_NAME}    *.xml
    ${COUNT_FILES}=    Get Length    ${LIST_FILENAMES}
	Log 	Total Files: ${COUNT_FILES}	
	
	# Get List of TPP files in folder
	${PATTERN}= 	Catenate	SEPARATOR=		*	LeadXml		*.xml
	${PASSED}=		Run Keyword And Return Status		List Files In Directory      ${FOLDER_NAME}         ${PATTERN}
	
	@{FILENAMES}       Run Keyword If		${PASSED}	List Files In Directory        ${FOLDER_NAME}         ${PATTERN}      
	...						ELSE		Fail		No TPP Lead file is found in folder ${FOLDER_NAME}
	
	${len}= 	Get Length 		${FILENAMES}
	Log			App files: ${len}	
	
	Run Keyword If 		'${len}'=='${0}'		Fail 	No File is found matching the pattern * LeadXml * in ${FOLDER_NAME}.
	
	:FOR 	${Item}			IN RANGE 		0 		${len}
	\		${FILENAME}=	Get From List 	${FILENAMES}	${Item}
	\		Log 			${FILENAME}		
	\		Set Suite Variable 			${FILENAME}	
	\		${WS_REQUEST_XML}=		Read From File To String 	${FOLDER_NAME}\\${Filename}
	\		Log 	${WS_REQUEST_XML}
	\		${LENDLR_Id}=			Return Node Value  		${WS_REQUEST_XML}			<dt_lender_id>		</dt_lender_id>
	\		${D_Id}=				Return Node Value  		${WS_REQUEST_XML}			<dt_dealer_id>		</dt_dealer_id>
	\		# replace ids
	\		${WS_REQUEST_XML}=		Run Keyword If 			'${REPLACE_PARTNER}'=='y'	Replace String 		${WS_REQUEST_XML}	<dt_lender_id>${LENDLR_Id}</dt_lender_id>		<dt_lender_id>${PARTNERID}</dt_lender_id>
	\		...						ELSE					Set Variable 	${WS_REQUEST_XML}	
	\		${WS_REQUEST_XML}=		Run Keyword If 			'${REPLACE_PARTNER}'=='y'	Replace String 		${WS_REQUEST_XML}	<dt_dealer_id>${D_Id}</dt_dealer_id>		<dt_dealer_id>${DEALERID}</dt_dealer_id>
	\		...						ELSE					Set Variable 	${WS_REQUEST_XML}
	\		Log 		${WS_REQUEST_XML}
	\		# generate random lender_app_id
	\		${LENAPPID}=			Return Node Value  			${WS_REQUEST_XML}			<lender_app_id>		</lender_app_id>
	\		${RANDOMID}=			Generate Random String    6   [NUMBERS]
	\		${WS_REQUEST_XML}=		Run Keyword If 			'${REPLACE_PARTNER}'=='y'	Replace String 			${WS_REQUEST_XML}	<lender_app_id>${LENAPPID}</lender_app_id>		<lender_app_id>${RANDOMID}</lender_app_id>
	\		Log 		${WS_REQUEST_XML}
	\		# generate random tpp_ref_id
	\		${TPPREFID}=			Return Node Value  		${WS_REQUEST_XML}			<tpp_ref_id>			</tpp_ref_id>
	\		${RANDOMID}=			Generate Random String    6   [NUMBERS]
	\		${WS_REQUEST_XML}=		Run Keyword If 			'${REPLACE_PARTNER}'=='y'	Replace String 			${WS_REQUEST_XML}	<tpp_ref_id>${TPPREFID}</tpp_ref_id>		<tpp_ref_id>${RANDOMID}</tpp_ref_id>
	\		Log 		${WS_REQUEST_XML}
	\		Set Suite Variable		${WS_REQUEST_XML}
	\		Send TPP Request 		${VERSION}	${PARTNERID}	${DEALERID}		${WS_REQUEST_XML}	${FILENAME}			${Servicename}
	\		${TPP_DT_APP_ID}= 		Run Keyword If 		'${RESPONSECODE}'=='200'	Get Element Text		${RESPONSETEXT}			.//dt_app_id
	\		...						ELSE 				Set Variable 		${EMPTY}
	\		Set Suite Variable 		${TPP_DT_APP_ID}
	\		Set To Dictionary		${REF_DICT}			TPP_DT_APP_ID			${TPP_DT_APP_ID}
	\		Set Suite Variable 		${REF_DICT}
	\		Log Dictionary 			${REF_DICT}
	
	\		${Request_Dict}=		Add Details Of Request To Dictionary
	\		Log Dictionary 			${Request_Dict}
	\		Set To Dictionary 		${Request_Dict}		TPP_DT_APP_ID			${TPP_DT_APP_ID}
	
	\		Log Dictionary 			${Request_Dict}
	\		Set To Dictionary		${Global_Dict}		${Item}		${Request_Dict}
	\		Log Dictionary 			${Global_Dict}
	\		Set Suite Variable 		${Global_Dict}
	

	
	
Get Lead Ref From TPP Response 		[Arguments]		${DT_APP_ID}
	${PARTNERID}=		Get From Dictionary		${Scenario Setup}		Lender Id TPP
	${DEALERID}=		Get From Dictionary		${Scenario Setup}		Dealer Id TPP
	${Environment}=		Get From Dictionary		${Scenario Setup}		Environment
	${Servicename}=		Set Variable 			FD ${VERSION} TPP
	Set Suite Variable 		${PARTNERID}
	Set Suite Variable 		${DEALERID}
	
	${FD_SERVICE}= 	Set Variable 		${VERSION}-1:SPLUNK

	${FD_SERVICE}= 	Run Keyword If 		'${Environment}'=='DEV'		Set Variable 	${VERSION}-1:DEV-SPLUNK
	...				ELSE 				Set Variable 				${FD_SERVICE}	
	
    # Setting Web Service parameters. This returns URL, Username, Password and Service in form of a dictionary.
    Web Service Setup    ${Environment}    ${FD_SERVICE}    ${Environment}-FD:${PARTNERID}    ${PARTNERID}
	Log 	${WS Setup}
	
	${Splunk_URL}=		Get From Dictionary 	${WS Setup}		Service
	
	# Add dt_app_id
	${Splunk_URL}=		Replace String 			${Splunk_URL}	APPID		${DT_APP_ID}
	Log 				${Splunk_URL}
	Set Suite Variable 		${Splunk_URL}
	
	sleep 		60s
	# login to Splunk and return source
	${SOURCE}=		Open Splunk And Get Source	${Splunk_URL}
	
	Log 	${SOURCE}	warn
	
	Switch Browser 		 ${Splunk_BR}
	# Wait Until Keyword Succeeds    	120s      3s     Page Should Contain Element             //table[@id='view518-table'] 	   	 Search Table is not shown on Splunk Page.		loglevel=NONE			
	Wait Until Keyword Succeeds    	30s      3s     Page Should Contain Element             //table[@id='view518-table'] 	   	 Search Table is not shown on Splunk Page.		loglevel=NONE				
	${text1}= 		Run Keyword And Continue On Failure 	Get Text				//table[@id='view518-table']/tbody/tr[1]/td[@class='event']
	log 			${text1}
	
	${text2}= 		Run Keyword And Continue On Failure 	Get Text				//table[@id='view518-table']/tbody/tr[2]/td[@class='event']
	log 			${text2}
	
	${text3}= 		Run Keyword And Continue On Failure 	Get Text				//table[@id='view518-table']/tbody/tr[3]/td[@class='event']
	log 			${text3}
	
	${LD_Ref_TPP}=		Get Lead Reference Number 	${text1}	${text2}	${text3}
	
	Set Suite Variable 	${LD_Ref_TPP}
	
	Set To Dictionary		${REF_DICT}			TPP_LD_REF			${LD_Ref_TPP}
	Set Suite Variable 		${REF_DICT}
	
	[Return]	${LD_Ref_TPP}
	
Open Splunk And Get Source		[Arguments]				${Splunk_URL}

	Run Keyword If 		'${GRID}'!='True' and '${BROWSER}'=='ie'	Disable IE Security Settings
	# Run Keyword If 		'${GRID}'!='True'	Disable IE Security Settings
	${Splunk_BR}=	Run Keyword If 		'${GRID}'!='True'	Open Browser	${Splunk_URL}		${BROWSER}
	...				ELSE 				Open Browser	${Splunk_URL}		${BROWSER}		alias=main	remote_url=http://${SELENIUM_HOST}:${SELENIUM_PORT}/wd/hub		desired_capabilities=ignoreProtectedModeSettings:True
	Set Suite Variable		${Splunk_BR}
	Maximize Browser Window
	
	${LoginRequired}=	Run Keyword And Return Status 	Page Should Contain Element		//input[@id='username']		loglevel=NONE
	Run Keyword If 		'${LoginRequired}'=='True'		Login To Splunk

	# ${DELAY}=			Set Variable	120
	# ${TIME_FRACTION}=	Set Variable	5
	
	${DELAY}=			Set Variable	20
	${TIME_FRACTION}=	Set Variable	5
	
	
	${COUNT}			Evaluate				${DELAY}/${TIME_FRACTION}
	${COUNT}			Convert To Integer		${COUNT}
	${SCAN}				Set Variable			0
	${stat}				Set Variable 			False
	
	Wait Until Keyword Succeeds    	30s      5s     Page Should Contain Element             //td[@class='search-button']/div/a[@class='btn'] 	   	 Search button is not shown on Splunk Page.		loglevel=NONE		 
	Press Key 		//td[@class='search-button']/div/a[@class='btn']	\\13
	sleep 			15s
	
	:For		${LOOP}		IN RANGE	1			${COUNT} + 1
	\	Sleep				${TIME_FRACTION}s
	\	${stat}= 	Run Keyword And Return Status 	Wait Until Keyword Succeeds    	30s      5s     Page Should Contain Element             //table[@id='view518-table']/tbody/tr[1]/td[@class='event'] 	   	 Search Table is not shown on Splunk Page.		loglevel=NONE		
	\ 	Run Keyword If		'${stat}'=='True'							Exit For Loop
	\	...		ELSE		Press Key 		//td[@class='search-button']/div/a[@class='btn']	\\13

	Run Keyword If		'${stat}'=='False'		Fail 	No record is shown in Splunk for given App id after waiting for reasonable amount of time.
	${SOURCE}=			Get Source
	
	[Return]		${SOURCE}	
	
Login To Splunk
	${usernmsplunk}=	Get From Dictionary		${Scenario Setup}		Splunk_UserID
	${pwdsplunk}=		Get From Dictionary		${Scenario Setup}		Splunk_Password
	Input Text 		//input[@id='username']		${usernmsplunk}			#${Splunk_UserID}
	sleep 	1s
	Input Text 		//input[@id='password']		${pwdsplunk}	#${Splunk_UserPWD}

	sleep 	1s
	
	Press Key 		//input[@value='Sign in']		\\13
	
	Wait Until Keyword Succeeds    	120s      3s     Page Should Contain Element            //td[@class='search-button']/div/a[@class='btn']	   	 Splunk: Page is not loaded properly.		loglevel=NONE	
	
Get Lead Reference Number 	[Arguments]		${text1}	${text2}	${text3}	
	${POS}=		WS_CommonUtil.GetNodePositions		${text1}	LeadReferenceNumber
	${END}=		Evaluate 	${POS[0]}+38
	${LD1}=		Get Substring 		${text1}		${POS[0]}		${END}
	
	${POS}=		Run Keyword If 		'${LD1}'=='${EMPTY}'	WS_CommonUtil.GetNodePositions		${text2}	LeadReferenceNumber
	${END}=		Run Keyword If 		'${LD1}'=='${EMPTY}'	Evaluate 	${POS[0]}+38
	${LD2}=		Run Keyword If 		'${LD1}'=='${EMPTY}'	Get Substring 		${text2}		${POS[0]}		${END}
	
	${POS}=		Run Keyword If 		'${LD2}'=='${EMPTY}'	WS_CommonUtil.GetNodePositions		${text3}	LeadReferenceNumber
	${END}=		Run Keyword If 		'${LD2}'=='${EMPTY}'	Evaluate 	${POS[0]}+38
	${LD3}=		Run Keyword If 		'${LD2}'=='${EMPTY}'	Get Substring 		${text3}		${POS[0]}		${END}
	
	Run Keyword If 		'${LD1}'=='${EMPTY}' and '${LD2}'=='${EMPTY}' and '${LD3}'=='${EMPTY}'		Fail 		LeadReferenceNumber is not found on Splunk page.
	
	${LD}=		Run Keyword If 		'${LD1}'!='${EMPTY}'	Set Variable 	${LD1}
	...			ELSE IF 			'${LD2}'!='${EMPTY}'	Set Variable 	${LD2}
	...			ELSE IF 			'${LD3}'!='${EMPTY}'	Set Variable 	${LD3}
	...			ELSE 				Set Variable 			${EMPTY}
	
	@{Words}=	Split String 	${LD}
	${LDR}=		Get From List 	${Words}	1
	
	[Return]	${LDR}
	
Check Node In DDF And Get Node Text 	[Arguments]		${NodeContent}		${Nodename}
	
	# Verify Node in XML
	${stat}=			Check Node In DDF 		${NodeContent}		${Nodename}
	Run Keyword If 		'${stat}'!='True'		Fail	Node <${Nodename}> is not found in DDF. This is not expected.
	
	# get lead ref id from DDF
	
	${NODE}=		Set Variable 		${Nodename}
	${NODE}=		Convert To String 	${NODE}
	@{ELEMENTS}		Get Elements		${NodeContent}		.//${NODE}
	${COUNT}		Get Length			${ELEMENTS}
	${NODE_CONTENT}=			Set Variable 		${EMPTY}
	
	:FOR		${ELEMENT}		IN		@{ELEMENTS}   
	\			${NODE_CONTENT}			XML.Get Element Text		${ELEMENT}
	\			Log 					${NODE_CONTENT}
	# \			Run Keyword If 			'${NODE_CONTENT}'!='${EMPTY}'	Exit For Loop
	
	
	Run Keyword If 		'${NODE_CONTENT}'=='${EMPTY}'	Fail 	Node <${Node_Val}> is empty.
	
	[Return]	${NODE_CONTENT}
	
	
Take Snapshot Of Customer Folders Page
	${val}=				Get Variable Value 		${BR}
	
	${DEALERID}=			Get Substring			${DEALERID}				0		6
	# Set Suite Variable 		${DEALERID}
	
	
	Run Keyword If 		'${val}'!='None'	Switch Browser 		${BR}
	...		ELSE 		Login to DT And Switch Dealership		${DEALERID}
	
	
	# Check logged in dealership
	${Bottom_Line}=		Get Logged In Dealership
	${Bottom_Line}=		Convert To String 	${Bottom_Line}
	${Bottom_Line}=		Replace String 		${Bottom_Line}		'		${EMPTY}
	${stat}=			Run Keyword If		'${Bottom_Line}'!='${EMPTY}'	Run Keyword And Return Status 	Should Contain 	${Bottom_Line}		${DEALERID}
	...					ELSE 				Set Variable 					False
	
	Run Keyword If 		'${stat}'!='True'	Dealer Switch To Dealer 	${DEALERID}	
	
	# Navigate to Customer Folders 
	Navigate to Customer Folders

	# Make list of first 5 records
	@{Records_Last}		Scan Customer Folders Page
	Unselect Frame
	Set Test Variable		@{Records_Last}	
	
Scan Customer Folders Page	
	[Documentation]			This keyword adds first 5 records of Customer folders page in to list
	...						Pre-requisite : N/A
	...						Note: 		  : N/A
	...						Arguments: 	  : N/A
	...				  		Author        : Manisha Gadekar
	...						Creation Date : 16th Jul 2015
	...						Update Date\By: 
	Unselect Frame
	Wait Until Page Contains Element            //iframe[@id='iFrm']	error=Navigate to My Leads page is not successful. Page is not loaded correctly. Please check.
	Select Frame                                iFrm
	Wait Until Page Contains Element            //frame[@name='main']
	Select Frame                                main
	
	Wait Until Keyword succeeds        	60     10         Page Should Contain Element         //table[@id='RadGrid1_ctl00']		loglevel=NONE
	
	@{RecordsList}		Create List
	
	:For	${I}	IN RANGE	1		7
	\	${Row_stat}=			Run Keyword And Return Status 		Page Should Contain Element		//table[@id='RadGrid1_ctl00']/tbody/tr[${I}]/td[2]/a 		loglevel=NONE
	\	Run Keyword If 			'${Row_stat}'!='True'			Exit For Loop
	\	Wait Until Keyword succeeds        	60     10         	Page Should Contain Element         //table[@id='RadGrid1_ctl00']/tbody/tr[${I}]/td[2]/a	loglevel=NONE
	\	${Stat}=			Run Keyword And Return Status 		Selenium2Library.Get Text	//table[@id='RadGrid1_ctl00']/tbody/tr[${I}]/td[2]/a
	\	${I_Row_Record}		Run Keyword If 		'${stat}'=='True'		Selenium2Library.Get Text		//table[@id='RadGrid1_ctl00']/tbody/tr[${I}]/td[2]/a
	\   ...		ELSE		Set Variable 		${EMPTY}
	\	Append To List		${RecordsList}		${I_Row_Record}

	Log List 	${RecordsList}	
	[Return]	@{RecordsList}
	
Go to Customer Folder Page and Confirm new Record Added
	[Arguments]		${TIME_OUT}=90		${INT_TIME}=10
	[Documentation]			This keyword checks if new record is shown on Customer Folder page or not
	...						Pre-requisite : N/A
	...						Note: 		  : N/A
	...						Arguments: 	  : N/A
	...				  		Author        : Manisha Gadekar
	...						Creation Date : 15th Jul 2015
	...						Update Date\By: N/A
	
	${Iter_Count}		Evaluate	${TIME_OUT}/${INT_TIME}
	:For	${I}	IN RANGE	0		${Iter_Count}
	\	Sleep	10s
	\	Navigate to Customer Folders
	\	@{Records_Now}		Scan Customer Folders Page
	\	Log		${Records_Last}
	\	Log		${Records_Now}
	\	${Lists_Matched}		Run Keyword and Return Status		Lists Should Be Equal		${Records_Last}		${Records_Now}
	\	Unselect Frame
	\	@{Records_Last}		Copy List	${Records_Now}
	\	Set Test Variable		@{Records_Last}
	\	Run Keyword If		${Lists_Matched}==False		Exit For Loop
	#	...		ELSE	Copy List	${Records_Now}
	
	Run Keyword If		${Lists_Matched}==True				Fail		New record is not appeared on Customer Folders Page after ${TIME_OUT} seconds
	
	
Validate Record On Customer Folder Page
	[Documentation]			This keyword validates the record on Customer Folders page
	...						Pre-requisite : N/A
	...						Note: 		  : N/A
	...						Arguments: 	  : N/A
	...				  		Author        : Manisha Gadekar
	...						Creation Date : 15th Jul 2015
	...						Update Date\By: N/A
	
	Log 	${WS_REQUEST_XML}
	
	Unselect Frame
	Wait Until Page Contains Element            //iframe[@id='iFrm']
	Select Frame                                iFrm
	Wait Until Page Contains Element            //frame[@name='main']
	Select Frame                                main

	# wait till page is shown
	Wait Until Keyword succeeds        	60     10         Page Should Contain Element         //table[@id='RadGrid1_ctl00']/tbody/tr[1]/td[2]/a		Table is not found on Customer Folders Page. 	loglevel=NONE
	
	# Read first record
	${Actual_text}= 		Get Text 		//table[@id='RadGrid1_ctl00']/tbody/tr[1]/td[2]
	${Expected_text}=		Catenate 		SEPARATOR=		${LASTNAME}		,	${SPACE}	${FIRSTNAME}	#		${SPACE} 	(	${COLASTNAME}	,	${SPACE}	${COFIRSTNAME}		)
	
	${Actual_text}=			Evaluate		str('${Actual_text}').strip()	
	${Expected_text}=		Evaluate		str('${Expected_text}').strip()	
	
	# middle name
	${NODE_NAME}=			Convert To String			.//PrimaryApplicant/ApplicantInfo/MiddleInitial
	${MiddleNAME}=			XML.Get Element Text		${WS_REQUEST_XML}			${NODE_NAME}
	 
	${Expected_text}=		Run Keyword If 		'${MiddleNAME}'!='${EMPTY}'		Catenate 		SEPARATOR=		${Expected_text}	${SPACE}	${MiddleNAME}		.
	...						ELSE 				Set Variable 					${Expected_text}
	${Actual_text}=			Evaluate		str('${Actual_text}').strip()	
	${Expected_text}=		Evaluate		str('${Expected_text}').strip()	
	
	#if co-app
	${Expected_text}=		Run Keyword If 			'${ISCOAPP}'=='True'	Catenate 		SEPARATOR=		${Expected_text}	${SPACE} 	(	${COLASTNAME}	,	${SPACE}	${COFIRSTNAME}		)
	...						ELSE 				Set Variable 					${Expected_text}
	
	${Actual_text}=			Evaluate		str('${Actual_text}').strip()	
	${Expected_text}=		Evaluate		str('${Expected_text}').strip()	
	
	
	# Compare expected and actual
	Should Be Equal As Strings 		${Actual_text}		${Expected_text}	Displayed record on Customer Folders page do not match with expected. Expected: ${Expected_text}. Actual: ${Actual_text}		values=False
	
	# # Click link to open the details
	# Press Key 		//table[@id='RadGrid1_ctl00']/tbody/tr[1]/td[2]/a 		\\13
	
	# # wait till page opens
	# Wait Until Keyword succeeds        	60     10         Page Should Contain Element         //table[@id='CmplDetailRadGrid_ctl00']		Table is not found on Customer Folders details Page. 	loglevel=NONE	
	
Create Expected List Of Documents
	
	# generating document names ID and OFAC with customer names for App and Co-App
	# validate the documents created
	${App_ID}=		Catenate 	SEPARATOR=		ID Verification		${SPACE}	(	${LASTNAME}		,		${SPACE}	${FIRSTNAME}	)
	${COAPP_ID}=	Catenate 	SEPARATOR=		ID Verification		${SPACE}	(	${COLASTNAME}	,		${SPACE}	${COFIRSTNAME}	)
	
	${App_OFAC}=		Catenate 	SEPARATOR=		OFAC	${SPACE}	(	${LASTNAME}		,		${SPACE}	${FIRSTNAME}	)
	${COAPP_OFAC}=		Catenate 	SEPARATOR=		OFAC	${SPACE}	(	${COLASTNAME}	,		${SPACE}	${COFIRSTNAME}	)
	
	${CB_Report_APP}=	Catenate 	SEPARATOR=		Credit Bureau Report	${SPACE}	(	${LASTNAME}		,		${SPACE}	${FIRSTNAME}	)
	
	# Creating expected list of documents
	@{ExpectedDocList}=		Create List		Personal Credit Info 	 	Credit Bureau Authorization 	
	...						Risk Based Pricing Notice 		Credit Bureau Report	
	...						${App_ID}		${App_OFAC}
	
	# privacy notice
	Log 		${WS_REQUEST_XML}
	${PrivacyNotice}=  		Get Element Text		${RESPONSETEXT}		.//PrivacyNotice
	Run Keyword If 			'${PrivacyNotice}'=='true'		Append To List 		${ExpectedDocList}		Privacy Notice
	
	Log 					${ISCOAPP}		warn
	Run Keyword If 			'${ISCOAPP}'=='True'		Append To List 		${ExpectedDocList}		${COAPP_ID}		${COAPP_OFAC}
	
	# Financial / Collateral Info
	${App_status}=		Get Status Of App From My Leads Page
	${App_status}=		Convert To String 	${App_status}
	
	Run Keyword If 		'${App_status}'=='App Submitted'	Append To List 		${ExpectedDocList}		Financial / Collateral Info
	
	# Expected List
	Log List 	${ExpectedDocList}
	
	[Return]	${ExpectedDocList}
	
Validate Documents For Customer Folder Entry	[Arguments]		${ExpectedDocList}
	
	# navigate to page
	Navigate to Customer Folders
	sleep 	2s
	
	Unselect Frame
	Wait Until Page Contains Element            //iframe[@id='iFrm']
	Select Frame                                iFrm
	Wait Until Page Contains Element            //frame[@name='main']
	Select Frame                                main

	Wait Until Keyword Succeeds 	60	3	Page Should Contain Element 	//table[@id='RadGrid1_ctl00']/tbody/tr[1]/td[2]/a	Table element is not found on Customer Folders page.	loglevel=None
	# Click link to open the details documents page
	Press Key 		//table[@id='RadGrid1_ctl00']/tbody/tr[1]/td[2]/a 		\\13
	
	# wait till page opens
	Wait Until Keyword succeeds        	60     10         Page Should Contain Element         //table[@id='CmplDetailRadGrid_ctl00']		Table is not found on Customer Folders details Page. 	loglevel=NONE	
	
	
	@{ActualDocList}=		Create List
	
	# Get list of all documents
	${Count}		Get Matching Xpath Count		//table[@id='CmplDetailRadGrid_ctl00']/tbody/tr
	
	:For	${I}		IN RANGE	1			${COUNT}+1
	\		Wait Until Keyword succeeds        	60     10         Page Should Contain Element         //table[@id='CmplDetailRadGrid_ctl00']/tbody/tr[${I}]/td[2]/a	Table row not found on Customer Folder Page. 	loglevel=NONE
	\		${text}=	Get Text				//table[@id='CmplDetailRadGrid_ctl00']/tbody/tr[${I}]/td[2]
	\		Append To List 						${ActualDocList}		${text}
	
	Log List 	${ActualDocList}
	
	# Expected List
	Log List 	${ExpectedDocList}
	Sort List	${ExpectedDocList}
	Log List	${ExpectedDocList}
	
	# Actual List
	Log List 	${ActualDocList}
	Sort List 	${ActualDocList}
	Log List 	${ActualDocList}
	
	@{DiffList}=	Create List
	${len}=			Get Length 		${ExpectedDocList}
	
	:For	${I}		IN RANGE	0		${len}
	\		${Val}=		Get From List 		${ExpectedDocList}		${I}
	\		${stat}=	Check Doc In Actual List 		${Val}		${ActualDocList}
	\		Run Keyword If 		'${stat}'!='True'	Append To List 		${DiffList}		${Val}
	# \		${stat}=	Run Keyword And Return Status 	List Should Contain Value	${ActualDocList}	${Val}
	# \		Run Keyword If 		'${stat}'!='True'	Append To List 		${DiffList}		${Val}
	
	${DiffLen}=			Get Length 			${DiffList}
	# ${DiffList}= 		Convert To String 	${DiffList}
	Log List			${DiffList}
	# Run Keyword If 		${DiffLen}!=0		Run Keywords	Log 	These documents are are not found: 		WARN	AND 	Log List 	${DiffList}		WARN
	Run Keyword If 		${DiffLen}!=0		Run Keywords	Log 	These documents are are not found: 		WARN	AND 	Log List 	${DiffList}		WARN		AND		Fail 		Actual list of Compliance documents do not match with expected list. 


Check Doc In Actual List 		[Arguments]		${Val}		${ActualDocList}	
	${len1}=	Get Length 		${ActualDocList}	
	
	:For	${I}		IN RANGE	0		${len1}
	\		${V_Act}=		Get From List 		${ActualDocList}		${I}
	\		${stat1}=	Run Keyword And Return Status 	Should Contain 		${V_Act}	${Val}
	\		Run Keyword If 	'${stat1}'=='True'		Exit For Loop
	
	${retval}=		Run Keyword If 	'${stat1}'!='True'		Set Variable 	False
	...				ELSE 		Set Variable 	True
	[Return]	${retval}

Append App Names to Document 	[Arguments]		${ExpectedDocList}	
	${TempList}=	Create List
	${len}=		Get Length 		${ExpectedDocList}	
	
	:For	${I}		IN RANGE	0		${len}
	\		${Val}=		Get From List 		${ExpectedDocList}		${I}
	\		${NewVal}=	Catenate 	SEPARATOR=		${Val}	${SPACE}	(	${LASTNAME}		,		${SPACE}	${FIRSTNAME}	)
	\		Append To List 			${TempList}		${NewVal}
	
	Log List 		${TempList}
	[Return]	${TempList}
	
# # # Create Log Flat File
	# # # ${cur_time}	Get Time
	# # # ${cur_time}	Replace String	${cur_time}	:	-	-1
	
	# # # ${Logs_File_Path}=		Set Variable	${RESOURCE}/ExecutionLog
	# # # ${Flat_Log_File}=		Set Variable 	LogFile_${cur_time}.txt
	# # # Create File 			${Logs_File_Path}/${Flat_Log_File}
	
	# # # Set Suite Variable 		${Logs_File_Path}
	# # # Set Suite Variable 		${Flat_Log_File}
	
Get Status Of App From My Leads Page
	# Navigate to My Leads Page
	Navigate To My Leads
	
	Unselect Frame
	Wait Until Page Contains Element            //iframe[@id='iFrm']
	Select Frame                                iFrm
	Wait Until Page Contains Element            //frame[@name='main']
	Select Frame                                main
	
	Log 	${FIRSTNAME}
	Log 	${LASTNAME}
	
	Wait Until Keyword succeeds        	60     10         Page Should Contain Element         //table[@id='DGLeadsReport']		Leads table is not found on My Leads Page.	 	loglevel=NONE

	# Read first record name
	${stat}=		Run Keyword And Return Status 		Page Should Contain Element        //table[@id='DGLeadsReport']/tbody/tr[2]/td[3]
	${Act_Name}=	Run Keyword If 		'${stat}'=='True'		Get Text 		//table[@id='DGLeadsReport']/tbody/tr[2]/td[3]
	...				ELSE 		Fail 	Unable to read value of record on My Leads page.
	
	${stat}=			Run Keyword And Return Status 	Should Contain 		${Act_Name}		${LASTNAME}			Record is not found on My Leads page for ${LASTNAME}, ${FIRSTNAME}
	Run Keyword If 		'${stat}'!='True'		Fail 	Record is not found on My Leads page for ${LASTNAME}, ${FIRSTNAME}
	
	Page Should Contain Element  	//table[@id='DGLeadsReport']/tbody/tr[2]/td[9]		Failed to find Status column on My Leads page.
	${AppStatus}=		Get Text 	//table[@id='DGLeadsReport']/tbody/tr[2]/td[9]
	
	[Return] 	${AppStatus}

################################################	
Send GET For DDF 	[Arguments]		${LEAD_REF}
################################################	
	
	Log 		${FILENAME}
	# set services tag
	${FD_SERVICE}= 		Run Keyword If 		'${Environment}'!='DEV'		Set Variable 		${VERSION}-1:DDF
	...					ELSE 			Set Variable 		${VERSION}-1:DEV-DDF
	
    # Setting Web Service parameters. This returns URL, Username, Password and Service in form of a dictionary.
    Web Service Setup    ${Environment}    ${FD_SERVICE}    ${Environment}-FD:${PARTNERID}    ${PARTNERID}
	Log 	${WS Setup}	

	${DDF_URL}=		Catenate 	SEPARATOR=		${WS Setup['Service']}		${LEAD_REF}
		Log			DDF_URL=${DDF_URL}		warn		#QQQ TH
	${Username}= 	Set Variable 	${WS Setup['User Name']}
	${Password}=	Set Variable 	${WS Setup['Password']}
		Log			Username=${Username}
		Log			Password=${Password}
	
	Send Get Request		${DDF_URL}		${Username}		${Password}		${FILENAME}
	
	Log 	${RESPONSECODE}
	Log 	${RESPONSETEXT}	
	
	[Return]	${RESPONSETEXT}	
	
	
#############################################################################	
Send Get For PartnerPosts 	[Arguments]		${ResponseType}		${RefID}
#############################################################################

	#DDF 	= ADFPlusResponses
	#App 	= TestCAPartnerResponse
	#PQ 	= PreQualResponse
	#CBWS 	= CBResponse
	#Lender = LenderXmlResponses
	
	WriteToFile			${logfile}			Y			Send Get For PartnerPosts>>>
	WriteToFile			${logfile}			Y			ResponseTypeIn=${ResponseType}	
	
	${ResponseType}=	Run Keyword If		'${ResponseType}'=='DDF'	Set Variable		ADFPlusResponses/
	...	ELSE IF								'${ResponseType}'=='App'	Set Variable		TestCAPartnerResponse/
	...	ELSE IF								'${ResponseType}'=='PQ'		Set Variable		PreQualResponse/
	...	ELSE IF								'${ResponseType}'=='CBWS'	Set Variable		CBResponse/
	...	ELSE IF								'${ResponseType}'=='Lender'	Set Variable		LenderXmlResponses/	
	...	ELSE															Set Variable		Unknown
	
	WriteToFile			${logfile}			Y			ResponseTypeTranslated=${ResponseType}		
	
	${FD_SERVICE}= 		Set Variable 		1.2-1:FDResponse
	Web Service Setup2	${FD_SERVICE}    	FD			${PARTNERID}
	Log 	${WS Setup}	

	${FDResponseURL}=	Catenate 		SEPARATOR=		${WS Setup['Service']}		${ResponseType}		${RefID}
	WriteToFile			${logfile}			Y			FDResponseURL=${FDResponseURL}
	
	${Username}= 	Set Variable 	${WS Setup['User Name']}
	${Password}=	Set Variable 	${WS Setup['Password']}
	
	#Send GET ##################################################################################################################
	${RESPONSECODE}	${RESPONSETEXT}=	WS_CommonUtil.Send_Get_Request		${FDResponseURL}		${Username}		${Password}		
	############################################################################################################################	
	
	WriteToFile			${logfile}		Y		PartnerPostGetResponseCode=${RESPONSECODE}
	
	#Save the response file in WebService Folder
	${RESPONSE_FILE}						Catenate	SEPARATOR=				${FILENAME}_GET_Response.xml
	WS_CommonUtil.Write_String_To_File		${RESOURCE}\\Other\\WebService\\Response\\${RESPONSE_FILE}		${RESPONSETEXT}
	Set Suite Variable 						${RESPONSE_FILE}
	
	Run Keyword If		'${RESPONSECODE}'!= '200'		WriteToErrorLog			${ErrorLog}		Send Get Request Failed | Your Request is not successful. You have received response code: ${RESPONSECODE}. The error message is: ${RESPONSETEXT}.
	Run Keyword If      '${RESPONSECODE}'!= '200'       Fail        			Your Request is not successful. You have received response code: ${RESPONSECODE}. The error message is: ${RESPONSETEXT}.
	Run Keyword If      '${RESPONSECODE}'== '200'       Log 					Request is successful 		
	
	[Return]	${RESPONSETEXT}	

	
################################################################################
DealerInfo Service 	[Arguments]		${FOLDER_NAME}		${FILENAME}		${Item}
################################################################################

	WriteToFile			${logfile}			Y			DealerInfo Service>>>
	
	${WS_REQUEST_XML}=		Read From File To String 		${FOLDER_NAME}\\${Filename}
	
	${Root}=				Parse XML			${WS_REQUEST_XML}
		
		${Temp}=				Set Variable						.//PartnerId
		${Passed}=				Run Keyword And Return Status		XML.Get Element Text			${Root}				${Temp}
		${PartnerId}=			Run Keyword If		${Passed}		XML.Get Element Text			${Root}				${Temp}		ELSE	Set Variable	${EMPTY}	
		WriteToFile				${logfile}			Y				PartnerId=${PartnerId}				

		${Temp}=				Set Variable						.//PartnerDealerId
		${Passed}=				Run Keyword And Return Status		XML.Get Element Text			${Root}				${Temp}
		${PartnerDealerId}=		Run Keyword If		${Passed}		XML.Get Element Text			${Root}				${Temp}		ELSE	Set Variable	${EMPTY}	
		WriteToFile				${logfile}			Y				PartnerDealerId=${PartnerDealerId}						
	
	${FD_SERVICE}= 				Set Variable 						1.2-1:DealerInfo
	Web Service Setup2			${FD_SERVICE}    	FD				${PartnerId}
	# Log 	${WS Setup}	
	
	#/financedriver/v1.2/partnerInfo/QQQ/dealerinfo/9999999
	
	${DealerInfoURL}=			Catenate			SEPARATOR=		${WS Setup['Url']}	${WS Setup['Service']}	
	${DealerInfoURL}=			Replace String 						${DealerInfoURL}			QQQ				${PartnerId}
	${DealerInfoURL}=			Replace String 						${DealerInfoURL}			9999999			${PartnerDealerId}
	WriteToFile					${logfile}			Y				DealerInfoURL=${DealerInfoURL}
	
	${Username}= 	Set Variable 	${WS Setup['User Name']}
	${Password}=	Set Variable 	${WS Setup['Password']}
	
	#Send GET ##################################################################################################################
	${RESPONSECODE}	${RESPONSETEXT}=	WS_CommonUtil.Send_Get_Request		${DealerInfoURL}		${Username}		${Password}		
	############################################################################################################################	
	
	WriteToFile			${logfile}		Y		DealerInfoURLGetResponseCode=${RESPONSECODE}
	
	#Save the response file in WebService Folder
	${RESPONSE_FILE}						Catenate	SEPARATOR=				${FILENAME}_GET_Response.xml
	WS_CommonUtil.Write_String_To_File		${RESOURCE}\\Other\\WebService\\Response\\${RESPONSE_FILE}		${RESPONSETEXT}
	Set Suite Variable 						${RESPONSE_FILE}
	
	Run Keyword If		'${RESPONSECODE}'!= '200'		WriteToErrorLog			${ErrorLog}		Send Get Request Failed | Your Request is not successful. You have received response code: ${RESPONSECODE}. The error message is: ${RESPONSETEXT}.
	Run Keyword If      '${RESPONSECODE}'!= '200'       Fail        			Your Request is not successful. You have received response code: ${RESPONSECODE}. The error message is: ${RESPONSETEXT}.
	Run Keyword If      '${RESPONSECODE}'== '200'       Log 					Request is successful 		
	
	[Return]	${RESPONSETEXT}		
	
	
###########################################################
Process All Xml Files	[Arguments]			${FOLDER_NAME}	
###########################################################
	[Documentation]		This keyword will send a TD Offer, a TD Lead (using offer_id), and then an FD Lead(s) using TD leadRefId.
	... 					Note: TD/FD processing is dependent on having a combined partner set up that is recognized both in TD and FD systems
	...				  		Author: Tom Hutcheson
	...						Update Date\By: 10 Sep 2015		

	WriteToFile			${logfile}				Y			|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
	WriteToFile			${LogFile}				Y			Process All Xml Files>>>
	
	# 1) process all files in passed folder
	# 2) get list of subfolders
	# 3) loop through list of subfolders and process all files in each subfolder
	
	###############################
	#Process the setup stuff first
	Process All Xml Files SetUp
	###############################
	
	#Establish Xml Submit Time	
	${time}=            Get Time
	${time}=            Convert To String   	   	${time}
	@{TList}=           Split String    	       	${time}
	${OnlyTime}=    	Get From List	     		${TList}	 1
	${hh}	${mm}	  	${ss}= 	                   	Split String		${OnlyTime}		:               
	${XmlSubmitTime}=		Catenate 				SEPARATOR=			${hh}h			${mm}m
	WriteToFile			${logfile}					Y					XmlSubmitTime=${XmlSubmitTime}	
	Set Suite Variable	${XmlSubmitTime}

	WriteToFile			${logfile}				Y							***FoldernameToProcess*** | ${FOLDER_NAME}
	
	${ParentList}=			Create List	
	${ParentList}=			Run Keyword				Get Subdirectories 1	${FOLDER_NAME}		${ParentList}			#This will return a list of all subfolders and their children for 9 levels deep
	WriteToFile				${logfile}				Y						Folders&Subfolders=${ParentList}
	${CountDirectories}=	Get Length				${ParentList}
		WriteToFile			${logfile}				Y						Count SubDirectories=${CountDirectories}
	
	##################################################################################
	Run Keyword	Process All Files in Folder 		${FOLDER_NAME}								#This will process any/all files in the root folder
	##################################################################################
		
	#Loop and process each subfolder
	:FOR 	${Item}			IN RANGE 	0 	${CountDirectories}
	\		${PREQUAL_REF}=		Set Variable		${EMPTY}		#initialze refId
	\		${LEAD_REF}=		Set Variable		${EMPTY}		#initialze refId
	\		${APP_REF}=			Set Variable		${EMPTY}		#initialze refId
	\		${PTR_REF}=			Set Variable		${EMPTY}		#initialze refId	
	\
	\		${SUBFOLDER_NAME}=	Get From List	 	${ParentList}	${Item}			#This is the folder that we're processing
	\			WriteToFile		${logfile}			Y				|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
	\			WriteToFile		${logfile}			Y				***SubFoldernameToProcess*** Index=${Item} | ${SUBFOLDER_NAME}
	\
	\		######################################################################################## 
	\		Run Keyword	Process All Files in Folder			${SUBFOLDER_NAME}
	\		########################################################################################
	
	##################################################################################
	#Finish up - process the GlobalDict into the various Validation Lists
	Process All Xml Files Wrap
	##################################################################################

###########################################################	
Process All Files in Folder	[Arguments]		${FOLDER_NAME}
###########################################################

	${FileType}=				Set Variable			${EMPTY}
	${Offer_ID}=				Set Variable			${EMPTY}
	${TDLeadRef}=				Set Variable			${EMPTY}
	${LEAD_REF}=				Set Variable			${EMPTY}
	${ListCount}				Set Variable			${EMPTY}
	${Chained_Name_Prev}=		Set Variable			${EMPTY}
	Set Suite Variable 			${Chained_Name_Prev}	
	${RandNameChained}			Set Variable			${EMPTY}
	Set Suite Variable 			${RandNameChained}	
	${RandSSNChained1}			Set Variable			${EMPTY}
	Set Suite Variable 			${RandSSNChained1}	
	${RandSSNChained2}			Set Variable			${EMPTY}
	Set Suite Variable 			${RandSSNChained2}	
	
	# Create individual lists of 'approved' file types in folder and then combine into one List  	
	@{LIST_FilesJson}    		List Files In Directory    	${FOLDER_NAME}	    *.json		
	${LIST_FilesJson}			Create List					@{LIST_FilesJson}
		${ListCountJson}=		Get Length    				${LIST_FilesJson}	
		Log List				${LIST_FilesJson}	
	@{LIST_FilesTDXml}			List Files In Directory		${FOLDER_NAME}		*TD*.xml
	${LIST_FilesTDXml}			Create List					@{LIST_FilesTDXml}
		${ListCount}=			Get Length					${LIST_FilesTDXml}
		Log List				${LIST_FilesTDXml}			
	@{LIST_FilesFDXml}    		List Files In Directory		${FOLDER_NAME}    	*.xml
	${LIST_FilesFDXml}			Create List					@{LIST_FilesFDXml}
		${ListCount}=    		Get Length    				${LIST_FilesFDXml}	
		Log List				${LIST_FilesFDXml}			
	# Combine the lists and then sort it
	${LIST_FilesToProcess}		Combine Lists				${LIST_FilesJson}	${LIST_FilesTDXml}			${LIST_FilesFDXml}	
	# Remove duplicate file names. If TD is being processed it will always remove a TD Lead that has been pulled twice for being both '*TD*.xml' amd '*.xml'
	${LIST_FilesToProcess}=		Remove Duplicates			${LIST_FilesToProcess}
        ${ListCount}=			Get Length    				${LIST_FilesToProcess}		#ListCount of files to process
		Log 					Combined ListCount FilesToProcess: ${ListCount}
	Sort List					${LIST_FilesToProcess}
		# Log List				${LIST_FilesToProcess}		warn
		WriteToFile				${logfile}					Y					${LIST_FilesToProcess}	

	${PARTNERID}=				Run Keyword If			${ListCountJson}>0		Set Variable	${PARTNERID_TD}		ELSE		Set Variable	${PARTNERID}
	${DEALERID}=				Run Keyword If			${ListCountJson}>0		Set Variable	${DEALERID_TD}		ELSE		Set Variable	${DEALERID}	
	# ${PARTNERID}=				Run Keyword If			${ListCountJson}>0		Set Variable	${PARTNERID_TD}		ELSE		Set Variable	${PARTNERID_FD}
	# ${DEALERID}=				Run Keyword If			${ListCountJson}>0		Set Variable	${DEALERID_TD}		ELSE		Set Variable	${DEALERID_FD}
	# Set Suite Variable			${PARTNERID}
	# Set Suite Variable			${DEALERID}

	#Loop and process each file type
	:FOR 	${Item}			IN RANGE 	0 	${ListCount}
	\		Set Suite Variable 			${FILENAME}
	\		${FILENAME}=		Get From List 	${LIST_FilesToProcess}	${Item}		#This is the file that we're processing
	\			WriteToFile		${logfile}				Y				|||||||||||||||||||||||||||||||||||||
	\			WriteToFile		${logfile}				Y				***FilenameToProcess*** Index=${Item} | Name=${FILENAME}	
	\
	\		#Search the filename to determine the filetype
	\		${FoundJson}=		FindStringInString		${FILENAME}		.json
	\			Log				FoundJson=${FoundJson}
	\		${FoundXml}=		FindStringInString		${FILENAME}		.xml
	\			Log				FoundXml=${FoundXml}
	\		${FoundTD}=			FindStringInString		${FILENAME}		TD
	\			Log				FoundTD=${FoundTD}
	\		${FoundTPP}=		FindStringInString		${FILENAME}		TPP
	\			Log				FoundTD=${FoundTD}	
	\		${FoundFD}=			FindStringInString		${FILENAME}		FD	
	\			Log				FoundFD=${FoundFD}
	\		${FoundADFLead}=	FindStringInString		${FILENAME}		ADFLead	
	\			Log				FoundADFLead=${FoundADFLead}	
	\		${FoundDealerInfo}=	FindStringInString		${FILENAME}		DealerInfo	
	\			Log				FoundADFLead=${FoundADFLead}		
	\
	\		#Process each 'approved' file depending on it's filetpe
	\		${FileType}=		Run Keyword If		('${FoundJson}'>='0') and ('${FoundTD}'>='0')			Set Variable 	1	#TD-Json
	\		...					ELSE IF 			('${FoundXml}'>='0') and ('${FoundTD}'>='0')			Set Variable 	2	#TD-Lead
	\		...					ELSE IF 			('${FoundXml}'>='0') and ('${FoundADFLead}'>='0')		Set Variable 	4	#FD-ADFLead
	\		...					ELSE IF 			('${FoundXml}'>='0') and ('${FoundDealerInfo}'>='0')	Set Variable 	5	#FD-DealerInfo
	\		...					ELSE IF 			('${FoundXml}'>='0') and ('${FoundTPP}'>='0')			Set Variable 	6	#TPP-Lead	
	\		...					ELSE IF 			('${FoundXml}'>='0')									Set Variable 	3	#FD-Lead
	\			Log				FileType= ${FileType}
	\
	\		### Process TD Offer - returns offer_id
	\		${Offer_ID}=		Run Keyword If			'${FileType}'=='1'		Process TD Offer		${FOLDER_NAME}			${FILENAME}
	\							...		ELSE			 Set Variable			${Offer_ID}
	\
	\		### Check for valid OfferID and Fail if not valid
	\		${TDOfferLen}=		Get Length 				${Offer_ID}	
	\			Run Keyword If	'${FileType}'=='1'		WriteToFile				${logfile}				Y						TDOffer Length=${TDOfferLen}
	\		${TimeStamp}=		Run Keyword				TimeStamp
	\		Run Keyword If	${TDOfferLen}!=36 and '${FileType}'=='1'			WriteToFile				${logfile}				Y						TDOffer FAILED!=${FOLDER_NAME}\\${Filename} - Length of TDOffer = ${TDOfferLen}		
	\		Run Keyword If	${TDOfferLen}!=36 and '${FileType}'=='1'			WriteToErrorLog			${ErrorLog}				${RESPONSECODE} | ${RESPONSETEXT}	
	\		Run Keyword If	${TDOfferLen}!=36 and '${FileType}'=='1'			Fail 					TDOffer FAILED!=${FOLDER_NAME}\\${Filename} - Length of TDOffer=${TDOfferLen}
	\
	\		### If valid TD Offer_Id returned then Process TD Lead
	\		${TDLeadRef}=		Run Keyword If		 ((${TDOfferLen}==36) and ('${FileType}'=='2'))		Process TD Lead			${FOLDER_NAME}			${FILENAME}		${Offer_ID}	
	\		...					ELSE			 		Set Variable			${TDLeadRef}	
	\
	\		### Check for valid TDLeadRef and Fail if not valid
	\		${TDLeadLen}=		Get Length 				${TDLeadRef}
	\			Run Keyword If	'${FileType}'=='2'		WriteToFile				${logfile}				Y						TDLead Length=${TDLeadLen}		
	\		${TimeStamp}=		Run Keyword				TimeStamp
	\		Run Keyword If	${TDOfferLen}==36 and ${TDLeadLen}!=18 and '${FileType}'=='2'				WriteToFile				${logfile}				Y					TDLead FAILED!=${FOLDER_NAME}\\${Filename} - Length of TDLead = ${TDLeadlen}		
	\		Run Keyword If	${TDOfferLen}==36 and ${TDLeadLen}!=18 and '${FileType}'=='2'				WriteToErrorLog			${ErrorLog}				${RESPONSECODE} | ${RESPONSETEXT}	
	\		Run Keyword If	${TDOfferLen}==36 and ${TDLeadLen}!=18 and '${FileType}'=='2'				Fail 					TDLead FAILED!=${FOLDER_NAME}\\${Filename} - Length of TDLead=${TDLeadLen}
	\
	\		### Process any FD xml. Send the TDRef if previously processed.
	\		# save the TDRef as 'Lead_Ref' as 'Process and Send Xml' will handle any processing from here on
	\		${LEAD_REF}=		Run Keyword If		${TDLeadLen}==18			Set Variable				${TDLeadRef}		ELSE			Set Variable	${LEAD_REF}
	\
	\		${LEAD_REF}=		Run Keyword If 		'${FileType}'=='3'		Process And Send FD Xml			${FOLDER_NAME}		${FILENAME}		${LEAD_REF}		${Item}
	\							...		ELSE		Set Variable			${LEAD_REF}		
	\		
	\		Run Keyword If		'${FileType}'=='4'	Process And Send ADFLead	${FOLDER_NAME}		${FILENAME}		${Item}	
	\		
	\		Run Keyword If		'${FileType}'=='5'	DealerInfo Service			${FOLDER_NAME}		${FILENAME}		${Item}		
	\		
	\		Run Keyword If		'${FileType}'=='6'	Call TPP Service2			${FOLDER_NAME}		${FILENAME}		${Item}			


################################################################################################################	
Process And Send FD Xml 	[Arguments]		${FOLDER_NAME}		${FILENAME}		${TD_LEAD_REF}			${Item}
################################################################################################################	
	[Documentation]			This keyword expects to receive a TDLeadRef and then uses it to send an FD Lead Update.
	...						Pre-requisite: Go For TD Request-1; Go For TD Request-2
	...				  		Author: Tom Hutcheson
	...						Update Date\By: 10 Sep 2015	

	WriteToFile				${LogFile}			Y			Process And Send FD Xml>>>
	
	# Set Up #	
	${FD_SERVICE}=			Set Variable		${Empty}
	${Servicename}=			Set Variable		${Empty}	
	${PartnerType}=			Set Variable		FD
	${Xml_Type}=			Set Variable		${Empty}
	${TransCode}=			Set Variable		${Empty}
	${FinMethod}=			Set Variable		${Empty}	
	${Is_Balloon}=			Set Variable		False	
	${DecisionRequest}		Set Variable		False
	Set Suite Variable 		${FILENAME}
	
	${WS_REQUEST_XML}=		Read From File To String 		${FOLDER_NAME}\\${Filename}
		Log 				${WS_REQUEST_XML}
	
	WriteToFile				${logfile}							Y					***Item=${Item}		
	
	# Is this a Chained transaction?
	${Is_Chained}=			Run Keyword And Return Status 		Should Contain 		${FOLDER_NAME}			Chained
	WriteToFile				${logfile}							Y					IsChained=${Is_Chained}
	${RandNameChained}=		Run Keyword If	'${Is_Chained}'=='True' and '${Item}'=='0'
	...						Generate Random String 				4   				[LOWER]		ELSE		Set Variable	${RandNameChained}	
	Set Suite Variable		${RandNameChained}
	# Run Keyword If	'${Is_Chained}'=='True'						WriteToFile			${logfile}	Y			RandNameChained=${RandNameChained}			
	${RandSSNChained1}=		Run Keyword If	'${Is_Chained}'=='True' and '${Item}'=='0'
	...						WS_CommonUtil.CreateRandomNumberInRange					6	1	9	ELSE		Set Variable	${RandSSNChained1}	
	Set Suite Variable		${RandSSNChained1}
	# Run Keyword If	'${Is_Chained}'=='True'						WriteToFile			${logfile}	Y			RandSSNChained1=${RandSSNChained1}			
	${RandSSNChained2}=		Run Keyword If	'${Is_Chained}'=='True' and '${Item}'=='0'
	...						WS_CommonUtil.CreateRandomNumberInRange					6	1	9	ELSE		Set Variable	${RandSSNChained2}	
	Set Suite Variable		${RandSSNChained2}
	# Run Keyword If	'${Is_Chained}'=='True'						WriteToFile			${logfile}	Y			RandSSNChained2=${RandSSNChained2}				
		
	# Is this a Compliance transaction? How many docs should we expect? (contained in filename - 04 App Joint RF=Yes Privacy=true Arden Testco (10 docs) 4-AppXml.xml)
	${Is_Compliance}=					Run Keyword And Return Status 					Should Contain 						${FOLDER_NAME}		Compliance
	Run Keyword If						'${Is_Compliance}'=='True'						WriteToFile							${logfile}			Y				Is_Compliance=${Is_Compliance}
	${Contains}=						Run Keyword If	'${Is_Compliance}'=='True'		Run Keyword And Return Status 		Should Contain		${FileName}		docs)								
	${Junk}	${Grabbed}=					Run Keyword If	'${Contains}'=='True'			Split String						${FileName}			(				1
	${NbrComplyDocs}	${Grabbed}=		Run Keyword If	'${Contains}'=='True'			Split String						${Grabbed}			${SPACE}		1		
	Run Keyword If						'${Is_Compliance}'=='True'						WriteToFile							${logfile}			Y				ComplianceDocsExpected=${NbrComplyDocs}
	${AppendComplyMsg}=					Run Keyword If	'${Is_Compliance}'=='True' and '${Contains}'=='True'				Set Variable		-${NbrComplyDocs}		ELSE	Set Variable	${EMPTY}
	
	# Is this a Decision transaction?
	${Is_Decision}=			Run Keyword And Return Status 		Should Contain 		${FOLDER_NAME}		Decisions
	Run Keyword If			'${Is_Decision}'=='True'			WriteToFile			${logfile}			Y				Is_Decision=${Is_Decision}
	${stat}=				Run Keyword If	'${Is_Decision}'=='True'				Run Keyword And Return Status 		Should Contain 		${Filename}			Approve
	${DecisionRequest}=		Run Keyword If	${stat}				Set Variable		Approve				ELSE			Set Variable		${DecisionRequest}		
	${stat}=				Run Keyword If	'${Is_Decision}'=='True'				Run Keyword And Return Status 		Should Contain 		${Filename}			Counter	
	${DecisionRequest}=		Run Keyword If	${stat}				Set Variable		Counter				ELSE			Set Variable		${DecisionRequest}		
	${stat}=				Run Keyword If	'${Is_Decision}'=='True'				Run Keyword And Return Status 		Should Contain 		${Filename}			Decline	
	${DecisionRequest}=		Run Keyword If	${stat}				Set Variable		Decline				ELSE			Set Variable		${DecisionRequest}			
	Run Keyword If			'${Is_Decision}'=='True'			WriteToFile			${logfile}			Y				DecisionRequest=${DecisionRequest}

	# Is this an Email transaction? Decisions will also automatically set Is_Email to True.
	${Is_Email}=			Run Keyword And Return Status	 	Should Contain 		${FOLDER_NAME}		Emails
	${Is_Email}=			Run Keyword If	'${Is_Decision}'=='True'				Set Variable 		True			ELSE	Set Variable	${Is_Email}	
	Run Keyword If			'${Is_Email}'=='True'				WriteToFile			${logfile}			Y				Is_Email=${Is_Email}
	
	# Is this a Generic Lead transaction?
	${Is_Generic}=			Run Keyword And Return Status	 	Should Contain 		${FOLDER_NAME}		Generic
	Run Keyword If			'${Is_Generic}'=='True'				WriteToFile			${logfile}			Y				Is_Generic=${Is_Generic}	

	# Is this a D2I transaction?
	${Is_D2I}=				Run Keyword And Return Status	 	Should Contain 		${FOLDER_NAME}		D2I
	Run Keyword If			'${Is_Generic}'=='True'				WriteToFile			${logfile}			Y				Is_D2I=${Is_D2I}
	
	# Was a TDLeadRef passed into this routine?	
	Run Keyword If			'${TD_LEAD_REF}'!='${EMPTY}'		WriteToFile			${logfile}			N				PassedLeadRefOnEntry=${TD_LEAD_REF}
	${LEAD_REF}=			Run Keyword If	'${TD_LEAD_REF}'!='${EMPTY}'			Set Variable		${TD_LEAD_REF}	ELSE	Set Variable	${LEAD_REF}
	
	##################################################################
	# Determine what the xml file is and set the endpoint FD_Service)
	##################################################################
	
	${Is_App}=				Run Keyword And Return Status 	Should Contain 		${WS_REQUEST_XML}		<CreditApplication xmlns
	${FD_SERVICE}=			Run Keyword If	 	'${Is_App}'=='True'				Set Variable 			1.2-1:App							ELSE	Set Variable	${FD_SERVICE}
	${Servicename}=			Run Keyword If	 	'${Is_App}'=='True'				Set Variable 			FD 1.2 CreditApps					ELSE	Set Variable	${Servicename}
	${Xml_Type}=			Run Keyword If	 	'${Is_App}'=='True'				Set Variable			App									ELSE	Set Variable	${Xml_Type}
	${TransCode}=			Run Keyword If	 	'${Is_App}'=='True'				Set Variable			1									ELSE	Set Variable	${TransCode}	
	Run Keyword If	 		'${Is_App}'=='True' and '${Is_Compliance}'=='True'							Create Unique LastName AndOr SSN	${WS_REQUEST_XML}		${Xml_Type}		${Is_Compliance}	${Is_Chained}

	# Is this a Business App?
	${Is_BizApp}=			Run Keyword If	 	'${Is_App}'=='True'				Run Keyword And Return Status 								Should Contain 			${WS_REQUEST_XML}			<a:BusinessName>	
	Run Keyword If			'${Is_BizApp}'=='True'			WriteToFile			${logfile}			Y				Is_BizApp=${Is_BizApp}	
	
	# ${Is_D2I}=				Run Keyword And Return Status 	Should Contain 		${WS_REQUEST_XML}		<CreditApplication xmlns="D2I"
	${FD_SERVICE}=			Run Keyword If	 	'${Is_D2I}'=='True'				Set Variable 			1.2-D2I:App							ELSE	Set Variable	${FD_SERVICE}
	${Servicename}=			Run Keyword If	 	'${Is_D2I}'=='True'				Set Variable 			FD 1.2-D2I CreditApps				ELSE	Set Variable	${Servicename}
	${Xml_Type}=			Run Keyword If	 	'${Is_D2I}'=='True'				Set Variable			App									ELSE	Set Variable	${Xml_Type}
	${TransCode}=			Run Keyword If	 	'${Is_D2I}'=='True'				Set Variable			1									ELSE	Set Variable	${TransCode}	
	Run Keyword If	 		'${Is_D2I}'=='True' and '${Is_Compliance}'=='True'							Create Unique LastName AndOr SSN	${WS_REQUEST_XML}		${Xml_Type}		${Is_Compliance}	${Is_Chained}
	
	${Is_Lead}=				Run Keyword And Return Status 	Should Contain 		${WS_REQUEST_XML}		<Lead xmlns
	${FD_SERVICE}=			Run Keyword If	 	'${Is_Lead}'=='True' and '${LEAD_REF}'!='${Empty}' and '${Is_Chained}'=='True'				Set Variable 			1.2-1:LeadUpdate1			ELSE	Set Variable	${FD_SERVICE}
	${FD_SERVICE}=			Run Keyword If	 	'${Is_Lead}'=='True' and '${LEAD_REF}'!='${Empty}' and '${Is_Chained}'=='False'				Set Variable 			1.2-1:Lead					ELSE	Set Variable	${FD_SERVICE}
	${FD_SERVICE}=			Run Keyword If	 	'${Is_Lead}'=='True' and '${LEAD_REF}'=='${Empty}'											Set Variable 			1.2-1:Lead					ELSE	Set Variable	${FD_SERVICE}
	${Servicename}=			Run Keyword If	 	'${Is_Lead}'=='True'																		Set Variable 			FD 1.2 Leads				ELSE	Set Variable	${Servicename}		
	${Xml_Type}=			Run Keyword If	 	'${Is_Lead}'=='True'			Set Variable			Lead																					ELSE	Set Variable	${Xml_Type}
	${Is_Biz}=				Run Keyword If	 	'${Is_Lead}'=='True'			Run Keyword And Return Status 								Should Contain 			${WS_REQUEST_XML}			<a:BusinessName>
	${TransCode}=			Run Keyword If	 	'${Is_Lead}'=='True' and '${Is_Biz}'=='False' 												Set Variable			3							ELSE	Set Variable	${TransCode}
	${TransCode}=			Run Keyword If	 	'${Is_Lead}'=='True' and '${Is_Biz}'=='True' 												Set Variable			9							ELSE	Set Variable	${TransCode}	

	${FD_SERVICE}=			Run Keyword If	 	'${Is_Lead}'=='True' and '${Is_Generic}'=='True'		Set Variable						${EMPTY}				ELSE						Set Variable			${FD_SERVICE}
	${FD_SERVICE}=			Run Keyword If	 	'${Is_Lead}'=='True' and '${Is_Generic}'=='True' and '${LEAD_REF}'!='${Empty}' and '${Is_Chained}'=='True'			Set Variable 				1.2-1:LeadGenericUpdate	ELSE	Set Variable	${FD_SERVICE}
	${FD_SERVICE}=			Run Keyword If	 	'${Is_Lead}'=='True' and '${Is_Generic}'=='True' and '${LEAD_REF}'!='${Empty}' and '${Is_Chained}'=='False'			Set Variable 				1.2-1:LeadGeneric		ELSE	Set Variable	${FD_SERVICE}
	${FD_SERVICE}=			Run Keyword If	 	'${Is_Lead}'=='True' and '${Is_Generic}'=='True' and '${LEAD_REF}'=='${Empty}'										Set Variable 				1.2-1:LeadGeneric		ELSE	Set Variable	${FD_SERVICE}
	
	${Is_PQ}=				Run Keyword And Return Status 	Should Contain 		${WS_REQUEST_XML}		<PreQualification xmlns
	${FD_SERVICE}=			Run Keyword If	 	'${Is_PQ}'=='True'				Set Variable 			1.2-1:Prequalify					ELSE	Set Variable	${FD_SERVICE}
	${Servicename}=			Run Keyword If	 	'${Is_PQ}'=='True'				Set Variable 			FD 1.2 Prequalifications			ELSE	Set Variable	${Servicename}
	${Xml_Type}=			Run Keyword If	 	'${Is_PQ}'=='True'				Set Variable			PQ									ELSE	Set Variable	${Xml_Type}
	${TransCode}=			Run Keyword If	 	'${Is_PQ}'=='True'				Set Variable			4									ELSE	Set Variable	${TransCode}	
	Run Keyword If	 		'${Is_PQ}'=='True' and '${Is_Compliance}'=='True'							Create Unique LastName AndOr SSN	${WS_REQUEST_XML}		${Xml_Type}		${Is_Compliance}	${Is_Chained}	
	
	${Is_Menu}=				Run Keyword And Return Status 	Should Contain 		${WS_REQUEST_XML}		<MenuInfo xmlns
	${FD_SERVICE}=			Run Keyword If	 	'${Is_Menu}'=='True'			Set Variable 			1.2-1:LeadUpdate2					ELSE	Set Variable	${FD_SERVICE}
	${Servicename}=			Run Keyword If	 	'${Is_Menu}'=='True'			Set Variable 			FD 1.2 LeadsMenu					ELSE	Set Variable	${Servicename}	
	${Xml_Type}=			Run Keyword If	 	'${Is_Menu}'=='True'			Set Variable			MenuDriver							ELSE	Set Variable	${Xml_Type}
	${TransCode}=			Run Keyword If	 	'${Is_Menu}'=='True'			Set Variable			6									ELSE	Set Variable	${TransCode}
	
	${Is_PayCalc}=			Run Keyword And Return Status 	Should Contain 		${WS_REQUEST_XML}		<PaymentCalcInfo xmlns
	${FD_SERVICE}=			Run Keyword If	 	'${Is_PayCalc}'=='True'			Set Variable 			1.2-1:LeadUpdate3					ELSE	Set Variable	${FD_SERVICE}
	${Servicename}=			Run Keyword If	 	'${Is_PayCalc}'=='True'			Set Variable 			FD 1.2 LeadsPayCalc					ELSE	Set Variable	${Servicename}
	${Xml_Type}=			Run Keyword If	 	'${Is_PayCalc}'=='True'			Set Variable			PayCalc								ELSE	Set Variable	${Xml_Type}
	${TransCode}=			Run Keyword If	 	'${Is_PayCalc}'=='True'			Set Variable			7									ELSE	Set Variable	${TransCode}
	
	${Is_PartnerInfo}=		Run Keyword And Return Status 	Should Contain 		${WS_REQUEST_XML}		<PartnerInfo xmlns
	${FD_SERVICE}=			Run Keyword If	 	'${Is_PartnerInfo}'=='True'		Set Variable 			1.2-1:PartnerInfo					ELSE	Set Variable	${FD_SERVICE}
	${Servicename}=			Run Keyword If	 	'${Is_PartnerInfo}'=='True'		Set Variable 			FD 1.2 PartnerInfo					ELSE	Set Variable	${Servicename}			
	${Xml_Type}=			Run Keyword If	 	'${Is_PartnerInfo}'=='True'		Set Variable			PartnerInfo							ELSE	Set Variable	${Xml_Type}
	${TransCode}=			Run Keyword If	 	'${Is_PartnerInfo}'=='True'		Set Variable			8									ELSE	Set Variable	${TransCode}
	
	#As of 01/2016, xml is now the same for CBWS-1.0 and CBWS-1.1 (both with Street Number) - there is no difference at all in the xml so we need a cheat to distinguish one from the other.
	${IsCBWSTest1}=			Run Keyword And Return Status 	Should Contain		${WS_REQUEST_XML}		<CreditBureau xmlns:i
	${IsCBWSTest2}=			Run Keyword And Return Status	Should Contain 		${FileName}				CBWS-1.0
	${IsCBWSTest3}=			Run Keyword And Return Status	Should Contain 		${FileName}				CBWS-1.1
	${Is_CBWS-1.0}=			Run Keyword If	'${IsCBWSTest1}'=='True' and '${IsCBWSTest2}'=='True' 		Set Variable		True			ELSE	Set Variable	False			
	${Is_CBWS-1.1-StNbr}=	Run Keyword If	'${IsCBWSTest1}'=='True' and '${IsCBWSTest3}'=='True' 		Set Variable		True			ELSE	Set Variable	False				
	
	#CBWS-1.0
	${FD_SERVICE}=			Run Keyword If		${Is_CBWS-1.0}					Set Variable 			1.0:CB-RF-Yes						ELSE	Set Variable	${FD_SERVICE}	#we know it's CBWS-1.0 so default to RF=Y endpoint until we know otherwise		
	${IsRFNo}=				Run Keyword If		${Is_CBWS-1.0}					Run Keyword And Return Status 		Should Contain	 		${FOLDER_NAME}			RF=N
	${IsRFYes}=				Run Keyword If		${Is_CBWS-1.0}					Run Keyword And Return Status 		Should Contain	 		${FOLDER_NAME}			RF=Y
	${FD_SERVICE}=			Run Keyword If	 	${Is_CBWS-1.0} and ${IsRFNo} 	Set Variable 			1.0:CB-RF-No						ELSE	Set Variable	${FD_SERVICE}
	${FD_SERVICE}=			Run Keyword If	 	${Is_CBWS-1.0} and ${IsRFYes} 	Set Variable 			1.0:CB-RF-Yes						ELSE	Set Variable	${FD_SERVICE}	
	${Servicename}=			Run Keyword If	 	'${Is_CBWS-1.0}'=='True'		Set Variable 			FD 1.0 CBWS							ELSE	Set Variable	${Servicename}	
	${PARTNERID}=			Run Keyword If	 	'${Is_CBWS-1.0}'=='True'		Set Variable 			${PARTNERID_CB}						ELSE	Set Variable	${PARTNERID}
	${DEALERID}=			Run Keyword If	 	'${Is_CBWS-1.0}'=='True'		Set Variable 			${DEALERID_CB}						ELSE	Set Variable	${DEALERID}
	${PartnerType}=			Run Keyword If	 	'${Is_CBWS-1.0}'=='True'		Set Variable 			CB									ELSE	Set Variable	${PartnerType}		
	${Xml_Type}=			Run Keyword If	 	'${Is_CBWS-1.0}'=='True'		Set Variable			CBWS-1.0							ELSE	Set Variable	${Xml_Type}
	${TransCode}=			Run Keyword If	 	'${Is_CBWS-1.0}'=='True'		Set Variable			5									ELSE	Set Variable	${TransCode}
	Run Keyword If	 		'${Is_CBWS-1.0}'=='True' and '${Is_Compliance}'=='True'						Create Unique LastName AndOr SSN	${WS_REQUEST_XML}		${Xml_Type}		${Is_Compliance}	False

	#This is FD-1.1 Street Number
	${FD_SERVICE}=			Run Keyword If	 	'${Is_CBWS-1.1-StNbr}'=='True'		Set Variable 		1.1:CB-RF-Yes-SN					ELSE	Set Variable	${FD_SERVICE}
	${Servicename}=			Run Keyword If	 	'${Is_CBWS-1.1-StNbr}'=='True'		Set Variable 		FD 1.1 CBWS	StNbr					ELSE	Set Variable	${Servicename}
	${PARTNERID}=			Run Keyword If	 	'${Is_CBWS-1.1-StNbr}'=='True'		Set Variable 		${PARTNERID_CB}						ELSE	Set Variable	${PARTNERID}
	${DEALERID}=			Run Keyword If	 	'${Is_CBWS-1.1-StNbr}'=='True'		Set Variable 		${DEALERID_CB}						ELSE	Set Variable	${DEALERID}	
	${PartnerType}=			Run Keyword If	 	'${Is_CBWS-1.1-StNbr}'=='True'		Set Variable 		CB									ELSE	Set Variable	${PartnerType}	
	${Xml_Type}=			Run Keyword If	 	'${Is_CBWS-1.1-StNbr}'=='True'		Set Variable		CBWS-1.0							ELSE	Set Variable	${Xml_Type}		#NOTE: this 1.1 looks like 1.0 so Xml_Type = CBWS-1.0
	${TransCode}=			Run Keyword If	 	'${Is_CBWS-1.1-StNbr}'=='True'		Set Variable		5									ELSE	Set Variable	${TransCode}
	Run Keyword If	 		'${Is_CBWS-1.1-StNbr}'=='True' and '${Is_Compliance}'=='True'				Create Unique LastName AndOr SSN	${WS_REQUEST_XML}		${Xml_Type}		${Is_Compliance}	False	

	#This is FD-1.1 Address Line
	${Is_CBWS-1.1}=			Run Keyword And Return Status 	Should Contain		${WS_REQUEST_XML}		<CreditBureau xmlns="CustomerEnquiry2"
	${FD_SERVICE}=			Run Keyword If		${Is_CBWS-1.1}					Set Variable 			1.1:CB-RF-Yes						ELSE	Set Variable	${FD_SERVICE}	#we know it's CBWS-1.1 so default to RF=Y endpoint	
	${IsRFNo}=				Run Keyword If		${Is_CBWS-1.1}					Run Keyword And Return Status 		Should Contain	 		${FOLDER_NAME}			RF=N
	${IsRFYes}=				Run Keyword If		${Is_CBWS-1.1}					Run Keyword And Return Status 		Should Contain	 		${FOLDER_NAME}			RF=Y
	${FD_SERVICE}=			Run Keyword If	 	${Is_CBWS-1.1} and ${IsRFNo} 	Set Variable 			1.1:CB-RF-No						ELSE	Set Variable	${FD_SERVICE}
	${FD_SERVICE}=			Run Keyword If	 	${Is_CBWS-1.1} and ${IsRFYes} 	Set Variable 			1.1:CB-RF-Yes						ELSE	Set Variable	${FD_SERVICE}	
	${Servicename}=			Run Keyword If	 	'${Is_CBWS-1.1}'=='True'		Set Variable 			FD 1.1 CBWS							ELSE	Set Variable	${Servicename}
	${PARTNERID}=			Run Keyword If	 	'${Is_CBWS-1.1}'=='True'		Set Variable 			${PARTNERID_CB}						ELSE	Set Variable	${PARTNERID}
	${DEALERID}=			Run Keyword If	 	'${Is_CBWS-1.1}'=='True'		Set Variable 			${DEALERID_CB}						ELSE	Set Variable	${DEALERID}	
	${PartnerType}=			Run Keyword If	 	'${Is_CBWS-1.1}'=='True'		Set Variable 			CB									ELSE	Set Variable	${PartnerType}	
	${Xml_Type}=			Run Keyword If	 	'${Is_CBWS-1.1}'=='True'		Set Variable			CBWS-1.1							ELSE	Set Variable	${Xml_Type}
	${TransCode}=			Run Keyword If	 	'${Is_CBWS-1.1}'=='True'		Set Variable			5									ELSE	Set Variable	${TransCode}
	Run Keyword If	 		'${Is_CBWS-1.1}'=='True' and '${Is_Compliance}'=='True'						Create Unique LastName AndOr SSN	${WS_REQUEST_XML}		${Xml_Type}		${Is_Compliance}	False
	
	#Email / Decision - make the LastNames unique [Decisions turn Is_Email flag on so they are automatically handled]
	Run Keyword If	 		'${Is_Email}'=='True' 														Create Unique LastName AndOr SSN	${WS_REQUEST_XML}		${Xml_Type}		False	${Is_Chained}
	# Run Keyword If	 		'${Is_Decision}'=='True' 													Create Unique LastName AndOr SSN	${WS_REQUEST_XML}		${Xml_Type}		False	False

	#If FolderName contains 'MakeUnique' then Create Unique LastName AndOr SSN. This will only be used only for search by lastname when testing UI CustArchive or UI LeadSummary
	${Is_MakeUnique1}=		Run Keyword And Return Status	 	Should Contain 		${FOLDER_NAME}		MakeUnique
	Run Keyword If			'${Is_MakeUnique1}'=='True'			WriteToFile			${logfile}	Y		Is_MakeUnique1=${Is_MakeUnique1}	
	Run Keyword If	 		'${Is_MakeUnique1}'=='True' 												Create Unique LastName AndOr SSN	${WS_REQUEST_XML}		${Xml_Type}		False	${Is_Chained}

	#If FolderName contains 'MakeUnique' and it's a Business App then Create Unique BusinessName. This will only be used only for search by businessname when searching on UI Transmission Status.
	${Is_MakeUnique1}=		Run Keyword And Return Status	 	Should Contain 		${FOLDER_NAME}		UniqueBusName
	Run Keyword If			'${Is_MakeUnique1}'=='True'			WriteToFile			${logfile}	Y		Is_MakeUniqueBusName=${Is_MakeUnique1}	
	Run Keyword If	 		'${Is_MakeUnique1}'=='True' and '${Is_BizApp}'=='True'						Create Unique BusinessName And TIN	${WS_REQUEST_XML}	${Xml_Type}
	
	#If FolderName contains 'MakeUniqueSSN' then create unique SSN. This will only be used only for search by SSN when searching on UI Customer Archive page.
	${Is_MakeUniqueSSN}=	Run Keyword And Return Status	 	Should Contain 		${FOLDER_NAME}		MakeSSNUnique
	Run Keyword If			'${Is_MakeUniqueSSN}'=='True'		WriteToFile			${logfile}	Y		Is_MakeUniqueSSN=${Is_MakeUniqueSSN}	
	${UniqueSSN1}=			Run Keyword If	'${Is_MakeUniqueSSN}'=='True' 								Create Unique SSN	${WS_REQUEST_XML}	${Xml_Type}
	Run Keyword If			'${Is_MakeUniqueSSN}'=='True'		WriteToFile			${logfile}	Y		UniqueSSN1=${UniqueSSN1}		
	
	#If FileName contains 'MakeUnique' then Create Unique LastName AndOr SSN. This will only be used only for search by lastname when testing UI CustArchive or UI LeadSummary
	${Is_MakeUnique2}=		Run Keyword And Return Status	 	Should Contain 		${FILENAME}			MakeUnique
	Run Keyword If			'${Is_MakeUnique2}'=='True'			WriteToFile			${logfile}	Y		Is_MakeUnique2=${Is_MakeUnique2}	
	Run Keyword If	 		'${Is_MakeUnique2}'=='True' 												Create Unique LastName AndOr SSN	${WS_REQUEST_XML}		${Xml_Type}		False	${Is_Chained}
	
	${Is_Retail}=			Run Keyword If	 	'${Is_App}'=='True' or '${Is_Lead}'=='True'				Run Keyword And Return Status		Should Contain 			${WS_REQUEST_XML}		<FinanceMethod>Retail
	${Is_Lease}=			Run Keyword If	 	'${Is_App}'=='True' or '${Is_Lead}'=='True'				Run Keyword And Return Status		Should Contain 			${WS_REQUEST_XML}		<FinanceMethod>Lease
	${Is_Balloon}=			Set Variable		False	
	${Is_Balloon}=			Run Keyword If	 	'${Is_App}'=='True'										Run Keyword And Return Status		Should Contain 			${WS_REQUEST_XML}		<FinanceMethod>Balloon		ELSE	Set Variable	${Is_Balloon}
	${Is_Balloon}=			Run Keyword If	 	'${Is_Lead}'=='True' and '${Is_Retail}'=='False' and '${Is_Lease}'=='False'					Set Variable			True												ELSE	Set Variable	${Is_Balloon}
	${FinMethod}=			Run Keyword If		'${Is_Retail}'=='True'			Set Variable	R
	...						ELSE IF				'${Is_Lease}'=='True'			Set Variable	L
	...						ELSE IF				'${Is_Balloon}'=='True'			Set Variable	B
	...						ELSE				Set Variable	${SPACE}
	
	${Is_New}=				Run Keyword If	 	'${Is_App}'=='True' or '${Is_Lead}'=='True'			Run Keyword And Return Status			Should Contain 			${WS_REQUEST_XML}		VehicleCondition>New	
	${Is_Demo}=				Run Keyword If	 	'${Is_App}'=='True' or '${Is_Lead}'=='True'			Run Keyword And Return Status			Should Contain 			${WS_REQUEST_XML}		VehicleCondition>Demo	
	${Is_Used}=				Run Keyword If	 	'${Is_App}'=='True' or '${Is_Lead}'=='True'			Run Keyword And Return Status			Should Contain 			${WS_REQUEST_XML}		VehicleCondition>Used		
	${VehCond}=				Run Keyword If		'${Is_New}'=='True'									Set Variable	N
	...						ELSE IF				'${Is_Demo}'=='True'								Set Variable	D
	...						ELSE IF				'${Is_Used}'=='True'								Set Variable	U		
	
	############### Added by Manisha ##########
	# Vehicle Info
	${VehicleInfo_Node}       Set Variable        VehicleInfo
    ${NODE_NAME}=    	Convert To String    .//${VehicleInfo_Node}/Year
    ${Stat1}=    		Run Keyword And Return Status 			XML.Get Element Text    ${WS_REQUEST_XML}    ${NODE_NAME}
	${V_YEAR}=			Run Keyword If 			${Stat1}		XML.Get Element Text    ${WS_REQUEST_XML}    ${NODE_NAME}
	...					ELSE 				Set Variable 		${EMPTY}
	
    ${NODE_NAME}=    	Convert To String    .//${VehicleInfo_Node}/Make
	${Stat1}=    		Run Keyword And Return Status 			XML.Get Element Text    ${WS_REQUEST_XML}    ${NODE_NAME}
    ${V_MAKE}=    		Run Keyword If 			${Stat1}		XML.Get Element Text    ${WS_REQUEST_XML}    ${NODE_NAME}
	...					ELSE 				Set Variable 		${EMPTY}
	
    ${NODE_NAME}=    	Convert To String    .//${VehicleInfo_Node}/Model
	${Stat1}=    		Run Keyword And Return Status 			XML.Get Element Text    ${WS_REQUEST_XML}    ${NODE_NAME}
	${V_MODEL}=    		Run Keyword If 			${Stat1}		XML.Get Element Text    ${WS_REQUEST_XML}    ${NODE_NAME}
	...					ELSE 				Set Variable 		${EMPTY}
	
    ${EXP_VEHICLE}=    Catenate    ${V_YEAR}    ${V_MAKE}    ${V_MODEL}
    ${EXP_VEHICLE}=    Evaluate    str('${EXP_VEHICLE}').upper()
	
	############ Credit Type in case of Lead ##############	
	${NODE_NAME}=   	Convert To String    .//CreditType
	${Stat1}=    		Run Keyword And Return Status    XML.Get Element Text    ${WS_REQUEST_XML}    ${NODE_NAME}
    ${CREDIT_TYPE}=    	Run Keyword If    ${Stat1}    XML.Get Element Text    ${WS_REQUEST_XML}    ${NODE_NAME}
    ...    ELSE    		Set Variable    ${EMPTY}

	#retrieve email address for GetLead if folder is 'By Email'
	${Is_UseEmail}=		Run Keyword And Return Status 			Should Contain 			${FOLDER_NAME}			By Email
	${NODE_NAME}=   	Run Keyword If		${Is_UseEmail}		Convert To String    	.//PrimaryApplicant/EmailAddress
	${Stat1}=    		Run Keyword If		${Is_UseEmail}		Run Keyword And Return Status    XML.Get Element Text    ${WS_REQUEST_XML}    ${NODE_NAME}
    ${EmailAddr}=    	Run Keyword If  	${Is_UseEmail} and ${Stat1}    				XML.Get Element Text    ${WS_REQUEST_XML}    ${NODE_NAME}	ELSE    		Set Variable    ${EMPTY}
	#create a unique PartnerReferenceNumber for GetLead if folder is 'By PartnerRefId'
	${Is_UsePartnerRef}=	Run Keyword And Return Status 		Should Contain 			${FOLDER_NAME}			By PartnerRefId
	# ${Is_UsePartnerRef}=	Run Keyword If			${Is_Biz} or ${Is_BizApp}			Set Variable			True		ELSE	Set Variable	 ${Is_UsePartnerRef}
	${RandomID}=			Run Keyword If			${Is_UsePartnerRef}					Generate Random String	12		[NUMBERS][LETTERS]
	${WS_REQUEST_XML}=		Run Keyword If			${Is_UsePartnerRef}					Replace String			${WS_REQUEST_XML}		<PartnerReferenceNumber i:nil="true"/>		<PartnerReferenceNumber>${RandomID}</PartnerReferenceNumber>
	...						ELSE 					Set Variable 						${WS_REQUEST_XML}
	
	##################################################	
	# Determine if a sequence of chained transactions should continue or be broken (only matters for PQ TC-4, Lead TC-3, App TC-1)
	# NOTE: this code cannot handle multiple chains of different BusLeads in the same folder as there is no firstname/lastname to break on	
	# If we detect that the current name in the input xml does not match the prior returned xml then break the chain
	# Chk1 = true if it's Chained and an App, Reg Lead, or PQ. If true then get the current name and the prev name.
	# Chk2 = true if the current name does NOT match the previous name
	# If both are true then we will break the chain by reintializing the PQRef, LeadRef, and AppRef
	
	${Chk1}=					Run Keyword If		(('${Is_Chained}'=='True') and ('${TransCode}'=='1' or '${TransCode}'=='3' or '${TransCode}'=='4'))			Set Variable	True		ELSE	Set Variable		False
	${Is_TDTrans}=				Run Keyword And Return Status	 			Should Contain 		${FOLDER_NAME}		TD
	
	#Disregard name checking for TD transactions
	${Chk1}=					Run Keyword If		'${Chk1}'=='True' and '${Is_TDTrans}'=='True'		Set Variable	False		ELSE	Set Variable		${Chk1}		
	Run Keyword If				'${Chk1}'=='True'	WriteToFile				${logfile}			N		a-Chk1=${Chk1}

	${Chained_Name_Current}=	Run Keyword If		'${Chk1}'=='True'		Chained Name Check			${WS_REQUEST_XML}			${Xml_Type}	
		Run Keyword If			'${Chk1}'=='True'	WriteToFile				${logfile}			N		b-Chained_Name_Curr=${Chained_Name_Current}
		Run Keyword If			'${Chk1}'=='True'	WriteToFile				${logfile}			N		c-Chained_Name_Prev=${Chained_Name_Prev}

	${Chk2}=					Run Keyword If		'${Chk1}'=='True' and ('${Chained_Name_Prev}'!='${Chained_Name_Current}')		Set Variable	True		ELSE	Set Variable		False
		Run Keyword If			'${Chk1}'=='True'						WriteToFile			${logfile}			N				d-Chk2 Names not equal=${Chk2}
		Run Keyword If			'${Chk1}'=='True' and '${Chk2}'=='True'	WriteToFile			${logfile}			Y				e-Reinitialize RefIds - break the chain

	${PREQUAL_REF}=				Run Keyword If		'${Chk1}'=='True' and '${Chk2}'=='True'		Set Variable		${Empty}		ELSE		Set Variable		${PREQUAL_REF}
	${LEAD_REF}=				Run Keyword If		'${Chk1}'=='True' and '${Chk2}'=='True'		Set Variable		${Empty}		ELSE		Set Variable		${LEAD_REF}
	${APP_REF}=					Run Keyword If		'${Chk1}'=='True' and '${Chk2}'=='True'		Set Variable		${Empty}		ELSE		Set Variable		${APP_REF}	
	Run Keyword If				'${Chk1}'=='True' and '${Chk2}'=='True'							Set Suite Variable	${PREQUAL_REF}
	Run Keyword If				'${Chk1}'=='True' and '${Chk2}'=='True'							Set Suite Variable	${LEAD_REF}
	Run Keyword If				'${Chk1}'=='True' and '${Chk2}'=='True'							Set Suite Variable 	${APP_REF}
		Run Keyword If			'${Chk1}'=='True' and '${Chk2}'=='False'	WriteToFile			${logfile}			N				f-PRef=${PREQUAL_REF}
		Run Keyword If			'${Chk1}'=='True' and '${Chk2}'=='False'	WriteToFile			${logfile}			N				g-LRef=${LEAD_REF}
		Run Keyword If			'${Chk1}'=='True' and '${Chk2}'=='False'	WriteToFile			${logfile}			N				h-ARef=${APP_REF}
		Run Keyword If			'${LEAD_REF}'=='${Empty}' and '${FD_SERVICE}'=='1.2-1:LeadUpdate1'			WriteToFile				${logfile}		Y		i-FD_Service reset from LeadUpdate1 to LeadCreate
		Run Keyword If			'${LEAD_REF}'=='${Empty}' and '${FD_SERVICE}'=='1.2-1:LeadGenericUpdate'	WriteToFile				${logfile}		Y		i-FD_Service reset from LeadGenericUpdate to LeadGeneric
		
	${FD_SERVICE}=				Run Keyword If		'${LEAD_REF}'=='${Empty}' and '${FD_SERVICE}'=='1.2-1:LeadUpdate1'							Set Variable		1.2-1:Lead			ELSE		Set Variable		${FD_SERVICE}
	${FD_SERVICE}=				Run Keyword If		'${LEAD_REF}'=='${Empty}' and '${FD_SERVICE}'=='1.2-1:LeadGenericUpdate'					Set Variable		1.2-1:LeadGeneric	ELSE		Set Variable		${FD_SERVICE}	
	##################################################
	
	# Replace PartnerID and DealerID with required values
	${WS_REQUEST_XML}=		Convert To String 		${WS_REQUEST_XML}
	${PTR_Id}=				Return Node Value  		${WS_REQUEST_XML}			<PartnerId>				</PartnerId>
	${PTRDLR_Id}=			Return Node Value  		${WS_REQUEST_XML}			<PartnerDealerId>		</PartnerDealerId>
	${PTRDLRCBWS_Id}=		Return Node Value  		${WS_REQUEST_XML}			<LenderDealerId>		</LenderDealerId>	
	${PTRDLRPQ_Id}=			Return Node Value  		${WS_REQUEST_XML}			<a:string>				</a:string>				#PQ PartnerDealerId is held in a node called <string> 	
	${WS_REQUEST_XML}=		Run Keyword If 			'${REPLACE_PARTNER}'=='y'	Replace String 			${WS_REQUEST_XML}		<PartnerId>${PTR_Id}</PartnerId>		<PartnerId>${PARTNERID}</PartnerId>
	...						ELSE 					Set Variable 				${WS_REQUEST_XML}
	${WS_REQUEST_XML}=		Run Keyword If 			'${REPLACE_DEALER}'=='y'	Replace String 			${WS_REQUEST_XML}		<PartnerDealerId>${PTRDLR_Id}</PartnerDealerId>		<PartnerDealerId>${DEALERID}</PartnerDealerId>
	...						ELSE 					Set Variable 				${WS_REQUEST_XML}
	${WS_REQUEST_XML}=		Run Keyword If 			'${REPLACE_DEALER}'=='y'	Replace String 			${WS_REQUEST_XML}		<LenderDealerId>${PTRDLRCBWS_Id}</LenderDealerId>		<LenderDealerId>${DEALERID}</LenderDealerId>
	...						ELSE 					Set Variable 				${WS_REQUEST_XML}
	${WS_REQUEST_XML}=		Run Keyword If 			'${REPLACE_DEALER}'=='y'	Replace String 			${WS_REQUEST_XML}		<a:string>${PTRDLRPQ_Id}</a:string>		<a:string>${DEALERID}</a:string>
	...						ELSE 					Set Variable 				${WS_REQUEST_XML}
	
	# Update LeadRefId into xml prior to update
	${WS_REQUEST_XML}=		Run Keyword If			'${LEAD_REF}'!='${Empty}' and '${Is_Chained}'=='True'			Replace String		${WS_REQUEST_XML}		<LeadReferenceNumber i:nil="true"/>		<LeadReferenceNumber>${LEAD_REF}</LeadReferenceNumber>
	...						ELSE 					Set Variable 				${WS_REQUEST_XML}
	
	# Update PQRefId into xml prior to update
	${WS_REQUEST_XML}=		Run Keyword If			'${PREQUAL_REF}'!='${Empty}' and '${Is_Chained}'=='True'		Replace String		${WS_REQUEST_XML}		<PrequalificationReferenceNumber i:nil="true"/>			<PrequalificationReferenceNumber>${PREQUAL_REF}</PrequalificationReferenceNumber>
	...						ELSE 					Set Variable 				${WS_REQUEST_XML}

	# log the xml now that we've modified it
	Log 	Xml Prior to Send=${WS_REQUEST_XML}

	${PARTNERID}=		Return Node Value  		${WS_REQUEST_XML}	<PartnerId>		</PartnerId>
	${DEALERID}=		Return Node Value  		${WS_REQUEST_XML}	<PartnerDealerId>		</PartnerDealerId>	
	Run Keyword If		${Is_App}					WriteToFile		${logfile}		Y		IsApp=${Is_App}
	Run Keyword If		${Is_D2I}					WriteToFile		${logfile}		Y		Is_D2I=${Is_D2I}	
	Run Keyword If		${Is_Lead}					WriteToFile		${logfile}		Y		IsLead=${Is_Lead}
	Run Keyword If		${Is_Lead} and ${Is_Biz}	WriteToFile		${logfile}		Y		Is_Biz=${Is_Biz}
	Run Keyword If		${Is_PQ}					WriteToFile		${logfile}		Y		IsPQ=${Is_PQ}
	Run Keyword If		${Is_Menu}					WriteToFile		${logfile}		Y		IsMenu=${Is_Menu}
	Run Keyword If		${Is_PayCalc}				WriteToFile		${logfile}		Y		IsPayCalc=${Is_PayCalc}
	Run Keyword If		${Is_PartnerInfo}			WriteToFile		${logfile}		Y		IsPartnerInfo=${Is_PartnerInfo}
	Run Keyword If		${Is_CBWS-1.0}				WriteToFile		${logfile}		Y		Is_CBWS-1.0=${Is_CBWS-1.0}
	Run Keyword If		${Is_CBWS-1.1}				WriteToFile		${logfile}		Y		Is_CBWS-1.1=${Is_CBWS-1.1}	
	Run Keyword If		${Is_CBWS-1.1-StNbr}		WriteToFile		${logfile}		Y		Is_CBWS-1.1-StNbr=${Is_CBWS-1.1-StNbr}		
	WriteToFile			${logfile}		Y			PartnerId=${PARTNERID}
	WriteToFile			${logfile}		Y			DealerId=${DEALERID}
	# WriteToFile			${logfile}		N			FDServicename=${Servicename}
	WriteToFile			${logfile}		Y			FDService=${FD_SERVICE}
	WriteToFile			${logfile}		Y			Xml_Type=${Xml_Type}
	WriteToFile			${logfile}		Y			FinMethod=${FinMethod}
	WriteToFile			${logfile}		Y			VehCond=${VehCond}		

	Web Service Setup2		${FD_SERVICE}		${PartnerType}		${PARTNERID}
	# Web Service Setup		${Environment}    ${FD_SERVICE}    ${Environment}-${PartnerType}:${PARTNERID}	${PARTNERID}
	# Log 					Web Service=${WS Setup}	
		
	Log Dictionary 	${WS Setup}
	# Log 	${WS Setup['Url']}
	# Log 	${WS Setup['Service']}	
	
	# log url prior to send
	${Temp}=				Catenate 				SEPARATOR=		${WS Setup['Url']}		${WS Setup['Service']}
		WriteToFile			${logfile}				Y				$SendXml-Url= ${Temp}
	${CurrentURL}=			Set Variable 			${Temp}
	
	##############################################################################################################################################
	#Send FD Request (note: version is not used in the called routine but there are lots of keyword references so not removing now (sending '99')
	Send FD Request 2 		99		${PARTNERID}		${DEALERID}		${WS_REQUEST_XML}		${Filename}		${Servicename}
		WriteToFile			${logfile}					N							SendXml-File=${FOLDER_NAME}\\${Filename}
		WriteToFile			${logfile}					Y							SendXml-ResponseCode=${RESPONSECODE}
		${TimeStamp}=		Run Keyword					TimeStamp
		WriteToFile			${logfile}					Y							SendXml-TimeStamp=${TimeStamp}
		Run Keyword If		'${RESPONSECODE}'!= '200'	WriteToFile					${logfile}					Y				SendXml ResponseText=${RESPONSETEXT}	
	#ResponseCode was NOT 200. Check if we were expecting an error. Did filename contain an %error message%? If so then maybe all is ok.
	${IsXmlError}=			Run Keyword If				'${RESPONSECODE}'!= '200'	Check For XmlSendError		${Filename}		${RESPONSETEXT}
		Run Keyword If		'${IsXmlError}'== 'True'	WriteToFile					${logfile}					Y				$$SendXml FAILED!
	Run Keyword And Continue On Failure					Run Keyword If	'${IsXmlError}'== 'True'				Fail 			SendXml FAILED!=${FOLDER_NAME}\\${Filename} with ${RESPONSETEXT}
		WriteToFile			${logfile}					Y							SendXml-Error?=${IsXmlError}
		Run Keyword If		'${IsXmlError}'== 'True'	WriteToErrorLog				${ErrorLog}					${RESPONSECODE} | ${RESPONSETEXT}
	#ResponseCode WAS 200 but were we expecting an error (did filename contain an %error message%)? If yes then the 200 itself is an error.
	${stat}=				Run Keyword If	'${RESPONSECODE}'== '200'	Run Keyword And Return Status			Should Contain	${FileName}		%
		Run Keyword If		'${stat}'=='True'			WriteToFile					${logfile}					Y				SendXml FAILED! Expected a 400 Error!
	Run Keyword And Continue On Failure					Run Keyword If	'${stat}'== 'True'						Fail 			SendXml FAILED!=${FOLDER_NAME}\\${Filename} with ${RESPONSECODE} | Expected a 400 Error!
		Run Keyword If		'${stat}'== 'True'			WriteToFile					${logfile}					Y				SendXml-Error=True
		Run Keyword If		'${stat}'== 'True'			WriteToErrorLog				${ErrorLog}					${RESPONSECODE} | Expected a 400 Error!
	##############################################################################################################################################
	
	# After Send Processing
	
	# Control the chained refIDs here. Save prior RefIDs (in the Else condition) even if not returned in the current xml. We need to pass these back into the routine.
	# This occurs in a sequence like Lead + PQ + Lead. The 1st Lead returns a LeadRef that can't be inserted into the PQ (PQ doesn't accept a LeadRef) but the 
	# follwing Lead needs both the original LeadRef and the PQRef.
	${stat}=			Run Keyword And Return Status 	Should Contain 		${RESPONSETEXT}			<PrequalificationReferenceNumber>	
	${PREQUAL_REF}=		Run Keyword If	 	'${stat}'=='True'				Get Element Text		${RESPONSETEXT}		.//PrequalificationReferenceNumber
	...					ELSE 				Set Variable 					${PREQUAL_REF}		
	${stat}=			Run Keyword And Return Status 	Should Contain 		${RESPONSETEXT}			<LeadReferenceNumber>	
	${LEAD_REF}=		Run Keyword If	 	'${stat}'=='True'				Get Element Text		${RESPONSETEXT}		.//LeadReferenceNumber
	...					ELSE 				Set Variable 					${LEAD_REF}	
	${stat}=			Run Keyword And Return Status 	Should Contain 		${RESPONSETEXT}			<ApplicationReferenceNumber>	
	${APP_REF}=			Run Keyword If	 	'${stat}'=='True'				Get Element Text		${RESPONSETEXT}		.//ApplicationReferenceNumber	
	...					ELSE 				Set Variable 					${APP_REF}	

	${PREQUAL_REF}=		Run Keyword If		'${Is_Chained}'=='True'		Set Variable		${PREQUAL_REF}		ELSE		Set Variable		${Empty}
	${LEAD_REF}=		Run Keyword If		'${Is_Chained}'=='True'		Set Variable		${LEAD_REF}			ELSE		Set Variable		${Empty}
	${APP_REF}=			Run Keyword If		'${Is_Chained}'=='True'		Set Variable		${APP_REF}			ELSE		Set Variable		${Empty}
		
	Set Suite Variable 		${PREQUAL_REF}
	Set Suite Variable 		${LEAD_REF}
	Set Suite Variable 		${APP_REF}

	# These are the chained refIDs that the routine is managing(helpful for debugging)
	Log 	ChainedPQRef=${PREQUAL_REF}
	Log 	ChainedLeadRef=${LEAD_REF}
	Log 	ChainedAppRef=${APP_REF}
	Log 	ChainedAppRef=${PTR_REF}

	# These are the refIds returned explicitly by FD in the current response xml 
	${stat}=			Run Keyword And Return Status 	Should Contain 		${RESPONSETEXT}			<PrequalificationReferenceNumber>	
	${Returned_PQ}=		Run Keyword If	 	'${stat}'=='True'				Get Element Text		${RESPONSETEXT}		.//PrequalificationReferenceNumber
	...					ELSE 				Set Variable 					${Empty}		
	${stat}=			Run Keyword And Return Status 	Should Contain 		${RESPONSETEXT}			<LeadReferenceNumber>	
	${Returned_Lead}=	Run Keyword If	 	'${stat}'=='True'				Get Element Text		${RESPONSETEXT}		.//LeadReferenceNumber
	...					ELSE 				Set Variable 					${Empty}	
	${stat}=			Run Keyword And Return Status 	Should Contain 		${RESPONSETEXT}			<ApplicationReferenceNumber>	
	${Returned_App}=	Run Keyword If	 	'${stat}'=='True'				Get Element Text		${RESPONSETEXT}		.//ApplicationReferenceNumber	
	...					ELSE 				Set Variable 					${Empty}	
	${stat}=			Run Keyword And Return Status 	Should Contain 		${RESPONSETEXT}			<PartnerReferenceId>	
	${Returned_CB}=		Run Keyword If	 	'${stat}'=='True'				Get Element Text		${RESPONSETEXT}		.//PartnerReferenceId	
	...					ELSE 				Set Variable 					${Empty}

	WriteToFile			${logfile}			Y			ReturnedRefPQ=${Returned_PQ}
	WriteToFile			${logfile}			Y			ReturnedRefLead=${Returned_Lead}
	WriteToFile			${logfile}			Y			ReturnedRefApp=${Returned_App}
	WriteToFile			${logfile}			Y			ReturnedRefCB=${Returned_CB}	
	
	### Reset TransCode ### if transaction was a Prequalified Lead from 3 to 2 
	${TransCode}=			Run Keyword If	 	'${Is_Lead}'=='True' and '${Returned_PQ}'!='${Empty}' and '${Is_Chained}'=='True'	Set Variable		2		ELSE	Set Variable	${TransCode}		
		WriteToFile			${logfile}		Y			TransCode=${TransCode}
	
	### Get data from Response Xml for GlobalDict			
	${stat}=				Run Keyword And Return Status 		Xtract From Response Xml for GlobalDict 		${RESPONSETEXT}		${Xml_Type}			
	###

	${lenDict}=				Get Length		 			${Global_Dict}
		WriteToFile			${logfile}		Y			-------------------------
		WriteToFile			${logfile}		Y			lenDict/Index=${lenDict}
		
	${Request_Dict}=		Add Details Of Request To Dictionary
	Log Dictionary 			${Request_Dict}
	Set To Dictionary 		${Request_Dict}						REF PQ				${Returned_PQ}
	Set To Dictionary 		${Request_Dict}						REF Lead			${Returned_Lead}
	Set To Dictionary 		${Request_Dict}						REF App				${Returned_App}
	Set To Dictionary 		${Request_Dict}						REF CB				${Returned_CB}	
	Set To Dictionary 		${Request_Dict}						TransCode			${TransCode}
	Set To Dictionary 		${Request_Dict}						FinMethod			${FinMethod}
	Set To Dictionary 		${Request_Dict}						VehCond				${VehCond}
	Run Keyword If			'${AppendComplyMsg}'!='${EMPTY}'	Set To Dictionary 	${Request_Dict}			Compliance		${Is_Compliance}${AppendComplyMsg}
	...	ELSE				Set To Dictionary 					${Request_Dict}		Compliance				False
	Set To Dictionary 		${Request_Dict}						Decision			${DecisionRequest}
	Set To Dictionary 		${Request_Dict}						Email				${Is_Email}	
	Run Keyword If			'${EmailAddr}'!='${EMPTY}'			Set To Dictionary 	${Request_Dict}			EmailAddr		${EmailAddr}
	Run Keyword If			'${RandomID}'!='${EMPTY}'			Set To Dictionary 	${Request_Dict}			PartnerRefId	${RandomID}	
	#################################################################################################
	### Vehicle ###
	Set To Dictionary 		${Request_Dict}						Vehicle Info 		${EXP_VEHICLE}
	# ### Assigned to ###
	# ${Exp_AssignTo}=		Set Variable 		Unassigned
	# Set To Dictionary 		${Request_Dict}		Assigned To 	${Exp_AssignTo}
	### Credit Type ###
	Set To Dictionary 		${Request_Dict}		CreditType 		${CREDIT_TYPE}
	#################################################################################################
	# URL
	Set To Dictionary 		${Request_Dict}						Service Endpoint			${CurrentURL}
	# Privacy Notice
	${stat}=			Run Keyword And Return Status 	Should Contain 		${RESPONSETEXT}			PrivacyNotice	
	${PN_val}=	Run Keyword If	 	'${stat}'=='True'				Get Element Text		${RESPONSETEXT}		.//PrivacyNotice
	...					ELSE 				Set Variable 					${Empty}
	Set To Dictionary 		${Request_Dict}		Privacy Notice 				${PN_val}
	###########Start
	${stat}=			Run Keyword And Return Status 	Should Contain 		${RESPONSETEXT}			BusinessName	
	${BN_val}=	Run Keyword If	 	'${stat}'=='True'				Get Element Text		${RESPONSETEXT}		.//BusinessName
	...					ELSE 				Set Variable 					${Empty}
	Set To Dictionary 		${Request_Dict}		VarBusinessName 				${BN_val}
	##############End
	##Manish Start Here
	${NODE_NAME}=   Run Keyword If	 '${Xml_Type}'=='App'		    Set Variable		.//PrimaryApplicant/ApplicantInfo/SSN	
	...				ELSE IF			'${Xml_Type}'=='Lead'			Set Variable		.//PrimaryApplicant/SSN
	...				ELSE IF			'${Xml_Type}'=='PQ'				Set Variable		.//Applicant/SSN
	...				ELSE IF			'${Xml_Type}'=='CBWS-1.0'		Set Variable		.//Applicant/SSN
	...				ELSE IF			'${Xml_Type}'=='CBWS-1.1'		Set Variable		.//PrimaryApplicant/SSN
	...				ELSE 			Set Variable 					Unknown
	${NODE_NAME}=   	Convert To String    ${NODE_NAME}
	${Stat1}=    		Run Keyword And Return Status    XML.Get Element Text    ${WS_REQUEST_XML}    ${NODE_NAME}
    ${AppSSN}=    	Run Keyword If    ${Stat1}    XML.Get Element Text    ${WS_REQUEST_XML}    ${NODE_NAME}
    ...    ELSE    		Set Variable    ${EMPTY}
	Set To Dictionary 		${Request_Dict}		SSN 				${AppSSN}
	
	${NODE_NAME}=		Run Keyword If	 	'${Xml_Type}'=='App'	Set Variable		.//CoApplicant/ApplicantInfo/SSN	
	...				ELSE IF			'${Xml_Type}'=='Lead'			Set Variable		.//CoApplicant/SSN
	...				ELSE IF			'${Xml_Type}'=='CBWS-1.0'		Set Variable		.//CoApplicant/SSN
	...				ELSE IF			'${Xml_Type}'=='CBWS-1.1'		Set Variable		.//CoApplicant/SSN
	...				ELSE			Set Variable	 				Unknown	
	${NODE_NAME}=   	Convert To String    ${NODE_NAME}
	${Stat1}=    		Run Keyword And Return Status    XML.Get Element Text    ${WS_REQUEST_XML}    ${NODE_NAME}
    ${CoAppSSN}=    	Run Keyword If    ${Stat1}    XML.Get Element Text    ${WS_REQUEST_XML}    ${NODE_NAME}
    ...    ELSE    		Set Variable    ${EMPTY}
	Set To Dictionary 		${Request_Dict}		Co App SSN 				${CoAppSSN}
	
	##manish end here
	#################################################################################################
	
	# Set To Dictionary		${Global_Dict}						${lenDict}			${Request_Dict}	
	
	Run Keyword If 		${RESPONSECODE}==200 	Set To Dictionary		${Global_Dict}						${lenDict}			${Request_Dict}	
	
	Log Dictionary 			${Global_Dict}
	Set Suite Variable 		${Global_Dict}	
	
	Return From Keyword		${LEAD_REF}

##### Process All Xml Files End <<<

#############################################################################
Check For XmlSendError	[Arguments]		${xFileName}		${xResponseText}
#############################################################################
	
	#This routine determines if there was a SendXml error. It parses the filename to see if an error was expected and if the error that was
	#returned matches the error message that was expected. FileName example = Retail Used %Invalid Cash Selling Price% 4-AppXml.xml
	#The expected error message is contained %within the filename%.
	
	${Contains%}=		Run Keyword And Return Status 	Should Contain			${xFileName}		%
	${IsError?}=		Run Keyword If	'${Contains%}'=='False'					Return From Keyword		True
	
	WriteToFile			${logfile}						N						xFileName=${xFileName}
	WriteToFile			${logfile}						N						xResponseText=${xResponseText}	

	${Temp1}			${ErrorMessage}					${Temp2}=				Split String			${xFileName}		%		2
	WriteToFile			${logfile}						Y						ExpectedErrorMessage=${ErrorMessage}	
	
	${IsMatched?}=		Run Keyword And Return Status 	Should Contain			${xResponseText}		${ErrorMessage}
	WriteToFile			${logfile}						Y						DoesErrorMatch?=${IsMatched?}	
	${IsError?}=		Run Keyword If	'${IsMatched?}'=='True'					Set Variable			False		ELSE	Set Variable	True	
	
	[Return]			${IsError?}	

############################################################################################
Xtract From Response Xml for GlobalDict		[Arguments]		${RESPONSETEXT}		${Xml_Type}	
############################################################################################

	Log 	Xml_Type=${Xml_Type}		warn
	${FIRSTNAME}=	Set Variable 		${EMPTY}
	${LASTNAME}=	Set Variable 		${EMPTY}
	${MIDDLENAME}=	Set Variable 		${EMPTY}
	
	${COFIRSTNAME}=		Set Variable 		${EMPTY}
	${COLASTNAME}=		Set Variable 		${EMPTY}
	${COMIDDLENAME}=	Set Variable 		${EMPTY}
	
	##### Applicant
	
	### FirstName-1
	${FN1}=		Run Keyword If	 	'${Xml_Type}'=='App'			Set Variable		.//PrimaryApplicant/ApplicantInfo/FirstName	
	...				ELSE IF			'${Xml_Type}'=='Lead'			Set Variable		.//PrimaryApplicant/FirstName
	...				ELSE IF			'${Xml_Type}'=='PQ'				Set Variable		.//Applicant/FirstName
	...				ELSE IF			'${Xml_Type}'=='CBWS-1.0'		Set Variable		.//Applicant/FirstName
	...				ELSE IF			'${Xml_Type}'=='CBWS-1.1'		Set Variable		.//PrimaryApplicant/FirstName
	...				ELSE 			Set Variable 					Unknown
	
	# Log		FN1=${FN1}		warn
	${PASSED}=		Run Keyword And Return Status		XML.Get Element Text		${RESPONSETEXT}			${FN1}
	${FIRSTNAME}=	Run Keyword If		${PASSED}		XML.Get Element Text			${RESPONSETEXT}		${FN1}
	...				ELSE 				Set Variable 		${EMPTY}
	
	Set Suite Variable 				${FIRSTNAME}	
		WriteToFile					${logfile}			Y			FirstName=${FIRSTNAME}
	
	### LastName-1
	${LN1}=		Run Keyword If	 	'${Xml_Type}'=='App'			Set Variable		.//PrimaryApplicant/ApplicantInfo/LastName	
	...				ELSE IF			'${Xml_Type}'=='Lead'			Set Variable		.//PrimaryApplicant/LastName
	...				ELSE IF			'${Xml_Type}'=='PQ'				Set Variable		.//Applicant/LastName
	...				ELSE IF			'${Xml_Type}'=='CBWS-1.0'		Set Variable		.//Applicant/LastName
	...				ELSE IF			'${Xml_Type}'=='CBWS-1.1'		Set Variable		.//PrimaryApplicant/LastName
	...				ELSE			Set Variable	 				Unknown	
	# Log		LN1=${LN1}		warn
	
	${PASSED}=		Run Keyword And Return Status		XML.Get Element Text		${RESPONSETEXT}			${LN1}
	${LASTNAME}=	Run Keyword If		${PASSED}		XML.Get Element Text			${RESPONSETEXT}		${LN1}
	...				ELSE 				Set Variable 		${EMPTY}
	
	Set Suite Variable 				${LASTNAME}	
		WriteToFile					${logfile}			Y			LastName=${LASTNAME}
	
	### MiddleName-1
	${MN1}=		Run Keyword If	 	'${Xml_Type}'=='App'			Set Variable		.//PrimaryApplicant/ApplicantInfo/MiddleInitial
	...				ELSE IF			'${Xml_Type}'=='Lead'			Set Variable		.//PrimaryApplicant/MiddleInitial
	...				ELSE IF			'${Xml_Type}'=='PQ'				Set Variable		.//Applicant/MiddleInitial
	...				ELSE IF			'${Xml_Type}'=='CBWS-1.0'		Set Variable		.//Applicant/MiddleInitial
	...				ELSE IF			'${Xml_Type}'=='CBWS-1.1'		Set Variable		.//PrimaryApplicant/MiddleInitial
	...				ELSE			Set Variable	 				Unknown	
	# Log		LN1=${LN1}		warn
	
	${PASSED}=		Run Keyword And Return Status		XML.Get Element Text		${RESPONSETEXT}			${MN1}
	${MIDDLENAME}=	Run Keyword If		${PASSED}		XML.Get Element Text			${RESPONSETEXT}		${MN1}
	...				ELSE 				Set Variable 		${EMPTY}
	
	Set Suite Variable 				${MIDDLENAME}	
		WriteToFile					${logfile}			Y			MiddleInit=${MIDDLENAME}
	
	##################################
	# this is used to determine if a sequence of chained transactions should continue or be broken
	${Chained_Name_Prev}=			Catenate						SEPARATOR=			${LASTNAME}			${FIRSTNAME}
	Set Suite Variable				${Chained_Name_Prev}		
	##################################

	##### Coapplicant
		
	### FirstName-2	
	${FN2}=		Run Keyword If	 	'${Xml_Type}'=='App'			Set Variable		.//CoApplicant/ApplicantInfo/FirstName	
	...				ELSE IF			'${Xml_Type}'=='Lead'			Set Variable		.//CoApplicant/FirstName
	...				ELSE IF			'${Xml_Type}'=='CBWS-1.0'		Set Variable		.//CoApplicant/FirstName
	...				ELSE IF			'${Xml_Type}'=='CBWS-1.1'		Set Variable		.//CoApplicant/FirstName
	...				ELSE			Set Variable	 				Unknown	
	# Log		FN2=${FN2}		warn	
	
	${PASSED}=			Run Keyword And Return Status		XML.Get Element Text		${RESPONSETEXT}		${FN2}
	${COFIRSTNAME}=		Run Keyword If		${PASSED}		XML.Get Element Text		${RESPONSETEXT}			${FN2}
	...				ELSE 				Set Variable 		${EMPTY}
	
	Set Suite Variable 				${COFIRSTNAME}	
		WriteToFile					${logfile}			Y			CoFirstName=${COFIRSTNAME}
		
	### LastName-2	
	${LN2}=		Run Keyword If	 	'${Xml_Type}'=='App'			Set Variable		.//CoApplicant/ApplicantInfo/LastName	
	...				ELSE IF			'${Xml_Type}'=='Lead'			Set Variable		.//CoApplicant/LastName
	...				ELSE IF			'${Xml_Type}'=='CBWS-1.0'		Set Variable		.//CoApplicant/LastName
	...				ELSE IF			'${Xml_Type}'=='CBWS-1.1'		Set Variable		.//CoApplicant/LastName
	...				ELSE			Set Variable	 				Unknown		
	# Log		LN2=${LN2}		warn	
	
	${PASSED}=			Run Keyword And Return Status		XML.Get Element Text		${RESPONSETEXT}		${LN2}
	${COLASTNAME}=		Run Keyword If		${PASSED}		XML.Get Element Text		${RESPONSETEXT}		${LN2}
	...				ELSE 				Set Variable 		${EMPTY}
	
	Set Suite Variable 				${COLASTNAME}	
		WriteToFile					${logfile}			Y			CoLastName=${COLASTNAME}
	
	### MiddleName-2
	${MN2}=		Run Keyword If	 	'${Xml_Type}'=='App'			Set Variable		.//CoApplicant/ApplicantInfo/MiddleInitial
	...				ELSE IF			'${Xml_Type}'=='Lead'			Set Variable		.//CoApplicant/MiddleInitial
	...				ELSE IF			'${Xml_Type}'=='CBWS-1.0'		Set Variable		.//CoApplicant/MiddleInitial
	...				ELSE IF			'${Xml_Type}'=='CBWS-1.1'		Set Variable		.//CoApplicant/MiddleInitial
	...				ELSE			Set Variable	 				Unknown	
	# Log		LN1=${LN1}		warn
	
	${PASSED}=		Run Keyword And Return Status		XML.Get Element Text		${RESPONSETEXT}			${MN2}
	${COMIDDLENAME}=	Run Keyword If		${PASSED}		XML.Get Element Text			${RESPONSETEXT}		${MN2}
	...				ELSE 				Set Variable 		${EMPTY}
	
	Set Suite Variable 				${COMIDDLENAME}	
		WriteToFile					${logfile}			Y			CoMidInit=${COMIDDLENAME}
	
	Return From Keyword		Pass
	
########################################################################
Chained Name Check		[Arguments]			${Xml}			${Xml_Type}	
########################################################################

	##### Get Applicant name
	
	### FirstName-1
	${FN1}=		Run Keyword If	 	'${Xml_Type}'=='App'			Set Variable		.//PrimaryApplicant/ApplicantInfo/FirstName	
	...				ELSE IF			'${Xml_Type}'=='Lead'			Set Variable		.//PrimaryApplicant/FirstName
	...				ELSE IF			'${Xml_Type}'=='PQ'				Set Variable		.//Applicant/FirstName
	...				ELSE IF			'${Xml_Type}'=='CBWS-1.0'		Set Variable		.//Applicant/FirstName
	...				ELSE IF			'${Xml_Type}'=='CBWS-1.1'		Set Variable		.//PrimaryApplicant/FirstName
	...				ELSE			Set Variable	 				Unknown	
	${FIRSTNAME}=					XML.Get Element Text			${Xml}				${FN1}
	
	### LastName-1
	${LN1}=		Run Keyword If	 	'${Xml_Type}'=='App'			Set Variable		.//PrimaryApplicant/ApplicantInfo/LastName	
	...				ELSE IF			'${Xml_Type}'=='Lead'			Set Variable		.//PrimaryApplicant/LastName
	...				ELSE IF			'${Xml_Type}'=='PQ'				Set Variable		.//Applicant/LastName
	...				ELSE IF			'${Xml_Type}'=='CBWS-1.0'		Set Variable		.//Applicant/LastName
	...				ELSE IF			'${Xml_Type}'=='CBWS-1.1'		Set Variable		.//PrimaryApplicant/LastName
	...				ELSE			Set Variable	 				Unknown	
	${LASTNAME}=					XML.Get Element Text			${Xml}				${LN1}
		
	##################################
	# this is used to determine if a sequence of chained transactions should continue or be broken
	${Chained_Name_Current}=	Catenate				SEPARATOR=			${LASTNAME}			${FIRSTNAME}
	##################################

	Return From Keyword		${Chained_Name_Current}

############################	
Process All Xml Files SetUp
############################	

	WriteToFile					${LogFile}				Y						Process All Xml Files SetUp>>>
	
	# ${TimeStamp}=				Run Keyword				TimeStamp
	# ${Temp}=					Replace String 			${TEST NAME}		:	-
	# ${LogFile}=					Set Variable			${RESOURCE}\\Logs\\${TimeStamp}-XmlLog-${SUITE NAME}-${Temp}.txt		#QQQ
	# ${ErrorLog}=				Set Variable			${RESOURCE}\\Logs\\${TimeStamp}-XmlErrorLog-${SUITE NAME}-${Temp}.txt	#QQQ		
	# Set Suite Variable			${LogFile}
	# Set Suite Variable			${ErrorLog}	
	# ${logline}					Set Variable			{EMPTY}
	
	${PARTNERID_FD}=			Get From Dictionary		${Scenario Setup}		Partner Id FD
	${DEALERID_FD}=				Get From Dictionary		${Scenario Setup}		Partner Dealer Id FD
	${PARTNERID_TD}=			Get From Dictionary		${Scenario Setup}		Partner Id TD
	${DEALERID_TD}=				Get From Dictionary		${Scenario Setup}		Partner Dealer Id TD
	${PARTNERID_CB}=			Get From Dictionary		${Scenario Setup}		Partner Id CB
	${DEALERID_CB}=				Get From Dictionary		${Scenario Setup}		Partner Dealer Id CB
	${PARTNERID_Compliance}=	Get From Dictionary		${Scenario Setup}		Partner Id Compliance
	${DEALERID_Compliance}=		Get From Dictionary		${Scenario Setup}		Dealer Id Compliance
	
	Set Suite Variable 		${PARTNERID}
	Set Suite Variable 		${DEALERID}
	Set Suite Variable 		${PARTNERID_FD}
	Set Suite Variable 		${DEALERID_FD}
	Set Suite Variable 		${PARTNERID_TD}
	Set Suite Variable 		${DEALERID_TD}
	Set Suite Variable 		${PARTNERID_CB}
	Set Suite Variable 		${DEALERID_CB}	
	Set Suite Variable 		${PARTNERID_Compliance}
	Set Suite Variable 		${DEALERID_Compliance}
	Set Suite Variable 		${REPLACE_PARTNER}
	Set Suite Variable 		${REPLACE_DEALER}	

	${Global_Dict}=			Create Dictionary
	Set Suite Variable 		${Global_Dict}
	
	# WriteToFile			${LogFile}				Y			------------------------------------------
	# WriteToFile			${LogFile}				Y			SuiteName=${SUITE NAME}	
	# WriteToFile			${LogFile}				Y			------------------------------------------
	# WriteToFile			${LogFile}				Y			Scenario SetUp:
	# WriteToFile			${LogFile}				Y			PartnerId_FD=${PARTNERID_FD}	
	# WriteToFile			${LogFile}				Y			DealerId_FD=${DEALERID_FD}
	# WriteToFile			${LogFile}				Y			PartnerId_TD=${PARTNERID_TD}
	# WriteToFile			${LogFile}				Y			DealerId_TD=${DEALERID_TD}	
	# WriteToFile			${LogFile}				Y			PartnerId_CB=${PARTNERID_CB}	
	# WriteToFile			${LogFile}				Y			DealerId_CB=${DEALERID_CB}	
	# WriteToFile			${LogFile}				Y			PartnerId_Compliance=${PARTNERID_Compliance}
	# WriteToFile			${LogFile}				Y			DealerId_Compliance=${DEALERID_Compliance}
	# WriteToFile			${LogFile}				Y			ReplacePartnerInXml?=${REPLACE_PARTNER}	
	# WriteToFile			${LogFile}				Y			ReplaceDealerInXml?=${REPLACE_DEALER}		

############################
Process All Xml Files Wrap
############################

	WriteToFile					${LogFile}		Y			Process All Xml Files Wrap>>>
	
	WriteToFile					${logfile}		Y			@Final Global Dict
	WriteToFile					${logfile}		Y			${Global_Dict}
	
	${List_DDF_Temp}			Create List
	${List_GetLead_Temp}		Create List
	${List_CustArchive_Temp}	Create List	
	${List_LeadsSummary_Temp}	Create List	
	${List_DDF}					Create List
	${List_GetLead}				Create List
	${List_CustArchive}			Create List	
	${List_LeadsSummary}		Create List	
	${List_Compliance}			Create List		
	${List_Decision}			Create List
	${List_PartnerPosts}		Create List	
	${List_TPP}					Create List		
	${List_DT2Apps}				Create List			

	# 1 = App
	# 2 = Prequalified Lead
	# 3 = Lead
	# 4 = PQ
	# 5 = CBWS (1.0 or 1.1)
	# 6 = MenuDriver
	# 7 = PayCalc
	# 8 = PartnerInfo
	# 9 = Business Lead	
	# 10 = COL
	# 11 = DealerInfo
	# 12 = TPP
	# Not accounted for: TD (but we don't care until they become FD Leads and then we have them)
	# Note: Prequalified Leads TC-3 don't go into CustArchive list because they are already accounted for as TC-1
	
	# Process GlobalDict to ValidationLists	
	${len}=			Get Length 			${Global_Dict}
	
	:FOR 	${I}	IN RANGE 		0		${len}
	\		${req_dict}=			Get From Dictionary		${Global_Dict}		${I}
	\		${TC}=					Get From Dictionary		${req_dict}			TransCode
	\		${RefPQ}=				Get From Dictionary		${req_dict}			REF PQ
	\		${RefLead}=				Get From Dictionary		${req_dict}			REF Lead
	\		${RefApp}=				Get From Dictionary		${req_dict}			REF App	
	\		${RefCB}=				Get From Dictionary		${req_dict}			REF CB		
	\		${Compliance}=			Get From Dictionary		${req_dict}			Compliance	
	\		${Decision}=			Get From Dictionary		${req_dict}			Decision
	\		${FolderName}=			Get From Dictionary		${req_dict}			Input Folder			
	\
	\		${Is_DT2}=	Run Keyword And Return Status	 	Should Contain 		${FOLDER_NAME}			DT2
	\
	\		${ListStringPQ}=			Catenate 		SEPARATOR=*		${RefPQ}	${TC}	${I}
	\		${ListStringLead}=			Catenate 		SEPARATOR=*		${RefLead}	${TC}	${I}
	\		${ListStringCB}=			Catenate 		SEPARATOR=*		${RefCB}	${TC}	${I}	
	\
	\		Run Keyword If			'${TC}'=='1' or '${TC}'=='2' or '${TC}'=='3' or '${TC}'=='6' or '${TC}'=='7' or '${TC}'=='9'	Append To List		${List_DDF_Temp}				${ListStringLead}	
	\		Run Keyword If			'${TC}'=='1' or '${TC}'=='2' or '${TC}'=='3' or '${TC}'=='6' or '${TC}'=='7' or '${TC}'=='9'	Append To List		${List_GetLead_Temp}			${ListStringLead}
	\		Run Keyword If			'${TC}'=='1' or '${TC}'=='4'																	Append To List		${List_CustArchive_Temp}		${ListStringPQ}	
	\		Run Keyword If			'${TC}'=='5'																					Append To List		${List_CustArchive_Temp}		${ListStringCB}		
	\		Run Keyword If			'${TC}'=='1' or '${TC}'=='2' or '${TC}'=='3'													Append To List		${List_LeadsSummary_Temp}		${ListStringLead}
	\		${Is_Compliance}=		Run Keyword And Return Status 				Should Contain 			${Compliance}				True	
	\		Run Keyword If			${Is_Compliance}																				Append To List		${List_Compliance}				${I}
	\		${Is_Decision}=			Run Keyword And Return Status 				Should Not Contain		${Decision}					False	
	\		Run Keyword If			'${TC}'=='1' and ${Is_Decision}																	Append To List		${List_Decision}				${I}	
	\		Run Keyword If			'${TC}'=='1' or '${TC}'=='4' or '${TC}'=='5'													Append To List		${List_PartnerPosts}			${I}		
	\		Run Keyword If			'${TC}'=='12'																					Append To List		${List_TPP}						${I}			
	\		Run Keyword If			'${Is_DT2}'=='True' and '${TC}'=='1'															Append To List		${List_DT2Apps}					${I}				
	
	Set Suite Variable				${List_Compliance}
	Set Suite Variable				${List_Decision}
	Set Suite Variable				${List_PartnerPosts}	
	Set Suite Variable				${List_TPP}		
	Set Suite Variable				${List_DT2Apps}			

	### Process List_DDF
	Sort List						${List_DDF_Temp}
	# WriteToFile						${logfile}					Y					***Temp DDFList***
	# WriteToFile						${logfile}					Y					${List_DDF_Temp}
	#QQQ TH - Reversing this list only so that the latest transaction gets loaded to List_DDF so as to be able to handle DDF Audits.
	Reverse List					${List_DDF_Temp}						
	# WriteToFile						${logfile}					Y					***Temp DDFList***
	# WriteToFile						${logfile}					Y					${List_DDF_Temp}	
	${RefID_Prev}					Set Variable				${EMPTY}
	${DictIndex_Prev}				Set Variable				${EMPTY}
	${len}=			Get Length 		${List_DDF_Temp}	
	:FOR 	${Item}		IN RANGE 	0 							${len}
	\		${ListItem}=			Get From List 				${List_DDF_Temp}		${Item}
	# \		WriteToFile				${logfile}					Y					-------------------------
	# \		WriteToFile				${logfile}					Y					RefID_Prev=${RefID_Prev}	
	# \		WriteToFile				${logfile}					Y					DictIndex_Prev=${DictIndex_Prev}
	# \		WriteToFile				${logfile}					Y					ReadItem=${ListItem}
	\		${RefID_Cur}=			Fetch From Left				${ListItem}			*
	# \		WriteToFile				${logfile}					Y					RefID_Cur=${RefID_Cur}
	\		${DictIndex_Cur}=		Fetch From Right			${ListItem}			*
	# \		WriteToFile				${logfile}					Y					DictIndex=${DictIndex_Cur}
	\		${equal}=				Run Keyword If				'${RefID_Prev}'=='${RefID_Cur}' 			Set Variable	True	ELSE	Set Variable	False	
	# \		WriteToFile				${logfile}					Y					RefsEqual?=${equal}
	\		${RefID_Prev}=			Set Variable				${RefID_Cur}
	\		${DictIndex_Prev}=		Set Variable				${DictIndex_Cur}
	\		Run Keyword If			'${equal}'=='False'			Append To List		${List_DDF}				${DictIndex_Cur}	
	# WriteToFile				${logfile}			Y				***DDFList***
	# WriteToFile				${logfile}			Y				${List_DDF}
	Set Suite Variable				${List_DDF}
	
	### Process List_GetLead
	Sort List						${List_GetLead_Temp}
	# WriteToFile						${logfile}					Y					***Temp GetLeadList***
	# WriteToFile						${logfile}					Y					${List_GetLead_Temp}
	#QQQ TH - Reversing this list only so that the latest transaction gets loaded to List_GetList so as to be able to handle GetLead Audits.
	Reverse List					${List_GetLead_Temp}						
	# WriteToFile						${logfile}					Y					***Temp GetLeadList***
	# WriteToFile						${logfile}					Y					${List_GetLead_Temp}	
	${RefID_Prev}					Set Variable				${EMPTY}
	${DictIndex_Prev}				Set Variable				${EMPTY}
	${len}=			Get Length 		${List_GetLead_Temp}	
	:FOR 	${Item}		IN RANGE 	0 							${len}
	\		${ListItem}=			Get From List 				${List_GetLead_Temp}		${Item}
	# \		WriteToFile				${logfile}					Y					-------------------------
	# \		WriteToFile				${logfile}					Y					RefID_Prev=${RefID_Prev}	
	# \		WriteToFile				${logfile}					Y					DictIndex_Prev=${DictIndex_Prev}
	# \		WriteToFile				${logfile}					Y					ReadItem=${ListItem}	
	\		${RefID_Cur}=			Fetch From Left				${ListItem}			*
	# \		WriteToFile				${logfile}					Y					RefID_Cur=${RefID_Cur}
	\		${DictIndex_Cur}=		Fetch From Right			${ListItem}			*
	# \		WriteToFile				${logfile}					Y					DictIndex=${DictIndex_Cur}	
	\		${equal}=				Run Keyword If				'${RefID_Prev}'=='${RefID_Cur}' 			Set Variable	True	ELSE	Set Variable	False	
	# \		WriteToFile				${logfile}					Y					RefsEqual?=${equal}		
	\		${RefID_Prev}=			Set Variable				${RefID_Cur}
	\		${DictIndex_Prev}=		Set Variable				${DictIndex_Cur}
	\		Run Keyword If			'${equal}'=='False'			Append To List		${List_GetLead}			${DictIndex_Cur}	
	# WriteToFile				${logfile}			Y				***GetLeadList***
	# WriteToFile				${logfile}			Y				${List_GetLead}
	Set Suite Variable				${List_GetLead}	
	
	### Process List_CustArchive
	Sort List						${List_CustArchive_Temp}	
	# WriteToFile						${logfile}					Y					***Temp CustArchiveList***
	# WriteToFile						${logfile}					Y					${List_CustArchive_Temp}	
	${RefID_Prev}					Set Variable				${EMPTY}
	${DictIndex_Prev}				Set Variable				${EMPTY}
	${len}=			Get Length 		${List_CustArchive_Temp}	
	:FOR 	${Item}		IN RANGE 	0 							${len}
	\		${ListItem}=			Get From List 				${List_CustArchive_Temp}		${Item}
	# \		WriteToFile				${logfile}					Y					-------------------------
	# \		WriteToFile				${logfile}					Y					RefID_Prev=${RefID_Prev}	
	# \		WriteToFile				${logfile}					Y					DictIndex_Prev=${DictIndex_Prev}
	# \		WriteToFile				${logfile}					Y					ReadItem=${ListItem}		
	\		${RefID_Cur}=			Fetch From Left				${ListItem}			*
	# \		WriteToFile				${logfile}					Y					RefID_Cur=${RefID_Cur}	
	\		${DictIndex_Cur}=		Fetch From Right			${ListItem}			*
	# \		WriteToFile				${logfile}					Y					DictIndex=${DictIndex_Cur}		
	\		${equal}=				Run Keyword If				'${RefID_Prev}'=='${RefID_Cur}' 			Set Variable	True	ELSE	Set Variable	False	
	# \		WriteToFile				${logfile}					Y					RefsEqual?=${equal}			
	\		${RefID_Prev}=			Set Variable				${RefID_Cur}
	\		${DictIndex_Prev}=		Set Variable				${DictIndex_Cur}
	\		Run Keyword If			'${equal}'=='False'			Append To List		${List_CustArchive}		${DictIndex_Cur}	
	# WriteToFile				${logfile}			Y				***CustArchiveList***
	# WriteToFile				${logfile}			Y				${List_CustArchive}
	Set Suite Variable				${List_CustArchive}	
	
	### Process List_LeadsSummary
	Sort List						${List_LeadsSummary_Temp}
	# WriteToFile						${logfile}					Y					***Temp LeadsSummaryList***
	# WriteToFile						${logfile}					Y					${List_LeadsSummary_Temp}		
	${RefID_Prev}					Set Variable				${EMPTY}
	${DictIndex_Prev}				Set Variable				${EMPTY}
	${len}=			Get Length 		${List_LeadsSummary_Temp}	
	:FOR 	${Item}		IN RANGE 	0 							${len}
	\		${ListItem}=			Get From List 				${List_LeadsSummary_Temp}		${Item}
	# \		WriteToFile				${logfile}					Y					-------------------------
	# \		WriteToFile				${logfile}					Y					RefID_Prev=${RefID_Prev}	
	# \		WriteToFile				${logfile}					Y					DictIndex_Prev=${DictIndex_Prev}
	# \		WriteToFile				${logfile}					Y					ReadItem=${ListItem}			
	\		${RefID_Cur}=			Fetch From Left				${ListItem}			*
	# \		WriteToFile				${logfile}					Y					RefID_Cur=${RefID_Cur}		
	\		${DictIndex_Cur}=		Fetch From Right			${ListItem}			*
	# \		WriteToFile				${logfile}					Y					DictIndex=${DictIndex_Cur}	
	\		${equal}=				Run Keyword If				'${RefID_Prev}'=='${RefID_Cur}' 			Set Variable	True	ELSE	Set Variable	False	
	# \		WriteToFile				${logfile}					Y					RefsEqual?=${equal}		
	\		${RefID_Prev}=			Set Variable				${RefID_Cur}
	\		${DictIndex_Prev}=		Set Variable				${DictIndex_Cur}
	\		Run Keyword If			'${equal}'=='False'			Append To List		${List_LeadsSummary}	${DictIndex_Cur}	
	# WriteToFile				${logfile}			Y				***LeadsSummaryList***
	# WriteToFile				${logfile}			Y				${List_LeadsSummary}
	Set Suite Variable				${List_LeadsSummary}	
	
	WriteToFile				${logfile}			Y				***DDFList***
	WriteToFile				${logfile}			Y				${List_DDF}	
	WriteToFile				${logfile}			Y				***GetLeadList***
	WriteToFile				${logfile}			Y				${List_GetLead}
	WriteToFile				${logfile}			Y				***CustArchiveList***
	WriteToFile				${logfile}			Y				${List_CustArchive}
	WriteToFile				${logfile}			Y				***LeadsSummaryList***
	WriteToFile				${logfile}			Y				${List_LeadsSummary}
	WriteToFile				${logfile}			Y				***ComplianceList***
	WriteToFile				${logfile}			Y				${List_Compliance}	
	WriteToFile				${logfile}			Y				***DecisionList***
	WriteToFile				${logfile}			Y				${List_Decision}
	WriteToFile				${logfile}			Y				***PartnerPosts***
	WriteToFile				${logfile}			Y				${List_PartnerPosts}	
	WriteToFile				${logfile}			Y				***TPPList***
	WriteToFile				${logfile}			Y				${List_TPP}		
	WriteToFile				${logfile}			Y				***DT2Apps***
	WriteToFile				${logfile}			Y				${List_DT2Apps}			
	WriteToFile				${logfile}			Y				-------------------------	

############################################################################
Process TD Offer		 	[Arguments]		${FOLDER_NAME}		${FILENAME}
############################################################################
	[Documentation]			This keyword will accept and process one TD Offer file.
	...				  		Author  : Manisha Gadekar (Manisha.Gadekar@dealtertrack.com)
	...						Update Date\By: 24 Jun 2015	
	
	# Set Up #
	${Environment}=			Get From Dictionary		${Scenario Setup}		Environment
	${Servicename}=			Set Variable 			FD 1.2 TD
	${FD_SERVICE}= 			Set Variable 			1.2-1:TD-1
		WriteToFile			${logfile}				Y		PartnerId=${PARTNERID}
		WriteToFile			${logfile}				Y		DealerId=${DEALERID}
	Web Service Setup2		${FD_SERVICE}    		TD		${PARTNERID}	
    # Web Service Setup    	${Environment}    ${FD_SERVICE}    ${Environment}-TD    ${PARTNERID}	#returns URL, Username, Password and Service
		Log 				${WS Setup}
	
	${WS_REQUEST_XML}=		Read From File To String 	${FOLDER_NAME}\\${FILENAME}
		Log 	${WS_REQUEST_XML}

	############ Send TD Offer
	Send TD Offer	 		${WS_REQUEST_XML}		${FILENAME}			${Servicename}	
		# Log 				${RESPONSECODE}
		# Log 				${RESPONSETEXT}	
	############

	${ResponseDict}=		WS_CommonUtil.ConvertJsonStringToDict		${RESPONSETEXT}
		Log Dictionary			${ResponseDict}
	${Keys}=				Get Dictionary Keys						${ResponseDict}
		Log List				${Keys}
	${Res_Objects_Dict}=		Get From Dictionary		${ResponseDict}			objects
		Log List 				${Res_Objects_Dict}
	${len}=					Get Length					${Res_Objects_Dict}
	${Offer_Dict}=			Get From List				${Res_Objects_Dict}		0
		Log 					${Offer_Dict}
	${Offer_id}=			Get From Dictionary 		${Offer_Dict}			offer_id
		WriteToFile			${logfile}					Y						TD Request-1 Offer id!= ${Offer_id}
	
	Return From Keyword		${Offer_id}	

Send TD Offer	 			[Arguments] 	${WS_REQUEST_XML}		${FILENAME}			${Servicename}
	[Documentation]			This keyword will post a TD Offer request. 
	...						Parameters passed are used for selecting correct request
	...						Pre-requisite: ${WS Setup} dictionary is set with correct values
	...				  		Author  : Manisha Gadekar (Manisha.Gadekar@dealtertrack.com)
	...						Update Date\By: 31 Jul 2015
	
	# Set Up #
	${WS_URL}=		Set Variable	${WS Setup['Service']}
		WriteToFile	${logfile}		Y						Send TD Request-1 url= ${WS_URL}
	${Username}=	Set Variable	${WS Setup['User Name']}
	${Password}=	Set Variable	${WS Setup['Password']}
	${WS_REQUEST_XML}=		Convert To String 	${WS_REQUEST_XML}
	
	############ Send the Request
	${RESPONSECODE}		${RESPONSETEXT}			Send Request With Request Json Trade Driver		${WS_URL}		${WS_REQUEST_XML}	${Username}		${Password}
	WriteToFile			${logfile}				Y			Send TD Offer Response Code=${RESPONSECODE}
	WriteToFile			${logfile}				Y			Send TD Offer Response Text=${RESPONSETEXT}	
	Set Test Variable	${RESPONSECODE}
	Set Test Variable	${RESPONSETEXT}
	############
	
	${time}=	Get Time
	${time}=	Convert To String 	${time}
	${time}=	Replace String 		${time}		:	-
	
	# Write Response in a file 
	${F_name}=		WS_CommonUtil.trimFromRight			${Filename}				4
	${RESPONSE_FILE}		Catenate	SEPARATOR=			${F_name}		_${time}.txt
	WS_CommonUtil.Write_String_To_File		${RESOURCE}\\Other\\WebService\\Response\\${RESPONSE_FILE}		${RESPONSETEXT}
	
	${REQUEST_FILE}		Catenate	SEPARATOR=			${F_name}		_${time}.txt
	WS_CommonUtil.Write_String_To_File		${RESOURCE}\\Other\\WebService\\Request\\${REQUEST_FILE}		${WS_REQUEST_XML}	
	# Log			${RESPONSECODE}
	# Log			${RESPONSETEXT}	
	
	Run Keyword If          '${RESPONSECODE}'!= '200'		WriteToFile			${logfile}			Y		$TD Offer FAILED = ${RESPONSECODE}. Error message is: ${RESPONSETEXT}.
	Run Keyword If			'${RESPONSECODE}'!= '200'		WriteToErrorLog		${ErrorLog}					${RESPONSECODE} | ${RESPONSETEXT}
	Run Keyword If          '${RESPONSECODE}'!= '200'       Fail        		Your Request: ${Servicename} is not successful. You have received response code: ${RESPONSECODE}. The error message is: ${RESPONSETEXT}.
	Run Keyword If          '${RESPONSECODE}'== '200'       Log 				Request: ${Servicename} is successful 
	
####################################################################################################	
Process TD Lead			 	[Arguments]		${FOLDER_NAME}			${FILENAME}			${Offer_ID}
####################################################################################################	
	[Documentation]			This keyword will accept and process one TD Lead file. It expects to be passed an offer_id from a prior TD Offer transaction.
	...				  		Author: Tom Hutcheson
	...						Update Date\By: 10 Sep 2015	
	
	# Set Up #	
	${Environment}=			Get From Dictionary		${Scenario Setup}		Environment
	${Servicename}=			Set Variable 			FD 1.2 TD-2
	${FD_SERVICE}= 			Set Variable 			1.2-1:TD-2
		WriteToFile			${logfile}				Y			PartnerId=${PARTNERID}
		WriteToFile			${logfile}				Y			DealerId=${DEALERID}
	
	Web Service Setup2		${FD_SERVICE}    		TD			${PARTNERID}	
    # Web Service Setup    	${Environment}    ${FD_SERVICE}    ${Environment}-TD    ${PARTNERID}		#returns URL, Username, Password and Service in form of a dictionary
		Log 				${WS Setup}

	${WS_REQUEST_XML}=		Read From File To String 	${FOLDER_NAME}\\${Filename}
	${Temp1}=				Return Node Value  		${WS_REQUEST_XML}			<offer_id>		</offer_id>
	${WS_REQUEST_XML}=		Replace String			${WS_REQUEST_XML}			<offer_id>${Temp1}</offer_id>		<offer_id>${Offer_ID}</offer_id>
		Log 	${WS_REQUEST_XML}

	############ Send Request - TD Lead
	Send TD Lead	 		${WS_REQUEST_XML}		${Filename}			${Servicename}	
	# Log 					${RESPONSECODE}
	# Log 					${RESPONSETEXT}
	############

	#retrieve and return TDLeadRef
	${ResponseDict}=		WS_CommonUtil.ConvertJsonStringToDict		${RESPONSETEXT}		
	Log Dictionary			${ResponseDict}
	${Keys}=				Get Dictionary Keys						${ResponseDict}
	Log List				${Keys}
	${TDLeadRef}=			Get From Dictionary 	${ResponseDict}	lead_id
		WriteToFile			${logfile}				Y				TD Request-2 LeadRef= ${TDLeadRef}
	
	Return From Keyword		${TDLeadRef}
	
Send TD Lead	 			[Arguments] 	${WS_REQUEST_XML}		${FILENAME}			${Servicename}
	[Documentation]			This keyword will post a TD Lead request.
	...				  		Author: Tom Hutcheson
	...						Update Date\By: 10 Sep 2015	

	${WS_URL}=				Set Variable	${WS Setup['Service']}
		WriteToFile			${logfile}		Y						Send TD Request-2 url= ${WS_URL}
	${Username}=			Set Variable	${WS Setup['User Name']}
	${Password}=			Set Variable	${WS Setup['Password']}
	${WS_REQUEST_XML}=		Convert To String 	${WS_REQUEST_XML}

	### Send the Request
	${RESPONSECODE}			${ERRORTEXT}	${RESPONSETEXT}			Send Request With Request XML Trade Driver	${WS_URL}	${EMPTY}	${WS_REQUEST_XML}	${Username}		${Password}
	WriteToFile				${logfile}				Y				Send TD Lead Response Code=${RESPONSECODE}
	WriteToFile				${logfile}				Y				Send TD Lead Response Text=${RESPONSETEXT}	
	Set Test Variable		${RESPONSECODE}
	Set Test Variable		${RESPONSETEXT}
	###
	
	${time}=	Get Time
	${time}=	Convert To String 	${time}
	${time}=	Replace String 		${time}		:	-
	
	# Write Response in a file 
	${F_name}=			WS_CommonUtil.trimFromRight		${FILENAME}				4
	${RESPONSE_FILE}		Catenate	SEPARATOR=			${F_name}		_${time}.txt
	WS_CommonUtil.Write_String_To_File		${RESOURCE}\\Other\\WebService\\Response\\${RESPONSE_FILE}		${RESPONSETEXT}
	
	${REQUEST_FILE}		Catenate	SEPARATOR=			${F_name}		_${time}.txt
	WS_CommonUtil.Write_String_To_File		${RESOURCE}\\Other\\WebService\\Request\\${REQUEST_FILE}		${WS_REQUEST_XML}
	# Log			${RESPONSECODE}	
	# Log			${RESPONSETEXT}
			
	# TD passes back a 201 as a success code (201 Created = The request has been fulfilled and resulted in a new resource being created)
	Run Keyword If          '${RESPONSECODE}'!= '201'		WriteToFile			${logfile}			Y		$TD Lead FAILED = ${RESPONSECODE}. Error message is: ${RESPONSETEXT}.
	Run Keyword If			'${RESPONSECODE}'!= '201'		WriteToErrorLog		${ErrorLog}					${RESPONSECODE} | ${RESPONSETEXT}
	Run Keyword If          '${RESPONSECODE}'!= '201'       Fail        Your Request: ${Servicename} is not successful. You have received response code: ${RESPONSECODE}. The error message is: ${RESPONSETEXT}.
	Run Keyword If          '${RESPONSECODE}'== '201'       Log 		Request: ${Servicename} is successful 		


######################################################################################################################################	
Create Unique BusinessName And TIN		[Arguments]		${WS_REQUEST_XML}		${Xml_Type}
######################################################################################################################################

	${Stat}=    				Run Keyword And Return Status	XML.Get Element Text    			${WS_REQUEST_XML}						.//BusinessApplicant/BusinessName
	${BusName1}=				Run Keyword If	${Stat}			XML.Get Element Text    			${WS_REQUEST_XML}			    		.//BusinessApplicant/BusinessName
		WriteToFile				${logfile}		Y				BusName1=${BusName1}				
	${Random_str1}=				Run Keyword If	 				'${Xml_Type}'=='App'				Generate Random String    				4   					[LOWER]	
	${BusName2}=				Run Keyword If	 				'${Xml_Type}'=='App'				Catenate 								SEPARATOR=				${BusName1}			${Random_str1}
		WriteToFile				${logfile}		Y				BusName2=${BusName2}				
	${WS_REQUEST_XML}=			Run Keyword If	 				'${Xml_Type}'=='App'				Replace String 							${WS_REQUEST_XML}		<a:BusinessName>${BusName1}</a:BusinessName>	<a:BusinessName>${BusName2}</a:BusinessName>
	...							ELSE 																Set Variable							${WS_REQUEST_XML}

	${Stat}=    				Run Keyword And Return Status	XML.Get Element Text    			${WS_REQUEST_XML}						.//BusinessApplicant/BusinessTaxId
	${TaxID1}=					Run Keyword If	${Stat}			XML.Get Element Text    			${WS_REQUEST_XML}			    		.//BusinessApplicant/BusinessTaxId
	${TaxID1}=					Run Keyword If	${Stat}			Remove string						${TaxID1}		-	
		WriteToFile				${logfile}		Y				TaxID1=${TaxID1}				
	${Random_Number}=			Run Keyword If	 				'${Xml_Type}'=='App'				WS_CommonUtil.CreateRandomNumberInRange							6			1		9
	${TIN3}=					Run Keyword If	 				'${Xml_Type}'=='App' 				WS_CommonUtil.GetSubStringFromAStringByPositions				${TaxID1}	0		3
	${TaxID2}=					Run Keyword If	 				'${Xml_Type}'=='App'				Catenate								SEPARATOR=				${TIN3}				${Random_Number}
		WriteToFile				${logfile}		Y				TaxID2=${TaxID2}	
	${WS_REQUEST_XML}=			Run Keyword If	 				'${Xml_Type}'=='App'				Replace String 							${WS_REQUEST_XML}		<a:BusinessTaxId>${TaxID1}</a:BusinessTaxId>	<a:BusinessTaxId>${TaxID2}</a:BusinessTaxId>
	...							ELSE 																Set Variable							${WS_REQUEST_XML}		

	Set Suite Variable			${WS_REQUEST_XML}
	
	WriteToFile					${logfile}		Y				WS_REQUEST_XML=${WS_REQUEST_XML}	

######################################################################################################################################	
Create Unique SSN		[Arguments]		${WS_REQUEST_XML}		${Xml_Type}
######################################################################################################################################	
	
	#This will create a unique SSN only and was created to be able to do SSN searches on Customer Archive page. It does not handle Chained transactions.

	WriteToFile					${logfile}			Y			Create Unique SSN>>>
	
	### Application Applicant SSN
	${SS1}=						Run Keyword If	 	'${Xml_Type}'=='App'			Set Variable							.//PrimaryApplicant/ApplicantInfo/SSN
	${SSN}=						Run Keyword If	 	'${Xml_Type}'=='App'			XML.Get Element Text					${WS_REQUEST_XML}		${SS1}
	${SSN2}=					Run Keyword If	 	'${Xml_Type}'=='App'			Remove string							${SSN}					-
	Run Keyword If	 								'${Xml_Type}'=='App'			WriteToFile								${logfile}				N			SSN-Before=${SSN2}
	${Random_Number}=			Run Keyword If	 	'${Xml_Type}'=='App'			WS_CommonUtil.CreateRandomNumberInRange							6			1		9
	# ${Random_Number}=			Run Keyword If	 	'${Xml_Type}'=='App' and '${Is_Chained}'=='True'						Set Variable			${RandSSNChained1}		ELSE	Set Variable	${Random_Number}		
	${SSN3}=					Run Keyword If	 	'${Xml_Type}'=='App'			WS_CommonUtil.GetSubStringFromAStringByPositions				${SSN2}		0		3
	${Random_SSN}=				Run Keyword If	 	'${Xml_Type}'=='App'			Catenate								SEPARATOR=				${SSN3}				${Random_Number}
	Run Keyword If	 								'${Xml_Type}'=='App'			WriteToFile								${logfile}				N			SSN-After=${Random_SSN}	
	${WS_REQUEST_XML}=			Run Keyword If	 	'${Xml_Type}'=='App'			Replace String 							${WS_REQUEST_XML}		<a:SSN>${SSN}</a:SSN>	<a:SSN>${Random_SSN}</a:SSN>
	...							ELSE 																			Set Variable							${WS_REQUEST_XML}		
	
	### Application Coapplicant SSN
	${SS1}=						Run Keyword If	 	'${Xml_Type}'=='App'			Set Variable					.//CoApplicant/ApplicantInfo/SSN
	${ISCOAPP}=					Run Keyword If	 	'${Xml_Type}'=='App'			Run Keyword And Return Status	XML.Get Element Text	${WS_REQUEST_XML}		${SS1}	
	${SSN}=						Run Keyword If		'${Xml_Type}'=='App' and '${ISCOAPP}'=='True'		XML.Get Element Text	${WS_REQUEST_XML}		${SS1}
	...							ELSE																	Set Variable					${EMPTY}
	${SSN2}=					Run Keyword If	 	'${Xml_Type}'=='App' and '${ISCOAPP}'=='True'		Remove string			${SSN}					-
	Run Keyword If									'${Xml_Type}'=='App' and '${ISCOAPP}'=='True'		WriteToFile				${logfile}				N				SSN-Before=${SSN2}
	${Random_Number}=			Run Keyword If	 	'${Xml_Type}'=='App' and '${ISCOAPP}'=='True'		WS_CommonUtil.CreateRandomNumberInRange				6			1		9
	# ${Random_Number}=			Run Keyword If	 	'${Xml_Type}'=='App' and '${ISCOAPP}'=='True' and '${Is_Chained}'=='True'	Set Variable			${RandSSNChained2}		ELSE	Set Variable	${Random_Number}		
	${SSN3}=					Run Keyword If	 	'${Xml_Type}'=='App' and '${ISCOAPP}'=='True'		WS_CommonUtil.GetSubStringFromAStringByPositions	${SSN2}		0		3
	${Random_SSN}=				Run Keyword If	 	'${Xml_Type}'=='App' and '${ISCOAPP}'=='True'		Catenate				SEPARATOR=				${SSN3}			${Random_Number}
	Run Keyword If									'${Xml_Type}'=='App' and '${ISCOAPP}'=='True'		WriteToFile				${logfile}				N				SSN-After=${Random_SSN}
	${WS_REQUEST_XML}=			Run Keyword If 		'${Xml_Type}'=='App' and '${ISCOAPP}'=='True'		WS_CommonUtil.rreplace	${WS_REQUEST_XML}		<a:SSN>${SSN}</a:SSN>	<a:SSN>${Random_SSN}</a:SSN>		${1}
	...							ELSE 																	Set Variable					${WS_REQUEST_XML}
	
	### PQ Applicant SSN
	${SS1}=						Run Keyword If	 	'${Xml_Type}'=='PQ'			Set Variable							.//Applicant/SSN
	${SSN}=						Run Keyword If	 	'${Xml_Type}'=='PQ'			XML.Get Element Text					${WS_REQUEST_XML}		${SS1}
	${SSN2}=					Run Keyword If	 	'${Xml_Type}'=='PQ'			Remove string							${SSN}					-
	Run Keyword If								 	'${Xml_Type}'=='PQ'			WriteToFile								${logfile}				N			SSN-Before=${SSN2}
	${Random_Number}=			Run Keyword If	 	'${Xml_Type}'=='PQ'			WS_CommonUtil.CreateRandomNumberInRange							6			1		9
	# ${Random_Number}=			Run Keyword If	 	'${Xml_Type}'=='PQ' and '${Is_Chained}'=='True'						Set Variable			${RandSSNChained1}		ELSE	Set Variable	${Random_Number}		
	${SSN3}=					Run Keyword If	 	'${Xml_Type}'=='PQ'			WS_CommonUtil.GetSubStringFromAStringByPositions				${SSN2}		0		3
	${Random_SSN}=				Run Keyword If	 	'${Xml_Type}'=='PQ'			Catenate								SEPARATOR=				${SSN3}				${Random_Number}
	Run Keyword If								 	'${Xml_Type}'=='PQ'			WriteToFile								${logfile}				N			SSN-After=${Random_SSN}
	${WS_REQUEST_XML}=			Run Keyword If	 	'${Xml_Type}'=='PQ'			Replace String 							${WS_REQUEST_XML}		<a:SSN>${SSN}</a:SSN>	<a:SSN>${Random_SSN}</a:SSN>
	...							ELSE 																			Set Variable							${WS_REQUEST_XML}
	
	### CBWS-1.0 Applicant SSN
	${SS1}=						Run Keyword If	 	'${Xml_Type}'=='CBWS-1.0'	Set Variable							.//Applicant/SSN
	${SSN}=						Run Keyword If	 	'${Xml_Type}'=='CBWS-1.0'	XML.Get Element Text					${WS_REQUEST_XML}		${SS1}
	${SSN2}=					Run Keyword If	 	'${Xml_Type}'=='CBWS-1.0'	Remove string							${SSN}					-
	Run Keyword If									'${Xml_Type}'=='CBWS-1.0'	WriteToFile								${logfile}				N			SSN-Before=${SSN2}	
	${Random_Number}=			Run Keyword If	 	'${Xml_Type}'=='CBWS-1.0'	WS_CommonUtil.CreateRandomNumberInRange							6			1		9
	${SSN3}=					Run Keyword If	 	'${Xml_Type}'=='CBWS-1.0'	WS_CommonUtil.GetSubStringFromAStringByPositions				${SSN2}		0		3
	${Random_SSN}=				Run Keyword If	 	'${Xml_Type}'=='CBWS-1.0'	Catenate								SEPARATOR=				${SSN3}				${Random_Number}
	Run Keyword If									'${Xml_Type}'=='CBWS-1.0'	WriteToFile								${logfile}				N			SSN-After=${Random_SSN}
	${WS_REQUEST_XML}=			Run Keyword If	 	'${Xml_Type}'=='CBWS-1.0'	Replace String 							${WS_REQUEST_XML}		<a:SSN>${SSN}</a:SSN>	<a:SSN>${Random_SSN}</a:SSN>
	...							ELSE 																			Set Variable							${WS_REQUEST_XML}				
	
	### CBWS-1.0 Coapplicant SSN
	${SS1}=						Run Keyword If	 	'${Xml_Type}'=='CBWS-1.0'	Set Variable				.//CoApplicant/SSN
	${ISCOAPP}=					Run Keyword If	 	'${Xml_Type}'=='CBWS-1.0'	Run Keyword And Return Status	XML.Get Element Text	${WS_REQUEST_XML}		${SS1}	
	${SSN}=						Run Keyword If		'${Xml_Type}'=='CBWS-1.0' and '${ISCOAPP}'=='True'		XML.Get Element Text	${WS_REQUEST_XML}		${SS1}
	...							ELSE																			Set Variable				${EMPTY}
	${SSN2}=					Run Keyword If	 	'${Xml_Type}'=='CBWS-1.0' and '${ISCOAPP}'=='True'		Remove string			${SSN}					-
	Run Keyword If									'${Xml_Type}'=='CBWS-1.0' and '${ISCOAPP}'=='True'		WriteToFile				${logfile}					N			SSN-Before=${SSN2}
	${Random_Number}=			Run Keyword If	 	'${Xml_Type}'=='CBWS-1.0' and '${ISCOAPP}'=='True'		WS_CommonUtil.CreateRandomNumberInRange				6			1		9
	${SSN3}=					Run Keyword If	 	'${Xml_Type}'=='CBWS-1.0' and '${ISCOAPP}'=='True'		WS_CommonUtil.GetSubStringFromAStringByPositions	${SSN2}		0		3
	${Random_SSN}=				Run Keyword If	 	'${Xml_Type}'=='CBWS-1.0' and '${ISCOAPP}'=='True'		Catenate				SEPARATOR=				${SSN3}			${Random_Number}
	Run Keyword If									'${Xml_Type}'=='CBWS-1.0' and '${ISCOAPP}'=='True'		WriteToFile				${logfile}					N			SSN-After=${Random_SSN}
	${WS_REQUEST_XML}=			Run Keyword If 		'${Xml_Type}'=='CBWS-1.0' and '${ISCOAPP}'=='True'		WS_CommonUtil.rreplace	${WS_REQUEST_XML}		<a:SSN>${SSN}</a:SSN>	<a:SSN>${Random_SSN}</a:SSN>		${1}
	...							ELSE 																			Set Variable				${WS_REQUEST_XML}
	
	### CBWS-1.1 Applicant SSN
	${SS1}=						Run Keyword If	 	'${Xml_Type}'=='CBWS-1.1'	Set Variable				.//PrimaryApplicant/SSN
	${SSN}=						Run Keyword If	 	'${Xml_Type}'=='CBWS-1.1'	XML.Get Element Text		${WS_REQUEST_XML}		${SS1}
	${SSN2}=					Run Keyword If	 	'${Xml_Type}'=='CBWS-1.1'	Remove string				${SSN}					-
	Run Keyword If									'${Xml_Type}'=='CBWS-1.1'	WriteToFile					${logfile}				N			SSN-Before=${SSN2}
	${Random_Number}=			Run Keyword If	 	'${Xml_Type}'=='CBWS-1.1'	WS_CommonUtil.CreateRandomNumberInRange				6			1		9
	${SSN3}=					Run Keyword If	 	'${Xml_Type}'=='CBWS-1.1'	WS_CommonUtil.GetSubStringFromAStringByPositions	${SSN2}		0		3
	${Random_SSN}=				Run Keyword If	 	'${Xml_Type}'=='CBWS-1.1'	Catenate					SEPARATOR=				${SSN3}				${Random_Number}
	Run Keyword If									'${Xml_Type}'=='CBWS-1.1'	WriteToFile					${logfile}				N			SSN-After=${Random_SSN}
	${WS_REQUEST_XML}=			Run Keyword If	 	'${Xml_Type}'=='CBWS-1.1'	Replace String 				${WS_REQUEST_XML}		<a:SSN>${SSN}</a:SSN>	<a:SSN>${Random_SSN}</a:SSN>
	...							ELSE 																			Set Variable				${WS_REQUEST_XML}				
	
	### CBWS-1.1 Coapplicant SSN
	${SS1}=						Run Keyword If	 	'${Xml_Type}'=='CBWS-1.1'	Set Variable				.//CoApplicant/SSN
	${ISCOAPP}=					Run Keyword If	 	'${Xml_Type}'=='CBWS-1.1'	Run Keyword And Return Status	XML.Get Element Text	${WS_REQUEST_XML}		${SS1}	
	${SSN}=						Run Keyword If		'${Xml_Type}'=='CBWS-1.1' and '${ISCOAPP}'=='True'		XML.Get Element Text	${WS_REQUEST_XML}		${SS1}
	...							ELSE																			Set Variable				${EMPTY}
	${SSN2}=					Run Keyword If	 	'${Xml_Type}'=='CBWS-1.1' and '${ISCOAPP}'=='True'		Remove string			${SSN}					-
	Run Keyword If									'${Xml_Type}'=='CBWS-1.1' and '${ISCOAPP}'=='True'		WriteToFile				${logfile}					N			SSN-Before=${SSN2}
	${Random_Number}=			Run Keyword If	 	'${Xml_Type}'=='CBWS-1.1' and '${ISCOAPP}'=='True'		WS_CommonUtil.CreateRandomNumberInRange				6			1		9
	${SSN3}=					Run Keyword If	 	'${Xml_Type}'=='CBWS-1.1' and '${ISCOAPP}'=='True'		WS_CommonUtil.GetSubStringFromAStringByPositions	${SSN2}		0		3
	${Random_SSN}=				Run Keyword If	 	'${Xml_Type}'=='CBWS-1.1' and '${ISCOAPP}'=='True'		Catenate				SEPARATOR=				${SSN3}			${Random_Number}
	Run Keyword If									'${Xml_Type}'=='CBWS-1.1' and '${ISCOAPP}'=='True'		WriteToFile				${logfile}				N				SSN-After=${Random_SSN}
	${WS_REQUEST_XML}=			Run Keyword If 		'${Xml_Type}'=='CBWS-1.1' and '${ISCOAPP}'=='True'		WS_CommonUtil.rreplace	${WS_REQUEST_XML}		<a:SSN>${SSN}</a:SSN>	<a:SSN>${Random_SSN}</a:SSN>		${1}
	...							ELSE 																			Set Variable				${WS_REQUEST_XML}
		
	Set Suite Variable			${WS_REQUEST_XML}	
	
	Return From Keyword			${Random_SSN}	
	
	
######################################################################################################################################	
Create Unique LastName AndOr SSN		[Arguments]		${WS_REQUEST_XML}		${Xml_Type}		${Is_Compliance}		${Is_Chained}
######################################################################################################################################

	#This routine will create unique last names anytime it is called and also unique SSNs if Compliance (for both Applicant and CoApplicant)
	#The routine will be called for Compliance, Decisions, and Email
	#It handles Apps, PQs, CBWS
	#Chained transactions will use the same name suffix (RandNameChained) and same SSN suffix (RandSSNChained1=applicant & RandSSNChained2=coapplicant) - they're saved as Suite Variables from higher routine. They're needed because the chained transactions (PQ & App) need to have the exact same randomized name and ssn.
	#Note: WS_CommonUtil.GetSubStringFromAStringByPositions ${SSN2} 0 3 - this function is very confusing and will return 1 less than you would think (0,3 will return a string of 3 even though 0 to 3 refers to 4 positions)
	#Note: Last 6 digits of SSN are randomized
	
	Run Keyword If	'${Is_Chained}'=='True'															WriteToFile			${logfile}	Y			RandNameChained=${RandNameChained}			
	Run Keyword If	'${Is_Chained}'=='True' and '${Is_Compliance}'=='True'							WriteToFile			${logfile}	Y			RandSSNChained1=${RandSSNChained1}				
	Run Keyword If	'${Is_Chained}'=='True' and '${Is_Compliance}'=='True'							WriteToFile			${logfile}	Y			RandSSNChained2=${RandSSNChained2}					

	#LastNames
	
	### Application Applicant Name
	${LN}=						Run Keyword If	 	'${Xml_Type}'=='App'							Set Variable							.//PrimaryApplicant/ApplicantInfo/LastName
	${LASTNAME}=				Run Keyword If	 	'${Xml_Type}'=='App'							XML.Get Element Text					${WS_REQUEST_XML}		${LN}
	${Random_str1}=				Run Keyword If	 	'${Xml_Type}'=='App'							Generate Random String    				4   					[LOWER]	
	${Random_str1}=				Run Keyword If	 	'${Xml_Type}'=='App' and '${Is_Chained}'=='True'	Set Variable						${RandNameChained}		ELSE				Set Variable		${Random_str1}
	${LN1}=						Run Keyword If	 	'${Xml_Type}'=='App'							Catenate 								SEPARATOR=				${LASTNAME}			${Random_str1}
	${WS_REQUEST_XML}=			Run Keyword If	 	'${Xml_Type}'=='App'							Replace String 							${WS_REQUEST_XML}		<a:LastName>${LASTNAME}</a:LastName>	<a:LastName>${LN1}</a:LastName>
	...							ELSE 																Set Variable							${WS_REQUEST_XML}
	
	### Application Coapplicant Name
	${LN}=						Run Keyword If	 	'${Xml_Type}'=='App'							Set Variable							.//CoApplicant/ApplicantInfo/LastName
	${ISCOAPP}=					Run Keyword If	 	'${Xml_Type}'=='App'							Run Keyword And Return Status			XML.Get Element Text	${WS_REQUEST_XML}		${LN}
	${COLASTNAME}=				Run Keyword If		'${Xml_Type}'=='App' and '${ISCOAPP}'=='True'	XML.Get Element Text					${WS_REQUEST_XML}			${LN}
	...							ELSE																Set Variable							${EMPTY}
	${Random_str1}=				Run Keyword If	 	'${Xml_Type}'=='App' and '${ISCOAPP}'=='True'	Generate Random String    				4   					[LOWER]	
	${Random_str1}=				Run Keyword If	 	'${Xml_Type}'=='App' and '${ISCOAPP}'=='True' and '${Is_Chained}'=='True'				Set Variable			${RandNameChained}		ELSE			Set Variable		${Random_str1}
	${LN1}=						Run Keyword If	 	'${Xml_Type}'=='App' and '${ISCOAPP}'=='True'	Catenate 								SEPARATOR=				${COLASTNAME}			${Random_str1}
	${WS_REQUEST_XML}=			Run Keyword If 		'${Xml_Type}'=='App' and '${ISCOAPP}'=='True'	WS_CommonUtil.rreplace					${WS_REQUEST_XML}		<a:LastName>${COLASTNAME}</a:LastName>	<a:LastName>${LN1}</a:LastName>		${1}
	...							ELSE 																Set Variable							${WS_REQUEST_XML}

	### PQ Applicant Name (note - there are no joint PQs)
	${LN}=						Run Keyword If	 	'${Xml_Type}'=='PQ'								Set Variable							.//Applicant/LastName
	${LASTNAME}=				Run Keyword If	 	'${Xml_Type}'=='PQ'								XML.Get Element Text					${WS_REQUEST_XML}		${LN}
	${Random_str1}=				Run Keyword If	 	'${Xml_Type}'=='PQ'								Generate Random String    				4   					[LOWER]	
	${Random_str1}=				Run Keyword If	 	'${Xml_Type}'=='PQ' and '${Is_Chained}'=='True'	Set Variable							${RandNameChained}		ELSE				Set Variable		${Random_str1}
	${LN1}=						Run Keyword If	 	'${Xml_Type}'=='PQ'								Catenate 								SEPARATOR=				${LASTNAME}			${Random_str1}
	${WS_REQUEST_XML}=			Run Keyword If	 	'${Xml_Type}'=='PQ'								Replace String 							${WS_REQUEST_XML}		<a:LastName>${LASTNAME}</a:LastName>	<a:LastName>${LN1}</a:LastName>
	...							ELSE 																Set Variable							${WS_REQUEST_XML}	
	
	### Lead Applicant Name (this will only be invoked for Emails - Compliance and Decisions will not have leads. No need for Lead Coapplicant)
	${LN}=						Run Keyword If	 	'${Xml_Type}'=='Lead'							Set Variable							.//PrimaryApplicant/LastName
	${LASTNAME}=				Run Keyword If	 	'${Xml_Type}'=='Lead'							XML.Get Element Text					${WS_REQUEST_XML}		${LN}
	${Random_str1}=				Run Keyword If	 	'${Xml_Type}'=='Lead'							Generate Random String    				4   					[LOWER]	
	${Random_str1}=				Run Keyword If	 	'${Xml_Type}'=='Lead' and '${Is_Chained}'=='True'	Set Variable						${RandNameChained}		ELSE				Set Variable		${Random_str1}
	${LN1}=						Run Keyword If	 	'${Xml_Type}'=='Lead'							Catenate 								SEPARATOR=				${LASTNAME}			${Random_str1}
	${WS_REQUEST_XML}=			Run Keyword If	 	'${Xml_Type}'=='Lead'							Replace String 							${WS_REQUEST_XML}		<a:LastName>${LASTNAME}</a:LastName>		<a:LastName>${LN1}</a:LastName>
	...							ELSE 																Set Variable							${WS_REQUEST_XML}
	
	### CBWS-1.0 and CBWS-1.1-StreetNumber - Applicant Name
	${LN}=						Run Keyword If	 	'${Xml_Type}'=='CBWS-1.0'						Set Variable							.//Applicant/LastName
	${LASTNAME}=				Run Keyword If	 	'${Xml_Type}'=='CBWS-1.0'						XML.Get Element Text					${WS_REQUEST_XML}		${LN}
	${Random_str1}=				Run Keyword If	 	'${Xml_Type}'=='CBWS-1.0'						Generate Random String    				4   					[LOWER]	
	${LN1}=						Run Keyword If	 	'${Xml_Type}'=='CBWS-1.0'						Catenate 								SEPARATOR=				${LASTNAME}			${Random_str1}
	${WS_REQUEST_XML}=			Run Keyword If	 	'${Xml_Type}'=='CBWS-1.0'						Replace String 							${WS_REQUEST_XML}		<a:LastName>${LASTNAME}</a:LastName>		<a:LastName>${LN1}</a:LastName>
	...							ELSE 																Set Variable							${WS_REQUEST_XML}	

	### CBWS-1.0 and CBWS-1.1-StreetNumber - Coapplicant Name
	${LN}=						Run Keyword If	 	'${Xml_Type}'=='CBWS-1.0'							Set Variable						.//CoApplicant/LastName
	${ISCOAPP}=					Run Keyword If	 	'${Xml_Type}'=='CBWS-1.0'							Run Keyword And Return Status		XML.Get Element Text	${WS_REQUEST_XML}		${LN}
	${COLASTNAME}=				Run Keyword If		'${Xml_Type}'=='CBWS-1.0' and '${ISCOAPP}'=='True'	XML.Get Element Text				${WS_REQUEST_XML}		${LN}
	...							ELSE																	Set Variable						${EMPTY}
	${Random_str1}=				Run Keyword If	 	'${Xml_Type}'=='CBWS-1.0' and '${ISCOAPP}'=='True'	Generate Random String    			4   					[LOWER]	
	${LN1}=						Run Keyword If	 	'${Xml_Type}'=='CBWS-1.0' and '${ISCOAPP}'=='True'	Catenate 							SEPARATOR=				${COLASTNAME}			${Random_str1}
	${WS_REQUEST_XML}=			Run Keyword If 		'${Xml_Type}'=='CBWS-1.0' and '${ISCOAPP}'=='True'	WS_CommonUtil.rreplace				${WS_REQUEST_XML}		<a:LastName>${COLASTNAME}</a:LastName>	<a:LastName>${LN1}</a:LastName>		${1}
	...							ELSE 																	Set Variable						${WS_REQUEST_XML}
	
	### CBWS-1.1 Applicant Name (aka Address Lines)
	${LN}=						Run Keyword If	 	'${Xml_Type}'=='CBWS-1.1'						Set Variable							.//PrimaryApplicant/LastName
	${LASTNAME}=				Run Keyword If	 	'${Xml_Type}'=='CBWS-1.1'						XML.Get Element Text					${WS_REQUEST_XML}		${LN}
	${Random_str1}=				Run Keyword If	 	'${Xml_Type}'=='CBWS-1.1'						Generate Random String    				4   					[LOWER]	
	${LN1}=						Run Keyword If	 	'${Xml_Type}'=='CBWS-1.1'						Catenate 								SEPARATOR=				${LASTNAME}			${Random_str1}
	${WS_REQUEST_XML}=			Run Keyword If	 	'${Xml_Type}'=='CBWS-1.1'						Replace String 							${WS_REQUEST_XML}		<a:LastName>${LASTNAME}</a:LastName>		<a:LastName>${LN1}</a:LastName>
	...							ELSE 																Set Variable							${WS_REQUEST_XML}	

	### CBWS-1.1 Coapplicant Name
	${LN}=						Run Keyword If	 	'${Xml_Type}'=='CBWS-1.1'							Set Variable						.//CoApplicant/LastName
	${ISCOAPP}=					Run Keyword If	 	'${Xml_Type}'=='CBWS-1.1'							Run Keyword And Return Status		XML.Get Element Text	${WS_REQUEST_XML}		${LN}
	${COLASTNAME}=				Run Keyword If		'${Xml_Type}'=='CBWS-1.1' and '${ISCOAPP}'=='True'	XML.Get Element Text				${WS_REQUEST_XML}			${LN}
	...							ELSE																	Set Variable						${EMPTY}
	${Random_str1}=				Run Keyword If	 	'${Xml_Type}'=='CBWS-1.1' and '${ISCOAPP}'=='True'	Generate Random String    			4   					[LOWER]	
	${LN1}=						Run Keyword If	 	'${Xml_Type}'=='CBWS-1.1' and '${ISCOAPP}'=='True'	Catenate 							SEPARATOR=				${COLASTNAME}			${Random_str1}
	${WS_REQUEST_XML}=			Run Keyword If 		'${Xml_Type}'=='CBWS-1.1' and '${ISCOAPP}'=='True'	WS_CommonUtil.rreplace				${WS_REQUEST_XML}		<a:LastName>${COLASTNAME}</a:LastName>	<a:LastName>${LN1}</a:LastName>		${1}
	...							ELSE 																	Set Variable						${WS_REQUEST_XML}

	Set Suite Variable			${WS_REQUEST_XML}

	
	#SSN If Is_Compliance

	### Application Applicant SSN
	${SS1}=						Run Keyword If	 	'${Xml_Type}'=='App' and '${Is_Compliance}'=='True'			Set Variable							.//PrimaryApplicant/ApplicantInfo/SSN
	${SSN}=						Run Keyword If	 	'${Xml_Type}'=='App' and '${Is_Compliance}'=='True'			XML.Get Element Text					${WS_REQUEST_XML}		${SS1}
	${SSN2}=					Run Keyword If	 	'${Xml_Type}'=='App' and '${Is_Compliance}'=='True'			Remove string							${SSN}					-
	Run Keyword If	 								'${Xml_Type}'=='App' and '${Is_Compliance}'=='True'			WriteToFile								${logfile}				N			SSN-Before=${SSN2}
	${Random_Number}=			Run Keyword If	 	'${Xml_Type}'=='App' and '${Is_Compliance}'=='True'			WS_CommonUtil.CreateRandomNumberInRange							6			1		9
	${Random_Number}=			Run Keyword If	 	'${Xml_Type}'=='App' and '${Is_Compliance}'=='True' and '${Is_Chained}'=='True'						Set Variable			${RandSSNChained1}		ELSE	Set Variable	${Random_Number}		
	${SSN3}=					Run Keyword If	 	'${Xml_Type}'=='App' and '${Is_Compliance}'=='True'			WS_CommonUtil.GetSubStringFromAStringByPositions				${SSN2}		0		3
	${Random_SSN}=				Run Keyword If	 	'${Xml_Type}'=='App' and '${Is_Compliance}'=='True'			Catenate								SEPARATOR=				${SSN3}				${Random_Number}
	Run Keyword If	 								'${Xml_Type}'=='App' and '${Is_Compliance}'=='True'			WriteToFile								${logfile}				N			SSN-After=${Random_SSN}	
	${WS_REQUEST_XML}=			Run Keyword If	 	'${Xml_Type}'=='App' and '${Is_Compliance}'=='True'			Replace String 							${WS_REQUEST_XML}		<a:SSN>${SSN}</a:SSN>	<a:SSN>${Random_SSN}</a:SSN>
	...							ELSE 																			Set Variable							${WS_REQUEST_XML}		
	
	### Application Coapplicant SSN
	${SS1}=						Run Keyword If	 	'${Xml_Type}'=='App' and '${Is_Compliance}'=='True'	Set Variable					.//CoApplicant/ApplicantInfo/SSN
	${ISCOAPP}=					Run Keyword If	 	'${Xml_Type}'=='App' and '${Is_Compliance}'=='True'	Run Keyword And Return Status	XML.Get Element Text	${WS_REQUEST_XML}		${SS1}	
	${SSN}=						Run Keyword If		'${Xml_Type}'=='App' and '${Is_Compliance}'=='True' and '${ISCOAPP}'=='True'		XML.Get Element Text	${WS_REQUEST_XML}		${SS1}
	...							ELSE																	Set Variable					${EMPTY}
	${SSN2}=					Run Keyword If	 	'${Xml_Type}'=='App' and '${Is_Compliance}'=='True' and '${ISCOAPP}'=='True'		Remove string			${SSN}					-
	Run Keyword If									'${Xml_Type}'=='App' and '${Is_Compliance}'=='True' and '${ISCOAPP}'=='True'		WriteToFile				${logfile}				N				SSN-Before=${SSN2}
	${Random_Number}=			Run Keyword If	 	'${Xml_Type}'=='App' and '${Is_Compliance}'=='True' and '${ISCOAPP}'=='True'		WS_CommonUtil.CreateRandomNumberInRange				6			1		9
	${Random_Number}=			Run Keyword If	 	'${Xml_Type}'=='App' and '${Is_Compliance}'=='True' and '${ISCOAPP}'=='True' and '${Is_Chained}'=='True'	Set Variable			${RandSSNChained2}		ELSE	Set Variable	${Random_Number}		
	${SSN3}=					Run Keyword If	 	'${Xml_Type}'=='App' and '${Is_Compliance}'=='True' and '${ISCOAPP}'=='True'		WS_CommonUtil.GetSubStringFromAStringByPositions	${SSN2}		0		3
	${Random_SSN}=				Run Keyword If	 	'${Xml_Type}'=='App' and '${Is_Compliance}'=='True' and '${ISCOAPP}'=='True'		Catenate				SEPARATOR=				${SSN3}			${Random_Number}
	Run Keyword If									'${Xml_Type}'=='App' and '${Is_Compliance}'=='True' and '${ISCOAPP}'=='True'		WriteToFile				${logfile}				N				SSN-After=${Random_SSN}
	${WS_REQUEST_XML}=			Run Keyword If 		'${Xml_Type}'=='App' and '${Is_Compliance}'=='True' and '${ISCOAPP}'=='True'		WS_CommonUtil.rreplace	${WS_REQUEST_XML}		<a:SSN>${SSN}</a:SSN>	<a:SSN>${Random_SSN}</a:SSN>		${1}
	...							ELSE 																	Set Variable					${WS_REQUEST_XML}
	
	### PQ Applicant SSN
	${SS1}=						Run Keyword If	 	'${Xml_Type}'=='PQ' and '${Is_Compliance}'=='True'			Set Variable							.//Applicant/SSN
	${SSN}=						Run Keyword If	 	'${Xml_Type}'=='PQ' and '${Is_Compliance}'=='True'			XML.Get Element Text					${WS_REQUEST_XML}		${SS1}
	${SSN2}=					Run Keyword If	 	'${Xml_Type}'=='PQ' and '${Is_Compliance}'=='True'			Remove string							${SSN}					-
	Run Keyword If								 	'${Xml_Type}'=='PQ' and '${Is_Compliance}'=='True'			WriteToFile								${logfile}				N			SSN-Before=${SSN2}
	${Random_Number}=			Run Keyword If	 	'${Xml_Type}'=='PQ' and '${Is_Compliance}'=='True'			WS_CommonUtil.CreateRandomNumberInRange							6			1		9
	${Random_Number}=			Run Keyword If	 	'${Xml_Type}'=='PQ' and '${Is_Compliance}'=='True' and '${Is_Chained}'=='True'						Set Variable			${RandSSNChained1}		ELSE	Set Variable	${Random_Number}		
	${SSN3}=					Run Keyword If	 	'${Xml_Type}'=='PQ' and '${Is_Compliance}'=='True'			WS_CommonUtil.GetSubStringFromAStringByPositions				${SSN2}		0		3
	${Random_SSN}=				Run Keyword If	 	'${Xml_Type}'=='PQ' and '${Is_Compliance}'=='True'			Catenate								SEPARATOR=				${SSN3}				${Random_Number}
	Run Keyword If								 	'${Xml_Type}'=='PQ' and '${Is_Compliance}'=='True'			WriteToFile								${logfile}				N			SSN-After=${Random_SSN}
	${WS_REQUEST_XML}=			Run Keyword If	 	'${Xml_Type}'=='PQ' and '${Is_Compliance}'=='True'			Replace String 							${WS_REQUEST_XML}		<a:SSN>${SSN}</a:SSN>	<a:SSN>${Random_SSN}</a:SSN>
	...							ELSE 																			Set Variable							${WS_REQUEST_XML}
	
	### CBWS-1.0 Applicant SSN
	${SS1}=						Run Keyword If	 	'${Xml_Type}'=='CBWS-1.0' and '${Is_Compliance}'=='True'	Set Variable							.//Applicant/SSN
	${SSN}=						Run Keyword If	 	'${Xml_Type}'=='CBWS-1.0' and '${Is_Compliance}'=='True'	XML.Get Element Text					${WS_REQUEST_XML}		${SS1}
	${SSN2}=					Run Keyword If	 	'${Xml_Type}'=='CBWS-1.0' and '${Is_Compliance}'=='True'	Remove string							${SSN}					-
	Run Keyword If									'${Xml_Type}'=='CBWS-1.0' and '${Is_Compliance}'=='True'	WriteToFile								${logfile}				N			SSN-Before=${SSN2}	
	${Random_Number}=			Run Keyword If	 	'${Xml_Type}'=='CBWS-1.0' and '${Is_Compliance}'=='True'	WS_CommonUtil.CreateRandomNumberInRange							6			1		9
	${SSN3}=					Run Keyword If	 	'${Xml_Type}'=='CBWS-1.0' and '${Is_Compliance}'=='True'	WS_CommonUtil.GetSubStringFromAStringByPositions				${SSN2}		0		3
	${Random_SSN}=				Run Keyword If	 	'${Xml_Type}'=='CBWS-1.0' and '${Is_Compliance}'=='True'	Catenate								SEPARATOR=				${SSN3}				${Random_Number}
	Run Keyword If									'${Xml_Type}'=='CBWS-1.0' and '${Is_Compliance}'=='True'	WriteToFile								${logfile}				N			SSN-After=${Random_SSN}
	${WS_REQUEST_XML}=			Run Keyword If	 	'${Xml_Type}'=='CBWS-1.0' and '${Is_Compliance}'=='True'	Replace String 							${WS_REQUEST_XML}		<a:SSN>${SSN}</a:SSN>	<a:SSN>${Random_SSN}</a:SSN>
	...							ELSE 																			Set Variable							${WS_REQUEST_XML}				

	### CBWS-1.0 Coapplicant SSN
	${SS1}=						Run Keyword If	 	'${Xml_Type}'=='CBWS-1.0' and '${Is_Compliance}'=='True'	Set Variable				.//CoApplicant/SSN
	${ISCOAPP}=					Run Keyword If	 	'${Xml_Type}'=='CBWS-1.0' and '${Is_Compliance}'=='True'	Run Keyword And Return Status	XML.Get Element Text	${WS_REQUEST_XML}		${SS1}	
	${SSN}=						Run Keyword If		'${Xml_Type}'=='CBWS-1.0' and '${Is_Compliance}'=='True' and '${ISCOAPP}'=='True'		XML.Get Element Text	${WS_REQUEST_XML}		${SS1}
	...							ELSE																			Set Variable				${EMPTY}
	${SSN2}=					Run Keyword If	 	'${Xml_Type}'=='CBWS-1.0' and '${Is_Compliance}'=='True' and '${ISCOAPP}'=='True'		Remove string			${SSN}					-
	Run Keyword If									'${Xml_Type}'=='CBWS-1.0' and '${Is_Compliance}'=='True' and '${ISCOAPP}'=='True'		WriteToFile				${logfile}					N			SSN-Before=${SSN2}
	${Random_Number}=			Run Keyword If	 	'${Xml_Type}'=='CBWS-1.0' and '${Is_Compliance}'=='True' and '${ISCOAPP}'=='True'		WS_CommonUtil.CreateRandomNumberInRange				6			1		9
	${SSN3}=					Run Keyword If	 	'${Xml_Type}'=='CBWS-1.0' and '${Is_Compliance}'=='True' and '${ISCOAPP}'=='True'		WS_CommonUtil.GetSubStringFromAStringByPositions	${SSN2}		0		3
	${Random_SSN}=				Run Keyword If	 	'${Xml_Type}'=='CBWS-1.0' and '${Is_Compliance}'=='True' and '${ISCOAPP}'=='True'		Catenate				SEPARATOR=				${SSN3}			${Random_Number}
	Run Keyword If									'${Xml_Type}'=='CBWS-1.0' and '${Is_Compliance}'=='True' and '${ISCOAPP}'=='True'		WriteToFile				${logfile}					N			SSN-After=${Random_SSN}
	${WS_REQUEST_XML}=			Run Keyword If 		'${Xml_Type}'=='CBWS-1.0' and '${Is_Compliance}'=='True' and '${ISCOAPP}'=='True'		WS_CommonUtil.rreplace	${WS_REQUEST_XML}		<a:SSN>${SSN}</a:SSN>	<a:SSN>${Random_SSN}</a:SSN>		${1}
	...							ELSE 																			Set Variable				${WS_REQUEST_XML}

	### CBWS-1.1 Applicant SSN
	${SS1}=						Run Keyword If	 	'${Xml_Type}'=='CBWS-1.1' and '${Is_Compliance}'=='True'	Set Variable				.//PrimaryApplicant/SSN
	${SSN}=						Run Keyword If	 	'${Xml_Type}'=='CBWS-1.1' and '${Is_Compliance}'=='True'	XML.Get Element Text		${WS_REQUEST_XML}		${SS1}
	${SSN2}=					Run Keyword If	 	'${Xml_Type}'=='CBWS-1.1' and '${Is_Compliance}'=='True'	Remove string				${SSN}					-
	Run Keyword If									'${Xml_Type}'=='CBWS-1.1' and '${Is_Compliance}'=='True'	WriteToFile					${logfile}				N			SSN-Before=${SSN2}
	${Random_Number}=			Run Keyword If	 	'${Xml_Type}'=='CBWS-1.1' and '${Is_Compliance}'=='True'	WS_CommonUtil.CreateRandomNumberInRange				6			1		9
	${SSN3}=					Run Keyword If	 	'${Xml_Type}'=='CBWS-1.1' and '${Is_Compliance}'=='True'	WS_CommonUtil.GetSubStringFromAStringByPositions	${SSN2}		0		3
	${Random_SSN}=				Run Keyword If	 	'${Xml_Type}'=='CBWS-1.1' and '${Is_Compliance}'=='True'	Catenate					SEPARATOR=				${SSN3}				${Random_Number}
	Run Keyword If									'${Xml_Type}'=='CBWS-1.1' and '${Is_Compliance}'=='True'	WriteToFile					${logfile}				N			SSN-After=${Random_SSN}
	${WS_REQUEST_XML}=			Run Keyword If	 	'${Xml_Type}'=='CBWS-1.1' and '${Is_Compliance}'=='True'	Replace String 				${WS_REQUEST_XML}		<a:SSN>${SSN}</a:SSN>	<a:SSN>${Random_SSN}</a:SSN>
	...							ELSE 																			Set Variable				${WS_REQUEST_XML}				

	### CBWS-1.1 Coapplicant SSN
	${SS1}=						Run Keyword If	 	'${Xml_Type}'=='CBWS-1.1' and '${Is_Compliance}'=='True'	Set Variable				.//CoApplicant/SSN
	${ISCOAPP}=					Run Keyword If	 	'${Xml_Type}'=='CBWS-1.1' and '${Is_Compliance}'=='True'	Run Keyword And Return Status	XML.Get Element Text	${WS_REQUEST_XML}		${SS1}	
	${SSN}=						Run Keyword If		'${Xml_Type}'=='CBWS-1.1' and '${Is_Compliance}'=='True' and '${ISCOAPP}'=='True'		XML.Get Element Text	${WS_REQUEST_XML}		${SS1}
	...							ELSE																			Set Variable				${EMPTY}
	${SSN2}=					Run Keyword If	 	'${Xml_Type}'=='CBWS-1.1' and '${Is_Compliance}'=='True' and '${ISCOAPP}'=='True'		Remove string			${SSN}					-
	Run Keyword If									'${Xml_Type}'=='CBWS-1.1' and '${Is_Compliance}'=='True' and '${ISCOAPP}'=='True'		WriteToFile				${logfile}					N			SSN-Before=${SSN2}
	${Random_Number}=			Run Keyword If	 	'${Xml_Type}'=='CBWS-1.1' and '${Is_Compliance}'=='True' and '${ISCOAPP}'=='True'		WS_CommonUtil.CreateRandomNumberInRange				6			1		9
	${SSN3}=					Run Keyword If	 	'${Xml_Type}'=='CBWS-1.1' and '${Is_Compliance}'=='True' and '${ISCOAPP}'=='True'		WS_CommonUtil.GetSubStringFromAStringByPositions	${SSN2}		0		3
	${Random_SSN}=				Run Keyword If	 	'${Xml_Type}'=='CBWS-1.1' and '${Is_Compliance}'=='True' and '${ISCOAPP}'=='True'		Catenate				SEPARATOR=				${SSN3}			${Random_Number}
	Run Keyword If									'${Xml_Type}'=='CBWS-1.1' and '${Is_Compliance}'=='True' and '${ISCOAPP}'=='True'		WriteToFile				${logfile}				N				SSN-After=${Random_SSN}
	${WS_REQUEST_XML}=			Run Keyword If 		'${Xml_Type}'=='CBWS-1.1' and '${Is_Compliance}'=='True' and '${ISCOAPP}'=='True'		WS_CommonUtil.rreplace	${WS_REQUEST_XML}		<a:SSN>${SSN}</a:SSN>	<a:SSN>${Random_SSN}</a:SSN>		${1}
	...							ELSE 																			Set Variable				${WS_REQUEST_XML}
			
	Set Suite Variable			${WS_REQUEST_XML}

	
##################################################
TimeStamp			[Arguments]				

	${time}=					Get Time
	${time}=					Convert To String	 	${time}
	${time}=					Replace String 			${time}		:	-		
	[Return]					${time}

	
################################################################################################
Gmail Validate Emails			[Arguments]				${SleepTime}		${DebugTrueOrFalse}			
	
	[Documentation]						This keyword logs into GMail to check for FD emails
	
	${FoundCnt1}						Set Variable			0
	${FoundCnt2}						Set Variable			0	
	Set Suite Variable	 				${FoundCnt1}
	Set Suite Variable	 				${FoundCnt2}
	
	Run Keyword If	'${GRID}'!='True' and '${BROWSER}'=='ie'			Disable IE Security Settings	
	# Run Keyword If						'${GRID}'!='True'				Disable IE Security Settings	
	Run Keyword If						'${DebugTrueOrFalse}'=='True'	Process All Xml Files SetUp		#allows for logging without sending xml	
	
	WriteToFile							${logfile}			Y			-------------------------------------------------------		
	WriteToFile							${logfile}			Y			Start ${TEST NAME}
	WriteToFile							${logfile}			Y			-------------------------------------------------------		
	WriteToFile							${logfile}			Y			Environment=${Environment}
	WriteToFile							${logfile}			Y			Sleeping for ${SleepTime}
	Sleep								${SleepTime}	

	${GMail_PasswordBox}=      			Set Variable					//input[@name='Passwd']
	${GMail_Password}=					Set Variable					FDAutomation
	${GMail_Button1}=					Set Variable					//input[@id="next"]		
	${GMail_Button2}=					Set Variable					//input[@id="signIn"]
	${GMail_Url_Logout}=				Set Variable					https://mail.google.com/mail/logout
	${GMail_Url_Login}=					Set Variable					https://www.google.com/accounts/ServiceLoginAuth?continue=http://mail.google.com/gmail&service=mail&Email=fdprojectth&Passwd=XXX&null=Sign+in
	${GMail_Url_Inbox}=					Set Variable					https://mail.google.com/mail/u/0/#inbox

	WriteToFile						${logfile}				Y			GMail_Url_Inbox=${GMail_Url_Inbox}	
	
	#Logout then Login
	${GMail_BR}=					Open Browser			${GMail_Url_Logout}					${BROWSER}			#start with a Logout
	sleep	2s
	${GMail_BR}=					Go To					${GMail_Url_Login}										#now Login
	sleep	2s
	Maximize Browser Window
	Press Key            			${GMail_Button1}        \\13								#this is the Next Button
	Sleep	2s
	Input Password					${GMail_PasswordBox}	${GMail_Password}		    		#enter the password
	Press Key            			${GMail_Button2}		\\13								#this is the SignIn Button
	Sleep   2s

	${List_EmailNames}						Create List	
	Log Dictionary							${Global_Dict}
	WriteToFile								${logfile}				N							@GlobalDictionary=${Global_Dict}
	${len}=									Get Length		 		${Global_Dict}
	
	#Loop through Global_Dict and create List_EmailNames
	:FOR 	${I}	IN RANGE 				0						${len}
	\		${req_dict}=					Get From Dictionary		${Global_Dict}				${I}
	\		${FirstName}=					Get From Dictionary		${req_dict}					First Name	
	\		${LastName}=					Get From Dictionary		${req_dict}					Last Name
	\		${FullName}=					Catenate 				SEPARATOR=${SPACE}			${FirstName}			${LastName}	
	\		${RefApp}=						Get From Dictionary		${req_dict}					REF App
	\		${RefLead}=						Get From Dictionary		${req_dict}					REF Lead
	\		${RefPQ}=						Get From Dictionary		${req_dict}					REF PQ
	\		${Decision}=					Get From Dictionary		${req_dict}					Decision
	\		${TransCode}=					Get From Dictionary		${req_dict}					TransCode
	# \		${Name}=						Set Variable			${EMPTY}	
	\
	\		WriteToFile						${logfile}				Y							----------------------
	\		WriteToFile						${logfile}				Y							TransCode=${TransCode}
	\		WriteToFile						${logfile}				Y							FullName=${FullName}
	\		WriteToFile						${logfile}				Y							RefApp=${RefApp}
	\		WriteToFile						${logfile}				Y							RefLead=${RefLead}
	\		WriteToFile						${logfile}				Y							RefPQ=${RefPQ}
	\		WriteToFile						${logfile}				Y							Decision=${Decision}	
	\
	# \		#App
	\		${NameTemp}=					Catenate				SEPARATOR=:					Pre-Qualification Lead${SPACE}		${SPACE}${FullName}
	\		${Name}=						Run Keyword If			'${TransCode}'=='1' and '${RefApp}'!='${EMPTY}' and '${Decision}'=='${False}'		Set Variable	${NameTemp}		ELSE	Set Variable	${EMPTY}			
	\		WriteToFile						${logfile}				Y							App Name=${Name}
	\		Run Keyword If					'${Name}'!='${EMPTY}'	Append To List				${List_EmailNames}			${Name}	
	\
	\		#Prequalified Lead
	\		${NameTemp}=					Catenate				SEPARATOR=:					Pre-Qualification Lead${SPACE}		${SPACE}${FullName}
	\		${Name}=						Run Keyword If			'${TransCode}'=='2' and '${RefPQ}'!='${EMPTY}'			Set Variable	${NameTemp}		ELSE	Set Variable	${EMPTY}			
	\		WriteToFile						${logfile}				Y							PQLead Name=${Name}	
	\		Run Keyword If					'${Name}'!='${EMPTY}'	Append To List				${List_EmailNames}			${Name}	
	\
	\		#Regular Lead
	\		${NameTemp}=					Catenate				SEPARATOR=:					Regular Lead${SPACE}		${SPACE}${FullName}
	\		${Name}=						Run Keyword If			'${TransCode}'=='3' and '${RefLead}'!='${EMPTY}'		Set Variable	${NameTemp}		ELSE	Set Variable	${EMPTY}			
	\		WriteToFile						${logfile}				Y							RegLead Name=${Name}	
	\		Run Keyword If					'${Name}'!='${EMPTY}'	Append To List				${List_EmailNames}			${Name}	
	\
	\		#Decision
	\		${FullName}=					Evaluate				str('${FullName}').upper()	
	\		${NameTemp}=					Catenate				SEPARATOR=:					Credit App${SPACE}			${FullName}
	\		${Name}=						Run Keyword If			'${TransCode}'=='1' and '${RefApp}'!='${EMPTY}' and '${Decision}'!='${False}'		Set Variable	${NameTemp}		ELSE	Set Variable	${EMPTY}
	\		WriteToFile						${logfile}				Y							Decision Name=${Name}	
	\		Run Keyword If					'${Name}'!='${EMPTY}'	Append To List				${List_EmailNames}			${Name}	
	\
	\		WriteToFile						${logfile}				Y							Name to Find=${Name}
	\		Wait Until Keyword Succeeds     10m        30s         	Page Should Contain			${Name}				loglevel=NONE
	\		WriteToFile						${logfile}				Y							Found On Page=${Name}
	
	${List_EmailNames}=						Remove Duplicates		${List_EmailNames}			#this will remove chained name dupes (like PQ + Lead)

	WriteToFile								${logfile}				Y							List_EmailNames=${List_EmailNames}	

	#Process regular emails - loop through List_EmailNames and pass to Gmail-ClickIt
	${len}=									Get Length		 		${List_EmailNames}
	:FOR 	${I}	IN RANGE 				0						${len}
	\		${ListName}=					Get From List 			${List_EmailNames}			${I}
	\		WriteToFile						${logfile}	Y			---------------		
	\   	WriteToFile						${logfile}	Y			EmailNameToFind=${ListName}	
	\		${GMail_BR}=					Go To					${GMail_Url_Inbox}	
	\		Wait Until Keyword Succeeds     3s        1s         	Page Should Contain Element		//table[@class='F cf zt']/tbody		loglevel=NONE
	\		Run Keyword						Gmail-ClickIt			${ListName}
	\		sleep	3s 
	
	##Process ADF Emails - loop through List_EmailNames and pass to Gmail-ClickIt-ADF
	${ADFDealer}=							Set Variable			FD Automation - DealerTrack		# - DealerWare - Lead Delivery
	${len}=									Get Length		 		${List_EmailNames}
	:FOR 	${I}	IN RANGE 				0						${len}
	\		${ListName}=					Get From List 			${List_EmailNames}			${I}
	\		WriteToFile						${logfile}	Y			---------------		
	\   	WriteToFile						${logfile}	Y			ADFEmailNameToFind=${ListName}	
	\		${GMail_BR}=					Go To					${GMail_Url_Inbox}	
	\		Wait Until Keyword Succeeds     3s        1s         	Page Should Contain Element		//table[@class='F cf zt']/tbody		loglevel=NONE
	\		Run Keyword						Gmail-ClickIt-ADF		${ListName}						${ADFDealer}
	\		sleep	3s 
	
	#Done processing - fail if there were any errors
	WriteToFile					${logfile}					Y						----------------------
	WriteToFile					${logfile}					Y						----------------------
	${len}=						Get Length			 		${List_EmailNames}	
	Run Keyword And Continue On Failure						Run Keyword If	'${FoundCnt1}'<'${len}'	Fail 			All Emails were not found. Found ${FoundCnt1} but expected ${len}.
	Run Keyword If	'${FoundCnt1}'<'${len}'        			WriteToFile								${logfile}	N	All Emails were not found. Found ${FoundCnt1} but expected ${len}.
	Run Keyword And Continue On Failure						Run Keyword If	'${FoundCnt2}'<'${len}'	Fail 			All ADFEmails were not found. Found ${FoundCnt2} but expected ${len}.
	Run Keyword If	'${FoundCnt1}'<'${len}'        			WriteToFile								${logfile}	N	All ADFEmails were not found. Found ${FoundCnt2} but expected ${len}.
	
####################################################	
Gmail-ClickIt		[Arguments]			${ListName}					#Loop through 1st 25 rows of Gmail Inbox and click and open a particular email

	:FOR 	${I}	IN RANGE	1			25
		\   ${test1}=    		Catenate   	SEPARATOR=				//table[@class='F cf zt']/tbody/tr[			${I}		
		\   ${test2}=    		Catenate   	SEPARATOR=				${test1}		]/td[6]/div/div/div/span
		\   ${text1}=    		Get Text     						xpath = ${test2}
		\   WriteToFile			${logfile}	N						TableScan=${text1}
		\	${FoundIt}=			Run Keyword And Return Status 		Should Contain 		${text1}				${ListName}	
		\   Run Keyword If		'${FoundIt}'=='True'				WriteToFile			${logfile}	Y			FoundIt=${FoundIt}
		\   ${FoundCnt1}=		Run Keyword If	'${FoundIt}'=='True'					Evaluate				${FoundCnt1} + 1		ELSE	Set Variable	${FoundCnt1}
		\	Set Suite Variable	${FoundCnt1}	
		\   Run Keyword If		'${FoundIt}'=='True'				Click Element		xpath= ${test2}		
		\	Sleep	1s
		\	Run Keyword If		'${FoundIt}'=='True'				Gmail-GetEmailData
		\	Exit For Loop If	'${FoundIt}'=='True'
		
##################################################	
Gmail-GetEmailData		[Arguments]		

	${EmailHeader1}=				Get Text				//*[@class="hP"]			#header1 {Regular Lead : Amy America}
	${EmailType}	${EmailName}=	Split String			${EmailHeader1}				:
	${EmailType}=					Remove String Using Regexp							${EmailType}			^[ \t]+|[ \t]+$		#remove leading & trailing spaces
	${EmailName}=					Remove String Using Regexp							${EmailName}			^[ \t]+|[ \t]+$		#remove leading & trailing spaces
	${EmailHeader2}=				Get Text				//*[@class="hN"]			#header2 {Label e.g., QA/Reg Lead}	
	${FromEmail}=					Get Text				//*[@class="gD"]			#header3 {From e.g., Qa.Drs.support@dealertrack.com}		
	${EmailBody3}=					Get Text				//*[@class="a3s"]/div/ table/tbody/tr/td/table/tbody/tr/td/table/tbody/tr/td	#EmailBody3=Name: Amy America E-mail: amyamerica@subdomain.email.com Dealership Name: California Acme Motors Inc
	${LinkToFD}=					Get Text				//*[@class="a3s"]/div/ table/tbody/tr/td/table/tbody/tr/td/table/tbody/tr/td/a	#@href		#Lead Detail link
	WriteToFile						${logfile}				Y							EmailType=${EmailType}		
	WriteToFile						${logfile}				Y							EmailName=${EmailName}		
	WriteToFile						${logfile}				Y							FromEmail=${FromEmail}	
	${HasCoapp}=					Run Keyword And Return Status 						Should Contain 			${EmailBody3}		Co-Applicant:
	${Temp1}	${Temp2}=			Run Keyword If	'${HasCoapp}'=='True'				Split String			${EmailBody3}		Co-Applicant:
	${Temp3}	${Temp4}=			Run Keyword If	'${HasCoapp}'=='True'				Split String			${Temp2}			E-mail:
	${EmailCoapp}=					Run Keyword If	'${HasCoapp}'=='True'				Remove String Using Regexp		${Temp3}	^[ \t]+|[ \t]+$		#remove leading & trailing spaces
	WriteToFile						${logfile}				Y							EmailCoapp=${EmailCoapp}
	WriteToFile						${logfile}				Y							LinkToFD=${LinkToFD}				
	Go Back	

#################################################################################	
Gmail-ClickIt-ADF		[Arguments]			${ListName}			${ADFDealerName}		#Loop through 1st 25 rows of Gmail Inbox and click and open a particular email

	${ADFFound}=		Set Variable		${EMPTY}
	Set Suite Variable	${ADFFound}
	
	:FOR 	${I}	IN RANGE	1			25
		\   ${test1}=    		Catenate   	SEPARATOR=				//table[@class='F cf zt']/tbody/tr[			${I}		
		\   ${test2}=    		Catenate   	SEPARATOR=				${test1}		]/td[6]/div/div/div/span
		\   ${text1}=    		Get Text     						xpath = ${test2}
		\   WriteToFile			${logfile}	N						TableScan=${text1}
		\	${FoundIt}=			Run Keyword And Return Status 		Should Contain 		${text1}				${ADFDealerName}	
		\   Run Keyword If		'${FoundIt}'=='True'				WriteToFile			${logfile}	Y			FoundAnADFEmail=${FoundIt}
		\   Run Keyword If		'${FoundIt}'=='True'				Click Element		xpath= ${test2}		
		\	Sleep	1s
		\	Run Keyword If		'${FoundIt}'=='True'				Gmail-GetADFData			${ListName}
		\	Exit For Loop If	'${ADFFound}'=='True'				#this is set in Gmail-GetADFData	

#############################################################	
Gmail-GetADFData		[Arguments]			${EmailListName}			

	#Get ADF Details

	${ADFBody}=						Get Text				//*[@class="a3s"]		
	${ADFNames}=					XML.Get Elements Texts	${ADFBody}					.//name
	# WriteToFile						${logfile}				Y							ADFNames=${ADFNames}	
	${Temp1}=						Get From List 			${ADFNames}					0	
	${Temp2}=						Get From List 			${ADFNames}					1
	${ThisADFName}=					Catenate 				SEPARATOR=${SPACE}			${Temp1}				${Temp2}
	WriteToFile						${logfile}				Y							ThisADFName=${ThisADFName}
	Run Keyword If	'${ThisADFName}'=='${EmailListName}'	WriteToFile					${logfile}		Y		FoundIt:${EmailListName}
	...	ELSE												WriteToFile					${logfile}		Y		Didn't Find Yet:${EmailListName}
	${ADFFound}=					Run Keyword If	'${ThisADFName}'=='${EmailListName}'	Set Variable		True
	...	ELSE																				Set Variable		False
	${FoundCnt2}=					Run Keyword If	'${ADFFound}'=='True'				Evaluate				${FoundCnt2} + 1		ELSE	Set Variable	${FoundCnt2}
	Set Suite Variable				${FoundCnt2}	
	Set Suite Variable				${ADFFound}
	Go Back
	
	
########################################################################################	
WriteToFile		[Arguments]			${FilePath}			${LogLevel}			${LineData}	
########################################################################################

	# Call to this routine will always write to a text file and optionally to Robot console/log
	# LogLevel: Y = writefile + log warn; N = writefile + log; X = writefile only no log; Empty = writefile blank line

	Run Keyword If					'${LogLevel}'=='${Empty}'		Append To File		${FilePath}		${SPACE}${\n}		#write blank line
	Append To File					${FilePath}						${LineData}${\n}
	Run Keyword If					'${LogLevel}'=='Y'				Log					${LineData}		warn				#log to console	
	Run Keyword If					'${LogLevel}'=='N'				Log					${LineData}							#log

##################################### ##################################################QQQ	
WriteToErrorLog		[Arguments]		${FilePath}			${MessageToWrite}	
########################################################################################

	# Call this routine to write any message passed in to an error text file
	# ${ErrorLog} is generically set as a suite variable in "Process All Xml Files SetUp" as ${RESOURCE}\\Other\\Logs\\TextLogs\\${TimeStamp}-XmlErrorLog-${SUITE NAME}-${Temp}.txt but can be overriden by passing in a specific FilePath
	# Sample call = WriteToErrorLog		${ErrorLog}		Any Error Message You Want
	
	${TimeStamp}=				Run Keyword						TimeStamp
	Append To File				${FilePath}						${TimeStamp} | ${TEST NAME} | ${FOLDER_NAME}\\${Filename} | ${MessageToWrite}${\n}

	
#################################################################################	
DDF Audit-1		[Arguments]			${DDFSleep}				${AuditFileOrFolder}
#################################################################################

	#DDF Audit-1
	#  Setup stuff
	#  Loop - for each item in List_DDF, get associated GlobalDict stuff and process each record using LeadRefID
	#    Determine and then open appropriate AuditFile
    #    Get InXml file
	#    Get DDF file (may include multiple lead versions for same LeadRefID)
	#    Call DDF Audit-2
	#DDF Audit-2
	#  Loop the DDF to get the lead version with the hightest version number
	#  Loop the AuditFile line by line to extract the matched input (InXml) and output (DDF) pairs 
	#  Call DDF Audit-3
	#DDF Audit-3
	#   Get InXml node element(s) in a list
	#   Get DDF node element(s) in a list
	#   Call DDF Audit-4 to handle nodes that have children
	#   Compare the lists
	#DDF Audit-4
	#   Loop and children and concatenate them into a single variable. Remove Robot control characters (\n, \t)
	
	${ErrorCnt}						Set Variable			0
	Set Suite Variable 				${ErrorCnt}
	${ErrorCntTtl}					Set Variable			0
	Set Suite Variable				${ErrorCntTtl}	
	
	${TimeStamp}=					Run Keyword				TimeStamp
	${logline}						Set Variable			{EMPTY}
	
	${DDFSleep}=					Convert To Integer		${DDFSleep}
	WriteToFile						${logfile}				Y					----------------------
	WriteToFile						${logfile}				Y					DDFSleep=${DDFSleep}
	Sleep							${DDFSleep}									#wait a little for the ddf	
	
	Log Dictionary 					${Global_Dict}
	Log List 						${List_DDF}	
	${lenList}=						Get Length				${List_DDF}
		
	#For each item in List_DDF (the list contains an index to the Global Dict for any previously submitted xml)
	:FOR 	${I} 	IN RANGE	0		${lenList}
	\
	\		#Pull needed info from Global Dict using List_DDF index		
	\		${Index1}				Get From List 			${List_DDF}					${I}
	\		${Index}=				Convert To Integer 		${Index1}
	\		${dict}=				Get From Dictionary 	${Global_Dict}				${Index}
	\			WriteToFile			${logfile}				Y							----------------------
	\			WriteToFile			${logfile}				Y							$DictIndex=${Index}
	\			WriteToFile			${logfile}				N							Dictionary=${dict}
	\		${Lead_Ref}=			Get From Dictionary		${dict}						REF Lead
	\			WriteToFile			${logfile}				Y							Lead_Ref=${Lead_Ref}
	\		${InFolder}=			Get From Dictionary		${dict}						Input Folder
	\			WriteToFile			${logfile}				N							InFolder=${InFolder}
	\		${InFile}=				Get From Dictionary		${dict}						Filename
	\			WriteToFile			${logfile}				N							InFile=${InFile}
	\		${TransCode}=			Get From Dictionary		${dict}						TransCode
	\		Set Test Variable		${TransCode}
	\			WriteToFile			${logfile}				N							TransCode=${TransCode}
	\		${FinMethod}=			Get From Dictionary		${dict}						FinMethod
	\		Set Test Variable		${FinMethod}	
	\			WriteToFile			${logfile}				N							FinMethod=${FinMethod}
	\		${CoLastName1}=			Get From Dictionary		${dict}						CoApp Last Name
	\		${IsCoApp}=				RunKeyword If	'${CoLastName1}'!='${EMPTY}'		Set Variable	True	ELSE	Set Variable	False
	\		Set Test Variable		${IsCoApp}	
	\			WriteToFile			${logfile}				N							IsCoApp=${IsCoApp}			
	\
	\		${Is_Routed}=			Run Keyword And Return Status 						Should Contain 		${FOLDER_NAME}		Routed Leads
	\		${Is_ADFLead}=			Run Keyword And Return Status 						Should Contain		${InFile}			ADFLead				
	\
	\		#Determine which AuditFile to read
	\		${AuditType}=			Run Keyword If		'${TransCode}'=='1'				Set Variable		App			#Transcode 1 is an App
	\		...						ELSE IF				'${TransCode}'=='6'				Set Variable		MenuDriver	#Transcode 6 is a MenuDriver		
	\		...						ELSE IF				'${TransCode}'=='7'				Set Variable		PayCalc		#Transcode 7 is a PayCalc		
	\		...						ELSE IF				'${TransCode}'=='9'				Set Variable		BusLead		#Transcode 9 is a BusLead	
	\		...	ELSE IF			'${TransCode}'=='3' and '${Is_ADFLead}'=='True' 		Set Variable		ADFLead			
	\		...						ELSE												Set Variable		Lead		
	\		${AuditType}=			Run Keyword If		'${Is_Routed}'=='True'			Set Variable		Routed Lead		ELSE	Set Variable	${AuditType}	 #Use Routed Lead DDF Audit file
	\		${AuditFileName}=		Catenate			SEPARATOR=${SPACE}				${AuditType}		DDF Audit.txt			
	\
	\		#Should we use one of the generic AuditFiles or was a specific AuditFile passed in? If a folderpath was passed in then we'll use generic. If a filepath was passed in then we'll use that specific file.
	\		${stat}=				Run Keyword And Return Status						File Should Exist	${AuditFileOrFolder}
	\		${AuditFilePath}=		Run Keyword If		${stat}							Set Variable		${AuditFileOrFolder}
	\		...	ELSE				Catenate			SEPARATOR=\\					${AuditFileOrFolder}	${AuditFileName}	
	\			WriteToFile			${logfile}				Y							AuditFilePath=${AuditFilePath}	
	\
	\		#Assemble Input file path based on folder\filename from dict
	\		${InFilePath}=			Catenate			SEPARATOR=\\					${InFolder}			${InFile}	
	\			WriteToFile			${logfile}				Y							InFilePath=${InFilePath}
	\			WriteToFile			${logfile}				N							----------------------
	\
	\		#Get the AuditFile
	\		${AuditFile}=			Get File				${AuditFilePath}			
	\			WriteToFile			${logfile}				N							AuditFile Map: these nodes will be verified=${AuditFile}
	\		@{AuditLines}= 			Split To Lines 			${AuditFile}	
	\			WriteToFile			${logfile}				N							----------------------
	\		
	\		#Get the Input Xml	
	\		${InFile}=				Get File				${InFilePath}
	\			WriteToFile			${logfile}				N							InFile=${InFile}
	\			WriteToFile			${logfile}				N							----------------------	
	\
	\		#Get the DDF - call Send GET For DDF
	\		${ResponseType}=		Set Variable			DDF
	\		${DDF_Request}=			Send GET For DDF 									${Lead_Ref}
	\			WriteToFile			${logfile}				N							DDFResponseFull=${DDF_Request}
	\			WriteToFile			${logfile}				N							----------------------	
	\		
	\		######################################################################################################
	\		#Now do the line by line compare of DDF and InputXml using the AuditFile as the driver
	\		DDF Audit-2				${AuditLines}			${InFile}					${DDF_Request}	
	\		######################################################################################################
	\
	
	#Done processing all Xml/DDFs - fail if there were any errors
	WriteToFile					${logfile}					Y						----------------------
	WriteToFile					${logfile}					Y						----------------------
	Run Keyword And Continue On Failure						Run Keyword If	'${ErrorCntTtl}'>'0'	Fail 		DDF Audit returned ${ErrorCntTtl} errors.
	Run Keyword If				'${ErrorCntTtl}'>'0'        WriteToFile				${logfile}		N			DDF Audit returned ${ErrorCntTtl} errors.

	${TimeStamp}=				Run Keyword					TimeStamp				
	Run Keyword If				'${ErrorCntTtl}'>'0'		WriteToErrorLog			${ErrorLog}		DDF Audit returned ${ErrorCntTtl} errors.
	
####################################################################################################
DDF Audit-2		[Arguments]			${AuditLines}			${InFile}				${DDF_Response}	
####################################################################################################

	@{DDFAllLeads}=				Create List
	@{DDFLead}=					Create List
	${CurIndex}					Set Variable                        0
	${SaveIndex}				Set Variable                        0
	${BigVersion}				Set Variable                        0	
	
	#Count the number of lead instances in the DDF
	${CountLeads}=				Get Element Count					${DDF_Response}			.//XmlElement
	WriteToFile					${logfile}				N			CountLeadsInDDF=${CountLeads}
	@{DDFAllLeads}=				Return Children Of Parent Nodes		${DDF_Response}			<XmlElement>		</XmlElement>

	#Loop through all the DDF Leads. Capture the biggest VersionNumber and save the it's ListIndex
	:FOR    ${DDFVersion}   IN	@{DDFAllLeads}
	\		WriteToFile			${logfile}				N			CurIndex=${CurIndex}
    \		${Version}=			Return Node Value					${DDFVersion}			<VersionNumber>		</VersionNumber>
	\		WriteToFile			${logfile}				N			Version=${Version}
	\		${stat}=			Evaluate							int(${Version}) > int(${BigVersion})
	\		${SaveIndex}=		Run Keyword If			'${stat}'=='True'					Set Variable		${CurIndex}		ELSE		Set Variable	${SaveIndex}	
	\		${BigVersion}=		Run Keyword If			'${stat}'=='True'					Set Variable		${Version}		ELSE		Set Variable	${BigVersion}	
	\		WriteToFile			${logfile}				N			BigVersion=${BigVersion}
	\		WriteToFile			${logfile}				N			SaveIndex=${SaveIndex}
	\		${CurIndex}=		Evaluate							${CurIndex} + 1

	#################################################
	#This is the lead with the latest VersionNumber
	WriteToFile					${logfile}				N			----------------------
	WriteToFile					${logfile}				N			Version=${BigVersion}
	${DDFLead}=					Get From List 						${DDFAllLeads}			${SaveIndex}
	WriteToFile					${logfile}				N			DDFLead=${DDFLead}
	WriteToFile					${logfile}				N			----------------------
	#################################################
	
	#####Loop through each line of the AuditFile
	:FOR 	${xmlNode}			IN 		 							@{AuditLines}
	\			WriteToFile		${logfile}				Y			-----
	\			WriteToFile		${logfile}				Y			xmlNode=${xmlNode}
	\
	\		#Each AuditFile line has two mapped parameters - XmlIn (left) and DDFOut (right) (separated by %%%) - .//PartnerId%%%.//PartnerId
	\		#There is an AuditFile for Leads and one for Apps. Each contains every field possible for the respective xml. 
	\		#Some items in the files have no mapped match and are labelled as XmlOnly or DDFOnly (examples - ConsentIndicator does not get output to DDF and PrequalificationStatus is DDFOnly).
	\
	\		${search1}	${search2}=									Split String		${xmlNode}			%%%
	\
	\		###################################################################################################################
	\		${Passed}=			DDF Audit-3							${InFile}		${DDFLead}		${search1}		${search2}	
	\		###################################################################################################################
	\

	#One Xml/DDF has been verified
	WriteToFile					${logfile}				Y			----------------------
	WriteToFile					${logfile}				Y			ErrorCnt For This Xml=${ErrorCnt} 
	${ErrorCntTtl}=				Evaluate							${ErrorCntTtl} + ${ErrorCnt}
	Set Suite Variable			${ErrorCntTtl}	
	WriteToFile					${logfile}				Y			ErrorCnt Total So Far=${ErrorCntTtl}		
	${ErrorCnt}=				Set Variable			0
	Set Suite Variable			${ErrorCnt}

	
###########################################################################################	
DDF Audit-3		[Arguments]		${InFile}		${DDFLead}		${search1}		${search2}	
###########################################################################################

	WriteToFile				${logfile}				Y				search1=${search1}
	WriteToFile				${logfile}				Y				search2=${search2}
	
	#### XmlIn Nodes
	#Q1/P1 refer to XmlIn nodes. Q is as received and P is with any necessary mods
	${Q1}=					Get Elements Texts						${InFile}					${search1}
	${lenQ1}=				Get Length								${Q1}
		# WriteToFile		${logfile}				N				lenQ1=${lenQ1}				#this is the length of the InXml input
		# WriteToFile		${logfile}				N				Q1=${Q1}					#this is the InXml input	
	${stat}=				Run Keyword And Return Status			Get From List				${Q1}					0	
	${P1}=					Run Keyword If	'${stat}'=='True'		Get From List				${Q1}					0
	...		ELSE			Set Variable							${EMPTY}
	${P1}=					Convert To String						${P1}
	##############################################################################################################################################
	${P1}=					Run Keyword If	'${lenQ1}'>'1'			DDF Audit-4					${Q1}			ELSE		Set Variable	${P1} 						
	##############################################################################################################################################
	WriteToFile				${logfile}				Y				P1=${P1}

	###Modify some XmlIn nodes###
	#XmlIn Phone - remove hyphens from any phone fields as they are always removed from DDF
	${Is_Phone}=			Run Keyword And Return Status 			Should Contain 				${search1}				Phone
	${P1}=					Run Keyword If	'${Is_Phone}'=='True'	Replace String				${P1}	-	${Empty}	ELSE		Set Variable	${P1} 
	Run Keyword If	'${Is_Phone}'=='True'							WriteToFile					${logfile}				Y			P1=${P1}
	
	#XmlIn SSN Primary - reformat as 000009999 as DDF displays this way
	${Is_SSN}=				Run Keyword And Return Status 			Should Contain 				${search2}				PrimaryApplicant/SSN
	${P1}=					Run Keyword If	'${Is_SSN}'=='True'		Replace String				${P1}	-	${Empty}	ELSE		Set Variable	${P1} 
	${SSN4}=				Run Keyword If	'${Is_SSN}'=='True'		WS_CommonUtil.GetSubStringFromAStringByPositions	${P1}		5		9
	${P1}=					Run Keyword If	'${Is_SSN}'=='True'		Catenate					SEPARATOR=				00000		${SSN4}			ELSE	Set Variable	${P1} 
	Run Keyword If	'${Is_SSN}'=='True'								WriteToFile					${logfile}				Y			P1=${P1}

	#XmlIn SSN CoApp - reformat as 000009999 as DDF displays this way
	${Is_SSN}=				Run Keyword And Return Status 			Should Contain 				${search2}				CoApplicant/SSN
	${P1}=					Run Keyword If	'${Is_SSN}'=='True' and '${IsCoApp}'=='True'		Replace String			${P1}	-	${Empty}	ELSE		Set Variable	${P1} 
	${SSN4}=				Run Keyword If	'${Is_SSN}'=='True' and '${IsCoApp}'=='True'		WS_CommonUtil.GetSubStringFromAStringByPositions	${P1}		5		9
	${P1}=					Run Keyword If	'${Is_SSN}'=='True' and '${IsCoApp}'=='True'		Catenate				SEPARATOR=				00000		${SSN4}			ELSE	Set Variable	${P1} 
	Run Keyword If	'${Is_SSN}'=='True' and '${IsCoApp}'=='True'	WriteToFile					${logfile}				Y			P1=${P1}
	
	#XmlIn TaxID - remove hyphen to match DDF (BusLead)
	${Is_TaxID}=			Run Keyword And Return Status 			Should Contain 				${search1}				BusinessTaxId
	${P1}=					Run Keyword If	'${Is_TaxID}'=='True'	Replace String				${P1}	-	${Empty}	ELSE		Set Variable	${P1} 
	Run Keyword If	'${Is_SSN}'=='True'								WriteToFile					${logfile}				Y			P1=${P1}

	#XmlIn DOB Primary - append T00:00:00 to end of DOB to match GetLead
	${Is_DOB}=				Run Keyword And Return Status 			Should Contain 				${search2}				PrimaryApplicant/DateOfBirth	
	${P1}=					Run Keyword If	'${Is_DOB}'=='True'		Catenate					SEPARATOR=				${P1}		T00:00:00		ELSE	Set Variable	${P1} 
	Run Keyword If	'${Is_DOB}'=='True'								WriteToFile					${logfile}				Y			P1=${P1}
	
	#XmlIn DOB CoApp - append T00:00:00 to end of DOB to match GetLead
	${Is_DOB}=				Run Keyword And Return Status 			Should Contain 				${search2}				CoApplicant/DateOfBirth	
	${P1}=					Run Keyword If	'${Is_DOB}'=='True' and '${IsCoApp}'=='True' 		Catenate				SEPARATOR=	${P1}		T00:00:00		ELSE	Set Variable	${P1} 
	Run Keyword If	'${Is_DOB}'=='True' and '${IsCoApp}'=='True'	WriteToFile					${logfile}				Y			P1=${P1}	
	
	#XmlIn FinanceMethod - Is this a Balloon App? DDF switches Balloon to Retail
	${chk1}=				Run Keyword If	'${TransCode}'=='1' and '${FinMethod}'=='B'			Set Variable			True					ELSE		Set Variable	False
	${chk2}=				Run Keyword And Return Status 			Should Contain 				${search1}				FinanceMethod		
	Run Keyword If			'${chk1}'=='True' and '${chk2}'=='True'								WriteToFile				${logfile}				Y			IsBalloonApp=${chk1}	
	${P1}=					Run Keyword If	'${chk1}'=='True' and '${chk2}'=='True'				Set Variable			Retail					ELSE		Set Variable	${P1} 
	Run Keyword If			'${chk1}'=='True' and '${chk2}'=='True'								WriteToFile				${logfile}				Y			P1=${P1}
	
	##### DDF Nodes
	#Q2/P2 refer to DDF nodes. Q is as received and P is with any necessary mods
	${Q2}=					Get Elements Texts						${DDFLead}					${search2}
	${lenQ2}=				Get Length								${Q2}
		# WriteToFile		${logfile}				N				lenQ2=${lenQ2}				#this is the length of the DDFLead input
		# WriteToFile		${logfile}				N				Q2=${Q2}					#this is the DDFLead input	
	${stat}=				Run Keyword And Return Status			Get From List				${Q2}					0
	${P2}=					Run Keyword If	'${stat}'=='True'		Get From List				${Q2}					0
	...	ELSE				Set Variable							${EMPTY}	
	${P2}=					Convert To String						${P2}
	##############################################################################################################################################	
	${P2}=					Run Keyword If	'${lenQ2}'>'1'			DDF Audit-4					${Q2}			ELSE		Set Variable	${P2} 
	##############################################################################################################################################
	WriteToFile				${logfile}				Y				P2=${P2}	
	
	#If Routed Lead, validate that EventHistory shows the PartnerID as a Lead Forwarded Event
	#Note: The partner names are hardcoded for now. When we have Set Preferences for Notifications & Messaging we can remove the hardcoding.
	${Is_Routed}=			Run Keyword And Return Status 			Should Contain 				${FOLDER_NAME}			Routed Leads
	# Run Keyword If			'${Is_Routed}'=='True'					WriteToFile					${logfile}				Y				Is_RoutedLead=${Is_Routed}	
	${Is_EventDetails}=		Run Keyword And Return Status 			Should Contain 				${search2}				EventHistory/Event/Details
	${Contains_Partner1?}=	Run Keyword If	'${Is_Routed}'=='True' and '${Is_EventDetails}'=='True'						Run Keyword And Return Status		Should Contain		${P2}		{"PartnerId":"DXA"}
	Run Keyword If	'${Is_Routed}'=='True' and '${Is_EventDetails}'=='True'						WriteToFile				${logfile}				Y			Contains_Partner_DXA?=${Contains_Partner1?}	
	${Contains_Partner2?}=	Run Keyword If	'${Is_Routed}'=='True' and '${Is_EventDetails}'=='True'						Run Keyword And Return Status		Should Contain		${P2}		{"PartnerId":"DXB"}
	Run Keyword If	'${Is_Routed}'=='True' and '${Is_EventDetails}'=='True'						WriteToFile				${logfile}				Y			Contains_Partner_DXB?=${Contains_Partner2?}		
	${Contains_Partner3?}=	Run Keyword If	'${Is_Routed}'=='True' and '${Is_EventDetails}'=='True'						Run Keyword And Return Status		Should Contain		${P2}		{"PartnerId":"DXC"}
	Run Keyword If	'${Is_Routed}'=='True' and '${Is_EventDetails}'=='True'						WriteToFile				${logfile}				Y			Contains_Partner_DXC?=${Contains_Partner3?}		
	
	#DDFLead Balloon App Exceptions - if Balloon App, then these DDF Only LenderDecisionResponse fields will have no data (this is expected) - ApprovalStatus,
	#FromEmailAddress, LenderId, LenderName, so we will put some data in ("Balloon App - no data expected"). This will cause the subsequent checks to evaluate correctly.
	${chk1}=				Run Keyword If	'${TransCode}'=='1' and '${FinMethod}'=='B'			Set Variable			True					ELSE		Set Variable				False
	${chk2}=				Run Keyword And Return Status 			Should Contain 				${search2}				ApprovalStatus		
	Run Keyword If			'${chk1}'=='True' and '${chk2}'=='True'								WriteToFile				${logfile}				Y			IsBalloonApp=${chk1}
	${P2}=					Run Keyword If	'${chk1}'=='True' and '${chk2}'=='True'				Set Variable			Balloon App - no data expected		ELSE		Set Variable	${P2} 
	Run Keyword If			'${chk1}'=='True' and '${chk2}'=='True'								WriteToFile				${logfile}				Y			P2=${P2}
	${chk2}=				Run Keyword And Return Status 			Should Contain 				${search2}				FromEmailAddress		
	Run Keyword If			'${chk1}'=='True' and '${chk2}'=='True'								WriteToFile				${logfile}				Y			IsBalloonApp=${chk1}	
	${P2}=					Run Keyword If	'${chk1}'=='True' and '${chk2}'=='True'				Set Variable			Balloon App - no data expected		ELSE		Set Variable	${P2} 
	Run Keyword If			'${chk1}'=='True' and '${chk2}'=='True'								WriteToFile				${logfile}				Y			P2=${P2}
	${chk2}=				Run Keyword And Return Status 			Should Contain 				${search2}				LenderId		
	Run Keyword If			'${chk1}'=='True' and '${chk2}'=='True'								WriteToFile				${logfile}				Y			IsBalloonApp=${chk1}
	${P2}=					Run Keyword If	'${chk1}'=='True' and '${chk2}'=='True'				Set Variable			Balloon App - no data expected		ELSE		Set Variable	${P2} 
	Run Keyword If			'${chk1}'=='True' and '${chk2}'=='True'								WriteToFile				${logfile}				Y			P2=${P2}
	${chk2}=				Run Keyword And Return Status 			Should Contain 				${search2}				LenderName		
	Run Keyword If			'${chk1}'=='True' and '${chk2}'=='True'								WriteToFile				${logfile}				Y			IsBalloonApp=${chk1}
	${P2}=					Run Keyword If	'${chk1}'=='True' and '${chk2}'=='True'				Set Variable			Balloon App - no data expected		ELSE		Set Variable	${P2} 
	Run Keyword If			'${chk1}'=='True' and '${chk2}'=='True'								WriteToFile				${logfile}				Y			P2=${P2}	
	
	#Compare Xml to DDF - are the lists equal?
	${stat}=				Run Keyword And Return Status	 		Lists Should Be Equal		${P1}					${P2}
	WriteToFile				${logfile}				Y				ListsEqual=${stat}	

	#Analyze result. Account for any differences re XmlOnly or DDFOnly.

	#Is it XmlOnly?
	${XmlOnly}=				Run Keyword And Return Status 			Should Contain 				${xmlNode}				XmlOnly	
	${stat}=				Run Keyword If	'${XmlOnly}'=='True'	Set Variable				${EMPTY}				ELSE				Set Variable	${stat} 
	${stat}=				Run Keyword If	'${stat}'=='${EMPTY}'	Set Variable				Ignored					ELSE				Set Variable	${stat} 							
	
	#Is it DDFOnly?
	${DDFOnly}=				Run Keyword And Return Status 			Should Contain 				${xmlNode}				DDFOnly	
	${stat}=				Run Keyword If	'${DDFOnly}'=='True' and '${stat}'=='${False}'		Set Variable			${EMPTY}			ELSE	Set Variable	${stat} 	
	#Stat is set to True because it is DDFOnly (so no match with InXml) and DDF returned a legitimate value
	${stat}=				Run Keyword If	'${stat}'=='${EMPTY}'	Set Variable				True					ELSE				Set Variable	${stat} 								

	#It is DDFOnly but DDF returned nothing - error
	${stat}=				Run Keyword If	'${DDFOnly}'=='True' and '${stat}'=='${True}' and '${P2}'=='${EMPTY}'		Set Variable		${EMPTY}		ELSE		Set Variable	${stat} 		
	${stat}=				Run Keyword If	'${stat}'=='${EMPTY}'	Set Variable				False					ELSE				Set Variable	${stat} 								
	Run Keyword If			'${DDFOnly}'=='True' and '${stat}'=='${False}' and '${P2}'=='${EMPTY}'						WriteToFile			${logfile}		Y			DDF is missing data!!!
	WriteToFile				${logfile}				Y				$Status=${stat}		
	
	Run Keyword If	'${P1}'=='${Empty}' and '${P2}'=='${Empty}' and '${DDFOnly}'=='False'		WriteToFile				${logfile}			Y				Node not sent in xml

	#If Is_Routed and all partners were not routed to then we have an error
	${stat}=				Run Keyword If	'${Is_Routed}'=='True' and ('${Contains_Partner1?}'=='False' or '${Contains_Partner2?}'=='False' or '${Contains_Partner3?}'=='False')		Set Variable	False	ELSE	Set Variable	${stat}
	
	#If stat is False here then we have detected a difference. Add to an error counter.	
	${ErrorCnt}=			Run Keyword If	'${stat}'=='False' 		Evaluate	${ErrorCnt} + 1		
	...	ELSE				Set Variable							${ErrorCnt}
	Set Suite Variable		${ErrorCnt}


##########################################	
DDF Audit-4		[Arguments]		${InList}
##########################################

	${YYY}=					Set Variable							${EMPTY}	
	
	${lenInList}=			Get Length								${InList}
	
	:FOR 	${I} 			IN RANGE 								0 							${lenInList}
	\		${XXX}=			Get From List							${InList}					${I}
	\		Run Keyword If	'${lenInList}'=='1'						WriteToFile					${logfile}				Y				$$$XXX1=${XXX}
	\		${XXX}=			Convert To String						${XXX}
	\		${XXX}=			Replace String 							${XXX}						\n						${EMPTY}		#remove newline control character
	\		${XXX}=			Replace String 							${XXX}						\t						${EMPTY}		#remove tab control character
	\		${XXX}=			Run Keyword If	'${lenInList}'>'1'		Replace String 				${XXX}					${SPACE}		${EMPTY}	#remove spaces
	\		${YYY}=			Catenate 		SEPARATOR=				${YYY}						${XXX}
		
	Return From Keyword		${YYY}	
	
		
########################################################################################################
GetLead Audit-1		[Arguments]		${GetLeadSleep}		${AuditFileOrFolder}		${GlobalGetPartner}		
########################################################################################################

	#GetLead Audit-1
	#  Setup stuff
	#  Loop - for each item in List_GetLead, get associated GlobalDict stuff and process each record using LeadRefID
	#    Determine and then open appropriate AuditFile
    #    Get InXml file
	#    Get GetLead file
	#    Call GetLead Audit-2
	#GetLead Audit-2
	#  Loop the AuditFile line by line to extract the matched input (InXml) and output (GetLead) pairs 
	#  Call GetLead Audit-3
	#GetLead Audit-3
	#   Get InXml node element(s) in a list
	#   Get GetLead node element(s) in a list
	#   Call GetLead Audit-4 to handle nodes that have children
	#   Compare the lists
	#GetLead Audit-4
	#   Loop and children and concatenate them into a single variable. Remove Robot control characters (\n, \t)
	
	WriteToFile				${logfile}			Y			GetLead Audit-1>>>
	WriteToFile				${logfile}			Y			Partner=${PARTNERID}	
	WriteToFile				${logfile}			Y			DealerID=${DEALERID}			

	${ErrorCnt}						Set Variable			0
	Set Suite Variable 				${ErrorCnt}
	${ErrorCntTtl}					Set Variable			0
	Set Suite Variable				${ErrorCntTtl}	

	${TimeStamp}=					Run Keyword				TimeStamp
	${logline}						Set Variable			{EMPTY}
	
	${GetLeadSleep}=				Convert To Integer		${GetLeadSleep}
	WriteToFile						${logfile}				Y					----------------------
	WriteToFile						${logfile}				Y					GetLeadSleep=${GetLeadSleep}
	Sleep							${GetLeadSleep}								#wait a little for the GetLead
	
	Log Dictionary 					${Global_Dict}
	Log List 						${List_GetLead}	
	${lenList}=						Get Length				${List_GetLead}

	# Is this a GlobalGet request? AJK is the GlobalGet Partner. 
	${Is_GlobalGet}=		Run Keyword And Return Status 		Should Contain 		${FOLDER_NAME}		Global Get
	Set Test Variable		${Is_GlobalGet}
	Run Keyword If			'${Is_GlobalGet}'=='True'			WriteToFile			${logfile}			Y				Is_GlobalGet=${Is_GlobalGet}
	${PARTNERID}=			Run Keyword If	'${Is_GlobalGet}'=='True'				Set Variable		${GlobalGetPartner}		ELSE		Set Variable		${PARTNERID}
	Run Keyword If			'${Is_GlobalGet}'=='True'			WriteToFile			${logfile}			Y				GlobalGetPartner=${PARTNERID}
		
	#For each item in List_GetLead (the list contains an index to the Global Dict for any previously submitted xml)
	:FOR 	${I} 	IN RANGE	0		${lenList}
	\
	\		#Pull needed info from Global Dict using List_GetLead index		
	\		${Index1}				Get From List 			${List_GetLead}			${I}
	\		${Index}=				Convert To Integer 		${Index1}
	\		${dict}=				Get From Dictionary 	${Global_Dict}			${Index}
	\			WriteToFile			${logfile}				Y						----------------------
	\			WriteToFile			${logfile}				Y						$DictIndex=${Index}
	\			WriteToFile			${logfile}				N						Dictionary=${dict}
	\		${Lead_Ref}=			Get From Dictionary		${dict}					REF Lead
	\			WriteToFile			${logfile}				Y						Lead_Ref=${Lead_Ref}
	\		${InFolder}=			Get From Dictionary		${dict}					Input Folder
	\			WriteToFile			${logfile}				N						InFolder=${InFolder}
	\		${InFile}=				Get From Dictionary		${dict}					Filename
	\			WriteToFile			${logfile}				N						InFile=${InFile}
	\		${TransCode}=			Get From Dictionary		${dict}					TransCode
	\		Set Test Variable		${TransCode}		
	\			WriteToFile			${logfile}				N						TransCode=${TransCode}
	\		${FinMethod}=			Get From Dictionary		${dict}					FinMethod
	\		Set Test Variable		${FinMethod}	
	\			WriteToFile			${logfile}				N						FinMethod=${FinMethod}		
	\		${LastName1}=			Get From Dictionary		${dict}					Last Name
	\			WriteToFile			${logfile}				Y						DictLastName=${LastName1}	
	\		${CoLastName1}=			Get From Dictionary		${dict}					CoApp Last Name
	\		${IsCoApp}=				RunKeyword If	'${CoLastName1}'!='${EMPTY}'	Set Variable	True	ELSE	Set Variable	False
	\		Set Test Variable		${IsCoApp}	
	\			WriteToFile			${logfile}				N						IsCoApp=${IsCoApp}		
	\
	\		${Is_ADFLead}=			Run Keyword And Return Status 					Should Contain			${InFile}	ADFLead			
	\
	\		#Determine which AuditFile to read
	\		${AuditType}=			Run Keyword If	'${TransCode}'=='1'					Set Variable		App			#Transcode 1 is an App
	\		...						ELSE IF			'${TransCode}'=='6'					Set Variable		MenuDriver	#Transcode 6 is a MenuDriver		
	\		...						ELSE IF			'${TransCode}'=='7'					Set Variable		PayCalc		#Transcode 7 is a PayCalc		
	\		...						ELSE IF			'${TransCode}'=='3' and '${Is_ADFLead}'=='True' 		Set Variable	ADFLead	
	\		...						ELSE												Set Variable		Lead		
	\		${AuditFileName}=		Catenate			SEPARATOR=${SPACE}				${AuditType}		GetLead Audit.txt			
	\
	\		#Should we use one of the generic AuditFiles or was a specific AuditFile passed in? If a folderpath was passed in then we'll use generic. If a filepath was passed in then we'll use that specific file.
	\		${stat}=				Run Keyword And Return Status						File Should Exist	${AuditFileOrFolder}
	\		${AuditFilePath}=		Run Keyword If		${stat}							Set Variable		${AuditFileOrFolder}
	\		...	ELSE				Catenate			SEPARATOR=\\					${AuditFileOrFolder}	${AuditFileName}	
	\			WriteToFile			${logfile}				Y							AuditFilePath=${AuditFilePath}
	\
	\		#Assemble Input file path based on folder\filename from dict
	\		${InFilePath}=			Catenate			SEPARATOR=\\					${InFolder}			${InFile}	
	\			WriteToFile			${logfile}				Y							InFilePath=${InFilePath}
	\			WriteToFile			${logfile}				N							----------------------
	\
	\		#Get the AuditFile
	\		${AuditFile}=			Get File				${AuditFilePath}			
	\			WriteToFile			${logfile}				N							AuditFile Map: these nodes will be verified=${AuditFile}
	\		@{AuditLines}= 			Split To Lines 			${AuditFile}	
	\			WriteToFile			${logfile}				N							----------------------
	\		
	\		#Get the Input Xml	
	\		${InFile}=				Get File				${InFilePath}
	\			WriteToFile			${logfile}				N							InFile=${InFile}
	\			WriteToFile			${logfile}				N							----------------------	
	\
	\		#GetLeads Service Setup
	\		WriteToFile				${logfile}				N							GetLeadSleep=${GetLeadSleep}
	\		Sleep					${GetLeadSleep}										#wait a little for the GetLead	
	\		#Determine which GetLead Service
	\		${FD_SERVICE}=			Run Keyword If		'${TransCode}'=='6'				Set Variable		${VERSION}-1:GetLeadMD			
	\		...						ELSE IF				'${TransCode}'=='7'				Set Variable		${VERSION}-1:GetLeadPayCalc	
	\		...						ELSE												Set Variable		${VERSION}-1:GetLeadRegular	
	\		#LookupType: 1=lastname, 2=email, 3=partnerefid	
	\		${LookupType}=			Set Variable			1							
	\		#################################################################################################################################################
	\		${GetLead_Request}=		GetLeads Service Setup	${VERSION}	${LookupType}	${LEAD_REF}	${LastName1}	${FD_SERVICE}	${FILENAME}	#${PARTNERID}		
	# \		${GetLead_Request}=		GetLeads Service Setup	${VERSION}	${LookupType}	${LEAD_REF}	${LastName1}	${FD_SERVICE}	${FILENAME}	${PARTNERID}			
	\		#################################################################################################################################################
	\		WriteToFile				${logfile}				N							GetLeadResponse=${GetLead_Request}
	\		
	\		######################################################################################################
	\		#Now do the line by line compare of GetLead and InputXml using the AuditFile as the driver
	\		GetLead Audit-2				${AuditLines}			${InFile}					${GetLead_Request}	
	\		######################################################################################################
	\
	
	#Done processing all Xml/GetLeads - fail if there were any errors
	WriteToFile						${logfile}					Y						----------------------
	WriteToFile						${logfile}					Y						----------------------
	Run Keyword And Continue On Failure							Run Keyword If	'${ErrorCntTtl}'>'0'	Fail 		GetLead Audit returned ${ErrorCntTtl} errors.
	Run Keyword If					'${ErrorCntTtl}'>'0'        WriteToFile				${logfile}		N			GetLead Audit returned ${ErrorCntTtl} errors.

	${TimeStamp}=					Run Keyword					TimeStamp				
	Run Keyword If					'${ErrorCntTtl}'>'0'		WriteToErrorLog			${ErrorLog}		GetLead Audit returned ${ErrorCntTtl} errors.
	
###########################################################################################################
GetLead Audit-2		[Arguments]			${AuditLines}			${InFile}				${GetLead_Request}	
###########################################################################################################

	#####Loop through each line of the AuditFile
	:FOR 	${xmlNode}			IN 		 							@{AuditLines}
	\			WriteToFile		${logfile}				Y			-----
	\			WriteToFile		${logfile}				Y			xmlNode=${xmlNode}
	\
	\		#Each AuditFile line has two mapped parameters - XmlIn (left) and GetLeadOut (right) (separated by %%%) - .//PartnerId%%%.//PartnerId
	\		#There is an AuditFile for Leads and one for Apps. Each contains every field possible for the respective xml. 
	\		#Some items in the files have no mapped match and are labelled as XmlOnly or GetLeadOnly (examples - ConsentIndicator does not get output to GetLead and PrequalificationStatus is GetLeadOnly).
	\
	\		${search1}	${search2}=									Split String		${xmlNode}			%%%
	\
	\		###########################################################################################################################
	\		${Passed}=			GetLead Audit-3						${InFile}		${GetLead_Request}		${search1}		${search2}	
	\		###########################################################################################################################
	\

	#One Xml/GetLead has been verified
	WriteToFile					${logfile}				Y			----------------------
	WriteToFile					${logfile}				Y			ErrorCnt For This Xml=${ErrorCnt} 
	${ErrorCntTtl}=				Evaluate							${ErrorCntTtl} + ${ErrorCnt}
	Set Suite Variable			${ErrorCntTtl}	
	WriteToFile					${logfile}				Y			ErrorCnt Total So Far=${ErrorCntTtl}		
	${ErrorCnt}=				Set Variable			0
	Set Suite Variable			${ErrorCnt}
	
#######################################################################################################
GetLead Audit-3		[Arguments]		${InFile}		${GetLead_Request}		${search1}		${search2}	
#######################################################################################################

	WriteToFile				${logfile}				Y				search1=${search1}
	WriteToFile				${logfile}				Y				search2=${search2}
	
	#### XmlIn Nodes
	#Q1/P1 refer to XmlIn nodes. Q is as received and P is with any necessary mods
	${Q1}=					Get Elements Texts						${InFile}					${search1}
	${lenQ1}=				Get Length								${Q1}
		# WriteToFile		${logfile}				N				lenQ1=${lenQ1}				#this is the length of the InXml input
		# WriteToFile		${logfile}				N				Q1=${Q1}					#this is the InXml input	
	${stat}=				Run Keyword And Return Status			Get From List				${Q1}					0	
	${P1}=					Run Keyword If	'${stat}'=='True'		Get From List				${Q1}					0
	...		ELSE			Set Variable							${EMPTY}
	${P1}=					Convert To String						${P1}
	##############################################################################################################################################
	${P1}=					Run Keyword If	'${lenQ1}'>'1'			GetLead Audit-4				${Q1}			ELSE		Set Variable	${P1} 						
	##############################################################################################################################################
	WriteToFile				${logfile}				Y				P1=${P1}
	
	#XmlIn Phone - remove hyphens from any phone fields as they are always removed from GetLead
	${Is_Phone}=			Run Keyword And Return Status 			Should Contain 				${search1}				Phone
	${P1}=					Run Keyword If	'${Is_Phone}'=='True'	Replace String				${P1}	-	${Empty}	ELSE		Set Variable	${P1} 
	Run Keyword If	'${Is_Phone}'=='True'							WriteToFile					${logfile}				Y			P1=${P1}

	#XmlIn SSN - set as Empty as SSN is not displayed in GetLead
	${Is_SSN}=				Run Keyword And Return Status 			Should Contain 				${search1}				SSN
	${P1}=					Run Keyword If	'${Is_SSN}'=='True'		Set Variable				${EMPTY}				ELSE		Set Variable	${P1}  

	#XmlIn DOB Primary - append T00:00:00 to end of DOB to match GetLead
	${Is_DOB}=				Run Keyword And Return Status 			Should Contain 				${search2}				PrimaryApplicant/DateOfBirth	
	${P1}=					Run Keyword If	'${Is_DOB}'=='True'		Catenate					SEPARATOR=				${P1}		T00:00:00		ELSE	Set Variable	${P1} 
	Run Keyword If	'${Is_DOB}'=='True'								WriteToFile					${logfile}				Y			P1=${P1}
	
	#XmlIn DOB CoApp - append T00:00:00 to end of DOB to match GetLead
	${Is_DOB}=				Run Keyword And Return Status 			Should Contain 				${search2}				CoApplicant/DateOfBirth	
	${P1}=					Run Keyword If	'${Is_DOB}'=='True' and '${IsCoApp}'=='True' 		Catenate				SEPARATOR=	${P1}		T00:00:00		ELSE	Set Variable	${P1} 
	Run Keyword If	'${Is_DOB}'=='True'								WriteToFile					${logfile}				Y			P1=${P1}

	#XmlIn FinanceMethod - Is this a Balloon App? GetLead switches Balloon to Retail
	${chk1}=				Run Keyword If	'${TransCode}'=='1' and '${FinMethod}'=='B'			Set Variable			True					ELSE		Set Variable	False
	${chk2}=				Run Keyword And Return Status 			Should Contain 				${search1}				FinanceMethod		
	Run Keyword If			'${chk1}'=='True' and '${chk2}'=='True'								WriteToFile				${logfile}				Y			IsBalloonApp=${chk1}	
	${P1}=					Run Keyword If	'${chk1}'=='True' and '${chk2}'=='True'				Set Variable			Retail					ELSE		Set Variable	${P1} 
	Run Keyword If			'${chk1}'=='True' and '${chk2}'=='True'								WriteToFile				${logfile}				Y			P1=${P1}
	
	##### GetLead Nodes
	#Q2/P2 refer to GetLead nodes. Q is as received and P is with any necessary mods
	${Q2}=					Get Elements Texts						${GetLead_Request}			${search2}
	${lenQ2}=				Get Length								${Q2}
		# WriteToFile		${logfile}				N				lenQ2=${lenQ2}				#this is the length of the GetLead input
		# WriteToFile		${logfile}				N				Q2=${Q2}					#this is the GetLead input	
	${stat}=				Run Keyword And Return Status			Get From List				${Q2}					0
	${P2}=					Run Keyword If	'${stat}'=='True'		Get From List				${Q2}					0
	...	ELSE				Set Variable							${EMPTY}	
	${P2}=					Convert To String						${P2}
		
	##############################################################################################################################################
	${P2}=					Run Keyword If	'${lenQ2}'>'1'			GetLead Audit-4				${Q2}			ELSE		Set Variable	${P2} 
	##############################################################################################################################################
	WriteToFile				${logfile}				Y				P2=${P2}	
	
	#Compare XmlIn to GetLead
	#Are the lists equal?
	${P1}=					Evaluate								str('${P1}').lower()
	${P2}=					Evaluate								str('${P2}').lower()	
	${stat}=				Run Keyword And Return Status	 		Lists Should Be Equal		${P1}					${P2}
	WriteToFile				${logfile}				Y				ListsEqual=${stat}	
	
	#If GlobalGet, these nodes need to be handled as XmlOnly as they are not returned in GlobalGet: any CustomerNotes; any CustomFields.
	${Is_CustomerNotes}=	Run Keyword And Return Status 			Should Contain 				${xmlNode}						%%%.//CustomerNotes/Title
	${xmlNode}=				Run Keyword If	'${Is_CustomerNotes}'=='True'	Set Variable		.//CustomerNotes/Title%%%XmlOnly				ELSE	Set Variable	${xmlNode} 
	Run Keyword If	'${Is_CustomerNotes}'=='True'					WriteToFile					${logfile}						Y				xmlNode=${xmlNode}	
	${Is_CustomerNotes}=	Run Keyword And Return Status 			Should Contain 				${xmlNode}						%%%.//CustomerNotes/Content
	${xmlNode}=				Run Keyword If	'${Is_CustomerNotes}'=='True'	Set Variable		.//CustomerNotes/Content%%%XmlOnly				ELSE	Set Variable	${xmlNode} 
	Run Keyword If	'${Is_CustomerNotes}'=='True'					WriteToFile					${logfile}						Y				xmlNode=${xmlNode}	
	${Is_CustomFields}=		Run Keyword And Return Status 			Should Contain 				${xmlNode}						%%%.//CustomFields/CustomField/Name
	${xmlNode}=				Run Keyword If	'${Is_CustomFields}'=='True'	Set Variable		.//CustomFields/CustomField/Name%%%XmlOnly		ELSE	Set Variable	${xmlNode} 
	Run Keyword If	'${Is_CustomFields}'=='True'					WriteToFile					${logfile}						Y				xmlNode=${xmlNode}		
	${Is_CustomFields}=		Run Keyword And Return Status 			Should Contain 				${xmlNode}						%%%.//CustomFields/CustomField/Value
	${xmlNode}=				Run Keyword If	'${Is_CustomFields}'=='True'	Set Variable		.//CustomFields/CustomField/Value%%%XmlOnly		ELSE	Set Variable	${xmlNode} 
	Run Keyword If	'${Is_CustomFields}'=='True'					WriteToFile					${logfile}						Y				xmlNode=${xmlNode}	

	#Analyze result. Account for any differences re XmlOnly or GetLeadOnly (or Dropped if ADFLead).
	${XmlOnly}=				Run Keyword And Return Status 			Should Contain 				${xmlNode}				XmlOnly	
	${stat}=				Run Keyword If	'${XmlOnly}'=='True'	Set Variable				${EMPTY}				ELSE				Set Variable	${stat} 
	${Dropped}=				Run Keyword And Return Status 			Should Contain 				${xmlNode}				Dropped	
	${stat}=				Run Keyword If	'${Dropped}'=='True'	Set Variable				${EMPTY}				ELSE				Set Variable	${stat} 	
	${stat}=				Run Keyword If	'${stat}'=='${EMPTY}'	Set Variable				Ignored					ELSE				Set Variable	${stat} 							
	
	${GetLeadOnly}=			Run Keyword And Return Status 			Should Contain 				${xmlNode}				GetLeadOnly	
	${stat}=				Run Keyword If	'${GetLeadOnly}'=='True' and '${stat}'=='${False}'	Set Variable			${EMPTY}			ELSE	Set Variable	${stat} 	
	#Stat is set to True because it is GetLeadOnly (so no match with InXml) and GetLead returned a legitimate value
	${stat}=				Run Keyword If	'${stat}'=='${EMPTY}'	Set Variable				True					ELSE				Set Variable	${stat} 								

	${stat}=				Run Keyword If	'${GetLeadOnly}'=='True' and '${stat}'=='${True}' and '${P2}'=='${EMPTY}'	Set Variable		${EMPTY}		ELSE		Set Variable	${stat} 		
	${stat}=				Run Keyword If	'${stat}'=='${EMPTY}'	Set Variable				False					ELSE				Set Variable	${stat} 								
	Run Keyword If			'${GetLeadOnly}'=='True' and '${stat}'=='${False}' and '${P2}'=='${EMPTY}'					WriteToFile			${logfile}		Y			GetLead is missing data!!!
	WriteToFile				${logfile}				Y				$Status=${stat}		
	
	Run Keyword If	'${P1}'=='${Empty}' and '${P2}'=='${Empty}' and '${GetLeadOnly}'=='False'	WriteToFile				${logfile}			Y				Node not sent in xml

	#If stat is False here then we have detected a difference. Add to an error counter.	
	${ErrorCnt}=			Run Keyword If	'${stat}'=='False' 		Evaluate	${ErrorCnt} + 1		
	...	ELSE				Set Variable							${ErrorCnt}
	Set Suite Variable		${ErrorCnt}	

##############################################
GetLead Audit-4		[Arguments]		${InList}
##############################################
	${YYY}=					Set Variable							${EMPTY}	
	
	${lenInList}=			Get Length								${InList}
	
	:FOR 	${I} 			IN RANGE 								0 							${lenInList}
	\		${XXX}=			Get From List							${InList}					${I}
	\		Run Keyword If	'${lenInList}'=='1'						WriteToFile					${logfile}				Y				$$$XXX1=${XXX}
	\		${XXX}=			Convert To String						${XXX}
	\		${XXX}=			Replace String 							${XXX}						\n						${EMPTY}		#remove newline control character
	\		${XXX}=			Replace String 							${XXX}						\t						${EMPTY}		#remove tab control character
	\		${XXX}=			Run Keyword If	'${lenInList}'>'1'		Replace String 				${XXX}					${SPACE}		${EMPTY}	#remove spaces
	\		${YYY}=			Catenate 		SEPARATOR=				${YYY}						${XXX}
		
	Return From Keyword		${YYY}			

	
###############################################################################	
DDF Service		[Arguments]			${DDFSleep}
###############################################################################
	
	${TimeStamp}=					Run Keyword				TimeStamp
	${DDFSleep}=					Convert To Integer		${DDFSleep}
	WriteToFile						${logfile}				Y					----------------------
	WriteToFile						${logfile}				Y					DDFSleep=${DDFSleep}
	Sleep							${DDFSleep}									#wait a little for the ddf	
	
	Log Dictionary 					${Global_Dict}
	Log List 						${List_DDF}	
	${lenList}=						Get Length				${List_DDF}
		
	#For each item in List_DDF (the list contains an index to the Global Dict for any previously submitted xml)
	:FOR 	${I} 	IN RANGE	0		${lenList}
	\
	\		#Pull needed info from Global Dict using List_DDF index		
	\		${Index1}				Get From List 			${List_DDF}					${I}
	\		${Index}=				Convert To Integer 		${Index1}
	\		${dict}=				Get From Dictionary 	${Global_Dict}				${Index}
	\			WriteToFile			${logfile}				Y							----------------------
	\			WriteToFile			${logfile}				Y							$DictIndex=${Index}
	\			WriteToFile			${logfile}				N							Dictionary=${dict}
	\		${Lead_Ref}=			Get From Dictionary		${dict}						REF Lead
	\			WriteToFile			${logfile}				Y							Lead_Ref=${Lead_Ref}
	\		${InFile}=				Get From Dictionary		${dict}						Filename
	\			WriteToFile			${logfile}				N							InFile=${InFile}
	\		${TransCode}=			Get From Dictionary		${dict}						TransCode
	\		Set Test Variable		${TransCode}
	\			WriteToFile			${logfile}				N							TransCode=${TransCode}
	\
	\		#Get the DDF - call Send GET For DDF
	\		${ResponseType}=		Set Variable			DDF	
	\		${DDF_Request}=			Send GET For DDF 									${Lead_Ref}
	\			WriteToFile			${logfile}				N							DDFResponseFull=${DDF_Request}
	\			WriteToFile			${logfile}				N							----------------------	

	
####################################################################################################
GetLead Service		[Arguments]		${GetLeadSleep}		${GlobalGetPartner}		
####################################################################################################

	${TimeStamp}=					Run Keyword				TimeStamp
	${GetLeadSleep}=				Convert To Integer		${GetLeadSleep}
	WriteToFile						${logfile}				Y					----------------------
	WriteToFile						${logfile}				Y					GetLead Service>>>	
	WriteToFile						${logfile}				Y					GetLeadSleep=${GetLeadSleep}
	Sleep							${GetLeadSleep}								#wait a little for the GetLead
	
	Log Dictionary 					${Global_Dict}
	Log List 						${List_GetLead}	
	${lenList}=						Get Length				${List_GetLead}

	# Is this a GlobalGet request? AJK is the GlobalGet Partner. 
	${Is_GlobalGet}=		Run Keyword And Return Status 		Should Contain 		${FOLDER_NAME}		Global Get
	Set Test Variable		${Is_GlobalGet}
	Run Keyword If			'${Is_GlobalGet}'=='True'			WriteToFile			${logfile}			Y				Is_GlobalGet=${Is_GlobalGet}
	${PARTNERID}=			Run Keyword If	'${Is_GlobalGet}'=='True'				Set Variable		${GlobalGetPartner}		ELSE		Set Variable		${PARTNERID}
	Run Keyword If			'${Is_GlobalGet}'=='True'			WriteToFile			${logfile}			Y				GlobalGetPartner=${PARTNERID}
		
	#For each item in List_GetLead (the list contains an index to the Global Dict for any previously submitted xml)
	:FOR 	${I} 	IN RANGE	0		${lenList}
	\
	\		#Pull needed info from Global Dict using List_GetLead index		
	\		${Index1}				Get From List 			${List_GetLead}			${I}
	\		${Index}=				Convert To Integer 		${Index1}
	\		${dict}=				Get From Dictionary 	${Global_Dict}			${Index}
	\			WriteToFile			${logfile}				Y						----------------------
	\			WriteToFile			${logfile}				Y						$DictIndex=${Index}
	\			WriteToFile			${logfile}				N						Dictionary=${dict}
	\		${Lead_Ref}=			Get From Dictionary		${dict}					REF Lead
	\			WriteToFile			${logfile}				Y						Lead_Ref=${Lead_Ref}
	\		${InFolder}=			Get From Dictionary		${dict}					Input Folder
	\			WriteToFile			${logfile}				N						InFolder=${InFolder}
	\		${InFile}=				Get From Dictionary		${dict}					Filename
	\			WriteToFile			${logfile}				N						InFile=${InFile}
	\		${TransCode}=			Get From Dictionary		${dict}					TransCode
	\		Set Test Variable		${TransCode}		
	\			WriteToFile			${logfile}				N						TransCode=${TransCode}
	\		${LastName1}=			Get From Dictionary		${dict}					Last Name
	\			WriteToFile			${logfile}				Y						DictLastName=${LastName1}	
	\		${LastName2}=			Get From Dictionary		${dict}					CoApp Last Name
	\			WriteToFile			${logfile}				Y						DictLastNameCoapp=${LastName2}		
	\		${Is_UseEmail}=			Run Keyword And Return Status 					Should Contain			${InFolder}			By Email
	\			WriteToFile			${logfile}				N						Is_UseEmail=${Is_UseEmail}
	\		${EmailAddr}=			Run Keyword If			${Is_UseEmail}			Get From Dictionary		${dict}				EmailAddr		ELSE	Set Variable	${EMPTY}
	\			WriteToFile			${logfile}				Y						DictEmailAddr=${EmailAddr}		
	\		${PartnerRefId}=		Get From Dictionary		${dict}					PartnerRefId
	\		${Is_UsePartnerRef}=	Run Keyword If	'${PartnerRefId}'!='None'	Set Variable	True	ELSE	Set Variable	False		
	\			WriteToFile			${logfile}				Y						DictPartnerRefId=${PartnerRefId}	
	\		#This is a hack to make GetLead work for Bus Apps and Leads but it will only work for joint (it will fail for individual - FD bug).
	\		#This will swap in Coapp LastName and use it for the get. GetLead does not support BusinessName.
	\		${Is_BusLead}=			Run Keyword And Return Status 					Should Contain			${InFile}			3-BusLead			
	\		${Is_BusApp}=			Run Keyword And Return Status 					Should Contain			${InFile}			4-BusApp
	\		${LastName1}=			Run Keyword If	${Is_BusLead} or ${Is_BusApp}	Set Variable			${LastName2}		ELSE	Set Variable	${LastName1}
	\		Run Keyword If			${Is_BusLead} or ${Is_BusApp}					WriteToFile				${logfile}	Y		BusCoappLastName=${LastName1}		
	\
	\		WriteToFile				${logfile}				N							GetLeadSleep=${GetLeadSleep}
	\		Sleep					${GetLeadSleep}										#wait a little for the GetLead	
	\
	\		#Set up the GetLead call - determine which GetLead Service and the type of lookup (lastname, email, partnerefid). We'll set a lastname lookup at first by default.
	\		${LookupType}=			Set Variable		1								#default lookup
	\		${Identifier}=			Set Variable		${LastName1}					#default lookup
	\		${RefID}=				Set Variable		${Lead_Ref}						#default lookup
	\		${FD_SERVICE}=			Run Keyword If		'${TransCode}'=='6'				Set Variable		${VERSION}-1:GetLeadMD			
	\		...						ELSE IF				'${TransCode}'=='7'				Set Variable		${VERSION}-1:GetLeadPayCalc	
	\		...						ELSE												Set Variable		${VERSION}-1:GetLeadRegular
	\		${LookupType}=			Run Keyword If 		${Is_UseEmail}		Set Variable		2								ELSE	Set Variable	${LookupType}	
	\		${Identifier}=			Run Keyword If 		${Is_UseEmail} 		Set Variable		${EmailAddr}					ELSE	Set Variable 	${Identifier}	
	\		${FD_SERVICE}=			Run Keyword If 		${Is_UseEmail} 		Set Variable		${VERSION}-1:GetLeadEmail		ELSE	Set Variable	${FD_SERVICE}
	\		${LookupType}=			Run Keyword If 		${Is_UsePartnerRef}	Set Variable		3								ELSE	Set Variable 	${LookupType}	
	\		${RefID}=				Run Keyword If 		${Is_UsePartnerRef}	Set Variable		${PartnerRefId}					ELSE	Set Variable 	${RefID}	
	\		${FD_SERVICE}=			Run Keyword If 		${Is_UsePartnerRef}	Set Variable		${VERSION}-1:GetLeadPartnerRef	ELSE	Set Variable	${FD_SERVICE}
	\
	\		#################################################################################################################################################
	\		#Call the GetLeads Service
	\		${GetLead_Request}=		GetLeads Service Setup	${VERSION}	${LookupType}	${RefID}	${Identifier}	${FD_SERVICE}	${FILENAME}	#${PARTNERID}
	\		#################################################################################################################################################
	# \		WriteToFile				${logfile}				N							GetLeadURL=${GetLeadURL}
	\		WriteToFile				${logfile}				N							GetLeadResponse=${GetLead_Request}

	
###############################################################################	
PartnerPosts Service		[Arguments]			${PartnerPostSleep}
###############################################################################

	#This routine will execute CBWS, PQ, App, LenderXml partner posts for each RefId found in the GlobalDict. After retrieving, it will pass the 
	#posting message to the appropriate processing routine (PartnerPosts CBWS Xml, PartnerPosts PQ Xml, PartnerPosts App Xml, PartnerPosts Lender Xml).

	#TRU Service
	
	${PostingPQ_Dict}				Create Dictionary	
	${PostingApp_Dict}				Create Dictionary			
	${PostingLender_Dict}			Create Dictionary				
	${PostingCBWS_Dict}				Create Dictionary				
	Set Suite Variable				${PostingPQ_Dict}
	Set Suite Variable				${PostingApp_Dict}	
	Set Suite Variable				${PostingLender_Dict}		
	Set Suite Variable				${PostingCBWS_Dict}		
	
	${DoAppGet}=					Set Variable			${EMPTY}
	${DoLenderGet}=					Set Variable			${EMPTY}
	
	WriteToFile						${logfile}				Y					----------------------$
	WriteToFile						${logfile}				Y					PartnerPosts Service>>>	
	${ResponseType}=				Set Variable			${EMPTY}
	${TimeStamp}=					Run Keyword				TimeStamp
	${PartnerPostSleep}=			Convert To Integer		${PartnerPostSleep}
	WriteToFile						${logfile}				Y					PartnerPostSleep=${PartnerPostSleep}
	Sleep							${PartnerPostSleep}							
	
	# Log Dictionary 					${Global_Dict}
	WriteToFile						${logfile}				Y					@GlobalDict=${Global_Dict}
	# Log List 						${List_PartnerPosts}	
	WriteToFile						${logfile}				Y					List_PartnerPosts=${List_PartnerPosts}	
	${lenList}=						Get Length				${List_PartnerPosts}
		
	#For each item in List_PartnerPosts (the list contains an index to the Global Dict for any previously submitted xml)
	:FOR 	${I} 	IN RANGE	0		${lenList}
	\
	\		#Pull needed info from Global Dict using List_PartnerPosts index		
	\		${Index1}				Get From List 			${List_PartnerPosts}		${I}
	\		${Index}=				Convert To Integer 		${Index1}
	\		${dict}=				Get From Dictionary 	${Global_Dict}				${Index}
	\			WriteToFile			${logfile}				Y							----------------------^
	\			WriteToFile			${logfile}				Y							$DictIndex=${Index}
	\			WriteToFile			${logfile}				N							Dictionary=${dict}
	\		${PQ_Ref}=				Get From Dictionary		${dict}						REF PQ
	\			WriteToFile			${logfile}				Y							PQ_Ref=${PQ_Ref}
	\		${App_Ref}=				Get From Dictionary		${dict}						REF App
	\			WriteToFile			${logfile}				Y							App_Ref=${App_Ref}
	\		${CBWS_Ref}=			Get From Dictionary		${dict}						REF CB
	\			WriteToFile			${logfile}				Y							CBWS_Ref=${CBWS_Ref}
	\		${InFile}=				Get From Dictionary		${dict}						Filename
	\			WriteToFile			${logfile}				N							InFile=${InFile}
	\
	\		#App 	= TestCAPartnerResponse
	\		#PQ 	= PreQualResponse
	\		#CBWS 	= CBResponse
	\		#Lender = LenderXmlResponses	
	\
	\		WriteToFile						${logfile}				Y					----------------------
	\
	\		#PQ request
	\		${ResponseType}=		Run Keyword If		'${PQ_Ref}'!='${EMPTY}'			Set Variable	PQ				ELSE	Set Variable	${EMPTY}	
	\		Run Keyword If								'${ResponseType}'=='PQ'			WriteToFile		${logfile}		Y		ResponseType=${ResponseType}	
	\		${PQ_Request}=			Run Keyword If		'${ResponseType}'=='PQ'			Send Get For PartnerPosts		${ResponseType}			${PQ_Ref}		ELSE	Set Variable	${EMPTY}	
	\		Run Keyword If								'${ResponseType}'=='PQ'			WriteToFile		${logfile}		Y		TRUResponsePQ=${PQ_Request}
	\		${ParseXml}=			Run Keyword If		'${PQ_Request}'!='${EMPTY}'		PartnerPosts PQ Xml				${PQ_Request}	${Index}
	\		Run Keyword If								'${ResponseType}'=='PQ'			WriteToFile		${logfile}		Y		----------------------		
	\
	\		#App request - Note: NowCom type partners do not get sent an App Partner Post (in QA, DXC is used as NowCom type)
	\		${ResponseType}=		Run Keyword If		'${App_Ref}'!='${EMPTY}'		Set Variable	App				ELSE	Set Variable	${EMPTY}	
	\		Run Keyword If								'${ResponseType}'=='App'		WriteToFile		${logfile}		Y		ResponseType=${ResponseType}		
	\		${DoAppGet}=			Run Keyword If		('${ResponseType}'=='App') and ('${PARTNERID}'!='DXC')			Set Variable	True	ELSE	Set Variable	False					
	\		${App_Request}=			Run Keyword If		${DoAppGet}						Send Get For PartnerPosts		${ResponseType}			${App_Ref}		ELSE	Set Variable	${EMPTY}
	\		Run Keyword If								${DoAppGet}						WriteToFile		${logfile}		Y		TRUResponseApp=${App_Request}
	\		Run Keyword If								('${ResponseType}'=='App') and ('${PARTNERID}'=='DXC')			WriteToFile		${logfile}		Y		Note: App is NowCom-type so App request was not executed
	\		${ParseXml}=			Run Keyword If		'${App_Request}'!='${EMPTY}'	PartnerPosts App Xml			${App_Request}	${Index}	
	\		Run Keyword If								'${ResponseType}'=='App'		WriteToFile		${logfile}		Y		----------------------		
	\
	\		#CBWS request
	\		${ResponseType}=		Run Keyword If		'${CBWS_Ref}'!='${EMPTY}'		Set Variable	CBWS			ELSE	Set Variable	${EMPTY}	
	\		Run Keyword If								'${ResponseType}'=='CBWS'		WriteToFile		${logfile}		Y		ResponseType=${ResponseType}		
	\		${CBWS_Request}=		Run Keyword If		'${ResponseType}'=='CBWS'		Send Get For PartnerPosts		${ResponseType}			${CBWS_Ref}		ELSE	Set Variable	${EMPTY}
	\		Run Keyword If								'${ResponseType}'=='CBWS'		WriteToFile		${logfile}		Y		TRUResponseCBWS=${CBWS_Request}
	\		${ParseXml}=			Run Keyword If		'${CBWS_Request}'!='${EMPTY}'	PartnerPosts CBWS Xml			${CBWS_Request}	${Index}
	\		Run Keyword If								'${ResponseType}'=='CBWS'		WriteToFile		${logfile}		Y		----------------------		
	\
	\		#Lender request is only for NowCom type partners - in QA this MUST BE PARTNER DXC!!! The NOW partner is only posted externally.
	\		${ResponseType}=		Run Keyword If		'${App_Ref}'!='${EMPTY}'		Set Variable	Lender			ELSE	Set Variable	${EMPTY}	
	\		Run Keyword If								'${ResponseType}'=='Lender'		WriteToFile		${logfile}		Y		ResponseType=${ResponseType}
	\		Run Keyword If								'${ResponseType}'=='Lender'		WriteToFile		${logfile}		Y		PartnerID=${PARTNERID}	
	\		${DoLenderGet}=			Run Keyword If		('${ResponseType}'=='Lender') and ('${PARTNERID}'=='DXC')		Set Variable	True	ELSE	Set Variable	False			
	\		${Lender_Request}=		Run Keyword If		${DoLenderGet}					Send Get For PartnerPosts		${ResponseType}			${App_Ref}		ELSE	Set Variable	${EMPTY}
	\		Run Keyword If								${DoLenderGet}					WriteToFile		${logfile}		Y		TRUResponseLender=${Lender_Request}
	\		Run Keyword If								('${ResponseType}'=='Lender') and ('${PARTNERID}'!='DXC')		WriteToFile		${logfile}		Y		Note: App not NowCom-type so LenderXml request was not executed
	\		${ParseXml}=			Run Keyword If		${DoLenderGet}					PartnerPosts Lender Xml			${Lender_Request}	${Index}	
	\		Run Keyword If								${DoLenderGet}					WriteToFile		${logfile}		Y		----------------------		

			WriteToFile			${logfile}					Y					--------------------------------
			WriteToFile			${logfile}					Y					PostingPQ_Dict=${PostingPQ_Dict}
			WriteToFile			${logfile}					Y					--------------------------------
			WriteToFile			${logfile}					Y					PostingApp_Dict=${PostingApp_Dict}			
			WriteToFile			${logfile}					Y					--------------------------------			
			WriteToFile			${logfile}					Y					PostingLender_Dict=${PostingLender_Dict}			
			WriteToFile			${logfile}					Y					--------------------------------
			WriteToFile			${logfile}					Y					PostingCBWS_Dict=${PostingCBWS_Dict}			
			WriteToFile			${logfile}					Y					--------------------------------					

		
###############################################################################	
PartnerPosts PQ Xml		[Arguments]			${ResponseXml}	${GlobalDictIndex}
###############################################################################

	#This keyword will process PQ Partner Posts that were submitted and have been added to ${Global_Dict} and ${List_PartnerPosts}.
	#If PQ/App xml is contained within a folder that has PassPQ or FailPQ in the folderpath, then it will verify that the returned PartnerPost PQ 'Status' matches.

	${PQTemp_Dict}			Create Dictionary	

	WriteToFile				${logfile}					Y					-----
	WriteToFile				${logfile}					Y					PartnerPosts PQ Xml>>>

	#Get the foldername and filename from the GlobalDict.	
	${req_dict}=			Get From Dictionary			${Global_Dict}		${GlobalDictIndex}
	${FolderPath}=			Get From Dictionary			${req_dict}			Input Folder	
		WriteToFile			${logfile}					Y					TransactionFolderPath=${FolderPath}	
	${FileName}=			Get From Dictionary			${req_dict}			Filename			
		WriteToFile			${logfile}					Y					FileName=${Filename}		
		
	#Optional Check-1 - validate PassPQ and/or FailPQ. If folder name contains 'PassPQ' or 'FailPQ' then we'll validate that the PQ Status that is posted matches what is expected.
	${Is_PassPQ}=			Run Keyword And Return Status 					Should Contain 				${FolderPath}		PassPQ
		WriteToFile			${logfile}					Y					Request is for PassPQ=${Is_PassPQ}		
	${Is_FailPQ}=			Run Keyword And Return Status 					Should Contain 				${FolderPath}		FailPQ	
		WriteToFile			${logfile}					Y					Request is for FailPQ=${Is_FailPQ}		
	${Temp}	${DictFolderName1}=							Split Path			${FolderPath}
		WriteToFile			${logfile}					Y					DictFolderName1=${DictFolderName1}	
	#swap the foldername to facilitate matching with PQ Status
	${DictFolderName1}=		Run Keyword If	'${DictFolderName1}'=='PassPQ'	Set Variable		Pass	ELSE	Set Variable	${DictFolderName1}
	${DictFolderName1}=		Run Keyword If	'${DictFolderName1}'=='FailPQ'	Set Variable		Fail	ELSE	Set Variable	${DictFolderName1}
		WriteToFile			${logfile}					Y					DictFolderNameAfter=${DictFolderName1}	
	${Chk1}=				Run Keyword If	${Is_PassPQ} or ${Is_FailPQ}	Set Variable		True	ELSE	Set Variable	False	
		WriteToFile			${logfile}					Y					Chk1=${Chk1}		

	#Optional Check-2 - validate joint highest score is posted. If folder name contains 'Highest Score' then we'll validate that the PQ CreditScore matches what is expected.
	${Is_HighScore}=		Run Keyword And Return Status 					Should Contain 				${FolderPath}		Highest Score
		WriteToFile			${logfile}					Y					Request is for Highest Score=${Is_HighScore}		
	${Temp}	${DictFolderName2}=							Split Path			${FolderPath}
		WriteToFile			${logfile}					Y					DictFolderName2=${DictFolderName2}	
	${Chk2}=				Run Keyword If				${Is_HighScore}		Set Variable		True	ELSE	Set Variable	False
		WriteToFile			${logfile}					Y					Chk2=${Chk2}		
	#Get highest score from first 3 characters of the filename
	${FileScore}=			Run Keyword If				${Chk2}				Get Substring		${FileName}			0		3
	${FileScore}=			Run Keyword If	'${FileScore}'=='000'			Replace String		${FileScore}		000		0	ELSE	Set Variable	${FileScore}
		Run Keyword If		${Chk2}						WriteToFile			${logfile}					Y					FileScore=${FileScore}
		
	#Parse xml. Loop and examine all .//PreQualificationResponse nodes.
	${Root}=				Parse XML					${ResponseXml}
	${CountNodes}=			Get Element Count			${ResponseXml}		.//PreQualificationResponse
	Run Keyword And Continue On Failure					Run Keyword If		'${CountNodes}'=='0'		Fail				PQ PartnerPost NodeList is empty
	Run Keyword If			'${CountNodes}'=='0'		WriteToFile			${logfile}					Y					Error! PQ PartnerPost NodeList is empty
	Run Keyword If			'${CountNodes}'=='0'		Return From Keyword	
	
	@{NodeList}=			Get Elements				${ResponseXml}		.//PreQualificationResponse

	:FOR		${Node}		IN			@{NodeList}   
	\			${Node}					Element To String		${Node}
	\			${Node}=				Convert To String 		${Node}
	\
	\			${PQRefID}=			XML.Get Element Text		${Node}				.//PreQualificationReferenceNumber	
	\			${Status}=			XML.Get Element Text		${Node}				.//DealerResults/DealerResult/Status	
	\			${CreditScore}=		XML.Get Element Text		${Node}				.//CreditScore	
	\			${PartnerId}=		XML.Get Element Text		${Node}				.//PartnerId			
	\			${PartnerDealerId}=	XML.Get Element Text		${Node}				.//DealerResults/DealerResult/PartnerDealerId		
	\			${EmailAddress}=	XML.Get Element Text		${Node}				.//DealerResults/DealerResult/FromEmailAddress	
	\			${Message}=			XML.Get Element Text		${Node}				.//DealerResults/DealerResult/Message	
	\
	\			WriteToFile			${logfile}					Y					GlobalDictIndex=${GlobalDictIndex}		
	\			WriteToFile			${logfile}					Y					PQRefID=${PQRefID}	
	\			WriteToFile			${logfile}					Y					Status=${Status}		
	\			WriteToFile			${logfile}					Y					CreditScore=${CreditScore}		
	\			WriteToFile			${logfile}					Y					PartnerId=${PartnerId}		
	\			WriteToFile			${logfile}					Y					PartnerDealerId=${PartnerDealerId}			
	\			WriteToFile			${logfile}					Y					EmailAddress=${EmailAddress}			
	\			WriteToFile			${logfile}					Y					Message=${Message}	
	\
	\			#Check-1: this code will conditionally do validation re PassPQ or FailPQ and will fail if status is not what was expected.
	\			${IsEqual1}=		Run Keyword If	'${Chk1}'=='True' and ('${DictFolderName1}'=='${Status}')			Set Variable	True		ELSE	Set Variable		False
	\			Run Keyword If		'${Chk1}'=='True' and '${IsEqual1}'=='True'		WriteToFile			${logfile}		Y	Result: PQ status returned is as expected
	\			Run Keyword If		'${Chk1}'=='True' and '${IsEqual1}'=='False'	WriteToFile			${logfile}		Y	Result: Failed! - PQ status NOT as expected	
	\			Run Keyword If		'${Chk1}'=='True' and '${IsEqual1}'=='False'	Run Keyword And Continue On Failure		Fail			Failed! - PQ status NOT as expected		
	\
	\			#Check-2: this code will conditionally do validation re posting Highest Score and will fail if score is not what was expected.
	\			${IsEqual2}=		Run Keyword If	'${Chk2}'=='True' and ('${FileScore}'=='${CreditScore}')			Set Variable	True		ELSE	Set Variable		False
	\			Run Keyword If		'${Chk2}'=='True' and '${IsEqual2}'=='True'		WriteToFile			${logfile}		Y	Result: PQ posted the highest score
	\			Run Keyword If		'${Chk2}'=='True' and '${IsEqual2}'=='False'	WriteToFile			${logfile}		Y	Result: Failed! - PQ did NOT post the highest score
	\			Run Keyword If		'${Chk2}'=='True' and '${IsEqual2}'=='False'	Run Keyword And Continue On Failure		Fail			Failed! - PQ did NOT post the highest score
	\
	\			Set To Dictionary	${PQTemp_Dict}				GDI					${GlobalDictIndex}		
	\			Set To Dictionary	${PQTemp_Dict}				Status				${Status}		
	\			Set To Dictionary	${PQTemp_Dict}				CreditScore			${CreditScore}			
	\			Set To Dictionary	${PQTemp_Dict}				PartnerId			${PartnerId}				
	\			Set To Dictionary	${PQTemp_Dict}				PartnerDealerId		${PartnerDealerId}					
	\			Set To Dictionary	${PQTemp_Dict}				EmailAddress		${EmailAddress}						
	\			Set To Dictionary	${PQTemp_Dict}				Message				${Message}		
	\
	\			Set To Dictionary	${PostingPQ_Dict}			${PQRefID}			${PQTemp_Dict}	
	\
	\			WriteToFile			${logfile}					Y					PostingPQ_Dict=${PostingPQ_Dict}	
	
	[Return]		Pass

	
###############################################################################	
PartnerPosts App Xml	[Arguments]			${ResponseXml}	${GlobalDictIndex}
###############################################################################

	${AppTemp_Dict}			Create Dictionary	

	WriteToFile				${logfile}					Y					-----
	WriteToFile				${logfile}					Y					PartnerPosts App Xml>>>
	
	${Root}=				Parse XML					${ResponseXml}
	
	${CountNodes}=			Get Element Count			${ResponseXml}		.//LenderDecisionResponse
	Run Keyword And Continue On Failure					Run Keyword If		'${CountNodes}'=='0'		Fail				App PartnerPost NodeList is empty
	Run Keyword If			'${CountNodes}'=='0'		WriteToFile			${logfile}					Y					Error! App PartnerPost NodeList is empty	
	Run Keyword If			'${CountNodes}'=='0'		Return From Keyword

	@{NodeList}				Get Elements				${ResponseXml}		.//LenderDecisionResponse

	:FOR		${Node}		IN			@{NodeList}   
	\			${Node}					Element To String			${Node}
	\			${Node}=				Convert To String 			${Node}
	\
	\			${AppRefID}=			XML.Get Element Text		${Node}				.//ApplicationReferenceNumber
	\			${LenderId}=			XML.Get Element Text		${Node}				.//LenderId
	\			${ApprovalStatus}=		XML.Get Element Text		${Node}				.//ApprovalStatus	
	\			Set Test Variable		${ApprovalStatus}
	\			${PartnerId}=			XML.Get Element Text		${Node}				.//PartnerId	
	\			${PartnerDealerId}=		XML.Get Element Text		${Node}				.//PartnerDealerId		
	\			${ApprovedAmount}=		XML.Get Element Text		${Node}				.//ApprovedAmount	
	\			${ApprovedRate}=		XML.Get Element Text		${Node}				.//ApprovedRate	
	\			${ApprovedTerm}=		XML.Get Element Text		${Node}				.//ApprovedTerm	
	\			${MonthlyPayment}=		XML.Get Element Text		${Node}				.//MonthlyPayment	
	\			${Tier}=				XML.Get Element Text		${Node}				.//Tier		
	\			${DealerMessage}=		XML.Get Element Text		${Node}				.//DealerMessage	
	\			${FromEmailAddress}=	XML.Get Element Text		${Node}				.//FromEmailAddress		
	\			${LenderName}=			XML.Get Element Text		${Node}				.//LenderName		
	\			${LeadRefID}=			XML.Get Element Text		${Node}				.//LeadReferenceNumber		
	\
	\			WriteToFile				${logfile}					Y					GlobalDictIndex=${GlobalDictIndex}
	\			WriteToFile				${logfile}					Y					AppRefID=${AppRefID}	
	\			WriteToFile				${logfile}					Y					LenderId=${LenderId}		
	\			WriteToFile				${logfile}					Y					ApprovalStatus=${ApprovalStatus}			
	\			WriteToFile				${logfile}					Y					PartnerId=${PartnerId}			
	\			WriteToFile				${logfile}					Y					PartnerDealerId=${PartnerDealerId}			
	\			WriteToFile				${logfile}					Y					ApprovedAmount=${ApprovedAmount}			
	\			WriteToFile				${logfile}					Y					ApprovedRate=${ApprovedRate}			
	\			WriteToFile				${logfile}					Y					ApprovedTerm=${ApprovedTerm}			
	\			WriteToFile				${logfile}					Y					MonthlyPayment=${MonthlyPayment}			
	\			WriteToFile				${logfile}					Y					Tier=${Tier}			
	\			WriteToFile				${logfile}					Y					DealerMessage=${DealerMessage}			
	\			WriteToFile				${logfile}					Y					FromEmailAddress=${FromEmailAddress}			
	\			WriteToFile				${logfile}					Y					LenderName=${LenderName}			
	\			WriteToFile				${logfile}					Y					LeadRefID=${LeadRefID}				
	\
	\			Set To Dictionary		${AppTemp_Dict}				GDI					${GlobalDictIndex}		
	\			Set To Dictionary		${AppTemp_Dict}				LenderId			${LenderId}		
	\			Set To Dictionary		${AppTemp_Dict}				ApprovalStatus		${ApprovalStatus}			
	\			Set To Dictionary		${AppTemp_Dict}				PartnerId			${PartnerId}				
	\			Set To Dictionary		${AppTemp_Dict}				PartnerDealerId		${PartnerDealerId}					
	\			Set To Dictionary		${AppTemp_Dict}				ApprovedAmount		${ApprovedAmount}						
	\			Set To Dictionary		${AppTemp_Dict}				ApprovedRate		${ApprovedRate}		
	\			Set To Dictionary		${AppTemp_Dict}				ApprovedTerm		${ApprovedTerm}		
	\			Set To Dictionary		${AppTemp_Dict}				MonthlyPayment		${MonthlyPayment}		
	\			Set To Dictionary		${AppTemp_Dict}				Tier				${Tier}		
	\			Set To Dictionary		${AppTemp_Dict}				DealerMessage		${DealerMessage}		
	\			Set To Dictionary		${AppTemp_Dict}				FromEmailAddress	${FromEmailAddress}		
	\			Set To Dictionary		${AppTemp_Dict}				LenderName			${LenderName}		
	\			Set To Dictionary		${AppTemp_Dict}				LeadRefID			${LeadRefID}			
	\
	\			Set To Dictionary		${PostingApp_Dict}			${AppRefID}			${AppTemp_Dict}	
	\
	\			WriteToFile				${logfile}					Y					PostingApp_Dict=${PostingApp_Dict}		

	[Return]		Pass	

	
###############################################################################	
PartnerPosts Lender Xml	[Arguments]			${ResponseXml}	${GlobalDictIndex}
###############################################################################

	#Lender Xml PartnerPosts are only returned for NowCom type partners. If Decisions were previously executed (Approved, Counteroffered, Declined) 
	#then this routine will check that they were also sent in the partner post. This routine will loop through the partner post nodes for an app and 
	#extract all decision data and insert it to a List that contains all PartnerPost  Decision type data ${PPLenderList} that will be used as input in 
	#PartnerPosts Validate Decisions. It looks like this: 160000000003273691ACBApproved (AppRef, LenderID, Decision.
		
	#This routine will also check Partner Post messages re AppSubmitted or AppNotSubmitted. This will be checked only if the xml is contained in folders 
	#that are named in that way.

	${LenderTemp_Dict}		Create Dictionary
	${PPLenderList}=		Create List					#this will be used in PartnerPosts Validate Decisions
	Set Suite Variable		${PPLenderList}
	
	${LDMany}				Set Variable				${EMPTY}

	WriteToFile				${logfile}					Y					-----
	WriteToFile				${logfile}					Y					PartnerPosts Lender Xml>>>
	WriteToFile				${logfile}					Y					@DealQueueDict=${DealQueDealer}		#Dictionary set as suite variable in 'DealQueue Operation'
	
	#Get the folder name from the GlobalDict. If folder name is AppSubmitted or AppNotSubmitted then we'll do the Partner Post Message checks
	${req_dict}=			Get From Dictionary			${Global_Dict}		${GlobalDictIndex}
	${FolderPath}=			Get From Dictionary			${req_dict}			Input Folder	
		WriteToFile			${logfile}					Y					TransactionFolderPath=${FolderPath}
	${FileName}=			Get From Dictionary			${req_dict}			Filename			
		WriteToFile			${logfile}					Y					FileName=${Filename}				
	${Is_AppSubmitted}=		Run Keyword And Return Status 					Should Contain 				${FolderPath}		AppSubmitted
		WriteToFile			${logfile}					Y					Request is for AppSubmitted=${Is_AppSubmitted}		
	${Is_AppNotSubmitted}=	Run Keyword And Return Status 					Should Contain 				${FolderPath}		AppNotSubmitted	
		WriteToFile			${logfile}					Y					Request is for AppNotSubmitted=${Is_AppNotSubmitted}		
	${Temp}	${DictFolderName1}=							Split Path			${FolderPath}
	${Chk1}=				Run Keyword If	${Is_AppSubmitted} or ${Is_AppNotSubmitted}					Set Variable	True	ELSE	Set Variable	False

	#Parse the Lender xml	
	${Root}=				Parse XML					${ResponseXml}	
	${CountNodes}=			Get Element Count			${ResponseXml}		.//XmlElement
	Run Keyword And Continue On Failure					Run Keyword If		'${CountNodes}'=='0'		Fail				LenderXml PartnerPost NodeList is empty
	Run Keyword If			'${CountNodes}'=='0'		WriteToFile			${logfile}					Y					Error! LenderXml PartnerPost NodeList is empty
	Run Keyword If			'${CountNodes}'=='0'		Return From Keyword	

	#Loop through all the XmlElement type elements in the Lender Xml
	@{NodeList}				Get Elements		${ResponseXml}		.//XmlElement

	:FOR		${Node}		IN			@{NodeList}   
	\			${Node}					Element To String			${Node}
	\			${Node}=				Convert To String 			${Node}
	\
	\			${AppRefID}=			XML.Get Element Text		${Node}				.//LenderXmlResponse/ApplicationReferenceNumber
	\			${LenderId}=			XML.Get Element Text		${Node}				.//LenderXmlResponse/LenderId
	\			${DecisionStatus}=		XML.Get Element Text		${Node}				.//LenderXmlResponse/DecisionStatus	
	\			${PartnerId}=			XML.Get Element Text		${Node}				.//LenderXmlResponse/PartnerId	
	\			${PartnerDealerId}=		XML.Get Element Text		${Node}				.//LenderXmlResponse/PartnerDealerId		
	\			${LenderXml}=			XML.Get Element Text		${Node}				.//LenderXmlResponse/LenderXml	
	\
	\			WriteToFile				${logfile}					Y					GlobalDictIndex=${GlobalDictIndex}
	\			WriteToFile				${logfile}					Y					AppRefID=${AppRefID}	
	\			WriteToFile				${logfile}					Y					LenderId=${LenderId}		
	\			WriteToFile				${logfile}					Y					DecisionStatus=${DecisionStatus}			
	\			WriteToFile				${logfile}					Y					PartnerId=${PartnerId}			
	\			WriteToFile				${logfile}					Y					PartnerDealerId=${PartnerDealerId}	
	\			WriteToFile				${logfile}					Y					LenderXml=${LenderXml}			
	\
	\			#Check-1: this code will conditionally do validation re AppSubmitted or AppNotSubmitted messages and will fail if message is not what was expected.
	\			WriteToFile				${logfile}					Y					FolderName=${DictFolderName1} | DecisionStatus=${DecisionStatus}
	\			${IsEqual}=				Run Keyword If	'${Chk1}'=='True' and ('${DictFolderName1}'=='${DecisionStatus}')		Set Variable	True		ELSE	Set Variable		False
	\			Run Keyword If			'${Chk1}'=='True' and '${IsEqual}'=='True'		WriteToFile			${logfile}		Y	Result: Decision status returned is as expected
	\			Run Keyword If			'${Chk1}'=='True' and '${IsEqual}'=='False'		WriteToFile			${logfile}		Y	Result: Failed! - Decision status NOT as expected	
	\			Run Keyword If			'${Chk1}'=='True' and '${IsEqual}'=='False'		Run Keyword And Continue On Failure		Fail			Failed! - Decision status NOT as expected	
	\
	\			${LDOne}=				Catenate					SEPARATOR=,			${LenderId}		${DecisionStatus}
	\			${LDMany}=				Set Variable				${LDMany}${LDOne};	
	\			
	\			${DecisionRec}=			Catenate					SEPARATOR=			${AppRefID}		${LenderId}		${DecisionStatus}
	\			Append To List			${PPLenderList}				${DecisionRec}
	
				Set To Dictionary		${LenderTemp_Dict}			GDI					${GlobalDictIndex}		
				Set To Dictionary		${LenderTemp_Dict}			PartnerId			${PartnerId}		
				Set To Dictionary		${LenderTemp_Dict}			PartnerDealerId		${PartnerDealerId}
				Set To Dictionary		${LenderTemp_Dict}			LenderDecisions		${LDMany}				
				
				Set To Dictionary		${PostingLender_Dict}		${AppRefID}			${LenderTemp_Dict}		

				WriteToFile				${logfile}					Y					LenderTemp_Dict=${LenderTemp_Dict}				
				# WriteToFile				${logfile}					Y					PostingLender_Dict=${PostingLender_Dict}
				WriteToFile				${logfile}					Y					PPLenderList=${PPLenderList}		

				# ${Temp}=			Get From Dictionary				${LenderTemp_Dict}	LenderDecisions
				# WriteToFile			${logfile}						Y					LenderDecisionsGet=${Temp}									
	
	[Return]		Pass	
	
	
###############################################################################	
PartnerPosts CBWS Xml	[Arguments]			${ResponseXml}	${GlobalDictIndex}
###############################################################################

	${CBWSTemp_Dict}		Create Dictionary		
	
	WriteToFile				${logfile}					Y					-----
	WriteToFile				${logfile}					Y					PartnerPosts CBWS Xml>>>
	
	${Root}=				Parse XML					${ResponseXml}
	
	${CountNodes}=			Get Element Count			${ResponseXml}		.//PushResponse
	Run Keyword And Continue On Failure					Run Keyword If		'${CountNodes}'=='0'		Fail				CBWS PartnerPost NodeList is empty
	Run Keyword If			'${CountNodes}'=='0'		WriteToFile			${logfile}					Y					Error! CBWS PartnerPost NodeList is empty	
	Run Keyword If			'${CountNodes}'=='0'		Return From Keyword	

	@{NodeList}				Get Elements		${ResponseXml}		.//PushResponse

	:FOR		${Node}		IN			@{NodeList}   
	\			${Node}					Element To String			${Node}
	\			${Node}=				Convert To String 			${Node}
	\
	\			${CBWSRefID}=			XML.Get Element Text		${Node}				.//RequestReferenceNumber
	\			${ApplicantType}=		XML.Get Element Text		${Node}				.//ApplicantType
	\			${CBType}=				XML.Get Element Text		${Node}				.//CBType
	\			${CreditBureauScore}=	XML.Get Element Text		${Node}				.//CreditBureauScore
	\			${CreditBureauScore}=	Remove string				${CreditBureauScore}	+
	\			${CreditBureauStatus}=	XML.Get Element Text		${Node}				.//CreditBureauStatus
	\			${CustomerName}=		XML.Get Element Text		${Node}				.//CustomerName
	\			${DealerUrl}=			XML.Get Element Text		${Node}				.//DealerUrl
	\			${FusionDealerID}=		XML.Get Element Text		${Node}				.//FusionDealerID
	\			${LegacyDealerID}=		XML.Get Element Text		${Node}				.//LegacyDealerID
	\			${OFACStatus}=			XML.Get Element Text		${Node}				.//OFACStatus
	\			${RedFlagScore}=		XML.Get Element Text		${Node}				.//RedFlagScore
	\			${RedFlagStatus}=		XML.Get Element Text		${Node}				.//RedFlagStatus
	\
	\			Set To Dictionary		${CBWSTemp_Dict}			GDI					${GlobalDictIndex}		
	\			Set To Dictionary		${CBWSTemp_Dict}			LegacyDealerID		${LegacyDealerID}
	\			Run Keyword If			'${ApplicantType}'=='A'		Set To Dictionary	${CBWSTemp_Dict}	Name1		${CustomerName}	
	\			...	ELSE											Set To Dictionary	${CBWSTemp_Dict}	Name2		${CustomerName}		
	\			Run Keyword If			'${CBType}'=='EQ'			Set To Dictionary	${CBWSTemp_Dict}	EQ_Url		${DealerUrl}
	\			Run Keyword If			'${CBType}'=='EX'			Set To Dictionary	${CBWSTemp_Dict}	EX_Url		${DealerUrl}
	\			Run Keyword If			'${CBType}'=='TU'			Set To Dictionary	${CBWSTemp_Dict}	TU_Url		${DealerUrl}
	\			${EQA}=					Run Keyword If	'${CBType}'=='EQ' and '${ApplicantType}'=='A'		Set Variable	True	ELSE	Set Variable	False 	
	\			${EQC}=					Run Keyword If	'${CBType}'=='EQ' and '${ApplicantType}'=='C'		Set Variable	True	ELSE	Set Variable	False 	
	\			${EXA}=					Run Keyword If	'${CBType}'=='EX' and '${ApplicantType}'=='A'		Set Variable	True	ELSE	Set Variable	False 	
	\			${EXC}=					Run Keyword If	'${CBType}'=='EX' and '${ApplicantType}'=='C'		Set Variable	True	ELSE	Set Variable	False 		
	\			${TUA}=					Run Keyword If	'${CBType}'=='TU' and '${ApplicantType}'=='A'		Set Variable	True	ELSE	Set Variable	False 	
	\			${TUC}=					Run Keyword If	'${CBType}'=='TU' and '${ApplicantType}'=='C'		Set Variable	True	ELSE	Set Variable	False 		
	
	\			WriteToFile				${logfile}					Y					GlobalDictIndex=${GlobalDictIndex}
	\			WriteToFile				${logfile}					Y					CBWSRefID=${CBWSRefID}	
	\			WriteToFile				${logfile}					Y					ApplicantType=${ApplicantType}	
	\			WriteToFile				${logfile}					Y					CBType=${CBType}	
	\			WriteToFile				${logfile}					Y					CreditBureauScore=${CreditBureauScore}		
	\			WriteToFile				${logfile}					Y					CreditBureauStatus=${CreditBureauStatus}		
	\			WriteToFile				${logfile}					Y					CustomerName=${CustomerName}		
	\			WriteToFile				${logfile}					Y					DealerUrl=${DealerUrl}		
	\			WriteToFile				${logfile}					Y					FusionDealerID=${FusionDealerID}		
	\			WriteToFile				${logfile}					Y					LegacyDealerID=${LegacyDealerID}		
	\			WriteToFile				${logfile}					Y					OFACStatus=${OFACStatus}		
	\			WriteToFile				${logfile}					Y					RedFlagScore=${RedFlagScore}		
	\			WriteToFile				${logfile}					Y					RedFlagStatus=${RedFlagStatus}			
	\			WriteToFile				${logfile}					Y					-----
	
	\			Run Keyword If			${EQA}			Set To Dictionary		${CBWSTemp_Dict}	EQ1_Score		${CreditBureauScore}
	\			Run Keyword If			${EQA}			Set To Dictionary		${CBWSTemp_Dict}	EQ1_Status		${CreditBureauStatus}
	# \			Run Keyword If			${EQA}			Set To Dictionary		${CBWSTemp_Dict}	EQ1_OFAC		${OFACStatus}
	# \			Run Keyword If			${EQA}			Set To Dictionary		${CBWSTemp_Dict}	EQ1_RFScore		${RedFlagScore}
	# \			Run Keyword If			${EQA}			Set To Dictionary		${CBWSTemp_Dict}	EQ1_RFStatus	${RedFlagStatus}
	
	\			Run Keyword If			${EQC}			Set To Dictionary		${CBWSTemp_Dict}	EQ2_Score		${CreditBureauScore}
	\			Run Keyword If			${EQC}			Set To Dictionary		${CBWSTemp_Dict}	EQ2_Status		${CreditBureauStatus}
	# \			Run Keyword If			${EQC}			Set To Dictionary		${CBWSTemp_Dict}	EQ2_OFAC		${OFACStatus}
	# \			Run Keyword If			${EQC}			Set To Dictionary		${CBWSTemp_Dict}	EQ2_RFScore		${RedFlagScore}
	# \			Run Keyword If			${EQC}			Set To Dictionary		${CBWSTemp_Dict}	EQ2_RFStatus	${RedFlagStatus}
	
	\			Run Keyword If			${EXA}			Set To Dictionary		${CBWSTemp_Dict}	EX1_Score		${CreditBureauScore}
	\			Run Keyword If			${EXA}			Set To Dictionary		${CBWSTemp_Dict}	EX1_Status		${CreditBureauStatus}
	# \			Run Keyword If			${EXA}			Set To Dictionary		${CBWSTemp_Dict}	EX1_OFAC		${OFACStatus}
	# \			Run Keyword If			${EXA}			Set To Dictionary		${CBWSTemp_Dict}	EX1_RFScore		${RedFlagScore}
	# \			Run Keyword If			${EXA}			Set To Dictionary		${CBWSTemp_Dict}	EX1_RFStatus	${RedFlagStatus}
	
	\			Run Keyword If			${EXC}			Set To Dictionary		${CBWSTemp_Dict}	EX2_Score		${CreditBureauScore}
	\			Run Keyword If			${EXC}			Set To Dictionary		${CBWSTemp_Dict}	EX2_Status		${CreditBureauStatus}
	# \			Run Keyword If			${EXC}			Set To Dictionary		${CBWSTemp_Dict}	EX2_OFAC		${OFACStatus}
	# \			Run Keyword If			${EXC}			Set To Dictionary		${CBWSTemp_Dict}	EX2_RFScore		${RedFlagScore}
	# \			Run Keyword If			${EXC}			Set To Dictionary		${CBWSTemp_Dict}	EX2_RFStatus	${RedFlagStatus}	
	
	\			Run Keyword If			${TUA}			Set To Dictionary		${CBWSTemp_Dict}	TU1_Score		${CreditBureauScore}
	\			Run Keyword If			${TUA}			Set To Dictionary		${CBWSTemp_Dict}	TU1_Status		${CreditBureauStatus}
	# \			Run Keyword If			${TUA}			Set To Dictionary		${CBWSTemp_Dict}	TU1_OFAC		${OFACStatus}
	# \			Run Keyword If			${TUA}			Set To Dictionary		${CBWSTemp_Dict}	TU1_RFScore		${RedFlagScore}
	# \			Run Keyword If			${TUA}			Set To Dictionary		${CBWSTemp_Dict}	TU1_RFStatus	${RedFlagStatus}
	
	\			Run Keyword If			${TUC}			Set To Dictionary		${CBWSTemp_Dict}	TU2_Score		${CreditBureauScore}
	\			Run Keyword If			${TUC}			Set To Dictionary		${CBWSTemp_Dict}	TU2_Status		${CreditBureauStatus}
	# \			Run Keyword If			${TUC}			Set To Dictionary		${CBWSTemp_Dict}	TU2_OFAC		${OFACStatus}
	# \			Run Keyword If			${TUC}			Set To Dictionary		${CBWSTemp_Dict}	TU2_RFScore		${RedFlagScore}
	# \			Run Keyword If			${TUC}			Set To Dictionary		${CBWSTemp_Dict}	TU2_RFStatus	${RedFlagStatus}

	\			Set To Dictionary		${PostingCBWS_Dict}						${CBWSRefID}		${CBWSTemp_Dict}	
	\
	\			WriteToFile				${logfile}		Y						PostingCBWS_Dict=${PostingCBWS_Dict}	
		
	[Return]		Pass		

	
###############################################################################	
PartnerPosts Validate Decisions
###############################################################################	

	#This routine will compare PartnerPost  Decision type data ${PPLenderList} with a DecisionDictionary ${DealQue_Dec} that is the output of the actual Do Decision 
	#process. The DecisionDictionary will be converted to a list ${DecisionList} that is in the same format as the ${PPLenderList}. It will then make sure that the 
	#PartnerPost list has all the decisions that are in the DecisionList and fail if there are discrepencies.
	
	#DealQue_Dec is a dictionary created in 'Decision Validation' and contains all info required to compare with info from 'PartnerPosts Lender Xml'
	#DealQue_Dec Sample = {0: {u'L1-Lender': u'ACB', u'L1-Term': 39, u'L1-Amount': 27342, u'Last Name': 'Firstimerpvan', u'L1-Monthly Payment': 663, u'L1-Buy Rate': 1, u'L1-Tier': 1, u'NbrLenders': 1, u'GDI': 0, u'AppRefID': '160000000003273691', u'L1-Decision': u'Approved'}}
	
	#PPLenderList is a list created in 'PartnerPosts Lender Xml' and contains all lender decision info returned from that get call
	#PPLenderList Sample =[u'160000000003273691ACBAppSubmitted', u'160000000003273691AUSAppSubmitted', u'160000000003273691BECAppSubmitted', u'160000000003273691CF6AppSubmitted', u'160000000003273691EPCAppSubmitted', u'160000000003273691KSCAppSubmitted', u'160000000003273691ACBApproved']

	#We loop through DealQue_Dec as the driver (these are the decisions that were successfully done in DealQueue). We reformat the dictionary items in 'PartnerPosts Validate Decisions2' so
	#that they look like the PartnerPost list format and then compare.
	
	WriteToFile				${logfile}					Y					PartnerPosts Validate Decisions>>>
	WriteToFile				${logfile}					Y					@DealQue_Dec (from DealQueue)=${DealQue_Dec}
	WriteToFile				${logfile}					Y					@PartnerPostLenderXmlList (from PartnerPost)=${PPLenderList}

	${DecisionList}=		Create List	
	Set Suite Variable		${DecisionList}
	
	${len}=						Get Length		 		${DealQue_Dec}	
	WriteToFile					${logfile}				Y					Count DealQue_Dec=${len}
	:FOR 	${I}				IN RANGE 	0			${len}
	\		${DealQueItem}=		Get From Dictionary		${DealQue_Dec}		${I}	
	\		${RC}=				PartnerPosts Validate Decisions2			${DealQueItem}

	WriteToFile				${logfile}					Y					================================
	WriteToFile				${logfile}					Y					DecisionsList=${DecisionList}
	WriteToFile				${logfile}					Y					--------------------------------		
	WriteToFile				${logfile}					Y					PartnerPostLenderXmlList=${PPLenderList}
	WriteToFile				${logfile}					Y					================================	

###############################################################################	
PartnerPosts Validate Decisions2	[Arguments]		${DealQueItem}
###############################################################################	

	WriteToFile					${logfile}				Y					PartnerPosts Validate Decisions2>>>
	
	${AppRefID}=				Get From Dictionary   	${DealQueItem}   	AppRefID

	${NbrLenders}=				Get From Dictionary   	${DealQueItem}   	NbrLenders	
	${NbrLenders}=				Convert To Integer		${NbrLenders}
	WriteToFile					${logfile}				Y					NbrLenders=${NbrLenders}
	:FOR 	${I}				IN RANGE 	1			${NbrLenders} + 1
	\		${Key1}=			Catenate	SEPARATOR=	L	${I}	-	Lender			#L1-Lender
	\		WriteToFile			${logfile}				Y			Key1=${Key1}
	\		${Key2}=			Catenate	SEPARATOR=	L	${I}	-	Decision		#L1-Decision
	\		WriteToFile			${logfile}				Y			Key2=${Key2}	
	\		${Lender}=			Get From Dictionary   	${DealQueItem}   	${Key1}	
	\		${Decision}=		Get From Dictionary   	${DealQueItem}   	${Key2}	
	\		${DecisionRec}=		Catenate				SEPARATOR=			${AppRefID}							${Lender}			${Decision}
	\		Append To List		${DecisionList}			${DecisionRec}
	\		WriteToFile			${logfile}				Y					DecisionRec=${DecisionRec}
	\		${stat}=			Run Keyword And Return Status				List Should Contain Value	 		${PPLenderList}		${DecisionRec}
	\		Run Keyword If 		${stat}			WriteToFile					${logfile}			Y				DecisionRec Found in PartnerPost = ${DecisionRec}
	\		...	ELSE							WriteToFile					${logfile}			Y				DecisionRec NOT Found in PartnerPost! = ${DecisionRec}
	\		Run Keyword If	'${stat}'=='False'	Run Keyword and Continue on Failure				Fail		    DecisionRec NOT Found in PartnerPost! = ${DecisionRec}	

	[Return]			Pass

########################################################################
PartnerPosts Get DT2.0 Decision PDF		[Arguments]		${DecisionList}
########################################################################

	WriteToFile				${logfile}					Y					PartnerPosts Get DT2.0 Decision PDF>>>
	WriteToFile				${logfile}					Y					DecisionList=${DecisionList}			#list was created in 'PartnerPosts Validate Decisions'

	${len}=					Get Length 					${DecisionList}	
	WriteToFile				${logfile}					Y					Count DecisionList=${len}
	
	:FOR 	${Item}			IN RANGE 		0			${len}
	\		${ListItem}=				Get From List 				${DecisionList}			${Item}					#160000000003273795AUSApproved
	\		WriteToFile					${logfile}					Y						ListItem=${ListItem}
	\		${Temp}=					Get Substring				${ListItem}				0		21
	# \		WriteToFile					${logfile}					Y						Temp=${Temp}	
	\		${LenderID}=				Get Substring				${Temp}					18		21
	\		WriteToFile					${logfile}					Y						LenderID=${LenderID}		
	\		${AppRefId}=				Get Substring				${Temp}					0		18
	\		WriteToFile					${logfile}					Y						AppRefId=${AppRefId}
	\
	\		############################################################################################
	\		PartnerPosts Get DT2.0 Decision PDF 2					${LenderID}				${AppRefId}
	\		############################################################################################	
	\

########################################################################################	
PartnerPosts Get DT2.0 Decision PDF 2		[Arguments]		${LenderID}		${AppRefId}
########################################################################################		
	
	WriteToFile							${logfile}				Y			PartnerPosts Get DT2.0 Decision PDF 2>>>
	
	${GetPdfUrl}=						Set Variable			${EMPTY}
	
	${FD_SERVICE}=						Set Variable			${VERSION}-1:GetNowComPdf	
	${Servicename}=						Set Variable 			FD ${VERSION} GetNowComPdf	
	Web Service Setup2					${FD_SERVICE}    		FD			${PARTNERID}
	
	##/financedriver/v1.2/lead/?partnerid=QQQ&partnerdealerid=999999&lastname=LASTNAME&leadreferencenumber=
	##/financedriver/devint/v1.2/application/999999/QQQ 
	##/financedriver/v1.2/application/999999/QQQ
	
	#http://10.136.10.40/financedriver/devint/v1.2/application/160000010003750418/partner/MAZ/dealer/1358010/decision/CMB - sample call
	#/financedriver/devint/v1.2/application/8888888888/partner/PPP/dealer/999999/decision/LLL							  - config file
	# ${AppRefId}=						Set Variable		160000000003887917	
	# ${LenderID}=						Set Variable		DTL
	
	${GetPdfUrl}=						Catenate 			SEPARATOR=		${WS Setup['Url']}		${WS Setup['Service']}
	${GetPdfUrl}=						Replace String		${GetPdfUrl}	8888888888				${AppRefId}
	${GetPdfUrl}=						Replace String		${GetPdfUrl}	PPP						${PARTNERID}
	${GetPdfUrl}=						Replace String		${GetPdfUrl}	999999					${DEALERID}	
	${GetPdfUrl}=						Replace String		${GetPdfUrl}	LLL						${LenderID}

	WriteToFile							${logfile}				Y			GetPdfUrl=${GetPdfUrl}	
	WriteToFile							${logfile}				Y			UserName=${WS Setup['User Name']}	
	WriteToFile							${logfile}				Y			Password=${WS Setup['Password']}		
	
	# ${ResponseHeaders}=					Create List
	${ResponseHeaders}=					Create Dictionary
	
	################################################################################################################
	${RESPONSECODE}	${RESPONSETEXT}	${ResponseHeaders}=		Run Keyword and Continue On Failure		WS_CommonUtil.Send_Get_Request_PDF		${GetPdfUrl}	${WS Setup['User Name']}	${WS Setup['Password']}		
	################################################################################################################	
	
	WriteToFile							${logfile}				Y			PDFResponse>>>
	WriteToFile							${logfile}				Y			ResponseCode=${RESPONSECODE}
	WriteToFile							${logfile}				N			ResponseText=${RESPONSETEXT}	
	WriteToFile							${logfile}				N			ResponseHeaders=${ResponseHeaders}
	
	${RespHeaderContentType}=			Run Keyword And Return Status		Dictionary Should Contain Key 		${ResponseHeaders}		Content-Type
	${RespHeaderContentTypeValue}=		Run Keyword If	${RespHeaderContentType}	Get From Dictionary			${ResponseHeaders}		Content-Type		
	WriteToFile							${logfile}				Y			RespHeaderContentType=${RespHeaderContentType}
	WriteToFile							${logfile}				Y			RespHeaderContentTypeValue=${RespHeaderContentTypeValue}
	${Is_PDF}=							Run Keyword And Return Status 		Should Contain 		${RespHeaderContentTypeValue}			pdf
	WriteToFile							${logfile}				Y			Is_PDF=${Is_PDF}	
	
	# Set Suite Variable 					${RESPONSECODE}
	# Set Suite Variable 					${RESPONSETEXT}
	# Set Suite Variable			 		${ERRORTEXT}	
	
	Run Keyword If	'${RESPONSECODE}'!= '200'								WriteToFile		${logfile}		Y													PDF Request Failed | Bad ResponseCode =${RESPONSECODE}
	Run Keyword And Continue On Failure										Run Keyword If	'${RESPONSECODE}'!= '200'								Fail		PDF Request Failed | Bad ResponseCode =${RESPONSECODE}
	Run Keyword If	'${RESPONSECODE}'== '200' and '${Is_PDF}'=='False'		WriteToFile		${logfile}		Y													PDF Request Failed | 200 Response But Not PDF =${RESPONSECODE}|${IsPDF}
	Run Keyword And Continue On Failure										Run Keyword If	'${RESPONSECODE}'== '200' and '${Is_PDF}'=='False'		Fail		PDF Request Failed | 200 Response But Not PDF =${RESPONSECODE}|${IsPDF}
	Run Keyword If	'${RESPONSECODE}'== '200' and '${Is_PDF}'=='True'		WriteToFile		${logfile}		Y													PDF Request is Good! =${RESPONSECODE}|${IsPDF}	
	
	#save pdf
	${PDFFileName}=						Catenate	SEPARATOR=				${AppRefId}_${LenderID}_DecisionPDF.pdf
	Run Keyword If	'${RESPONSECODE}'== '200' and '${Is_PDF}'=='True'		Create Binary File					${RESOURCE}\\Other\\WebService\\Response\\${PDFFileName}		${RESPONSETEXT}
	Run Keyword If	'${RESPONSECODE}'== '200' and '${Is_PDF}'=='True'		WriteToFile		${logfile}	Y		PDF Written to: ${RESOURCE}\\Other\\WebService\\Response\\${PDFFileName}
	
####################################################################################################
Service Gets	[Arguments]		${RequestingPartner}		
####################################################################################################

	# Process All Xml Files SetUp
	
	WriteToFile							${logfile}				Y				Service Gets>>>
	WriteToFile							${logfile}				Y				----------------------
	WriteToFile							${logfile}				Y				Service Get for 1.2-PQ
	${FD_SERVICE}=						Run Keyword				Set Variable	1.2-1:GetServicePQ
	Web Service Setup2					${FD_SERVICE}			FD				${RequestingPartner}
	# Web Service Setup    				${Environment}    		${FD_SERVICE}	${Environment}-FD:${RequestingPartner}		${RequestingPartner}
	# Log 	${WS Setup}
	${Username}=						Set Variable			${WS Setup['User Name']}
	${Password}=						Set Variable			${WS Setup['Password']}
	${Url}=								Catenate 				SEPARATOR=		${WS Setup['Url']}				${WS Setup['Service']}	
	WriteToFile							${logfile}				Y				Url=${Url}
	# WriteToFile							${logfile}				Y				Username=${Username}	
	${RESPONSECODE}	${RESPONSETEXT}=	Run Keyword And Continue On Failure		WS_CommonUtil.Send_Get_Request	${URL}		${Username}		${Password}		
	WriteToFile							${logfile}				Y				ResponseCode=${RESPONSECODE}	
	WriteToFile							${logfile}				Y				ResponseText=${RESPONSETEXT}	
	Run Keyword If	'${RESPONSECODE}'!= '200'					WriteToFile		${logfile}		Y				FAILED: PQ Service Get Request is not successful.
	Run Keyword If	'${RESPONSECODE}'!= '200'					WriteToErrorLog	${ErrorLog}						PQ Service Get | ${RESPONSECODE} | ${RESPONSETEXT}			
	Run Keyword If	'${RESPONSECODE}'!= '200'       			Fail        	PQ Service Get Request is not successful.

	WriteToFile							${logfile}				Y				----------------------		
	WriteToFile							${logfile}				Y				Service Get for 1.2-App
	${FD_SERVICE}=						Run Keyword				Set Variable	1.2-1:GetServiceApp
	Web Service Setup2					${FD_SERVICE}			FD				${RequestingPartner}
	# Web Service Setup    				${Environment}    		${FD_SERVICE}	${Environment}-FD:${RequestingPartner}		${RequestingPartner}
	# Log 	${WS Setup}
	${Url}=								Catenate 				SEPARATOR=		${WS Setup['Url']}				${WS Setup['Service']}	
	WriteToFile							${logfile}				Y				Url=${Url}
	# WriteToFile							${logfile}				Y				Username=${Username}	
	${RESPONSECODE}	${RESPONSETEXT}=	Run Keyword And Continue On Failure		WS_CommonUtil.Send_Get_Request	${URL}		${Username}		${Password}		
	WriteToFile							${logfile}				Y				ResponseCode=${RESPONSECODE}	
	WriteToFile							${logfile}				Y				ResponseText=${RESPONSETEXT}	
	Run Keyword If	'${RESPONSECODE}'!= '200'					WriteToFile		${logfile}		Y				FAILED: App Service Get Request is not successful.
	Run Keyword If	'${RESPONSECODE}'!= '200'					WriteToErrorLog	${ErrorLog}						App Service Get | ${RESPONSECODE} | ${RESPONSETEXT}		
	Run Keyword If	'${RESPONSECODE}'!= '200'       			Fail        	App Service Get Request is not successful.

	WriteToFile							${logfile}				Y				----------------------		
	WriteToFile							${logfile}				Y				Service Get for 1.1-CBWS
	${FD_SERVICE}=						Run Keyword				Set Variable	1.1:GetServiceCBWS
	Web Service Setup2					${FD_SERVICE}			CB				${RequestingPartner}	
	# Web Service Setup    				${Environment}    		${FD_SERVICE}	${Environment}-FD:${RequestingPartner}		${RequestingPartner}
	# Log 	${WS Setup}
	${Url}=								Catenate 				SEPARATOR=		${WS Setup['Url']}				${WS Setup['Service']}	
	WriteToFile							${logfile}				Y				Url=${Url}
	# WriteToFile							${logfile}				Y				Username=${Username}	
	${RESPONSECODE}	${RESPONSETEXT}=	Run Keyword And Continue On Failure		WS_CommonUtil.Send_Get_Request	${URL}		${Username}		${Password}		
	WriteToFile							${logfile}				Y				ResponseCode=${RESPONSECODE}	
	WriteToFile							${logfile}				Y				ResponseText=${RESPONSETEXT}	
	Run Keyword If	'${RESPONSECODE}'!= '200'					WriteToFile		${logfile}		Y				FAILED: CBWS-1.1 Service Get Request is not successful.	
	Run Keyword If	'${RESPONSECODE}'!= '200'					WriteToErrorLog	${ErrorLog}						CBWS-1.1 Service Get | ${RESPONSECODE} | ${RESPONSETEXT}	
	Run Keyword If	'${RESPONSECODE}'!= '200'       			Fail        	CBWS-1.1 Service Get Request is not successful.

	WriteToFile							${logfile}				Y				----------------------		
	WriteToFile							${logfile}				Y				Service Get for 1.0-CBWS
	${FD_SERVICE}=						Run Keyword				Set Variable	1.0:GetServiceCBWS
	Web Service Setup2					${FD_SERVICE}			CB				${RequestingPartner}	
	# Web Service Setup    				${Environment}    		${FD_SERVICE}	${Environment}-FD:${RequestingPartner}		${RequestingPartner}
	# Log 	${WS Setup}
	${Url}=								Catenate 				SEPARATOR=		${WS Setup['Url']}				${WS Setup['Service']}	
	WriteToFile							${logfile}				Y				Url=${Url}
	# WriteToFile							${logfile}				Y				Username=${Username}	
	${RESPONSECODE}	${RESPONSETEXT}=	Run Keyword And Continue On Failure		WS_CommonUtil.Send_Get_Request	${URL}		${Username}		${Password}		
	WriteToFile							${logfile}				Y				ResponseCode=${RESPONSECODE}	
	WriteToFile							${logfile}				Y				ResponseText=${RESPONSETEXT}	
	Run Keyword If	'${RESPONSECODE}'!= '200'					WriteToFile		${logfile}		Y				FAILED: CBWS-1.0 Service Get Request is not successful.	
	Run Keyword If	'${RESPONSECODE}'!= '200'					WriteToErrorLog	${ErrorLog}						CBWS-1.0 Service Get | ${RESPONSECODE} | ${RESPONSETEXT}
	Run Keyword If	'${RESPONSECODE}'!= '200'       			Fail        	CBWS-1.0 Service Get Request is not successful.
	
	
############ From FD-PVT.txt ################
Wait For Status On My Leads Page 		[Arguments]		${LeadStatus}
	
	Unselect Frame
	Wait Until Page Contains Element            //iframe[@id='iFrm']
	Select Frame                                iFrm
	Wait Until Page Contains Element            //frame[@name='main']
	Select Frame                                main
	
	${LeadStatus}=		Evaluate	str('${LeadStatus}').lower()
	${ROW}= 		Set Variable 	2
	${DELAY}=		Set Variable	90
	${TIME_FRACTION}=	Set Variable	5
	
	${COUNT}			Evaluate				${DELAY}/${TIME_FRACTION}
	${COUNT}			Convert To Integer		${COUNT}
	${SCAN}				Set Variable			0
	
	Wait Until Keyword Succeeds       60s         3s       Page Should Contain Element       //table[@id='DGLeadsReport']/tbody/tr[2]/td[9]		Status is not shown on the page.		loglevel=NONE
	
	:For		${LOOP}		IN RANGE	1			${COUNT} + 1
	\	Sleep				${TIME_FRACTION}s
	\	Wait Until Keyword succeeds     60      10      Page Should Contain Element           //table[@id='DGLeadsReport']/tbody/tr[2]/td[9]
	\	Wait Until Page Contains Element		//table[@id='DGLeadsReport']/tbody/tr[2]/td[9]		10s
	\	${ACT_Status_SH1}=		Get Text		//table[@id='DGLeadsReport']/tbody/tr[2]/td[9]
	\	${ACT_Status_SH}=		Evaluate	str('${ACT_Status_SH1}').lower()
	\	Run Keyword If 			'${ACT_Status_SH}'=='None'			Fail			Unable to get value in Status column on My Leads Page. 
	\	${ACT_Status}=			Evaluate		str('${ACT_Status_SH}').strip()
	\ 	${EXEC_STATUS1}=		Run Keyword And Continue On Failure		Run Keyword And Return Status		Should Be Equal As Strings			${LeadStatus}			${ACT_Status}		Comparison of Status failed on My Leads Page. Expected value: ${LeadStatus}. Actual Value: ${ACT_Status}. Please make sure that FD - Web Service is working fine as the expected record is not shown on My Leads page.		values=False
	\   ${SCAN}					Evaluate			${SCAN} + 1
	\ 	Run Keyword If			'${EXEC_STATUS1}'=='True'							Exit For Loop
	\	...		ELSE			Navigate Again To My Leads Page

	
Validate Status On My Leads For Multiple Rows 		[Arguments]		${CNT} 		${Status}
	
	
	@{Status_List}=		Create List
	${OriginalStatus}=	Set Variable 			${Status}
	${Status}=			Convert To String 		${Status}
	${Status}=			Evaluate				str('${Status}').lower()
	
	Unselect Frame
	Wait Until Page Contains Element            //iframe[@id='iFrm']
	Select Frame                                iFrm
	Wait Until Page Contains Element            //frame[@name='main']
	Select Frame                                main
	
	Wait Until Keyword succeeds     60      10      Page Should Contain Element           //table[@id='DGLeadsReport']/tbody/tr[2]/td[9]	Table is not found on My Leads page 	loglevel=NONE
	
	Log 			${CNT}
	${CNT1}=		Evaluate 		${CNT}+2
	
	:For		${Row}		IN RANGE	2			${CNT1}
	\	Log 	${Row}
	\	Wait Until Keyword succeeds     60      10      Page Should Contain Element           //table[@id='DGLeadsReport']/tbody/tr[${Row}]/td[9]	Table is not found on My Leads page 	loglevel=NONE
	\	${ACT_Status_SH1}=		Get Text		//table[@id='DGLeadsReport']/tbody/tr[${Row}]/td[9]
	\	${ACT_Status_SH}=		Evaluate	str('${ACT_Status_SH1}').lower()
	\	Run Keyword If 		'${ACT_Status_SH}'=='None'			Fail			Unable to get value in Status column on My Leads Page. 
	\	${ACT_Status}=		Evaluate		str('${ACT_Status_SH}').strip()
	\	Append To List 		${Status_List}	${ACT_Status}
	
	Log List 	${Status_List}
	
	${len}= 	Get Length 		${Status_List}
	
	:For		${I}		IN RANGE	0		${len}
	\			${val}=		Get From List 		${Status_List}		${I}
	\			${val}=		Convert To String 	${val}
	\			${stat}=	Run Keyword And Return Status 	Should Be Equal As Strings		${val}		${Status}
	\			Run Keyword If 		'${stat}'=='False'		Exit For Loop
	
	[Return]		${stat}
	# Run Keyword If 		'${stat}'=='False'		Fail 		All records on My Leads Page don't have expected status: ${OriginalStatus}

Go To DealQueue And Filter By Dealer ID 	[Arguments]		${DEALERSHIPID}
	# Switch Dealership
	# ${DealerID}=	Set Variable 	${DealerID_Decision}
	
	${D_ID}=	Get Substring			${DealerID_Decision}		0		6
	
	Login to DT And Switch Dealership	${D_ID}
	
	# Navigate To DealQueue
	Navigate To DealQueue
	
	### temporary
	# Select Dealer ID in DD
	Search On DealQ using Dealer ID 	${DEALERSHIPID}
	
	
Compare Expected And Actual Lists Of Customers On DealQ Page		[Arguments]		${No_Apps}	${FirstNameDict}	${LastNameDict}		${MidNameDict}	#${COFirstNameDict}	${COLastNameDict}	
	
	# Read first 3 records to create actual list of customers shown
	${DealQList}=	Read Customers On DealQ Page 	${No_Apps}
	Log List 	${DealQList}
	
	# Creating Expected list
	${ExpectedCustList}=	Create List
	${len}=		Get Length		${FirstNameDict}
	# creating expected list of customers
	:FOR 	${I} 	IN RANGE 	0 	${len}
	\		${LS}= 	Get From List 	${LastNameDict}			${I}
	\		${FS}= 	Get From List 	${FirstNameDict}		${I}
	\		${MS}= 	Get From List 	${MidNameDict}			${I}
	\		${Exp}=		Catenate 	SEPARATOR=		${LS}	,	${FS}	
	\		${Exp}=		Run Keyword If 		'${MS}'!='${EMPTY}'	Catenate 	SEPARATOR=		${Exp}		${SPACE}	${MS}
	\		...			ELSE 				Set Variable 		${Exp}
	\		Append To List 			${ExpectedCustList}		${Exp}
	
	Log List 	${ExpectedCustList}
	
	Sort List 	${ExpectedCustList}
	Sort List 	${DealQList}
	
	Log List 	${ExpectedCustList}
	Log List 	${DealQList}
	
	# Validation to check that lists are same
	Lists Should Be Equal 		${ExpectedCustList}		${DealQList}		Expected and Actual list of Custemers is not equal on Deal Queue Page. Expected List: ${ExpectedCustList}. Actual List: ${DealQList}.
	
Search On DealQ using Dealer ID 	[Arguments]		${DEALERSHIPID}	
	Wait Until Page Contains Element            //iframe[@id='iFrm']
	Select Frame                                iFrm
	Wait Until Page Contains Element            //frame[@name='main']
	Select Frame                                main
	
	Wait Until Keyword Succeeds               60s      3s       Page Should Contain Element            //select[@id='cmbSearch']  			loglevel=NONE
	
	Select From List		//select[@id='cmbSearch']			Dealer ID
	sleep 	1s
	
	Input Text 		//input[@id='txtSearchValue']		${DEALERSHIPID}
	sleep 	1s
	
	Press Key 	//input[@id='btnSearch']		\\13
	sleep 		7s
	
	${text}=	Get Text 		//table[@id='dgDealQueue']/tbody/tr[2]/td[7]
	
	${DEALERSHIPID}= 	Convert To String	${DEALERSHIPID}
	${text}=			Convert To String	${text}
	${text}=			Evaluate		str('${text}').strip()
	Should Be Equal As Strings 		${text}		${DEALERSHIPID}		Search on Deal Queue page using Dealer ID is not successful.	values=False
	Unselect Frame
	
Read Customers On DealQ Page 	[Arguments]	${Cnt}
	Wait Until Page Contains Element            //iframe[@id='iFrm']
	Select Frame                                iFrm
	Wait Until Page Contains Element            //frame[@name='main']
	Select Frame                                main
	
	Wait Until Keyword Succeeds               60s      3s       Page Should Contain Element            //select[@id='cmbSearch']  			loglevel=NONE
	
	${CustList}=	Create List
	
	:FOR 	${I}	IN RANGE	2 	${Cnt}+${2}
	\		Wait Until Keyword Succeeds       60s      3s       Page Should Contain Element            //table[@id='dgDealQueue']/tbody/tr[${I}]/td[4]			loglevel=NONE
	\		${text}=	Get Text 	//table[@id='dgDealQueue']/tbody/tr[${I}]/td[4]
	\		Append To List 			${CustList}		${text}
	
	Log List 	${CustList}	
	Unselect Frame
	[Return]	${CustList}	
	
Make A List Of Decision Values
	
	# Create decision list
	${DesicionVals}=	Create List 	Approve		Decline 	Counter Offer
	${Expected_No_Decision}=	Get Length 		${DesicionVals}
	
	${DecisionList}=	Create List
	${J}=	Set Variable 	${0}
	
	:FOR 	${I}		IN RANGE	0					${No_Apps}
	\		${Req_Decision}=		Get From List 		${DesicionVals}		${J}
	\		Append To List 			${DecisionList}		${Req_Decision}
	\		${J}=					Evaluate 			${J}+1
	\		${J}=					Run Keyword If 		${J}==${Expected_No_Decision}			Set Variable 	0
	\		...						ELSE 				Set Variable 		${J}
	\		Log List 				${DecisionList}
	
	Log List 		${DecisionList}
	[Return]		${DecisionList}
	
Decision All The Apps 		[Arguments]		${DecisionList}		${DEALERID}
	${len}=		Get Length 		${DecisionList}
	
	:FOR 	${I}		IN RANGE	0					${len}
	\		${Req_Decision}=		Get From List 		${DecisionList}		${I}
	\		Decision Single Application			${I}	${Req_Decision}
	\		# Select Dealer ID in DD
	\		Search On DealQ using Dealer ID 	${DEALERID}
	
	
Decision Single Application			[Arguments]		${Row}	${Req_Decision}	
	
	# open application
	${counter}=		Evaluate 	${Row}+3	
	
	Unselect Frame
	Wait Until Page Contains Element            //iframe[@id='iFrm']
	Select Frame                                iFrm
	Wait Until Page Contains Element            //frame[@name='main']
	Select Frame                                main
	
	Wait Until Keyword Succeeds 	60s         3s       Page Should Contain Element       //table[@id='dgDealQueue']		Table is not found on Deal Queue Page.		loglevel=NONE
	
	${link_id}= 		Set Variable 		dgDealQueue_ctl
	${stat}=			Evaluate 			${counter}<10
	${link_id}=			Run Keyword If 		${stat}			Catenate 	SEPARATOR=		${link_id}		0
	...					ELSE 				Set Variable 	${link_id}
	
	${final_link_id}=	Catenate 		SEPARATOR=		${link_id}		${counter}_Hyperlink2
	
	# click on the app link
	# ${CustName}=	Get Text 	//a[@id='dgDealQueue_ctl0${counter}_Hyperlink2']
	${CustName}=	Get Text 	//a[@id='${final_link_id}']
	
	# This dictionary will be used at the time of validation on My Leads page.
	Set To Dictionary		${Customer_Decision_Dict}	${CustName}		${Req_Decision}	
	
	# Press Key 		//a[@id='dgDealQueue_ctl0${counter}_Hyperlink2']			\\13
	
	Press Key 		//a[@id='${final_link_id}']			\\13
	
	Unselect Frame 
	
	Run Keyword If		'${Req_Decision}'=='Approve'			Approve Application			Approve
	Run Keyword If		'${Req_Decision}'=='Counter Offer'		Approve Application			CounterOffer
	Run Keyword If		'${Req_Decision}'=='Decline'			Decline Application			
	
	Unselect Frame
	
Get Customers On My Leads Page In A List	[Arguments]		${CNT}	
	${Cust_List}=	Create List
	
	Unselect Frame
	Wait Until Page Contains Element            //iframe[@id='iFrm']
	Select Frame                                iFrm
	Wait Until Page Contains Element            //frame[@name='main']
	Select Frame                                main
	
	Wait Until Keyword succeeds     60      10      Page Should Contain Element           //table[@id='DGLeadsReport']/tbody/tr[2]/td[9]	Table is not found on My Leads page 	loglevel=NONE
	
	Log 			${CNT}
	${CNT1}=		Evaluate 		${CNT}+2
	
	:For		${Row}		IN RANGE	2			${CNT1}
	\	Log 	${Row}
	\	Wait Until Keyword succeeds     60      10      Page Should Contain Element           //table[@id='DGLeadsReport']/tbody/tr[${Row}]/td[3]	Table is not found on My Leads page 	loglevel=NONE
	\	${ACT_Cust_SH1}=		Get Text		//table[@id='DGLeadsReport']/tbody/tr[${Row}]/td[3]
	\	${ACT_Cust_SH}=		Evaluate	str('${ACT_Cust_SH1}').lower()
	\	Run Keyword If 		'${ACT_Cust_SH}'=='None'			Fail			Unable to get value in Applicant column on My Leads Page. 
	\	${ACT_Cust}=		Evaluate		str('${ACT_Cust_SH}').strip()
	\	Append To List 		${Cust_List}	${ACT_Cust}
	
	Log List 	${Cust_List}
	[Return] 	${Cust_List}
	
Get Data On My Leads Page In A List	[Arguments]		${No_Apps}	${Col}
	${Data_List}=	Create List
	
	Unselect Frame
	Wait Until Page Contains Element            //iframe[@id='iFrm']
	Select Frame                                iFrm
	Wait Until Page Contains Element            //frame[@name='main']
	Select Frame                                main
	sleep 										2s
	Wait Until Keyword succeeds     60      10      Page Should Contain Element           //table[@id='DGLeadsReport']/tbody	Table is not found on My Leads page 	loglevel=NONE
	
	# Log 			${CNT}
	# ${CNT1}=		Evaluate 		${CNT}+2
	
	Log 			${No_Apps}
	${CNT1}=		Evaluate 		${No_Apps}+2
	
	:For		${Row}		IN RANGE	2			${CNT1}
	\	Log 	${Row}
	\	Wait Until Keyword succeeds     60      10      Page Should Contain Element           //table[@id='DGLeadsReport']/tbody/tr[${Row}]/td[${Col}]		Table is not found on My Leads page 	loglevel=NONE
	\	${is_pass}=			Run Keyword And Return Status 		Get Text		//table[@id='DGLeadsReport']/tbody/tr[${Row}]/td[${Col}]
	\	Run Keyword If 		'${is_pass}'=='False'		Sleep 		2s
	\	Wait Until Keyword succeeds     60      10      Page Should Contain Element           //table[@id='DGLeadsReport']/tbody/tr[${Row}]/td[${Col}]		Table is not found on My Leads page 	loglevel=NONE
	\	${ACT_Cust_SH1}=		Get Text		//table[@id='DGLeadsReport']/tbody/tr[${Row}]/td[${Col}]
	\	${ACT_Cust_SH}=		Evaluate	str('${ACT_Cust_SH1}').lower()
	\	Run Keyword If 		'${ACT_Cust_SH}'=='None'			Fail			Unable to get value in Applicant column on My Leads Page. 
	\	${ACT_Cust}=		Evaluate		str('${ACT_Cust_SH}').strip()
	\	Append To List 		${Data_List}	${ACT_Cust}
	
	Log List 	${Data_List}
	[Return] 	${Data_List}
	
Verify Records And Status On My Leads Page 		[Arguments]		${Req_Status}
	
	# Check if the record is added to My Leads page
	${New_Record_Added}=		Run Keyword and Return Status		Go to My Lead Page and Confirm new Record Added
	Run Keyword If				${New_Record_Added}==False			Fail 	Record is not added on My Leads page after sending FD Credit App request. Please check.

	# wait till status of 1st record is changed
	Wait For Status On My Leads Page 	App Submitted
	
	Log 	${FirstNameDict}	
	Log 	${LastNameDict}
	
	# Validate all records are shown on My Leads Page
	Compare Expected And Actual Lists Of Customers On My Leads Page 	${No_Apps}	${FirstNameDict}	${LastNameDict}		${MidNameDict}
	
	# Validate status for those many rows
	${Return_Val}=		Validate Status On My Leads For Multiple Rows 		${CNT} 		${Req_Status}
	Run Keyword If 		'${Return_Val}'=='False'	sleep 	15s
	Run Keyword If 		'${Return_Val}'=='False'	Navigate Again To My Leads Page
	
	${Return_Val2}=		Run Keyword If 		'${Return_Val}'=='False'	Validate Status On My Leads For Multiple Rows 		${CNT} 		${Req_Status}
	Run Keyword If 		'${Return_Val2}'=='False'	Fail 	All records on My Leads Page don't have expected status: ${Req_Status}
	
	
Compare Expected And Actual Lists Of Customers On My Leads Page 	[Arguments]		${No_Apps}	${FirstNameDict}	${LastNameDict}		${MidNameDict}
	# Read first 3 records to create actual list of customers shown
	${CustList}=	Get Customers On My Leads Page In A List 	${No_Apps}
	Log List 		${CustList}
	Set Suite Variable 		${CustList}
	
	# Creating Expected list
	${ExpectedCustList}=	Create List
	${len}=		Get Length		${FirstNameDict}
	# creating expected list of customers
	:FOR 	${I} 	IN RANGE 	0 	${len}
	\		${LS}= 	Get From List 	${LastNameDict}			${I}
	\		${FS}= 	Get From List 	${FirstNameDict}		${I}
	# \		${MS}= 	Get From List 	${MidNameDict}			${I}
	\		${Exp}=		Catenate 	SEPARATOR=		${LS}	,		${SPACE}	${FS}
	\		${Exp1}=	Evaluate 	str('${Exp}').lower()
	\		Append To List 			${ExpectedCustList}		${Exp1}
	
	Log List 	${ExpectedCustList}
	
	Sort List 	${ExpectedCustList}
	Sort List 	${CustList}
	
	Log List 	${ExpectedCustList}
	Log List 	${CustList}
	
	# Validation to check that lists are same
	Lists Should Be Equal 		${ExpectedCustList}		${CustList}		Expected and Actual list of Custemers is not equal on My Leads Page. Expected List: ${ExpectedCustList}. Actual List: ${CustList}.
	
Validate Decision On My Leads Page
	# Switch to dealership.
	Dealer Switch To Dealer 	${DEALERSHIPID}	
	
	# Navigate to My Leads page
	Navigate To My Leads
	
	Log Dictionary		${Customer_Decision_Dict}
	
	${keys}= 	Get Dictionary Keys 	${Customer_Decision_Dict}
	${values}=	Get dictionary Values 	${Customer_Decision_Dict}
	
	# Creating list ${Cust_Dec_Dict} which has keys as lower case
	${Cust_Dec_Dict}=	Create Dictionary
	${len}=		Get Length 		${keys}
	:FOR 	${I} 	IN RANGE 	0 	${len}
	\		${key_val}=		Get From List 	${keys}		${I}
	\		${key_val1}=	Evaluate 		str('${key_val}').lower()
	\		${val_val}=		Get From List 	${values}		${I}
	\		${val_val1}=	Evaluate 		str('${val_val}').lower()
	\		# middle name changes. Remove if present
	\		${stat}=		Run Keyword And Return Status 	Should Contain 		${key_val1}		${SPACE}
	\		${temp}=		Run Keyword If 		'${stat}'=='True'	Evaluate	str('${key_val1}')[:-2]
	\		...				ELSE 				Set Variable 		${EMPTY}
	\		${key_val1}=	Run Keyword If 		'${stat}'=='True'	Set Variable	${temp}
	\		...				ELSE				Set Variable 		${key_val1}	
	\		Set To Dictionary	${Cust_Dec_Dict}	${key_val1}		${val_val1}
	\		Log Dictionary		${Cust_Dec_Dict}
	
	# final dictionary with lower case cust names and decision
	Log Dictionary		${Cust_Dec_Dict}
	
	######################
	# Creating list of actual customer names shown
	${CustList}=	Get Data On My Leads Page In A List		${No_Apps}		3
	Log List 		${CustList}
	
	# creating list by removing space between Last name and First Name.
	${CustList1}=	Create List
	${len}=		Get Length 		${CustList}
	:FOR 	${I} 	IN RANGE 	0 	${len}
	\		${val}=		Get From List 	${CustList}		${I}
	\		${val1}=	Replace String	${val}	${SPACE}	${EMPTY}
	\		Append To List 		${CustList1}		${val1}
	
	# Final UI list of customer names with no space
	Log List 	${CustList1}
	
	# creating a list of Lead Types shown on UI
	${LeadTypeList}=	Get Data On My Leads Page In A List		${No_Apps}		6
	Log List 		${LeadTypeList}
	
	# validate customer and its decision
	${len}=		Get Length 		${CustList}
	
	:FOR 	${I} 	IN RANGE 	0 	${len}
	\		${Name1}=			Get From List 	${CustList1}			${I}
	\		${Name}=			Evaluate 		str('${Name1}').lower()
	\		${Decision1}=		Get From List 	${LeadTypeList}		${I}
	\		${Decision}=		Evaluate 		str('${Decision1}').lower()
	\		${Exp_Decision}=	Get From Dictionary			${Cust_Dec_Dict}	${Name}
	\		Run Keyword And Continue On Failure 	Run Keyword If 		'${Exp_Decision}'=='approve' 	Should Be Equal As Strings 		${Decision}		approved	Expected and Actual Decision do not match for Applicant: ${Name1}. Expected decision: Approved. Actual decision: ${Decision1}.		values=False
	\		Run Keyword And Continue On Failure 	Run Keyword If 		'${Exp_Decision}'=='decline' 	Should Be Equal As Strings 		${Decision}		declined	Expected and Actual Decision do not match for Applicant: ${Name1}. Expected decision: Declined. Actual decision: ${Decision1}.		values=False
	\		Run Keyword And Continue On Failure 	Run Keyword If 		'${Exp_Decision}'=='counter offer' 	Should Be Equal As Strings 		${Decision}		counter offer	Expected and Actual Decision do not match for Applicant: ${Name1}. Expected decision: Counter Offer. Actual decision: ${Decision1}.		values=False
	
	
Go To Deal Queue And Decision Apps 		[Arguments]		${DEALERID}
	
	# Now going for decision
	${DealerID_Decision}=	Get From Dictionary		${Scenario Setup}		DealerID Decision
	Set Suite Variable 		${DealerID_Decision}	
	
	# Search by Dealer Id on DealQ page
	Go To DealQueue And Filter By Dealer ID		${DEALERID}
	
	# temporary
	# Compare customers from apps sent and records on DealQ page
	Compare Expected And Actual Lists Of Customers On DealQ Page		${No_Apps}	${FirstNameDict}	${LastNameDict}		${MidNameDict}
	
	# Making a list of decisions to be taken on the apps. The sequence Approve, Decline, Counter Offer will be followed on apps sequentially.
	${DecisionList}= 	Make A List Of Decision Values

	${Customer_Decision_Dict}= 		Create Dictionary
	Set Suite Variable 		${Customer_Decision_Dict}
	
	# Decisioning the Apps
	Decision All The Apps 		${DecisionList}		${DEALERID}
	Log Dictionary				${Customer_Decision_Dict}
		
Tear Down Decision
	Log Dictionary		${Global_Dict}
	Log Dictionary		${Customer_Decision_Dict}
	
	${keys}= 	Get Dictionary Keys 	${Customer_Decision_Dict}
	${values}=	Get dictionary Values 	${Customer_Decision_Dict}
	
	${Cust_Dec_Dict}=	Create Dictionary
	${len}=		Get Length 		${keys}
	:FOR 	${I} 	IN RANGE 	0 	${len}
	\		${key_val}=		Get From List 	${keys}		${I}
	\		${key_val1}=	Evaluate 		str('${key_val}').lower()
	\		${val_val}=		Get From List 	${values}		${I}
	\		${val_val1}=	Evaluate 		str('${val_val}').lower()
	\		# middle name changes. Remove if present
	\		${stat}=		Run Keyword And Return Status 	Should Contain 		${key_val1}		${SPACE}
	\		${temp}=		Run Keyword If 		'${stat}'=='True'	Evaluate	str('${key_val1}')[:-2]
	\		...				ELSE 				Set Variable 		${EMPTY}
	\		${key_val1}=	Run Keyword If 		'${stat}'=='True'	Set Variable	${temp}
	\		...				ELSE				Set Variable 		${key_val1}	
	\		Set To Dictionary	${Cust_Dec_Dict}	${key_val1}		${val_val1}
	\		Log Dictionary 		${Cust_Dec_Dict}
	
	# final dictionary with lower case cust names and decision
	Log Dictionary		${Cust_Dec_Dict}
	
	${len}=		Get Length 		${Global_Dict}
	
	:FOR 	${I}	IN RANGE 	0	${len}
	\		Set Test Message 	\n---------------	append=yes
	\		Set Test Message 	\nReq: ${I+1}		append=yes
	\		${req_dict}=	Get From Dictionary		${Global_Dict}		${I}
	\		Log Details Dict To Report 		${req_dict}
	\		${stat}=			Run Keyword And Return status 	Get From Dictionary		${req_dict}		Prequal REF
	\		${Prequal REF}=		Run Keyword If 		${stat}		Get From Dictionary		${req_dict}		Prequal REF
	\		...					ELSE 				Set Variable 	${EMPTY}
	\		Set Test Message 	\nPrequal REF: ${Prequal REF}		append=yes
	
	\		${stat}=			Run Keyword And Return status 	Get From Dictionary		${req_dict}		Lead REF
	\		${Lead REF}=		Run Keyword If 		${stat}		Get From Dictionary		${req_dict}		Lead REF
	\		...					ELSE 				Set Variable 	${EMPTY}
	\		Set Test Message 	\nLead REF: ${Lead REF}		append=yes
	
	\		${stat}=			Run Keyword And Return status 	Get From Dictionary		${req_dict}		App REF
	\		${App REF}=			Run Keyword If 		${stat}		Get From Dictionary		${req_dict}		App REF
	\		...					ELSE 				Set Variable 	${EMPTY}
	\		Set Test Message 	\nAPP REF: ${App REF}		append=yes
	
	\		${stat}=			Run Keyword And Return status 	Get From Dictionary		${req_dict}		Partner REF
	\		${Partner REF}=		Run Keyword If 		${stat}		Get From Dictionary		${req_dict}		Partner REF
	\		...					ELSE 				Set Variable 	${EMPTY}
	\		Set Test Message 	\nPartner REF: ${Partner REF}		append=yes
	
	\		${stat}=			Run Keyword And Return status 	Get From Dictionary		${req_dict}		TPP_DT_APP_ID
	\		${TPP_APP_ID}=		Run Keyword If 		${stat}		Get From Dictionary		${req_dict}		TPP_DT_APP_ID
	\		...					ELSE 				Set Variable 	${EMPTY}
	\		Set Test Message 	\nTPP_DT_APP_ID: ${TPP_APP_ID}		append=yes
	
	\		${LAST NAME}=		Get From Dictionary		${req_dict}		Last Name
	\		Set Test Message 	\nLast Name: ${LAST NAME}		append=yes
	
	\		${First Name}=		Get From Dictionary		${req_dict}		First Name
	\		Set Test Message 	\nFirst Name: ${First Name}		append=yes
	
	\		${temp_name}=		Catenate 	SEPARATOR=		${LAST NAME}	,	${First Name}
	\		${temp_name}=		Evaluate 		str('${temp_name}').lower()
	\		${stat}=			Run Keyword And Return Status 	Get From Dictionary 		${Cust_Dec_Dict}		${temp_name}
	\		${dictval}=			Run Keyword If 		${stat}		Get From Dictionary 		${Cust_Dec_Dict}		${temp_name}
	\		...					ELSE 				Set Variable 		${EMPTY}
	\		Set Test Message 	\nDecision: ${dictval}		append=yes

Get Data On Customer Archive Page In A List	[Arguments]		${No_Apps}	${Col}
	${Data_List}=	Create List
	
	Unselect Frame
	Wait Until Page Contains Element            //iframe[@id='iFrm']
	Select Frame                                iFrm
	Wait Until Page Contains Element            //frame[@name='main']
	Select Frame                                main
	
	Wait Until Keyword succeeds     60      10      Page Should Contain Element           //table[@id='DataGridArchive']/tbody		Table is not found on Customer Archive page 	loglevel=NONE
	
	Log 			${No_Apps}
	${CNT1}=		Evaluate 		${No_Apps}+2
	
	:For		${Row}		IN RANGE	2			${CNT1}
	\	Log 	${Row}
	\	Wait Until Keyword succeeds     60      10      Page Should Contain Element           //table[@id='DataGridArchive']/tbody/tr[${Row}]/td[${Col}]		Table is not found on Customer Archive page 	loglevel=NONE
	\	${ACT_Cust_SH1}=		Get Text		//table[@id='DataGridArchive']/tbody/tr[${Row}]/td[${Col}]
	\	${ACT_Cust_SH}=		Evaluate	str('${ACT_Cust_SH1}').lower()
	\	Run Keyword If 		'${ACT_Cust_SH}'=='None'			Fail			Unable to get value in Applicant column on Customer Archive Page. 
	\	${ACT_Cust}=		Evaluate		str('${ACT_Cust_SH}').strip()
	\	Append To List 		${Data_List}	${ACT_Cust}
	
	Log List 	${Data_List}
	[Return] 	${Data_List}
	

Customer Archive Page Validation For CBWS Service
	[Documentation]		This kw uses ${Merged_Dict} as Expected data and then compares this data against UI
	
	# ${Merged_Dict} contains all data version wise
	Log 	${Merged_Dict}
	
	${keys}= 	Get Dictionary Keys 	${Merged_Dict}
	${values}=	Get dictionary Values 	${Merged_Dict}
	Log List 	${keys}
	Log List 	${values}
	
	# Getting count of records. This is total count of xmls send.
	# It navigates through all records per version and gets the count
	# this count is used to read UI records
	${len}=				Get Length 		${values}
	${Final_Cnt}=		Set Variable 	0
	
	:FOR 	${I} 	IN RANGE 	0 		${len}
	\		${dict1}=	Get From Dictionary		${values}	${I}
	\		Log Dictionary 		${dict1}
	\		${Count_Rec}=		Get Length 		${dict1}
	\		${Final_Cnt}=		Evaluate	${Final_Cnt}+${Count_Rec}
	
	Log 	${Final_Cnt}
	
	# Making list of records shown on UI
	${Cust_List}=		Get Data On Customer Archive Page In A List		${Final_Cnt}		2	
	Log List 			${Cust_List}
	Set Suite Variable 	${Cust_List}
	
	${cnt}= 	Get Length 		${keys}		# count of versions
	# Now all dictionary data is compared with UI 
	:FOR 	${I}		IN RANGE 	0 		${cnt}
	\		${key}=					Get From List 			${keys}			${I}
	\		# Getting all details for all records version wise. ${key} contains version number.
	\		${Dict_Records}=		Get From Dictionary		${Merged_Dict}	${key}	
	\		# Now validate individual record with UI
	\		Validate Dictionary Data With Customer Archive UI	 ${Dict_Records}	${Cust_List}	
	

Validate Customer Archive Page 			[Arguments]		${Global_Dict}		${List_CustArchive}	

	WriteToFile			${logfile}			Y		Validate Customer Archive Page>>>
	
	Sleep 	5s
	# Unselect Frame
	# Navigate to the Page
	# Navigate To Customer Archive
	
	Log Dictionary 		${Global_Dict}
	Log List 			${List_CustArchive}	
	
	${len}=		Get Length		${List_CustArchive}
	
	${IDOFAC_Bubble_Dict}=		Create Dictionary
	Set Suite Variable 			${IDOFAC_Bubble_Dict}
	
	# Making list of records shown on UI
	${Cust_List}=		Get Data On Customer Archive Page In A List		${len}		2	
	Log List 			${Cust_List}
	Set Suite Variable 	${Cust_List}
	
	
	######## Co-App list
	${UI_CoAppList}= 	Get Data On Customer Archive Page In A List		${len}		3
	Log List 			${UI_CoAppList}
	Set Suite Variable 	${UI_CoAppList}
	
	# ${len}=		Get Length		${List_CustArchive}
	
	:FOR 	${I} 	IN RANGE 	0 		${len}
	\		${Index1}		Get From List 	${List_CustArchive}	${I}
	\		${Index}=		Convert To Integer 		${Index1}
	\		${dict}=		Get From Dictionary 	${Global_Dict}		${Index}
	\		Validate Dictionary Data With Customer Archive UI	 ${dict}	${Cust_List}	${UI_CoAppList}		${Index}
	
	# Log Dictionary 		${IDOFAC_Bubble_Dict}		WARN
	WriteToFile			${logfile}			Y		-----------------
	WriteToFile			${logfile}			Y		@IDOFAC_Bubble_Dict=${IDOFAC_Bubble_Dict}
	
# Validate Dictionary Data With Customer Archive UI	 [Arguments]	${Dict_Records}		${Cust_List}	
	# Log 	${Dict_Records}	
	# Log 	${Cust_List}
	# ${len}=		Get Length 		${Dict_Records}		# no of xmls per verion
	
	# # below loops iterates through all record entries for particular version
	# :FOR 	${I}				IN RANGE 				0 		${len}
	# \		# get individual record - xml data
	# \		${Record}=			Get From Dictionary		${Dict_Records}		${I}
	# \		Log Dictionary 		${Record}
	# \		${AppFirstName}=	Get From Dictionary		${Record}		First Name
	# \		${AppLastName}=		Get From Dictionary		${Record}		Last Name
	# \		${AppNameSH}=		Catenate 		SEPARATOR=		${AppLastName}		,		${SPACE}		${AppFirstName}
	# \		${AppName}=			Evaluate 		str('${AppNameSH}').lower()	
	# \		# get row no for particular record
	# \		${Indx}=			Get Index From List 		${Cust_List}	${AppName}
	# \		Run Keyword If 		'${Indx}'=='-1'	Fail 		No new record is found on UI for ${AppName}
	# \		# ignore 1st 2 rows. Row no starts with 1 and first row is headers row.
	# \		${Row_No}=			Evaluate 		${Indx}+2
	# \		# now record details are compared with all columns of that UI row. 
	# \		Verify Columns On Customer Archive Page For Row 	${Row_No}	${Record}

Validate Dictionary Data With Customer Archive UI	 [Arguments]	${Dict_Records}		${Cust_List}		${UI_CoAppList}		${Index}
	Log 	${Dict_Records}	
	Log 	${Cust_List}
	${len}=		Get Length 		${Dict_Records}		# no of xmls per verion
	
	# Applicant List
	${AppFirstName}=	Get From Dictionary		${Dict_Records}		First Name
	${AppLastName}=		Get From Dictionary		${Dict_Records}		Last Name
	${AppMidName}=		Get From Dictionary		${Dict_Records}		Middle Name
	${AppNameSH}=		Catenate 		SEPARATOR=		${AppLastName}		,		${SPACE}		${AppFirstName}
	${AppNameSH}=		Run Keyword If 	'${AppMidName}'!='${EMPTY}' 	Catenate 		SEPARATOR=		${AppNameSH}	${SPACE}	${AppMidName}	.
	...					ELSE 			Set Variable 	${AppNameSH}
	${AppName}=			Evaluate 		str('${AppNameSH}').lower()	
	
	# Co-App List
	${COAppFirstName}=	Get From Dictionary		${Dict_Records}		CoApp First Name
	${COAppLastName}=	Get From Dictionary		${Dict_Records}		CoApp Last Name
	${COAppMidName}=	Get From Dictionary		${Dict_Records}		CoApp Middle Name
	${COAppNameSH}=		Run Keyword If 	'${COAppLastName}'!='${EMPTY}'	Catenate 		SEPARATOR=		${COAppLastName}		,		${SPACE}		${COAppFirstName}
	...					ELSE		Set Variable 	${EMPTY}
	${COAppNameSH}=		Run Keyword If 	'${COAppLastName}'!='${EMPTY}' and '${COAppMidName}'!='${EMPTY}' 	Catenate 		SEPARATOR=		${COAppNameSH}	${SPACE}	${COAppMidName}		.
	...					ELSE 			Set Variable 	${COAppNameSH}
	${COAppName}=		Evaluate 		str('${COAppNameSH}').lower()	
	
	${CNT_MATCH}= 	Get Match Count 		${Cust_List}	${AppName}	
	
	# get row no for particular record
	${Indx}=			Get Index From List 			${Cust_List}	${AppName}
	${Indx}=			Convert To Integer				${Indx}
	Run Keyword If 		'${Indx}'=='-1'		Fail 		No new record is found on UI for ${AppName}
	
	# Get Co-App 
	${Indx_COAPP}=		Get Index From List 			${UI_CoAppList}		${COAppName}
	${Indx_COAPP}=		Convert To Integer				${Indx_COAPP}
	
	${temp}=			Evaluate 		${Indx}+1 
	${stat}=			Run Keyword And Return Status 	Should Be Equal 	${Indx}		${Indx_COAPP}
	
	${Slice_AppNameList}= 	Run Keyword If 		'${stat}'!='True'		Get Slice From List 	${Cust_List}	${temp}		
	...						ELSE 				Set Variable 			${EMPTY}
	${NWIndx}=				Run Keyword If 		'${stat}'!='True'		Get Index From List 	${Slice_AppNameList}	${AppName}
	...						ELSE 				Set Variable 			${EMPTY}
	
	${RW_Index}=			Run Keyword If 		'${stat}'!='True'		Evaluate 	${Indx}+${NWIndx}+1
	...						ELSE 				Set Variable 			${EMPTY}
	
	${NewIndexAPPName}=		Run Keyword If 		'${stat}'!='True'		Get From List 	${Cust_List}	${RW_Index}
	...						ELSE 				Set Variable 			${EMPTY}
	
	${Match2Stat}=			Run Keyword And Return Status 				Should Be Equal 	${AppName}		${NewIndexAPPName}
	
	
	${Row_No}=				Run Keyword If 		'${stat}'!='True' and '${Match2Stat}'=='True' 	Evaluate 		${RW_Index}+2
	...						ELSE				Evaluate 		${Indx}+2
	
	
	Run Keyword And Continue On Failure 	Run Keyword If 			'${stat}'!='True' and '${Match2Stat}'!='True'		Fail 		There are more than 2 records with same Applicant Name and Co-applicant Name. Unable to decide the row to be validated. Applicant Name:${AppNameSH}. Co-applicant Name: ${COAppNameSH} 
	
	# ignore 1st 2 rows. Row no starts with 1 and first row is headers row.
	# ${Row_No}=			Evaluate 		${Indx}+2
	# now record details are compared with all columns of that UI row. 
	Verify Columns On Customer Archive Page For Row 	${Row_No}	${Dict_Records}		${Index}

	
Verify Columns On Customer Archive Page For Row 	[Arguments]		${Row_No}	${Record}	${Index}

	WriteToFile			${LogFile}				Y			Verify Columns On Customer Archive Page For Row>>>

	Log 	${Row_No}
	Log 	${Record}
	${Row}= 	Set Variable 	${Row_No}
	
	${TransCode1}=		Get From Dictionary 	${Record}		TransCode
	${TransCode}=		Convert To Integer 		${TransCode1}
	
	# Read data from UI for the row
	Unselect Frame
	
	Wait Until Page Contains Element            //iframe[@id='iFrm']
	Select Frame                                iFrm
	Wait Until Page Contains Element            //frame[@name='main']
	Select Frame                                main
	
	Wait Until Keyword Succeeds       120s    3s         Page Should Contain Element            //table[@id='DataGridArchive']	
	
	# read date
	${ROW}=		Convert To Integer		${ROW}
	# Get today's date
	${EXPDATE}=		Get Current Date			
	Set Test Variable	${EXPDATE}
	
	# Date
	Wait Until Keyword Succeeds      120s          3s        Page Should Contain Element        //table[@id='DataGridArchive']/tbody/tr[${ROW}]/td[1]		Element not found:Date in table		loglevel=NONE
	Wait Until Page Contains Element		//table[@id='DataGridArchive']/tbody/tr[${ROW}]/td[1]		10s
	# # # # Wait Until Element Is Visible			//table[@id='DataGridArchive']/tbody/tr[${ROW}]/td[1]		10s
	${ACT_DATE_SH}=		Get Text		//table[@id='DataGridArchive']/tbody/tr[${ROW}]/td[1]
	Run Keyword If 		'${ACT_DATE_SH}'=='None'			Fail			Unable to get value in Date column on Customer Archive Page. 
	${ACT_DATE}=		Evaluate		str('${ACT_DATE_SH}').strip()
	Should Be Equal As Strings			${EXPDATE}			${ACT_DATE}		Comparision of Date failed on Customer Archive page. Expected value: ${EXPDATE}. Actual Value: ${ACT_DATE}. 		values=False
	
	##############################################
	# Applicant Name validation
	# Expected Name
	${AppFirstName}=	Get From Dictionary		${Record}		First Name
	${AppLastName}=		Get From Dictionary		${Record}		Last Name
	${AppMidName}=		Get From Dictionary		${Record}		Middle Name
	
	${AppNameSH}=		Catenate 		SEPARATOR=		${AppLastName}		,		${SPACE}		${AppFirstName}		
	${AppNameSH}=		Run Keyword If 	'${AppMidName}'!='${EMPTY}'		Catenate 		SEPARATOR=		${AppNameSH}	${SPACE}	${AppMidName}	.
	...					ELSE 		Set Variable 		${AppNameSH}
	${AppName}=			Evaluate 		str('${AppNameSH}').lower()	
	
	${ApplicantName}=	Set Variable 	${AppNameSH}
	
	# Log 	*********************************	warn
	# Log 	Applicant : ${ApplicantName}	warn
	WriteToFile			${LogFile}				Y			*********************************	
	WriteToFile			${LogFile}				Y			Applicant: ${ApplicantName}	
	
	# Actual name from UI
	############
	# ${DELAY}=		Set Variable	90
	# ${TIME_FRACTION}=	Set Variable	5
	
	# ${COUNT}			Evaluate				${DELAY}/${TIME_FRACTION}
	# ${COUNT}			Convert To Integer		${COUNT}
	# ${SCAN}				Set Variable			0

	# Wait Until Keyword Succeeds    120s    3s    Page Should Contain Element    //table[@id='DataGridArchive']/tbody/tr[${ROW}]/td[2]/a    Applicant name is not shown on Customer Archive Page.    loglevel=NONE
	# :For		${LOOP}		IN RANGE	1			${COUNT} + 1
	# \	Sleep				${TIME_FRACTION}s
	# \	Wait Until Page Contains Element		//table[@id='DataGridArchive']/tbody/tr[${ROW}]/td[2]/a		10s
	# \	${ACT_APPLICANT}=		Get Text		//table[@id='DataGridArchive']/tbody/tr[${ROW}]/td[2]/a
	# \	${ACT_NAME}=		Evaluate		str('${ACT_APPLICANT}').strip()
	# \	${ACT_NAME}=		Evaluate		str('${ACT_APPLICANT}').lower()
	# \	${EXEC_STATUS}=		Run Keyword And Return Status 	Should Be Equal 	${AppName}		${ACT_NAME} 	Comparision of Applicant Name failed. Expected name: ${AppName}. Actual Name: ${ACT_NAME}.		values=False
	# \   ${SCAN}				Evaluate			${SCAN} + 1
	# \ 	Run Keyword If		'${EXEC_STATUS}'=='True' 		Exit For Loop
	# \	...		ELSE		Navigate Again To Customer Archive Page
	
	# Run Keyword And Continue On Failure 	Run Keyword If		'${EXEC_STATUS}'!='True'	Fail 	Comparision of Applicant Name failed. Expected value: ${AppName}. Actual Value: ${ACT_NAME}. Please make sure that FD - Credit Bureau Web Service is working fine as the expected record is not shown on Customer Archive page.
	
	Wait Until Page Contains Element		//table[@id='DataGridArchive']/tbody/tr[${ROW}]/td[2]/a		10s
	${ACT_APPLICANT}=		Get Text		//table[@id='DataGridArchive']/tbody/tr[${ROW}]/td[2]/a
	${ACT_NAME}=		Evaluate		str('${ACT_APPLICANT}').strip()
	${ACT_NAME}=		Evaluate		str('${ACT_APPLICANT}').lower()
	${EXEC_STATUS}=		Run Keyword And Return Status 	Should Be Equal 	${AppName}		${ACT_NAME} 	Comparision of Applicant Name failed. Expected name: ${AppName}. Actual Name: ${ACT_NAME}.		values=False
	Run Keyword And Continue On Failure 	Run Keyword If		'${EXEC_STATUS}'!='True'	Fail 	Comparision of Applicant Name failed. Expected value: ${AppName}. Actual Value: ${ACT_NAME}. Please make sure that FD - Credit Bureau Web Service is working fine as the expected record is not shown on Customer Archive page.
	
	##############################################
	# Co-Applicant Name validation
	# Expected Name
	${CoAppFirstName}=	Get From Dictionary		${Record}		CoApp First Name
	${CoAppLastName}=		Get From Dictionary		${Record}		CoApp Last Name
	${CoAppMidName}=		Get From Dictionary		${Record}		CoApp Middle Name
	
	${CoAppNameSH}=		Run Keyword If 		'${CoAppFirstName}'!='${EMPTY}'		Catenate 		SEPARATOR=		${CoAppLastName}		,		${SPACE}		${CoAppFirstName}
	...					ELSE 			Set Variable 	${EMPTY}
	
	${CoAppNameSH}=		Run Keyword If 		'${CoAppFirstName}'!='${EMPTY}' and '${CoAppMidName}'!='${EMPTY}'	Catenate 		SEPARATOR=		${CoAppNameSH}		${SPACE}	${CoAppMidName}		.
	...					ELSE			Set Variable 	${CoAppNameSH}
	
	${CoAppName}=			Evaluate 		str('${CoAppNameSH}').lower()	
	
	# Actual name from UI
	
	# ${DELAY}=		Set Variable	90
	# ${TIME_FRACTION}=	Set Variable	5
	
	# ${COUNT}			Evaluate				${DELAY}/${TIME_FRACTION}
	# ${COUNT}			Convert To Integer		${COUNT}
	# ${SCAN}				Set Variable			0

	# Wait Until Keyword Succeeds    120s    3s    Page Should Contain Element    //table[@id='DataGridArchive']/tbody/tr[${ROW}]/td[3]/a    Applicant name is not shown on Customer Archive Page.    loglevel=NONE
	# :For		${LOOP}		IN RANGE	1			${COUNT} + 1
	# \	Sleep				${TIME_FRACTION}s
	# \	Wait Until Page Contains Element		//table[@id='DataGridArchive']/tbody/tr[${ROW}]/td[3]/a		10s
	# \	${ACT_APPLICANT}=		Get Text		//table[@id='DataGridArchive']/tbody/tr[${ROW}]/td[3]/a
	# \	${ACT_NAME}=		Evaluate		str('${ACT_APPLICANT}').strip()
	# \	${ACT_NAME}=		Evaluate		str('${ACT_APPLICANT}').lower()
	# \	${EXEC_STATUS}=		Run Keyword And Return Status 	Should Be Equal 	${CoAppName}		${ACT_NAME} 	Comparision of Co-Applicant Name failed for ${AppName}. Expected name: ${CoAppName}. Actual Name: ${ACT_NAME}.		values=False
	# \   ${SCAN}				Evaluate			${SCAN} + 1
	# \ 	Run Keyword If		'${EXEC_STATUS}'=='True' 		Exit For Loop
	# \	...		ELSE		Navigate Again To Customer Archive Page
	
	# Run Keyword And Continue On Failure 	Run Keyword If		'${EXEC_STATUS}'!='True'	Fail 	Comparision of Co-Applicant Name failed for ${AppName}. Expected value: ${CoAppName}. Actual Value: ${ACT_NAME}. 	#Please make sure that FD - Credit Bureau Web Service is working fine as the expected record is not shown on Customer Archive page.
	
	
	Wait Until Page Contains Element		//table[@id='DataGridArchive']/tbody/tr[${ROW}]/td[3]/a		10s
	${ACT_APPLICANT}=		Get Text		//table[@id='DataGridArchive']/tbody/tr[${ROW}]/td[3]/a
	${ACT_NAME}=		Evaluate		str('${ACT_APPLICANT}').strip()
	${ACT_NAME}=		Evaluate		str('${ACT_APPLICANT}').lower()
	${EXEC_STATUS}=		Run Keyword And Return Status 	Should Be Equal 	${CoAppName}		${ACT_NAME} 	Comparision of Co-Applicant Name failed for ${AppName}. Expected name: ${CoAppName}. Actual Name: ${ACT_NAME}.		values=False
	Run Keyword And Continue On Failure 	Run Keyword If		'${EXEC_STATUS}'!='True'	Fail 	Comparision of Co-Applicant Name failed for ${AppName}. Expected value: ${CoAppName}. Actual Value: ${ACT_NAME}. 	#Please make sure that FD - Credit Bureau Web Service is working fine as the expected record is not shown on Customer Archive page.
	
	
	##############################################
	sleep 		2s
	
	# Credit Score validation
	# ${DELAY}=		Set Variable	30	#60
	# ${TIME_FRACTION}=	Set Variable	5
	
	# ${COUNT}			Evaluate				${DELAY}/${TIME_FRACTION}
	# ${COUNT}			Convert To Integer		${COUNT}
	# ${SCAN}				Set Variable			0
	
	# Wait Until Keyword Succeeds    60s    3s    Page Should Contain Element    //table[@id='DataGridArchive']/tbody/tr[${ROW}]/td[4]/span    Credit score is not shown on Customer Archive Page.    loglevel=NONE
	# :For		${LOOP}		IN RANGE	1			${COUNT} + 1
	# \	Sleep				${TIME_FRACTION}s	
	# \	Wait Until Page Contains Element		//table[@id='DataGridArchive']/tbody/tr[${ROW}]/td[4]/span		10s
	# \	${SCORE1}=		Get Text		//table[@id='DataGridArchive']/tbody/tr[${ROW}]/td[4]/span
	# \	${SCORE1}=		Run Keyword If		'${SCORE1}'=='None'		Set Variable		${EMPTY}		ELSE		Set Variable	${SCORE1}
	# \	@{SCORE1_LIST}=		Run Keyword If		'${SCORE1}'!= '${EMPTY}'		Split String		${SCORE1}			-		ELSE		Set Variable		${EMPTY}		${EMPTY}
	# \	${SCORE1_NAME}=			Get From List		${SCORE1_LIST}		0
	# \	Set Test Variable		${SCORE1_NAME}
	# \	${CREDIT_SCORE}=		Get From List		${SCORE1_LIST}		1		
	# \	Convert To String		${CREDIT_SCORE}
	# \	Set Test Variable		${CREDIT_SCORE}
	# \	${EXEC_STATUS1}=		Run Keyword And Continue On Failure			Run Keyword If 		'${CREDIT_SCORE}'!='${EMPTY}'	Set Variable	True	ELSE	Set Variable	False
	# \   ${SCAN}				Evaluate			${SCAN} + 1
	# \ 	Run Keyword If		'${EXEC_STATUS1}'=='True'							Exit For Loop
	# \	...		ELSE		Navigate Again To Customer Archive Page
	
	
	Wait Until Page Contains Element		//table[@id='DataGridArchive']/tbody/tr[${ROW}]/td[4]/span		10s
	${SCORE1}=		Get Text		//table[@id='DataGridArchive']/tbody/tr[${ROW}]/td[4]/span
	${SCORE1}=		Run Keyword If		'${SCORE1}'=='None'		Set Variable		${EMPTY}		ELSE		Set Variable	${SCORE1}
	@{SCORE1_LIST}=		Run Keyword If		'${SCORE1}'!= '${EMPTY}'		Split String		${SCORE1}			-		ELSE		Set Variable		${EMPTY}		${EMPTY}
	${SCORE1_NAME}=			Get From List		${SCORE1_LIST}		0
	Set Test Variable		${SCORE1_NAME}
	${CREDIT_SCORE}=		Get From List		${SCORE1_LIST}		1		
	Convert To String		${CREDIT_SCORE}
	Set Test Variable		${CREDIT_SCORE}
	
	sleep 	2s
	Capture Page Screenshot 
	
	########## Logging ##########
	Run Keyword And Continue On Failure 	Run Keyword If 		'${SCORE1_NAME}'=='${EMPTY}'	Log  	Bureau name is not shown in first score column on Customer Archive page for ${ApplicantName}.  	WARN
	# Log 	Bureau 1: ${SCORE1_NAME}. Score: ${CREDIT_SCORE}	WARN
	WriteToFile			${LogFile}				Y			Bureau 1: ${SCORE1_NAME}. Score: ${CREDIT_SCORE}
	
	# Score2 and Score3
	Wait Until Page Contains Element		//table[@id='DataGridArchive']		10s
	Log 		${ROW}		
	
	Run Keyword And Ignore Error 	Wait Until Page Contains Element		//table[@id='DataGridArchive']/tbody/tr[${ROW}]/td[5]/span		10s
	${stat2}=		Run Keyword And Return Status 	Get Text		//table[@id='DataGridArchive']/tbody/tr[${ROW}]/td[5]/span
	${SCORE2}=		Run Keyword If 		'${stat2}'=='True'	Get Text		//table[@id='DataGridArchive']/tbody/tr[${ROW}]/td[5]/span
	...				ELSE 		Set Variable 	${EMPTY}
	${SCORE2}=		Run Keyword If		'${SCORE2}'=='None'		Set Variable		${EMPTY}		ELSE		Set Variable	${SCORE2}
	@{SCORE2_LIST}=		Run Keyword If		'${SCORE2}'!= '${EMPTY}'		Split String		${SCORE2}			-		ELSE		Set Variable		${EMPTY}		${EMPTY}
	${SCORE2_NAME}=			Get From List		${SCORE2_LIST}		0
	${CREDIT_SCORE2}=		Get From List		${SCORE2_LIST}		1		
	
	########## Logging ##########
	# Run Keyword And Continue On Failure 	Run Keyword If 		'${SCORE2_NAME}'=='${EMPTY}' and '${TransCode}'=='5'	Log  	Bureau name is not shown in second score column on Customer Archive page for ${ApplicantName}.  	WARN
	# ...										ELSE 				Log 	Bureau 2: ${SCORE2_NAME}. Score: ${CREDIT_SCORE2}	WARN
	Run Keyword And Continue On Failure 	Run Keyword If 		'${SCORE2_NAME}'=='${EMPTY}' and '${TransCode}'=='5'		WriteToFile		${LogFile}	Y	Bureau name is not shown in second score column on Customer Archive page for ${ApplicantName}.
	...										ELSE 				WriteToFile		${LogFile}	Y	Bureau 2: ${SCORE2_NAME}. Score: ${CREDIT_SCORE2}
	
	Run Keyword And Ignore Error 	Wait Until Page Contains Element		//table[@id='DataGridArchive']/tbody/tr[${ROW}]/td[6]/span		10s
	${stat3}=		Run Keyword And Return Status 	Get Text		//table[@id='DataGridArchive']/tbody/tr[${ROW}]/td[6]/span
	${SCORE3}=		Run Keyword If 		'${stat3}'=='True'	Get Text		//table[@id='DataGridArchive']/tbody/tr[${ROW}]/td[6]/span
	...				ELSE 		Set Variable 	${EMPTY}
	${SCORE3}=		Run Keyword If		'${SCORE3}'=='None'		Set Variable		${EMPTY}		ELSE		Set Variable	${SCORE3}
	@{SCORE3_LIST}=		Run Keyword If		'${SCORE3}'!= '${EMPTY}'		Split String		${SCORE3}			-		ELSE		Set Variable		${EMPTY}		${EMPTY}
	${SCORE3_NAME}=			Get From List		${SCORE3_LIST}		0
	${CREDIT_SCORE3}=		Get From List		${SCORE3_LIST}		1		
	
	########## Logging ##########
	# Run Keyword And Continue On Failure 	Run Keyword If 		'${SCORE3_NAME}'=='${EMPTY}' and '${TransCode}'=='5'	Log 	Bureau name is not shown in third score column on Customer Archive page for ${ApplicantName}.  	WARN
	# ...										ELSE 				Log 	Bureau 3: ${SCORE3_NAME}. Score: ${CREDIT_SCORE3}	WARN
	Run Keyword And Continue On Failure 	Run Keyword If 		'${SCORE3_NAME}'=='${EMPTY}' and '${TransCode}'=='5'	WriteToFile		${LogFile}	Y	Bureau name is not shown in third score column on Customer Archive page for ${ApplicantName}.
	...										ELSE 				WriteToFile		${LogFile}	Y	Bureau 3: ${SCORE3_NAME}. Score: ${CREDIT_SCORE3}
	
	
	Set Suite Variable 		${CREDIT_SCORE}
	Set Suite Variable 		${SCORE2}
	Set Suite Variable 		${SCORE3}
	
	############## Credit Score Validation ################
	############## Here we should modify no fail message if scores are not returned
	
	# Run Keyword And Continue On Failure 	Run Keyword If 		'${CREDIT_SCORE}'=='${EMPTY}' 		Log  	No Credit Score is shown in first score column for ${ApplicantName}		WARN
	# Run Keyword And Continue On Failure 	Run Keyword If 		'${CREDIT_SCORE2}'=='${EMPTY}' and '${TransCode}'=='5'		Log 	No Credit Score is shown in second score column for ${ApplicantName}	WARN
	# Run Keyword And Continue On Failure 	Run Keyword If 		'${CREDIT_SCORE3}'=='${EMPTY}' and '${TransCode}'=='5'		Log 	No Credit Score is shown in third score column for ${ApplicantName}		WARN
	Run Keyword And Continue On Failure 	Run Keyword If		'${CREDIT_SCORE}'=='${EMPTY}'								Fail 	No Credit Score is shown in first score column for ${ApplicantName}
	Run Keyword And Continue On Failure 	Run Keyword If 		'${CREDIT_SCORE2}'=='${EMPTY}' and '${TransCode}'=='5'		Fail	No Credit Score is shown in second score column for ${ApplicantName}
	Run Keyword And Continue On Failure 	Run Keyword If 		'${CREDIT_SCORE3}'=='${EMPTY}' and '${TransCode}'=='5'		Fail	No Credit Score is shown in third score column for ${ApplicantName}
	Run Keyword If										 		'${CREDIT_SCORE}'=='${EMPTY}' 								WriteToFile		${LogFile}	Y	No Credit Score is shown in first score column for ${ApplicantName}
	Run Keyword If 												'${CREDIT_SCORE2}'=='${EMPTY}' and '${TransCode}'=='5'		WriteToFile		${LogFile}	Y	No Credit Score is shown in second score column for ${ApplicantName}
	Run Keyword If 												'${CREDIT_SCORE3}'=='${EMPTY}' and '${TransCode}'=='5'		WriteToFile		${LogFile}	Y	No Credit Score is shown in third score column for ${ApplicantName}
	
	############## ID/OFAC Validation ################
	
	## Feedback loop to wait till ? is gone from ID/OFAC column
	
	# ${DELAY}=		Set Variable	120
	# ${TIME_FRACTION}=	Set Variable	5
	
	# ${COUNT}			Evaluate				${DELAY}/${TIME_FRACTION}
	# ${COUNT}			Convert To Integer		${COUNT}
	# ${SCAN}				Set Variable			0
	
	# Wait Until Keyword Succeeds    60s    3s    Page Should Contain Element    //table[@id='DataGridArchive']/tbody/tr[2]/td[7]

	# :For		${LOOP}		IN RANGE	1			${COUNT} + 1
	# \	Sleep				${TIME_FRACTION}s	
	# \	${stat}= 	Run Keyword And Return Status 		Page Should Contain Element 	//table[@id='DataGridArchive']/tbody/tr[2]/td[7]
	# \	${Pending_Img}=		Run Keyword If 		'${stat}'=='True'	Selenium2Library.Get Element Attribute 		//table[@id='DataGridArchive']/tbody/tr[2]/td[7]/img@src
	# \	...					ELSE				Selenium2Library.Get Element Attribute 		//table[@id='DataGridArchive']/tbody/tr[2]/td[5]/img@src
	# \	${Is_q}=	Run Keyword And Return Status 	Should Contain 		${Pending_Img}		q.gif
	# \	Run Keyword If 		'${Is_q}'=='True'		Navigate Again To Customer Archive Page	
	# \	...		ELSE 		Exit For Loop
	
	
	
	${stat}= 	Run Keyword And Return Status 		Page Should Contain Element 	//table[@id='DataGridArchive']/tbody/tr[2]/td[7]
	${Pending_Img}=		Run Keyword If 		'${stat}'=='True'	Selenium2Library.Get Element Attribute 		//table[@id='DataGridArchive']/tbody/tr[2]/td[7]/img@src
	...					ELSE				Selenium2Library.Get Element Attribute 		//table[@id='DataGridArchive']/tbody/tr[2]/td[5]/img@src
	${Is_q}=	Run Keyword And Return Status 	Should Contain 		${Pending_Img}		q.gif
	
	
	
	Unselect Frame
	
	Wait Until Page Contains Element            //iframe[@id='iFrm']	error=Navigate to Customer Archive page is not successful. Page is not loaded correctly. Please check.
	Select Frame                                iFrm
	Wait Until Page Contains Element            //frame[@name='main']
	Select Frame                                main
	
	
	# mouse over on ID/OFAC column
	${stat}= 	Run Keyword And Return Status 		Page Should Contain Element 	//table[@id='DataGridArchive']/tbody/tr[${ROW}]/td[7]
	
	# Check if ? is shown - Pending
	${Pending_Img}=		Run Keyword If 		'${stat}'=='True'	Selenium2Library.Get Element Attribute 		//table[@id='DataGridArchive']/tbody/tr[${ROW}]/td[7]/img@src
	...					ELSE				Selenium2Library.Get Element Attribute 		//table[@id='DataGridArchive']/tbody/tr[${ROW}]/td[5]/img@src
	
	${Is_Spacer}=		Run Keyword And Return Status 		Should Contain 		${Pending_Img}		spacer.gif
	Run Keyword If 		'${Is_Spacer}'=='True'	Unselect Frame
	Run Keyword And Continue On Failure 	Run Keyword If 		'${Is_Spacer}'=='True'		Fail 	ID/OFAC scores are not pulled, no image is shown in ID/OFAC column for ${ApplicantName}.
	
	${Is_q}=	Run Keyword And Return Status 	Should Contain 		${Pending_Img}		q.gif
	Run Keyword If 		'${Is_q}'=='True'	Unselect Frame
	# Run Keyword And Continue On Failure 	Run Keyword If 		'${Is_q}'=='True'	Log 	ID/OFAC Scores are pending for ${ApplicantName}. Question mark is shown in the column ID/OFAC.		WARN
	# Log 		*******************************		WARN
	Run Keyword And Continue On Failure 	Run Keyword If 		'${Is_q}'=='True'	WriteToFile		${LogFile}	Y	ID/OFAC Scores are pending for ${ApplicantName}. Question mark is shown in the column ID/OFAC.	
	# WriteToFile		${LogFile}	Y			*******************************
	
	# ID OFAC Bubble Validation only if Pending status is not there
	Run Keyword If 		'${Is_q}'=='False' and '${Is_Spacer}'!='True'		ID OFAC Bubble Validation	${Record}	${Is_q}	${ROW}	${Index}
	
	Run Keyword If 		'${Is_q}'=='True' or '${Is_Spacer}'=='True'		Set To Dictionary		${IDOFAC_Bubble_Dict}		${Index}	${EMPTY}
	
	Unselect Frame
	
ID OFAC Bubble Validation	[Arguments]		${Record}	${Is_q}		${ROW}		${Index}

	WriteToFile		${LogFile}		Y		ID OFAC Bubble Validation>>>		

	${status1}= 	Run Keyword And Return Status 	Page Should Contain Element 	//table[@id='DataGridArchive']/tbody/tr[${ROW}]/td[7]
	
	Run Keyword If 		${status1}		Mouse Over 			//table[@id='DataGridArchive']/tbody/tr[${ROW}]/td[7]
	...					ELSE 			Mouse Over 			//table[@id='DataGridArchive']/tbody/tr[${ROW}]/td[5]
	# Mouse Down 			//table[@id='DataGridArchive']/tbody/tr[${ROW}]/td[7]
	
	Log Dictionary		${Record}
	Log 		${Is_q}
	
	sleep 		2s
	
	${CoAppFirstName}=		Get From Dictionary		${Record}		CoApp First Name
	${CoAppLastName}=		Get From Dictionary		${Record}		CoApp Last Name
	${AppFirstName}=	Get From Dictionary		${Record}		First Name
	${AppLastName}=		Get From Dictionary		${Record}		Last Name
	${AppNameSH}=		Catenate 		SEPARATOR=		${AppLastName}		,		${SPACE}		${AppFirstName}
	
	
	# ${IsBubble}=	Run Keyword And Return Status 	Page Should Contain Element 	//html/body//table[@id='StatusBox']
	# Run Keyword If 	'${Is_q}'=='True' and '${IsBubble}'=='False'	Log 	No ID/OFAC bubble is shown for ${AppNameSH}		WARN
	
	# Run Keyword If 	'${Is_q}'=='True' and '${IsBubble}'=='False'	Return From Keyword
	
	
	Run Keyword And Ignore Error 	Wait Until Page Contains Element	//html/body//table[@id='StatusBox']	10s
	${text}=		Get Text 		//html/body//table[@id='StatusBox']/tbody
	# Log 			${text}			WARN
	
	${stat}=		Run Keyword And Return Status 	Should Be Empty 	${text}
	
	# TH 20160422 - this ID/OFAC check fails every time. Making a decision to not do the check.
	# # # Run Keyword And Continue On Failure		Run Keyword If 		${stat}		Fail 	No text is shown in ID/OFAC bubble for ${AppNameSH}
	
	# Mouse Up 	//table[@id='DataGridArchive']/tbody/tr[${ROW}]/td[7]
	
	# Mouse Out 	//table[@id='DataGridArchive']/tbody/tr[${ROW}]/td[7]
	
	Run Keyword If 		${stat}		Return From Keyword
	
	# ${CoAppFirstName}=		Get From Dictionary		${Record}		CoApp First Name
	# ${CoAppLastName}=		Get From Dictionary		${Record}		CoApp Last Name
	# ${AppFirstName}=	Get From Dictionary		${Record}		First Name
	# ${AppLastName}=		Get From Dictionary		${Record}		Last Name
	# ${AppNameSH}=		Catenate 		SEPARATOR=		${AppLastName}		,		${SPACE}		${AppFirstName}
	${lines}=		Get Line Count		${text}		# 8
	
	${line1}=		Get Line 	${text}		0
	${line2}=		Get Line 	${text}		1
	${line3}=		Get Line 	${text}		2
	${line4}=		Get Line 	${text}		3
	
	# ${stat}=		Run Keyword If 		'${CoAppLastName}'!='${EMPTY}'		Run Keyword And Return Status 		Get Line 	${text}		4
	
	${stat}=		Run Keyword And Return Status			 	Get Line 	${text}		4
	Run Keyword And Continue On Failure 	Run Keyword If 		'${CoAppLastName}'!='${EMPTY}' and '${stat}'=='False' 	Fail 	ID/OFAC Information for co-applicant is not shown for ${AppNameSH}.
	
	
	${line5}=		Run Keyword If 		'${CoAppLastName}'!='${EMPTY}' and '${stat}'!='False'		Get Line 	${text}		4		ELSE 	Set Variable 	${EMPTY}
	${line6}=		Run Keyword If 		'${CoAppLastName}'!='${EMPTY}' and '${stat}'!='False'		Get Line 	${text}		5		ELSE 	Set Variable 	${EMPTY}
	${line7}=		Run Keyword If 		'${CoAppLastName}'!='${EMPTY}' and '${stat}'!='False'		Get Line 	${text}		6		ELSE 	Set Variable 	${EMPTY}
	${line8}=		Run Keyword If 		'${CoAppLastName}'!='${EMPTY}' and '${stat}'!='False'		Get Line 	${text}		7		ELSE 	Set Variable 	${EMPTY}
	
	${status}=		Run Keyword And Return Status 	Should Contain 		${text} 	Trans Error
	Run Keyword If 		'${status}'=='True'		Set Test Message 	\nID/OFAC Information is not shown for ${AppNameSH} 		append=yes
	
	# Applicant
	${status}=		Run Keyword And Return Status 	Should Contain 		${line1}		Applicant
	# Run Keyword And Continue On Failure 	Run keyword If		'${status}'!='True'		Log 	Text 'Applicant' is not found in ID/OFAC bubble for ${AppNameSH}	WARN
	Run Keyword And Continue On Failure 	Run keyword If		'${status}'!='True'		WriteToFile		${LogFile}	Y	Text 'Applicant' is not found in ID/OFAC bubble for ${AppNameSH}
	
	# Red Flags Score
	${status}=		Run Keyword And Return Status 	Should Contain 		${line2}				Red Flags Score: N/A
	# Run Keyword And Continue On Failure 	Run keyword If				'${status}'=='True'		Log 	Red Flags Score is not shown in ID/OFAC bubble for ${AppNameSH}		WARN
	# ...				ELSE 					Log 	Applicant: ${AppNameSH} - ${line2}	 		WARN
	Run Keyword And Continue On Failure 	Run keyword If				'${status}'=='True'		WriteToFile		${LogFile}	Y	Red Flags Score is not shown in ID/OFAC bubble for ${AppNameSH}
	...				ELSE 					WriteToFile		${LogFile}	Y	 	Applicant: ${AppNameSH} - ${line2}	
	
	# ID Verification
	${status}=		Run Keyword And Return Status 	Should Contain 		${line3}			ID Verification: Trans Error
	# Run Keyword And Continue On Failure 	Run keyword If				'${status}'=='True'		Log 		ID Verification Status is not shown in ID/OFAC bubble for ${AppNameSH}		WARN
	# ...				ELSE 					Log 	Applicant: ${AppNameSH} - ${line3}	 		WARN
	Run Keyword And Continue On Failure 	Run keyword If				'${status}'=='True'		WriteToFile		${LogFile}	Y	ID Verification Status is not shown in ID/OFAC bubble for ${AppNameSH}
	...				ELSE 					WriteToFile		${LogFile}	Y		Applicant: ${AppNameSH} - ${line3}
	
	# OFAC
	${status}=		Run Keyword And Return Status 	Should Contain 		${line4}			OFAC: Trans Error
	# Run Keyword And Continue On Failure 	Run keyword If				'${status}'=='True'		Log 		OFAC Status is not shown in ID/OFAC bubble for ${AppNameSH}		WARN
	# ...				ELSE 					Log 	Applicant: ${AppNameSH} - ${line4}	 		WARN
	Run Keyword And Continue On Failure 	Run keyword If				'${status}'=='True'		WriteToFile		${LogFile}	Y	OFAC Status is not shown in ID/OFAC bubble for ${AppNameSH}
	...				ELSE 					WriteToFile		${LogFile}	Y	 	Applicant: ${AppNameSH} - ${line4}

	
	# Co-Applicant
	${status}=		Run Keyword And Return Status 	Run Keyword If 		'${CoAppLastName}'!='${EMPTY}'		Should Contain 		${line5}		Co-Applicant
	# Run Keyword And Continue On Failure 	Run keyword If			'${status}'!='True' and '${CoAppLastName}'!='${EMPTY}'			Log	 	'Co-Applicant' information is not found in ID/OFAC bubble for ${AppNameSH}		WARN
	Run Keyword And Continue On Failure 	Run keyword If			'${status}'!='True' and '${CoAppLastName}'!='${EMPTY}'			WriteToFile		${LogFile}	Y	Co-Applicant information is not found in ID/OFAC bubble for ${AppNameSH}
	
	# Red Flags Score
	${status}=		Run Keyword And Return Status 	Run Keyword If 		'${CoAppLastName}'!='${EMPTY}'		Should Contain 		${line6}				Red Flags Score: N/A
	# Run Keyword And Continue On Failure 	Run keyword If				'${status}'=='True' and '${CoAppLastName}'!='${EMPTY}'		Log		Co-Applicant: Red Flags Score is not shown in ID/OFAC bubble for ${AppNameSH}	WARN
	Run Keyword And Continue On Failure 	Run keyword If				'${status}'=='True' and '${CoAppLastName}'!='${EMPTY}'		WriteToFile		${LogFile}	Y	Co-Applicant: Red Flags Score is not shown in ID/OFAC bubble for ${AppNameSH}	
	
	# ID Verification
	${status}=		Run Keyword And Return Status 	Run Keyword If 		'${CoAppLastName}'!='${EMPTY}'		Should Contain 		${line7}			ID Verification: Trans Error
	# Run Keyword And Continue On Failure 	Run keyword If				'${status}'=='True' and '${CoAppLastName}'!='${EMPTY}'			Log		Co-Applicant: ID Verification Status is not shown in ID/OFAC bubble for ${AppNameSH}	WARN
	Run Keyword And Continue On Failure 	Run keyword If				'${status}'=='True' and '${CoAppLastName}'!='${EMPTY}'			WriteToFile		${LogFile}	Y	Co-Applicant: ID Verification Status is not shown in ID/OFAC bubble for ${AppNameSH}	
	
	# OFAC
	${status}=		Run Keyword And Return Status 	Run Keyword If 		'${CoAppLastName}'!='${EMPTY}'		Should Contain 		${line8}			OFAC: Trans Error
	# Run Keyword And Continue On Failure 	Run keyword If				'${status}'=='True' and '${CoAppLastName}'!='${EMPTY}'		Log		Co-Applicant: OFAC Status is not shown in ID/OFAC bubble for ${AppNameSH}		WARN
	Run Keyword And Continue On Failure 	Run keyword If				'${status}'=='True' and '${CoAppLastName}'!='${EMPTY}'		WriteToFile		${LogFile}	Y	Co-Applicant: OFAC Status is not shown in ID/OFAC bubble for ${AppNameSH}	
	
	Set To Dictionary		${IDOFAC_Bubble_Dict}		${Index}	${text}
	
	
# Wait Till All Records Are Shown On UI 		[Arguments]	${Merged_Dict}	
	# Log 	${Merged_Dict}
	
	# @{FS_List}=	Create List
	# @{LS_List}=	Create List
	
	# ${keys}= 	Get Dictionary Keys 	${Merged_Dict}
	# ${values}=	Get dictionary Values 	${Merged_Dict}
	# Log List 	${keys}
	# Log List 	${values}
	
	# # Getting count of records. This is total count of xmls send.
	# # It navigates through all records per version and gets the count
	# # this count is used to read UI records
	# ${len}=				Get Length 		${values}
	# # ${Final_Cnt}=		Set Variable 	0
	
	# @{FS}=	Create List
	# @{LS}=	Create List
	# :FOR 	${I} 	IN RANGE 	0 		${len}
	# \		${dict1}=	Get From Dictionary		${values}	${I}
	# \		Log Dictionary 		${dict1}
	# \		${Count_Rec}=		Get Length 		${dict1}
	# \		${FS_List}=			Get Data In List From Dictionary 	${dict1}	First Name
	# \		${LS_List}=			Get Data In List From Dictionary 	${dict1}	Last Name
	# \		Log List 			${FS_List}
	# \		Log List 			${LS_List}
	# \		${FS}=				Combine Lists 		${FS}	${FS_List}
	# \		Log List 			${FS}
	# \		${LS}=				Combine Lists 		${LS}	${LS_List}
	# \		Log List 			${LS}
	
	# # below lists contain combine results of First name and last name
	# Log List 		${FS}
	# Log List 		${LS}
	
	# # Expected app names 
	# ${len}=		Get Length 	${FS}
	# @{Expected_AppNameList}=	Create List
	
	# :FOR 	${I} 	IN RANGE 	0 		${len}
	# \		${Appfistname}=		Get From List 		${FS}	${I}
	# \		${Applastname}=		Get From List 		${LS}	${I}
	# \		${ExpName}=			Catenate 			SEPARATOR=		${Applastname}	,	${SPACE} 	${Appfistname}
	# \		Append To List 		${Expected_AppNameList}		${ExpName}
	
	# # this list contaons all expected applicant names.
	# Log List 		${Expected_AppNameList}
	
	# # converting to lower case
	# @{Expected_List}=		Create List
	# :FOR 	${I} 	IN RANGE 	0 		${len}
	# \		${name}=	Get From List 		${Expected_AppNameList}		${I}
	# \		${lower_name}=		Evaluate 	str('${name}').lower()
	# \		Append To List 	${Expected_List}	${lower_name}
	
	# Log list		${Expected_List}
	
	# # now getting list of UI entries
	# # ${Cust_List}=		Get Data On Customer Archive Page In A List		${len}		2	
	# # Log List 			${Cust_List}
	# # Set Suite Variable 	${Cust_List}
	
	# # Sort List 	${Expected_List}
	# # Sort List 	${Cust_List}
	
	# # Log List 	${Cust_List}
	# # Log List 	${Expected_List}
	
	# # Lists Should Be Equal 		${Expected_List}	${Cust_List}
	
	# # Here
	
	# ${DELAY}=		Set Variable	90	#60
	# ${TIME_FRACTION}=	Set Variable	5
	
	# ${COUNT}			Evaluate				${DELAY}/${TIME_FRACTION}
	# ${COUNT}			Convert To Integer		${COUNT}
	# ${SCAN}				Set Variable			0
	
	# # Wait Until Keyword Succeeds    60s    3s    Page Should Contain Element    //table[@id='DataGridArchive']/tbody/tr[${ROW}]/td[4]/span    Credit score is not shown on Customer Archive Page.    loglevel=NONE
	# :For		${LOOP}		IN RANGE	1			${COUNT} + 1
	# \	Sleep				${TIME_FRACTION}s	
	# \	${Cust_List}=		Get Data On Customer Archive Page In A List		${len}		2	
	# \	Log List 			${Cust_List}
	# \	Set Suite Variable 	${Cust_List}
	# \	Sort List 			${Expected_List}
	# \	Sort List 			${Cust_List}
	# \	Log List 			${Cust_List}
	# \	Log List 			${Expected_List}
	# \	${EXEC_STATUS}=		Run Keyword And Return Status 	Lists Should Be Equal 		${Expected_List}	${Cust_List}
	# \	Run Keyword If		'${EXEC_STATUS}'=='True'							Exit For Loop
	# \	...		ELSE		Navigate Again To Customer Archive Page
	
	
	# Run Keyword If		'${EXEC_STATUS}'!='True'	Fail 	All records are not shown on Customer Archive page.
	

# Wait Till All Records Are Shown On Customer Archive Page 		[Arguments]	${Merged_Dict}	
	# Log 	${Merged_Dict}
	
	# @{FS}= 		Create List
	# @{LS}= 		Create List
	
	# ${FS}=		Get Data In List From Dictionary	${Merged_Dict}		First Name
	# ${LS}=		Get Data In List From Dictionary	${Merged_Dict}		Last Name
	
	# Log List 		${FS}
	# Log List 		${LS}

	
	# # Expected app names 
	# ${len}=		Get Length 	${FS}
	# @{Expected_AppNameList}=	Create List
	
	# :FOR 	${I} 	IN RANGE 	0 		${len}
	# \		${Appfistname}=		Get From List 		${FS}	${I}
	# \		${Applastname}=		Get From List 		${LS}	${I}
	# \		${ExpName}=			Catenate 			SEPARATOR=		${Applastname}	,	${SPACE} 	${Appfistname}
	# \		Append To List 		${Expected_AppNameList}		${ExpName}
	
	# # this list contaons all expected applicant names.
	# Log List 		${Expected_AppNameList}
	
	# # converting to lower case
	# @{Expected_List}=		Create List
	# :FOR 	${I} 	IN RANGE 	0 		${len}
	# \		${name}=	Get From List 		${Expected_AppNameList}		${I}
	# \		${lower_name}=		Evaluate 	str('${name}').lower()
	# \		Append To List 	${Expected_List}	${lower_name}
	
	# Log list		${Expected_List}
	
	# ${DELAY}=		Set Variable	90	#60
	# ${TIME_FRACTION}=	Set Variable	5
	
	# ${COUNT}			Evaluate				${DELAY}/${TIME_FRACTION}
	# ${COUNT}			Convert To Integer		${COUNT}
	# ${SCAN}				Set Variable			0
	
	# # Wait Until Keyword Succeeds    60s    3s    Page Should Contain Element    //table[@id='DataGridArchive']/tbody/tr[${ROW}]/td[4]/span    Credit score is not shown on Customer Archive Page.    loglevel=NONE
	# :For		${LOOP}		IN RANGE	1			${COUNT} + 1
	# \	Sleep				${TIME_FRACTION}s	
	# \	${Cust_List}=		Get Data On Customer Archive Page In A List		${len}		2	
	# \	Log List 			${Cust_List}
	# \	Set Suite Variable 	${Cust_List}
	# \	Sort List 			${Expected_List}
	# \	Sort List 			${Cust_List}
	# \	Log List 			${Cust_List}
	# \	Log List 			${Expected_List}
	# \	${EXEC_STATUS}=		Run Keyword And Return Status 	Lists Should Be Equal 		${Expected_List}	${Cust_List}
	# \	Run Keyword If		'${EXEC_STATUS}'=='True'							Exit For Loop
	# \	...		ELSE		Navigate Again To Customer Archive Page
	
	
	# Run Keyword If		'${EXEC_STATUS}'!='True'	Fail 	All records are not shown on Customer Archive page.

Wait Till All Records Are Shown On Customer Archive Page 		[Arguments]		${Global_Dict}	${List_CustArchive}
	# Log 	${Merged_Dict}
	Log Dictionary		${Global_Dict}
	Log List 			${List_CustArchive}
	
	@{FS}= 		Create List
	@{LS}= 		Create List
	
	# ${FS}=		Get Data In List From Dictionary	${Merged_Dict}		First Name
	# ${LS}=		Get Data In List From Dictionary	${Merged_Dict}		Last Name
	
	${FS}=		Get Data In List From Dictionary For A Key 		${Global_Dict}		${List_CustArchive}		First Name
	${LS}=		Get Data In List From Dictionary For A Key 		${Global_Dict}		${List_CustArchive}		Last Name
	${MN}=		Get Data In List From Dictionary For A Key 		${Global_Dict}		${List_CustArchive}		Middle Name
	
	Log List 		${FS}
	Log List 		${LS}
	Log List 		${MN}
	
	
	# Expected app names 
	${len}=		Get Length 	${FS}
	@{Expected_AppNameList}=	Create List
	
	:FOR 	${I} 	IN RANGE 	0 		${len}
	\		${Appfistname}=		Get From List 		${FS}	${I}
	\		${Applastname}=		Get From List 		${LS}	${I}
	\		${AppMidname}=		Get From List 		${MN}	${I}
	\		${ExpName}=			Catenate 			SEPARATOR=		${Applastname}	,	${SPACE} 	${Appfistname}
	\		${ExpName}=			Run Keyword If 		'${AppMidname}'!='${EMPTY}'		Catenate 			SEPARATOR=		${ExpName}		${SPACE} 	${AppMidname}	.
	\		...					ELSE 				Set Variable 	${ExpName}
	\		Append To List 		${Expected_AppNameList}		${ExpName}
	
	# this list contains all expected applicant names.
	Log List 		${Expected_AppNameList}
	
	
	
	###### Added for chained. duplicate entries will be shown in case of chained.
	# ${Expected_AppNameList}=		Remove Duplicates			${Expected_AppNameList}
	Log List 		${Expected_AppNameList}
	
	${len}=		Get Length 	${Expected_AppNameList}
	# converting to lower case
	@{Expected_List}=		Create List
	:FOR 	${I} 	IN RANGE 	0 		${len}
	\		${name}=	Get From List 		${Expected_AppNameList}		${I}
	\		${lower_name}=		Evaluate 	str('${name}').lower()
	\		Append To List 	${Expected_List}	${lower_name}
	
	Log list		${Expected_List}
	
	${DELAY}=		Set Variable	90	#60
	${TIME_FRACTION}=	Set Variable	5
	
	${COUNT}			Evaluate				${DELAY}/${TIME_FRACTION}
	${COUNT}			Convert To Integer		${COUNT}
	${SCAN}				Set Variable			0
	
	# Wait Until Keyword Succeeds    60s    3s    Page Should Contain Element    //table[@id='DataGridArchive']/tbody/tr[${ROW}]/td[4]/span    Credit score is not shown on Customer Archive Page.    loglevel=NONE
	:For		${LOOP}		IN RANGE	1			${COUNT} + 1
	\	Sleep				${TIME_FRACTION}s	
	\	${Cust_List}=		Get Data On Customer Archive Page In A List		${len}		2	
	\	Log List 			${Cust_List}
	\	Set Suite Variable 	${Cust_List}
	\	Sort List 			${Expected_List}
	\	Sort List 			${Cust_List}
	\	Log List 			${Cust_List}
	\	Log List 			${Expected_List}
	\	${EXEC_STATUS}=		Run Keyword And Return Status 	Lists Should Be Equal 		${Expected_List}	${Cust_List}
	\	Run Keyword If		'${EXEC_STATUS}'=='True'							Exit For Loop
	\	...		ELSE		Navigate Again To Customer Archive Page
	
	
	Run Keyword If		'${EXEC_STATUS}'!='True'	Fail 	All records are not shown on Customer Archive page.


Get Data In List From Dictionary 	[Arguments]		${Merged_Dict}		${KeyName}
	[Documentation]		This Keyword drills down the given dictionary and then returns the record data is a form of a list.
	...					${KeyName} - it is the name of data required e.g. First Name
	...					The dictionary wil be like below:
	...					{
	...						1.0:
	...							{
	...								0: {'First Name':'ABC',...} 
	...								1: {'First Name':'DEF',...} 
	...								2: {'First Name':'GHI',...} 
	...							}
	...						1.1:
	...							{
	...								0: {'First Name':'XYZ',...} 
	...								1: {'First Name':'SSG',...} 
	...							}
	...					}
	
	@{FS_List}=		Create List
	# @{LS_List}=		Create List
	
	${keys}= 	Get Dictionary Keys 	${Merged_Dict}
	${values}=	Get dictionary Values 	${Merged_Dict}
	
	Log List 	${keys}
	Log List 	${values}
	
	# Getting count of records. This is total count of xmls send.
	# It navigates through all records per version and gets the count
	# this count is used to read UI records
	${len}=				Get Length 		${values}
	# ${Final_Cnt}=		Set Variable 	0
	
	@{CombineList}=	Create List
	
	:FOR 	${I} 	IN RANGE 	0 		${len}
	\		${dict1}=	Get From Dictionary		${values}	${I}
	\		Log Dictionary 		${dict1}
	\		${Count_Rec}=		Get Length 		${dict1}
	\		${FS_List}=			Get Key Data In List From Dictionary 	${dict1}	${KeyName}
	\		Log List 			${FS_List}
	\		${CombineList}=		Combine Lists 		${CombineList}	${FS_List}
	\		Log List 			${CombineList}
	
	# below lists contain combine results of First name and last name
	Log List 		${CombineList}
	# Log List 		${LS}
	
	[Return]	${CombineList}
	
Get Data In List From Dictionary For A Key 		[Arguments]		${Global_Dict}		${List_Index}		${KeyName}
	Log List 	${List_Index}	
	${len}= 	Get Length		${List_Index}
	Log 		${KeyName}
	
	@{CombineList}=		Create List
	
	:FOR 	${I} 	IN RANGE 	0 		${len}
	\		${Index1}		Get From List 	${List_Index}	${I}
	\		${Index}=		Convert To Integer 		${Index1}
	\		${dict}=		Get From Dictionary 	${Global_Dict}		${Index}
	\		${Keyvalue}=	Get From Dictionary 	${dict}				${KeyName}
	\		Append To List 	${CombineList}			${Keyvalue}
	
	Log List 	${CombineList}	
	[Return]	${CombineList}	
	

	
	
Get Key Data In List From Dictionary 		[Arguments]		${dict}		${KeyName}
	Log Dictionary		${dict}
	${cnt}=		Get Length 		${dict}
	@{l1}= 	Create List 
	:FOR 	${I} 	IN RANGE 	0 		${cnt}
	\		${Rec}=		Get From Dictionary		${dict}			${I}
	\		${Val}=		Get From Dictionary		${Rec}			${KeyName}
	\		Append To List 		${l1}		${Val}
	
	Log List	${l1}
	[Return]	${l1}	
	
# Get Data In List From Dictionary 	[Arguments]		${dict}		${KeyName}
	# Log Dictionary		${dict}
	# ${cnt}=		Get Length 		${dict}
	# @{l1}= 	Create List 
	# :FOR 	${I} 	IN RANGE 	0 		${cnt}
	# \		${Rec}=		Get From Dictionary		${dict}			${I}
	# \		${Val}=		Get From Dictionary		${Rec}			${KeyName}
	# \		Append To List 		${l1}		${Val}
	
	# Log List	${l1}
	# [Return]	${l1}

##################################################################################################	
Login To DealerTrack	[Arguments]		${ServiceType}

	WriteToFile			${logfile}				Y			Login To DealerTrack>>>
	
	${PARTNERID}=		Run Keyword If 	'${ServiceType}'=='CB'	Get From Dictionary		${Scenario Setup}		Partner Id CB
	...					ELSE IF			'${ServiceType}'=='FD'	Get From Dictionary		${Scenario Setup}		Partner Id FD
	...					ELSE 			Set Variable 	${PARTNERID}
	
	
	${DEALERID}=		Run Keyword If 	'${ServiceType}'=='CB'	Get From Dictionary		${Scenario Setup}		Partner Dealer Id CB
	...					ELSE IF			'${ServiceType}'=='FD'	Get From Dictionary		${Scenario Setup}		Partner Dealer Id FD
	...					ELSE 			Set Variable 	${DEALERID}
	
	${Environment}=		Get From Dictionary		${Scenario Setup}		Environment
	Log 		${Environment}
	
	Set Suite Variable 		${PARTNERID}
	Set Suite Variable 		${DEALERID}
	Set Suite Variable 		${Environment}
	
	# Login and switch dealership
	Run Keyword If 		'${Environment}'=='QA'		Login to DT And Switch Dealership		${DEALERID}
	...					ELSE 		Login Only If Required
	
# # # Send Bulk Credit Bureau Requests	[Arguments]	${FOLDER_NAME}
	
	# # # ### FD 1.0 ###
	# # # ${Global_Dict}=			Create Dictionary
	# # # Set Suite Variable 		${Global_Dict}
	# # # ${VERSION}				Set Variable 			1.0
	# # # # setting up input folder
    # # # # ${FOLDER_NAME}=    		Set Variable    ${RESOURCE}\\${FOLDER_PATH}\\2 CBWS
    # # # # Set Suite Variable    	${FOLDER_NAME}
    
	# # # # Call KW to Send CBWS req
	# # # Run Keyword And Continue On Failure 	Call FD Credit Bureau Service		${VERSION}	${FOLDER_NAME}
	
	# # # Log Dictionary			${Global_Dict}
	# # # ${IS_EMPTY}=			Run Keyword And Return Status 	Should Be Empty 	${Global_Dict}	
	
	# # # # Adding data to common dictionary version-wise
	# # # Run Keyword If 		'${IS_EMPTY}'!='True'	Set To Dictionary 		${Merged_Dict}		${VERSION}		${Global_Dict}
	
	# # # ### FD 1.1 ###
	# # # ${Global_Dict}=			Create Dictionary
	# # # Set Suite Variable 		${Global_Dict}
	# # # ${VERSION}				Set Variable 			1.1
	
	# # # # setting up input folder
    # # # # ${FOLDER_NAME}=   		Set Variable    ${RESOURCE}\\${FOLDER_PATH}\\2 CBWS
    # # # # Set Suite Variable    	${FOLDER_NAME}
    
	# # # # Call KW to Send CBWS req
	# # # Run Keyword And Continue On Failure		Call FD Credit Bureau Service		${VERSION}	${FOLDER_NAME}	
	# # # Log Dictionary		${Global_Dict}
	
	
# # # # Send Bulk Credit App Requests		[Arguments]		${FOLDER_NAME}	

Wait Till All Records Are Shown On My Leads Page 		[Arguments]		${Global_Dict}		${List_LeadsSummary}	
	# Log 	${Merged_Dict}
	
	Log Dictionary		${Global_Dict}
	Log List 			${List_LeadsSummary}
	
	@{FS}= 		Create List
	@{LS}= 		Create List
	
	# ${FS}=		Get Data In List From Dictionary	${Merged_Dict}		First Name
	# ${LS}=		Get Data In List From Dictionary	${Merged_Dict}		Last Name
	
	${FS}=		Get Data In List From Dictionary For A Key 		${Global_Dict}		${List_LeadsSummary}		First Name
	${LS}=		Get Data In List From Dictionary For A Key 		${Global_Dict}		${List_LeadsSummary}		Last Name
	
	Log List 		${FS}
	Log List 		${LS}

	
	# Expected app names 
	${len}=		Get Length 	${FS}
	@{Expected_AppNameList}=	Create List
	
	:FOR 	${I} 	IN RANGE 	0 		${len}
	\		${Appfistname}=		Get From List 		${FS}	${I}
	\		${Applastname}=		Get From List 		${LS}	${I}
	\		${ExpName}=			Catenate 			SEPARATOR=		${Applastname}	,	${SPACE} 	${Appfistname}
	\		Append To List 		${Expected_AppNameList}		${ExpName}
	
	# this list contaons all expected applicant names.
	Log List 		${Expected_AppNameList}
	
	# converting to lower case
	@{Expected_List}=		Create List
	:FOR 	${I} 	IN RANGE 	0 		${len}
	\		${name}=	Get From List 		${Expected_AppNameList}		${I}
	\		${lower_name}=		Evaluate 	str('${name}').lower()
	\		Append To List 	${Expected_List}	${lower_name}
	
	Log list		${Expected_List}
	
	${DELAY}=		Set Variable	90	#60
	${TIME_FRACTION}=	Set Variable	5
	
	${COUNT}			Evaluate				${DELAY}/${TIME_FRACTION}
	${COUNT}			Convert To Integer		${COUNT}
	${SCAN}				Set Variable			0
	
	# Wait Until Keyword Succeeds    60s    3s    Page Should Contain Element    //table[@id='DataGridArchive']/tbody/tr[${ROW}]/td[4]/span    Credit score is not shown on Customer Archive Page.    loglevel=NONE
	:For		${LOOP}		IN RANGE	1			${COUNT} + 1
	\	Sleep				${TIME_FRACTION}s	
	\	${Cust_List}=		Get Data On My Leads Page In A List		${len}		3
	\	Log List 			${Cust_List}
	\	Set Suite Variable 	${Cust_List}
	\	Sort List 			${Expected_List}
	\	Sort List 			${Cust_List}
	\	Log List 			${Cust_List}
	\	Log List 			${Expected_List}
	\	${EXEC_STATUS}=		Run Keyword And Return Status 	Lists Should Be Equal 		${Expected_List}	${Cust_List}
	\	Run Keyword If		'${EXEC_STATUS}'=='True'							Exit For Loop
	\	...		ELSE		Navigate Again To My Leads Page
	
	
	Run Keyword If		'${EXEC_STATUS}'!='True'	Fail 	All records are not shown on My Leads page.

My Leads Summary Page Validation	[Arguments]		${Global_Dict}		${List_LeadsSummary}

	WriteToFile			${LogFile}		Y			My Leads Summary Page Validation>>>

	Unselect Frame
	# Navigate to the page
	Navigate To My Leads

	${Lead_Summary_Dict}=		Create Dictionary
	Set Suite Variable 			${Lead_Summary_Dict}
	
	# ${Merged_Dict} contains all data version wise
	Log Dictionary		${Global_Dict}
	Log List 			${List_LeadsSummary}
	
	${len}=		Get Length		${List_LeadsSummary}
	
	# Making list of records shown on UI
	${Cust_List}=		Get Data On My Leads Page In A List		${len}		3	
	Log List 			${Cust_List}
	Set Suite Variable 	${Cust_List}
	
	# Vehicle list
	${Veh_List}=		Get Data On My Leads Page In A List		${len}		4	
	Log List 			${Veh_List}
	Set Suite Variable 	${Veh_List}
	
	:FOR 	${I} 	IN RANGE 	0 		${len}
	\		${Index1}		Get From List 	${List_LeadsSummary}		${I}
	\		${Index}=		Convert To Integer 		${Index1}
	\		${dict}=		Get From Dictionary 	${Global_Dict}		${Index}
	\		Validate Dictionary Data With My Leads Summary UI	 ${dict}	${Cust_List}	${Index}	${Veh_List}
	
	# Log Dictionary			${Lead_Summary_Dict}		WARN
	WriteToFile				${LogFile}					Y				*********************************
	WriteToFile				${LogFile}					Y				@Lead_Summary_Dict=${Lead_Summary_Dict}
	
Validate Dictionary Data With My Leads Summary UI	 [Arguments]	${Dict_Records}		${Cust_List}	${Index}	${Veh_List}	

	WriteToFile			${LogFile}		Y		Validate Dictionary Data With My Leads Summary UI>>>	

	Log Dictionary	 	${Dict_Records}	
	Log List 			${Cust_List}
	
	
	${AppFirstName}=	Get From Dictionary		${Dict_Records}		First Name
	${AppLastName}=		Get From Dictionary		${Dict_Records}		Last Name
	${AppNameSH}=		Catenate 		SEPARATOR=		${AppLastName}		,		${SPACE}		${AppFirstName}
	${AppName}=			Evaluate 		str('${AppNameSH}').lower()	
	
	${VehInfoSH}=		Get From Dictionary		${Dict_Records}		Vehicle Info
	${VehInfo}=			Evaluate 		str('${VehInfoSH}').lower()	
	
	# get row no for particular record
	${Indx}=			Get Index From List 		${Cust_List}	${AppName}
	${Indx}=			Convert To Integer 			${Indx}
	Run Keyword If 		'${Indx}'=='-1'	Fail 		No new record is found on UI for ${AppName}
	
	# Get Co-App 
	${Indx_VEH}=		Get Index From List 			${Veh_List}		${VehInfo}
	${Indx_VEH}=		Convert To Integer				${Indx_VEH}
	
	${temp}=			Evaluate 		${Indx}+1 
	${stat}=			Run Keyword And Return Status 	Should Be Equal 	${Indx}		${Indx_VEH}
	
	${Slice_AppNameList}= 	Run Keyword If 		'${stat}'!='True'		Get Slice From List 	${Cust_List}	${temp}		
	...						ELSE 				Set Variable 			${EMPTY}
	${NWIndx}=				Run Keyword If 		'${stat}'!='True'		Get Index From List 	${Slice_AppNameList}	${AppName}
	...						ELSE 				Set Variable 			${EMPTY}
	
	${RW_Index}=			Run Keyword If 		'${stat}'!='True'		Evaluate 	${Indx}+${NWIndx}+1
	...						ELSE 				Set Variable 			${EMPTY}
	
	${NewIndexAPPName}=		Run Keyword If 		'${stat}'!='True'		Get From List 	${Cust_List}	${RW_Index}
	...						ELSE 				Set Variable 			${EMPTY}
	
	${Match2Stat}=			Run Keyword And Return Status 				Should Be Equal 	${AppName}		${NewIndexAPPName}
	
	
	${Row_No}=				Run Keyword If 		'${stat}'!='True' and '${Match2Stat}'=='True' 	Evaluate 		${RW_Index}+2
	...						ELSE				Evaluate 		${Indx}+2
	
	
	Run Keyword And Continue On Failure 	Run Keyword If 			'${stat}'!='True' and '${Match2Stat}'!='True'		Fail 		There are more than 2 records with same Applicant Name and Vehicle Info. Unable to decide the row to be validated. Applicant Name:${AppNameSH}. Vehicle Info: ${VehInfoSH} 
	
	# ignore 1st 2 rows. Row no starts with 1 and first row is headers row.
	# ${Row_No}=			Evaluate 		${Indx}+2
	# now record details are compared with all columns of that UI row. 
	Verify Columns On My Leads Page For Row 	${Row_No} 	${Dict_Records}	${Index}
	
	# Log Dictionary			${Lead_Summary_Dict}	WARN
	WriteToFile				${LogFile}				Y			@Lead_Summary_Dict=${Lead_Summary_Dict}						
	
Verify Columns On My Leads Page For Row 	[Arguments]		${Row_No}	${Record}	${Index}

	WriteToFile			${LogFile}		Y		Verify Columns On My Leads Page For Row>>>	

	Sleep 	3s
	${Img_Dict}=	Create Dictionary
	${TransCode_Now}=	Get From Dictionary		${Record}		TransCode
	Log 	${Row_No}
	Log 	${Record}
	${Input_Folder}=		Get From Dictionary		${Record}	Input Folder
	${Row}= 	Set Variable 	${Row_No}
	
	${bbltxt}= 	Set Variable 	${EMPTY}
	
	# Read data from UI for the row
	
	Unselect Frame
	
	Wait Until Page Contains Element            //iframe[@id='iFrm']
	Select Frame                                iFrm
	Wait Until Page Contains Element            //frame[@name='main']
	Select Frame                                main
	
	Wait Until Keyword Succeeds       120s    3s         Page Should Contain Element            //table[@id='DGLeadsReport']	Lead table is not found. 	loglevel=None
	
	
	##############################################
	# Applicant Name validation
	# Expected Name
	${AppFirstName}=	Get From Dictionary		${Record}		First Name
	${AppLastName}=		Get From Dictionary		${Record}		Last Name
	${AppNameSH}=		Catenate 		SEPARATOR=		${AppLastName}		,		${SPACE}		${AppFirstName}
	${AppName}=			Evaluate 		str('${AppNameSH}').lower()	
	
	${ApplicantName}=	Set Variable 	${AppNameSH}
	
	# Log 	*********************************	warn
	# Log 	Folder Path: ${Input_Folder}	WARN
	# Log 	Applicant : ${ApplicantName}	warn	
	WriteToFile		${LogFile}	Y	 	*********************************
	WriteToFile		${LogFile}	Y	 	Folder Path: ${Input_Folder}
	WriteToFile		${LogFile}	Y	 	Applicant : ${ApplicantName}	
	
	Wait Until Keyword Succeeds       120s    3s         Page Should Contain Element  		//table[@id='DGLeadsReport']/tbody/tr[${Row_No}]/td[3]		loglevel=None
	
	${is_pass}=		Run Keyword And Return Status 		Get Text		//table[@id='DGLeadsReport']/tbody/tr[${Row_No}]/td[3]
	Run Keyword If 		'${is_pass}'=='False'			Sleep 			2s
	Wait Until Keyword Succeeds       120s    3s         Page Should Contain Element  		//table[@id='DGLeadsReport']/tbody/tr[${Row_No}]/td[3]		loglevel=None
	
	${ACT_APPLICANT}=		Get Text		//table[@id='DGLeadsReport']/tbody/tr[${Row_No}]/td[3]
	${ACT_NAME}=		Evaluate		str('${ACT_APPLICANT}').strip()
	${ACT_NAME}=		Evaluate		str('${ACT_APPLICANT}').lower()
	${EXEC_STATUS}=		Run Keyword And Return Status 	Should Be Equal 	${AppName}		${ACT_NAME} 	Folder: ${Input_Folder} - Comparision of Applicant Name failed on My Leads page - ${ApplicantName}. Expected name: ${AppName}. Actual Name: ${ACT_NAME}.		values=False
		
	
	Run Keyword And Continue On Failure 	Run Keyword If		'${EXEC_STATUS}'!='True'	Fail 	Folder: ${Input_Folder} - Comparision of Applicant Name failed on My Leads page - ${ApplicantName}. Expected value: ${AppName}. Actual Value: ${ACT_NAME}. Please refer to Leads Summary page.
	# Run Keyword If		'${EXEC_STATUS}'=='True'	Log 		Applicant Name - Pass 		WARN
	# ...					ELSE 						Log 		Applicant Name - Fail 		WARN
	Run Keyword If		'${EXEC_STATUS}'=='True'	WriteToFile		${LogFile}		Y	 	Applicant Name - Pass
	...					ELSE 						WriteToFile		${LogFile}		Y 		Applicant Name - Fail 		
	
	##############################################
	# Vehicle Name Validation
	${EXP_Vehicle}= 	Get From Dictionary		${Record}		Vehicle Info
	${EXP_Vehicle}=			Evaluate			str('${EXP_Vehicle}').upper()
	
	# Actual Value
	
	Wait Until Keyword Succeeds    120s    3s    Page Should Contain Element    //table[@id='DGLeadsReport']/tbody/tr[${Row_No}]/td[4]	    Folder: ${Input_Folder} - Vehicle Name is not shown on My Leads page - ${ApplicantName}.    loglevel=NONE
	
	${is_pass}=		Run Keyword And Return Status 		Get Text		//table[@id='DGLeadsReport']/tbody/tr[${Row_No}]/td[4]
	Run Keyword If 		'${is_pass}'=='False'			Sleep 			2s
	Wait Until Keyword Succeeds       120s    3s         Page Should Contain Element  		//table[@id='DGLeadsReport']/tbody/tr[${Row_No}]/td[4]		loglevel=None
	
	${ACT_VEH1}=		Get Text		//table[@id='DGLeadsReport']/tbody/tr[${Row_No}]/td[4]
	${ACT_VEH}=		Evaluate		str('${ACT_VEH1}').strip()
	${EXEC_STATUS}=		Run Keyword And Return Status 	Should Be Equal 	${EXP_Vehicle}		${ACT_VEH} 	Folder: ${Input_Folder} - Comparision of Vehicle Name failed on My Leads page - ${ApplicantName}. Expected value: ${EXP_Vehicle}. Actual value: ${ACT_VEH}.		values=False
	
	
###QQQ	Run Keyword And Continue On Failure 	Run Keyword If		'${EXEC_STATUS}'!='True'	Fail 	Folder: ${Input_Folder} - Comparision of Vehicle Name failed on My Leads page - ${ApplicantName}. Expected value: ${EXP_Vehicle}. Actual Value: ${ACT_VEH}. Please refer to Leads Summary page.
	# Run Keyword If		'${EXEC_STATUS}'=='True'	Log 		Vehicle - Pass 		WARN
	# ...					ELSE 						Log 		Vehicle - Fail 		WARN
	Run Keyword If		'${EXEC_STATUS}'=='True'	WriteToFile		${LogFile}		Y	 	Vehicle - Pass 
	...					ELSE 						WriteToFile		${LogFile}		Y	 	Vehicle - Fail 
	
	##############################################
	# Source Validation
	# Expected Source #
	${EXP_SOURCE}=		Set Variable		${WS Setup['Source']}
	Set Suite Variable		${EXP_SOURCE}
	
	${is_pass}=		Run Keyword And Return Status 		Get Text		//table[@id='DGLeadsReport']/tbody/tr[${Row_No}]/td[5]
	Run Keyword If 		'${is_pass}'=='False'			Sleep 			2s
	Wait Until Keyword Succeeds       120s    3s         Page Should Contain Element  		//table[@id='DGLeadsReport']/tbody/tr[${Row_No}]/td[5]		loglevel=None
	
	
	# actual value
	${ACT_SOURCE}=		Get Text		//table[@id='DGLeadsReport']/tbody/tr[${Row_No}]/td[5]
	Run Keyword And Continue On Failure 	Should Be Equal 	${EXP_SOURCE}		${ACT_SOURCE} 	Folder: ${Input_Folder} - Comparision of Source failed on My Leads page - ${ApplicantName}. Expected value: ${EXP_SOURCE}. Actual value: ${ACT_SOURCE}.		values=False
	${EXEC_STATUS}=		Run Keyword And Return Status 			Should Be Equal 	${EXP_SOURCE}		${ACT_SOURCE} 
	
	# Run Keyword If		'${EXEC_STATUS}'=='True'	Log 		Source - Pass 		WARN
	# ...					ELSE 						Log 		Source - Fail 		WARN
	Run Keyword If		'${EXEC_STATUS}'=='True'	WriteToFile		${LogFile}		Y	 		Source - Pass 
	...					ELSE 						WriteToFile		${LogFile}		Y	 		Source - Fail 	
	
	##############################################
	# Lead type
	${CREDIT_TYPE}= 		Get From Dictionary		${Record}		CreditType
	# Expected
	${Exp_LT}=		Run Keyword If 		${TransCode_Now}==3 and '${CREDIT_TYPE}'=='SubPrime'					Set Variable 	Special Finance
	...				ELSE IF 			${TransCode_Now}==3 and '${CREDIT_TYPE}'=='Prime'						Set Variable 	New Car
	...				ELSE IF 			${TransCode_Now}==6 or ${TransCode_Now}==7 								Set Variable 	New Car
	...				ELSE IF 			${TransCode_Now}==1 or ${TransCode_Now}==2 or ${TransCode_Now}==10		Set Variable 	Pre-qualified 
	...				ELSE 				Set Variable 		${EMPTY}
	
	# actual value
	
	Wait Until Keyword Succeeds    120s    3s    Page Should Contain Element    //table[@id='DGLeadsReport']/tbody/tr[${Row_No}]/td[6]	    Folder: ${Input_Folder} - Lead Type is not shown on My Leads page - ${ApplicantName}.    loglevel=NONE
	
	${is_pass}=		Run Keyword And Return Status 		Get Text		//table[@id='DGLeadsReport']/tbody/tr[${Row_No}]/td[6]
	Run Keyword If 		'${is_pass}'=='False'			Sleep 			2s
	Wait Until Keyword Succeeds       120s    3s         Page Should Contain Element  		//table[@id='DGLeadsReport']/tbody/tr[${Row_No}]/td[6]		loglevel=None
	
	
	${ACT_LT1}=		Get Text		//table[@id='DGLeadsReport']/tbody/tr[${Row_No}]/td[6]
	${ACT_LT}=		Evaluate		str('${ACT_LT1}').strip()
	${EXEC_STATUS}=		Run Keyword And Return Status 	Should Be Equal 	${Exp_LT}		${ACT_LT} 	Folder: ${Input_Folder} - Comparision of Lead Type failed on My Leads page - ${ApplicantName}. Expected value: ${Exp_LT}. Actual value: ${ACT_LT}.		values=False
	
	
	# Run Keyword And Continue On Failure 	Should Be Equal 	${Exp_LT}		${ACT_LT} 	Comparision of Lead Type failed. Expected value: ${Exp_LT}. Actual value: ${ACT_LT}.		values=False
	Run Keyword And Continue On Failure 	Run Keyword If		'${EXEC_STATUS}'!='True'	Fail 	Folder: ${Input_Folder} - Comparision of Lead Type failed on My Leads page - ${ApplicantName}. Expected value: ${Exp_LT}. Actual value: ${ACT_LT}.
	# Run Keyword If		'${EXEC_STATUS}'=='True'	Log 		Lead Type - Pass		WARN
	# ...					ELSE 						Log 		Lead Type - Fail 		WARN
	Run Keyword If		'${EXEC_STATUS}'=='True'	WriteToFile		${LogFile}		Y	 	Lead Type - Pass		
	...					ELSE 						WriteToFile		${LogFile}		Y	 	Lead Type - Fail 	
	
	##############################################
	# Create date 
	# ${Exp_Created}
	${time}=	Get Time
	${time}=	Convert To String 	${time}
	@{TList}=	Split String 	${time}
	Log List 	${TList}
	
	${OnlyDate}=	Get From List 	${TList}	0
	Log 	${OnlyDate}
	
	# actual value
	
	${is_pass}=		Run Keyword And Return Status 		Get Text		//table[@id='DGLeadsReport']/tbody/tr[${Row_No}]/td[7]
	Run Keyword If 		'${is_pass}'=='False'			Sleep 			2s
	Wait Until Keyword Succeeds       120s    3s         Page Should Contain Element  		//table[@id='DGLeadsReport']/tbody/tr[${Row_No}]/td[7]		loglevel=None
	
	
	${ACT_Created}=		Get Text		//table[@id='DGLeadsReport']/tbody/tr[${Row_No}]/td[7]
	@{DateList}=		Split String 	${ACT_Created}
	${Act_Date}=		Get From List 	${TList}	0
	
	Run Keyword And Continue On Failure 	Should Contain	 	${OnlyDate}		${Act_Date} 		Folder: ${Input_Folder} - Comparision of Created Date failed on My Leads page - ${ApplicantName}. Expected value: ${OnlyDate}. Actual value: ${Act_Date}.		values=False
	${EXEC_STATUS}=		Run Keyword And Return Status 			Should Contain	 	${OnlyDate}		${Act_Date} 
	# Run Keyword If		'${EXEC_STATUS}'=='True'	Log 		Created Date - Pass			WARN
	# ...					ELSE 						Log 		Created Date - Fail 		WARN
	Run Keyword If		'${EXEC_STATUS}'=='True'	WriteToFile		${LogFile}		Y 		Created Date - Pass
	...					ELSE 						WriteToFile		${LogFile}		Y 		Created Date - Fail 	
	
	##############################################
	# # Assigned To
	# ${Exp_AsssignTo}= 	Get From Dictionary		${Record}		Assigned To
	# # actual value
	# ${ACT_AsssignTo}=		Get Text		//table[@id='DGLeadsReport']/tbody/tr[${Row_No}]/td[8]
	# Run Keyword And Continue On Failure 	Should Be Equal 	${Exp_AsssignTo}		${ACT_AsssignTo} 	Comparision of Assigned To failed on My Leads page. Expected value: ${Exp_AsssignTo}. Actual value: ${ACT_AsssignTo}.		values=False
	
	##############################################
	# Status
	${FinMethod}=	Get From Dictionary		${Record}		FinMethod
	${Exp_Status}=		Run Keyword If 		${TransCode_Now}==3 or ${TransCode_Now}==6 or ${TransCode_Now}==7 or ${TransCode_Now}==2 	Set Variable 	New
	...				ELSE IF 				${TransCode_Now}==1 and '${FinMethod}'=='B'		Set Variable  	App Saved - New
	...				ELSE 					Set Variable 		 App Submitted
	
	# Actual value
	
	# commenting below for COL changes
	############################
	# Wait Until Keyword Succeeds    120s    3s    Page Should Contain Element    //table[@id='DGLeadsReport']/tbody/tr[${Row_No}]/td[9]	    Status is not shown on My Leads Page.    loglevel=NONE
	# ${ACT_Stat1}=		Get Text		//table[@id='DGLeadsReport']/tbody/tr[${Row_No}]/td[9]
	
	# ${ACT_Stat}=		Evaluate		str('${ACT_Stat1}').strip()
	# ${EXEC_STATUS}=		Run Keyword And Return Status 	Should Be Equal 	${Exp_Status}		${ACT_Stat} 	Comparision of Status failed My Leads page. Expected value: ${Exp_Status}. Actual value: ${ACT_Stat}.		values=False
	##############################
	# Adding COL change
	Verify Application Status 	${Exp_Status} 	${Record}
	
	
	
	Run Keyword And Continue On Failure 	Run Keyword If		'${EXEC_STATUS}'!='True'	Fail 	Folder: ${Input_Folder} - Comparision of Status failed on My Leads page - ${ApplicantName}. Expected value: ${Exp_Status}. Actual value: ${ACT_Stat}.		values=False
	# Run Keyword If		'${EXEC_STATUS}'=='True'				Log 		Status - Pass [${Exp_Status}]		WARN
	# ...					ELSE 									Log 		Status - Fail [${Exp_Status}]		WARN
	Run Keyword If		'${EXEC_STATUS}'=='True'				WriteToFile		${LogFile}		Y 		Status - Pass [${Exp_Status}]
	...					ELSE 									WriteToFile		${LogFile}		Y	 	Status - Fail [${Exp_Status}]
	
	#### Pre-qualified bubble text
	${bbltxt}= 		Run Keyword And Continue On Failure		Run Keyword If 		${TransCode_Now}==1 and '${ACT_LT}'=='Pre-qualified'		Get Prequal Bubble Text		${Row_No}	${Index}	${AppNameSH}	${Img_Dict}
	...														ELSE IF 			${TransCode_Now}==2	and '${ACT_LT}'=='Pre-qualified'		Get Prequal Bubble Text		${Row_No}	${Index}	${AppNameSH}	${Img_Dict}
	...														ELSE 		Set Variable 				${EMPTY}
	##############################################
	
	#### Adding text to bubble dictionary
	${Leads_Row_Dict}=		Create Dictionary
	
	Set To Dictionary		${Leads_Row_Dict}		PQ_Bubble_Text			${bbltxt}
	Set To Dictionary		${Leads_Row_Dict}		Status					${Exp_Status}
	Set To Dictionary		${Leads_Row_Dict}		Prequal Image Dict		${Img_Dict}
	
	
	# Final prequal status - pass or fail
	${stat_img}=		Run Keyword And Return Status 		Page Should Contain Element 	//table[@id='DGLeadsReport']/tbody/tr[${Row_No}]/td[6]/table/tbody/tr/td[2]/img
	${Final_Preq_Stat}=		Run Keyword If 		'${stat_img}'=='True'		Selenium2Library.Get Element Attribute		//table[@id='DGLeadsReport']/tbody/tr[${Row_No}]/td[6]/table/tbody/tr/td[2]/img@src
	...						ELSE 				Set Variable 				${EMPTY}
	
	${Fin_Act_Image_Name}=		Run Keyword If 		'${stat_img}'=='True'	Fetch From Right 	${Final_Preq_Stat}		/images/icons/
	...							ELSE 				Set Variable 				${EMPTY}
	
	Set To Dictionary		${Leads_Row_Dict}		Final Image			${Fin_Act_Image_Name}
	
	### Adding details Index wise to main dict
	Set To Dictionary		${Lead_Summary_Dict}		${Index}		${Leads_Row_Dict}
	
	Set Suite Variable 		${Lead_Summary_Dict}	

Verify Application Status	[Arguments] 	${Exp_Status} 	${Record}

	WriteToFile		${LogFile}		Y		Verify Application Status>>>

	Wait Until Page Contains Element		//table[@id='DGLeadsReport']/tbody/tr[${Row_No}]/td[9]		10s
	
	${is_pass}=		Run Keyword And Return Status 		Get Text		//table[@id='DGLeadsReport']/tbody/tr[${Row_No}]/td[9]
	Run Keyword If 		'${is_pass}'=='False'			Sleep 			2s
	Wait Until Keyword Succeeds       120s    3s         Page Should Contain Element  		//table[@id='DGLeadsReport']/tbody/tr[${Row_No}]/td[9]		loglevel=None
	
	
	${ACT_Stat1}=		Get Text		//table[@id='DGLeadsReport']/tbody/tr[${Row_No}]/td[9]
	${ACT_Stat}=		Evaluate		str('${ACT_Stat1}').strip()
	Run Keyword And Continue On Failure 	Run Keyword If		'${EXEC_STATUS}'!='True'	Fail 	Folder: ${Input_Folder} - Comparision of Status failed on My Leads page. Expected value: ${Exp_Status}. Actual value: ${ACT_Stat}.		values=False

Get Prequal Bubble Text		[Arguments]	${Row_No}	${Index}	${AppNameSH}	${Img_Dict}

	WriteToFile			${LogFile}			Y						Get Prequal Bubble Text>>>	

	${bbltxt}=			Set Variable 		${EMPTY}
	${Link_Index}=		Set Variable		${Row_No}
	${stat}=			Evaluate			${Row_No}>=10
	${Link_Val}=		Run Keyword If 		'${stat}'!='True'		Set Variable 	DGLeadsReport_ctl0${Link_Index}_lnkDGLeadsReport_ctl0${Link_Index}_ctl00
	...					ELSE 				Set Variable 				DGLeadsReport_ctl${Link_Index}_lnkDGLeadsReport_ctl${Link_Index}_ctl00
	
	Log 				${Link_Val}
	Sleep 		2s
	Press Key 		//a[@id='${Link_Val}']	\\13
	Sleep 		2s
	${stat1}=		Run Keyword And Return Status 	 Wait Until Keyword Succeeds    60s    3s    Page Should Contain Element    //html/body/div/div/div[@id='banks']/div[@id='content']	    Prequalification Bubble text is not shown on My Leads Page for ${AppNameSH}.    loglevel=NONE
	
	${stat_bubble}=		Run Keyword And Return Status 		Page Should Contain Element    //html/body/div/div/div[@id='banks']/div[@id='content']	    Prequalification Bubble text is not shown on My Leads Page for ${AppNameSH}.    loglevel=NONE
	
	${bbltxt}=		Run Keyword If 		'${stat_bubble}'=='True'		Get Text 		//html/body/div/div/div[@id='banks']/div[@id='content']
	...				ELSE 				Set Variable 					${EMPTY}
	
	Run Keyword If 						'${stat_bubble}'!='True'		Fail 		Folder: ${Input_Folder} - ${AppNameSH} - No details are shown in Pre-qual bubble.	
	Log 			${bbltxt}
	
	# Adding Image details
	###########################################
	# get row count - Applicant
	${cnt}= 	Get Matching Xpath Count 		//html/body/div[3]/div/div[@id='banks']/div[@id='content']/table/tbody/tr[@id='primaryapp']/td[1]/div/table/tbody/tr
	
	# ${CR_SCORE_TEXT}=    Get Text    //html/body/div[3]/div/div[@id='banks']/div[@id='content']/table/tbody/tr/td/div/table/tbody/tr[1]/td[1]/b
    :FOR 	${I} 	IN RANGE	1 	${cnt}+1
	\		${I}=		Convert To Integer 		${I}
	\		Log 		${I}
	\		${rowname}=		Get Text 		 //html/body/div[3]/div/div[@id='banks']/div[@id='content']/table/tbody/tr/td/div/table/tbody/tr[${I}]/td[1]/b
	\		${Img_Val}=		Selenium2Library.Get Element Attribute		//div[@id='content']//tr[@id='primaryapp']/td[1]/div/table/tbody/tr[${I}]/td[3]/img@src
	\		${Act_Image_Name}=		Fetch From Right 	${Img_Val}		/images/icons/
	\		Set To Dictionary 		${Img_Dict}		App ${rowname} 		${Act_Image_Name}
	
	Set Suite Variable 		${Img_Dict}	
	###########################################
	# get row count - CoApplicant
	${cnt_CoApp}= 	Get Matching Xpath Count 		//html/body/div[3]/div/div[@id='banks']/div[@id='content']/table/tbody/tr[@id='coapp']/td[1]/div/table/tbody/tr
	
	Run Keyword If 		${cnt_CoApp}>0 		Add CoApp Image Details		${Img_Dict}		${cnt_CoApp}
	
	Log Dictionary			${Img_Dict}	
	Set Suite Variable 		${Img_Dict}	
	
	
	Sleep 			1s
	# Press Key		//html/body/div/div/div[@id='banks']/div[3]/a/img[@src='../../images/icon_tooltip_close.gif']		\\13	
	
	[Return]		${bbltxt}	
	
	# #### Adding text to bubble dictionary
	# Set To Dictionary		${Lead_Summary_Dict}		${Index}	${bbltxt}
	# Log Dictionary			${Lead_Summary_Dict}	
	
	
Add CoApp Image Details		[Arguments]	${Img_Dict}		${cnt_CoApp}

	WriteToFile		${LogFile}		Y		Add CoApp Image Details>>>


	:FOR 	${I} 	IN RANGE	1 	${cnt_CoApp}+1
	\		${I}=		Convert To Integer 		${I}
	\		Log 		${I}
	\		${rowname}=		Get Text 		 //html/body/div[3]/div/div[@id='banks']/div[@id='content']/table/tbody/tr[@id='coapp']/td/div/table/tbody/tr[${I}]/td[1]/b
	\		${Img_Val}=		Selenium2Library.Get Element Attribute		//div[@id='content']//tr[@id='coapp']/td[1]/div/table/tbody/tr[${I}]/td[3]/img@src
	\		${Act_Image_Name}=		Fetch From Right 	${Img_Val}		/images/icons/
	\		Set To Dictionary 		${Img_Dict}		CoApp ${rowname} 	${Act_Image_Name}	
	
	Log Dictionary			${Img_Dict}	
	Set Suite Variable 		${Img_Dict}	
	
Remove Duplicate Index From List For UI Validation	[Arguments]		${Global_Dict}		${List_CustArchive}		
	Log Dictionary 		${Global_Dict}
	Log List 			${List_CustArchive}
	
	@{PQList}=		Create List
	
	${len}= 	Get Length 		${Global_Dict}	
	
	:FOR 	${I}				IN RANGE 				0 		${len}
	\		${dict}=			Get From Dictionary		${Global_Dict}		${I}
	\		Log Dictionary		${dict}
	\		${TRANSCODE}=		Get From Dictionary		${dict}				TransCode
	\		${PreQ}=			Run Keyword If 		'${TRANSCODE}'=='4'		Get From Dictionary		${dict}				REF PQ
	\		...					ELSE 				Set Variable 			${EMPTY}
	\		Run Keyword If 		'${TRANSCODE}'=='4' and '${PreQ}'!='${EMPTY}'		Append To List	 	${PQList}	${PreQ}
	
	Log List 	${PQList}
	
	@{IndexList}=	Create List
	
	${len}= 	Get Length 		${PQList}	
	:FOR 	${I}					IN RANGE 				0 				${len}
	\		${Item}=				Get From List 			${PQList}		${I}
	\		${IndexFromGlobal}=		Get Index From Global 	${Item}			${Global_Dict}
	\		Append To List 			${IndexList}			${IndexFromGlobal}	
	
	Log List 	${IndexList}
	
	${Copied_CustList}=		Copy List 	${List_CustArchive}	
	
	${len}= 	Get Length 		${IndexList}	
	:FOR 	${I}				IN RANGE 			0 		${len}
	\		${Val}=				Get From List 		${IndexList}		${I}
	\		${stat}=			Run Keyword And Return Status 		List Should Contain Value 		${List_CustArchive}		${Val}
	\		Run Keyword If 		${stat}		Remove Values From List 	${Copied_CustList}		${Val}

	Log List 		${Copied_CustList}
	[Return]		${Copied_CustList}
	
	
Get Index From Global 	[Arguments]		${Item}		${Global_Dict}
	Log 		${Item}
	${CNT}=		Get Length 		${Global_Dict}
	${Id}=		Set Variable 	${EMPTY}
	:FOR 	${I}			IN RANGE 				0 				${CNT}
	\		${dict1}=			Get From Dictionary		${Global_Dict}		${I}
	\		Log Dictionary		${dict1}
	\		${TC}=				Get From Dictionary		${dict1}				TransCode
	\		${PreQ1}=			Run Keyword If 			'${TC}'=='1'		Get From Dictionary		${dict}				REF PQ
	\		${Id}=				Run Keyword If 			'${TC}'=='1' and '${PreQ1}'=='${Item}'	Set Variable 		${I}
	\		...					ELSE 					Set Variable 			${EMPTY}
	\		Run Keyword If 		'${TC}'=='1' and '${PreQ1}'=='${Item}'	Exit For Loop
	
	[Return]	${Id}	

######################################################################################
Get Subdirectories 1		[Arguments]				${FOLDER_NAME}		${ParentList}

	# This routine will return a list containing all the subfolders and their subfolders (up to 9 levels I think) of whatever starting folder is passed in
	
	${TempList}=	 		List Directories In Directory				${FOLDER_NAME}		*		absolute=true
	${ParentList}=			Combine Lists			${ParentList}		${TempList}	
	${LenParent}=			Get Length				${ParentList}	
	:FOR 	${I}			IN RANGE 		0 		${LenParent}	
	\		${FolderName}=	Get From List 			${ParentList}		${I}	
	\		${TempList}=	List Directories In Directory				${FolderName}		*		absolute=true
	\		${ParentList}=	Combine Lists			${ParentList}		${TempList}	

	:FOR 	${I}			IN RANGE 		0 		9	
	\		${ParentList}=	Run Keyword		Get Subdirectories 2	${ParentList}
	
	Sort List				${ParentList}
	${ParentList}=			Remove Duplicates		${ParentList}

	[Return]				${ParentList}
	
####################################################################	
Get Subdirectories 2		[Arguments]				${ParentList}

	${ParentList}=			Remove Duplicates		${ParentList}
	${LenParent}=			Get Length				${ParentList}	
	:FOR 	${I}			IN RANGE 	0 			${LenParent}	
	\		${FolderName}=	Get From List 			${ParentList}		${I}
	\		${TempList}=	List Directories In Directory				${FolderName}		*		absolute=true
	\		${ParentList}=	Combine Lists			${ParentList}		${TempList}	

	[Return]				${ParentList}
	
Check Records On Customer Archive Page
	[Arguments]			${Global_Dict}				${List_CustArchive}		${CustArchiveSleep}

	WriteToFile			${logfile}					Y						Check Records On Customer Archive Page>>>
	WriteToFile			${logfile}					Y						CustArchiveSleep=${CustArchiveSleep}
	Sleep 				${CustArchiveSleep}
	Log Dictionary		${Global_Dict}
	
	Log List 					${List_CustArchive}	
	${CountCust}= 				Get Length 		${List_CustArchive}			
	${CountCustStat}=			Run Keyword And Return Status 		Evaluate 	${CountCust}<20
	Run Keyword And Continue On Failure 	 		Run Keyword If 				'${CountCustStat}'!='True'			Fail 	Total requests sent for Validation on Customer Archive Page: ${CountCust}. For validating records on Customer Archive Page UI please send 20 requests at the maximum.		
	
	Run Keyword If 				'${CountCustStat}'=='True'		Unselect Frame
	Run Keyword If 				'${CountCustStat}'=='True'		Navigate To Customer Archive
	Run Keyword If 				'${CountCustStat}'=='True'		Wait Till All Records Are Shown On Customer Archive Page 		${Global_Dict}		${List_CustArchive}
	Run Keyword If 				'${CountCustStat}'=='True'		Validate Customer Archive Page 							${Global_Dict}				${List_CustArchive}

Check Records On My Leads Page		[Arguments]		${Global_Dict}				${List_LeadsSummary}		${MyLeads_Sleep}

	WriteToFile			${LogFile}		Y			Check Records On My Leads Page>>>
	WriteToFile			${LogFile}		Y			MyLeads_Sleep=${MyLeads_Sleep}

	Log Dictionary		${Global_Dict}
	Sleep 				${MyLeads_Sleep}
	Log List 							${List_LeadsSummary}
	${CountLeads}= 						Get Length 		${List_LeadsSummary}			
	${CountLeadStat}=					Run Keyword And Return Status 		Evaluate 	${CountLeads}<20
	Run Keyword And Continue On Failure 	 		Run Keyword If 			'${CountLeadStat}'!='True'		Fail 	Total requests sent for Validation on My Leads Page: ${CountLeads}. For validating records on My Leads Page UI please send 20 requests at the maximum.		
	
	Run Keyword If 				'${CountLeadStat}'=='True'		Unselect Frame
	Run Keyword If 				'${CountLeadStat}'=='True'		Navigate To My Leads
	Run Keyword If 				'${CountLeadStat}'=='True'		Wait Till All Records Are Shown On My Leads Page 		${Global_Dict}				${List_LeadsSummary}	
	Run Keyword If 				'${CountLeadStat}'=='True'		My Leads Summary Page Validation						${Global_Dict}				${List_LeadsSummary}	
	
# Remove Credit Score Ranges		[Arguments]		${val}
	# Run Keyword If 		'${status_enabled}'!='True' 				Press Key 		//div[@id='tierDisplayDiv0']/span[3]/a		\\13	
	# Run Keyword If 		'${status_enabled}'!='True'					Sleep 			1s
	
	# ${Removelink}=		Run Keyword And Return Status 		Page Should Contain Element 		//tr[@id='divTier3']//td[3]//a[@id='lnkRemoveTier3']		loglevel=NONE	
	
	# Run Keyword If 		'${status_enabled}'!='True' and '${Removelink}'=='True'		Mouse Down 		//tr[@id='divTier3']//td[3]//a[@id='lnkRemoveTier3']
	# Run Keyword If 		'${status_enabled}'!='True' and '${Removelink}'=='True'		Mouse Up 		//tr[@id='divTier3']//td[3]//a[@id='lnkRemoveTier3']
	# Run Keyword If 		'${status_enabled}'!='True' and '${Removelink}'=='True'		Sleep 			1s
	
	# ${Removelink}=		Run Keyword And Return Status 		Page Should Contain Element 		//tr[@id='divTier2']//td[3]//a[@id='lnkRemoveTier2']		loglevel=NONE	
	# Run Keyword If 		'${status_enabled}'!='True' and '${Removelink}'=='True'		Mouse Down 		//tr[@id='divTier2']//td[3]//a[@id='lnkRemoveTier2']
	# Run Keyword If 		'${status_enabled}'!='True' and '${Removelink}'=='True'		Mouse Up 		//tr[@id='divTier2']//td[3]//a[@id='lnkRemoveTier2']
	# Run Keyword If 		'${status_enabled}'!='True' and '${Removelink}'=='True'		Sleep 			1s
	
	# ${Removelink}=		Run Keyword And Return Status 		Page Should Contain Element 		//tr[@id='divTier1']//td[3]//a[@id='lnkRemoveTier1']		loglevel=NONE	
	# Run Keyword If 		'${status_enabled}'!='True' and '${Removelink}'=='True'		Mouse Down 		//tr[@id='divTier1']//td[3]//a[@id='lnkRemoveTier1']
	# Run Keyword If 		'${status_enabled}'!='True' and '${Removelink}'=='True'			Mouse Up 		//tr[@id='divTier1']//td[3]//a[@id='lnkRemoveTier1']
	# Run Keyword If 		'${status_enabled}'!='True' and '${Removelink}'=='True'		Sleep 			1s
	
	# Run Keyword If 		'${status_enabled}'!='True'			Press Key 		//input[@id='SaveCreditScoreTiers']		\\13
	
	# Run Keyword If 		'${status_enabled}'!='True'		sleep 	1s
	# Run Keyword If 		'${status_enabled}'!='True'		Mouse Down 		//input[@id='CreditScoreTierRules_0__RuleCriteriaValue']
	# Run Keyword If 		'${status_enabled}'!='True'		Mouse Up 		//input[@id='CreditScoreTierRules_0__RuleCriteriaValue']
	# Run Keyword If 		'${status_enabled}'!='True'		Input Text		//input[@id='CreditScoreTierRules_0__RuleCriteriaValue']		${val}
	

############### Manisha - Keywords from Preferences #########################
#############################################################################################
Set FD UI Preferences		[Arguments]			${PrefDict}
#############################################################################################

	WriteToFile			${logfile}			Y		Set FD UI Preferences>>>
	
	Log Dictionary 		${PrefDict}			
	
	Navigate To Preferences		PrequalificationsAndRouting
	
	# # # Wait Until Keyword Succeeds   240s	3s   	Page Should Contain Element 	//iframe[@id='iFrm']	Frame is not loaded on FD Preferences page.
	# # # Wait Until Page Contains Element            //iframe[@id='iFrm']
	# # # Select Frame                                iFrm
	# # # Wait Until Page Contains Element            //frame[@name='main']
	# # # Select Frame                                main

	# # # # Click on Edit button
	# # # Wait Until Keyword Succeeds       240s      3s         Page Should Contain Element             //a[@href='/FinanceDriver/DealerPartnerIntegration/PrequalificationAndRouting?IsEditMode=True'] 		Edit button is not found.	loglevel=NONE		
	# # # Press Key									//a[@href='/FinanceDriver/DealerPartnerIntegration/PrequalificationAndRouting?IsEditMode=True']					\\13
	
	# wait until page is loaded
	# # # Wait Until Keyword Succeeds       240s      3s          Page Should Contain Element             //input[@id='SavePrequalificationAndRouting'] 		Page 'Leads Partner Integration | Prequalification & Routing' is not loded correctly.		loglevel=NONE	
	
	################
	# Bureau Provider
	################
	Page Should Contain Element 	//input[@id='bureauprovider0']		Radio button for Equifax is not found. Please check if Bureau Codes are set for the dealership.		loglevel=NONE
	
	# ${val}= 		Get From List 	${PrefList}		0
	${val}= 		Get From Dictionary 	${PrefDict}		Bureau
	Run Keyword If 		'${val}'=='EQU'		Select A Radio Button		bureauprovider0
	...		ELSE IF 	'${val}'=='EXP'		Select A Radio Button		bureauprovider1
	...		ELSE IF 	'${val}'=='TU'		Select A Radio Button		bureauprovider2
	...		ELSE IF 	'${val}'=='NON'		Select A Radio Button		bureauprovider3
	
	Sleep 	1s
	
	################
	# Run Red Flags
	################
	# ${val}= 			Get From List 	${PrefList}		1
	${val}= 			Get From Dictionary 	${PrefDict}		Red Flags
	# get status of the checkbox 	
	${Is_Checked}= 		Selenium2Library.Get Element Attribute		//input[@id='RunRedFlag']@checked
	# Run Keyword If 		'${val}'=='Y' and '${Is_Checked}'!='true'	Mouse Down 		//input[@id='RunRedFlag']
	# Run Keyword If 		'${val}'=='Y' and '${Is_Checked}'!='true'	Mouse Up 		//input[@id='RunRedFlag']
	
	Run Keyword If		'${val}'=='Y'		Select/Unselect Checkbox		RunRedFlag		Select	
	... 	ELSE IF		'${val}'=='N'		Select/Unselect Checkbox		RunRedFlag		Unselect	
	
	
	#############
	# change credit score
	# ${val}= 			Get From List 	${PrefList}		2
	${CB_val}= 			Get From Dictionary 	${PrefDict}		Credit Score 
	
	Wait Until Keyword Succeeds       240s      3s          Page Should Contain Element             //input[@id='CreditScoreTierRules_0__RuleCriteriaValue']  	 	'Credit Score' text box is not found.		loglevel=NONE	
	Wait Until Element is Enabled		//input[@id='CreditScoreTierRules_0__RuleCriteriaValue']		10
	
	${status_enabled}=			Run Keyword And Return Status 		Input Text		//input[@id='CreditScoreTierRules_0__RuleCriteriaValue']		${CB_val}
	
	Run Keyword If 		'${status_enabled}'!='True' 	Remove Credit Score Ranges		${CB_val}
	
	Sleep 	2s
	
	# change years at job
	# ${val}= 			Get From List 	${PrefList}		3
	${YR_val}= 			Get From Dictionary 	${PrefDict}		Years Job
	Wait Until Keyword Succeeds       240s      3s          Page Should Contain Element             //input[@id='NonCreditScoreRules_0__RuleCriteriaValue']  	 	'Years at Currect Job' text box is not found.		loglevel=NONE	
	Wait Until Element is Enabled		//input[@id='NonCreditScoreRules_0__RuleCriteriaValue']		10
	Input Text		//input[@id='NonCreditScoreRules_0__RuleCriteriaValue']		${YR_val}
	
	# change annual income
	# ${val}= 			Get From List 	${PrefList}		4
	${IN_val}= 			Get From Dictionary 	${PrefDict}		Income
	Wait Until Keyword Succeeds       240s      3s          Page Should Contain Element             //input[@id='NonCreditScoreRules_1__RuleCriteriaValue']  	 	'Annual Income' text box is not found.		loglevel=NONE	
	Wait Until Element is Enabled		//input[@id='NonCreditScoreRules_1__RuleCriteriaValue']		10
	Input Text		//input[@id='NonCreditScoreRules_1__RuleCriteriaValue']	 	${IN_val}
	
	# change total banruptcies
	# ${val}= 			Get From List 	${PrefList}		5
	${BK_val}= 			Get From Dictionary 	${PrefDict}		Bankrupt
	Wait Until Keyword Succeeds       240s      3s          Page Should Contain Element             //input[@id='NonCreditScoreRules_2__RuleCriteriaValue']  	 	'Total Bankruptcies' text box is not found.		loglevel=NONE	
	Wait Until Element is Enabled		//input[@id='NonCreditScoreRules_2__RuleCriteriaValue']		10
	Input Text		//input[@id='NonCreditScoreRules_2__RuleCriteriaValue']		${BK_val}
	
	# change total open sat
	# ${val}= 			Get From List 	${PrefList}		6
	${TD_val}= 			Get From Dictionary 	${PrefDict}		Tradelines 
	Wait Until Keyword Succeeds       240s      3s          Page Should Contain Element             //input[@id='NonCreditScoreRules_3__RuleCriteriaValue']  	 	'Total Open Satisfactory Tradelines' text box is not found.		loglevel=NONE	
	Wait Until Element is Enabled		//input[@id='NonCreditScoreRules_3__RuleCriteriaValue']		10
	Input Text		//input[@id='NonCreditScoreRules_3__RuleCriteriaValue']		${TD_val}
	
	# Only Run checkbox
	# ${val}= 			Get From List 	${PrefList}		7
	${val}= 			Get From Dictionary 	${PrefDict}		OnlyRun 
	
	Run Keyword If		'${val}'=='OnlyYes'		Select/Unselect Checkbox		IsApplyPrimaryRule		Select	
	... 	ELSE IF		'${val}'=='OnlyNo'		Select/Unselect Checkbox		IsApplyPrimaryRule		Unselect	
	
	# Send Detailed/ Send status only
	# ${val}= 			Get From List 	${PrefList}		8
	${val_Detail}= 			Get From Dictionary 	${PrefDict}		DetailedOrStatus 
	${Is_Checked}= 		Selenium2Library.Get Element Attribute		//input[@id='DecisionResponse0']@checked
	Run Keyword If		'${val_Detail}'=='Detailed' and '${Is_Checked}'!='true'	Mouse Down 		//input[@id='DecisionResponse0']
	Run Keyword If		'${val_Detail}'=='Detailed' and '${Is_Checked}'!='true'	Mouse Up 		//input[@id='DecisionResponse0']
	
	${Is_Checked}= 		Selenium2Library.Get Element Attribute		//input[@id='DecisionResponse1']@checked
	Run Keyword If		'${val_Detail}'!='Detailed' and '${Is_Checked}'!='true'	Mouse Down 		//input[@id='DecisionResponse1']
	Run Keyword If		'${val_Detail}'!='Detailed' and '${Is_Checked}'!='true'	Mouse Up 		//input[@id='DecisionResponse1']
	
	# markup
	# ${M_val}= 			Get From List 	${PrefList}		9
	${M_val}= 			Get From Dictionary 	${PrefDict}		BuyRate 
	Run Keyword If		'${val_Detail}'=='Detailed'			Input Text 		//input[@id='RateMarkup']		${M_val}
	
	#############################
	# Credit Bureau ranges -  tire2
	${stat}=			Run Keyword And Return Status	Get From Dictionary 	${PrefDict}		Range1 
	${Score_Val}= 			Run Keyword If 		'${stat}'=='True'	Get From Dictionary 	${PrefDict}		Range1
	...					ELSE 				Set Variable 	${EMPTY}
	
	# ${stat_tier}=			Run Keyword And Return Status 	Should Contain 	${val}	Tier2	
	# @{Range2}=			Run Keyword If 		'${stat_tier}'=='True'		Split String 		${val}		-		
	# ${Score_Val}=		Run Keyword If 		'${stat_tier}'=='True'		Get From List 		${Range2}	1
	# ...					ELSE 				Set Variable 			${EMPTY}
	
	# Click on link if tier-2 has value
	Run Keyword If 		'${Score_Val}'!='${EMPTY}'		Press Key 		//div[@id='tierEditPageTextBox']/span[2]/a		\\13
	Run Keyword If 		'${Score_Val}'!='${EMPTY}'		sleep 	1s
	Run Keyword If 		'${Score_Val}'!='${EMPTY}'		Wait Until Keyword Succeeds       240s      3s          Page Should Contain Element 		//div[@id='nyroModalContent']//table/tbody/tr[@id='divTier0']		loglevel=NONE	
	
	Run Keyword If 		'${Score_Val}'!='${EMPTY}'		Mouse Down 		//div[@id='nyroModalContent']//table/tbody/tr[@id='divTier0']/td[3]/a[@id='lnkAddTier0']			
	Run Keyword If 		'${Score_Val}'!='${EMPTY}'		Mouse Up 		//div[@id='nyroModalContent']//table/tbody/tr[@id='divTier0']/td[3]/a[@id='lnkAddTier0']	
	Run Keyword If 		'${Score_Val}'!='${EMPTY}'		Sleep 	1s
	
	# enter score value
	Run Keyword If 		'${Score_Val}'!='${EMPTY}'		Input Text 		//input[@id='txtTier1']		${Score_Val}
	#############################
	# Credit Bureau ranges - tier 3
	sleep 	1s
	
	${stat}=			Run Keyword And Return Status	Get From Dictionary 	${PrefDict}		Range2 
	${Score_Val}= 			Run Keyword If 		'${stat}'=='True'	Get From Dictionary 	${PrefDict}		Range2
	...					ELSE 				Set Variable 	${EMPTY}
	
	# Click on link if tier-2 has value
	Run Keyword If 		'${Score_Val}'!='${EMPTY}'	Wait Until Keyword Succeeds       240s      3s          Page Should Contain Element 		//table/tbody/tr[@id='divTier1']/td[3]/a[@id='lnkAddTier1']		loglevel=NONE	
	
	Run Keyword If 		'${Score_Val}'!='${EMPTY}'		Mouse Down 		//div[@id='nyroModalContent']//table/tbody/tr[@id='divTier1']/td[3]/a[@id='lnkAddTier1']	
	Run Keyword If 		'${Score_Val}'!='${EMPTY}'		Mouse Up 		//div[@id='nyroModalContent']//table/tbody/tr[@id='divTier1']/td[3]/a[@id='lnkAddTier1']	
	Run Keyword If 		'${Score_Val}'!='${EMPTY}'		Sleep 	1s
	
	# enter score value
	Run Keyword If 		'${Score_Val}'!='${EMPTY}'		Input Text 		//input[@id='txtTier2']		${Score_Val}
	
	
	#############################
	# Credit Bureau ranges - tier 4
	sleep 	1s
	
	${stat}=			Run Keyword And Return Status	Get From Dictionary 	${PrefDict}		Range3
	${Score_Val}= 			Run Keyword If 		'${stat}'=='True'	Get From Dictionary 	${PrefDict}		Range3
	...					ELSE 				Set Variable 	${EMPTY}
	
	# Click on link if tier-2 has value
	Run Keyword If 		'${Score_Val}'!='${EMPTY}'		Wait Until Keyword Succeeds       240s      3s          Page Should Contain Element 		//table/tbody/tr[@id='divTier2']/td[3]/a[@id='lnkAddTier2']		loglevel=NONE	
	
	Run Keyword If 		'${Score_Val}'!='${EMPTY}'		Mouse Down 		//div[@id='nyroModalContent']//table/tbody/tr[@id='divTier2']/td[3]/a[@id='lnkAddTier2']	
	Run Keyword If 		'${Score_Val}'!='${EMPTY}'		Mouse Up 		//div[@id='nyroModalContent']//table/tbody/tr[@id='divTier2']/td[3]/a[@id='lnkAddTier2']	
	Run Keyword If 		'${Score_Val}'!='${EMPTY}'		Sleep 	1s
	
	# enter score value
	Run Keyword If 		'${Score_Val}'!='${EMPTY}'		Input Text 		//input[@id='txtTier3']		${Score_Val}
	
	Run Keyword If 		'${Score_Val}'!='${EMPTY}'	sleep 	1s
	Run Keyword If 		'${Score_Val}'!='${EMPTY}'		Press Key 	//input[@id='SaveCreditScoreTiers']		\\13
	
	Run Keyword If 		'${Score_Val}'!='${EMPTY}'		sleep		2s
	Press Key		//input[@id='SavePrequalificationAndRouting']		\\13

	
	
	${ERR_Text}=	Set Variable			${EMPTY}
	
	${CB_val}=		Run Keyword If 			'${CB_val}'!='${EMPTY}'		Convert To Integer		${CB_val}
	...				ELSE 					Set Variable 				${EMPTY}
	${YR_val}=		Run Keyword If 			'${YR_val}'!='${EMPTY}'		Convert To Integer		${YR_val}
	...				ELSE 					Set Variable 				${EMPTY}
	${IN_val}=		Run Keyword If 			'${IN_val}'!='${EMPTY}'		Convert To Integer		${IN_val}
	...				ELSE 					Set Variable 				${EMPTY}
	${BK_val}=		Run Keyword If 			'${BK_val}'!='${EMPTY}'		Convert To Integer		${BK_val}
	...				ELSE 					Set Variable 				${EMPTY}
	${TD_val}=		Run Keyword If 			'${TD_val}'!='${EMPTY}'		Convert To Integer		${TD_val}
	...				ELSE 					Set Variable 				${EMPTY}
	
	${M_val}=		Run Keyword If 			'${M_val}'!='${EMPTY}'		Convert To Number		${M_val}
	...				ELSE 					Set Variable 				${EMPTY}
	
	sleep 	10s
	###############################################
	# Credit Score
	Log 		CB: ${CB_val}	
	${is_EMPTY}=	Run Keyword And Return Status 		Should Be Empty 	${CB_val}
	
	${stat1}=	Run Keyword If 		'${is_EMPTY}'=='False'  	Check Range		${CB_val}	300		850
	...			ELSE 				Set Variable 		Pass
	
	
	# Years At Job
	Log 		YR: ${YR_val}	
	${is_EMPTY}=	Run Keyword And Return Status 		Should Be Empty 	${YR_val}
	${stat2}=	Run Keyword If 		'${is_EMPTY}'=='False'  	Check Range		${YR_val}	0		99
	...			ELSE 				Set Variable 		Pass
	
	
	# Income
	Log 		IN: ${IN_val}	
	${is_EMPTY}=	Run Keyword And Return Status 		Should Be Empty 	${IN_val}
	${stat3}=	Run Keyword If 		'${is_EMPTY}'=='False'  	Check Range		${IN_val}	0		999999
	...			ELSE 				Set Variable 		Pass
	
	
	# bankruptcies
	Log 		BK: ${BK_val}	
	${is_EMPTY}=	Run Keyword And Return Status 		Should Be Empty 	${BK_val}
	${stat4}=	Run Keyword If 		'${is_EMPTY}'=='False'  	Check Range		${BK_val}	0		9
	...			ELSE 				Set Variable 		Pass
	
	# tradelines
	Log 		TD: ${TD_val}	
	${is_EMPTY}=	Run Keyword And Return Status 		Should Be Empty 	${TD_val}
	${stat5}=		Run Keyword If 		'${is_EMPTY}'=='False'  	Check Range		${TD_val}	0		99
	...			ELSE 				Set Variable 		Pass
	
	# Markuprate
	Log 		Markup: ${M_val}	
	${is_EMPTY}=	Run Keyword And Return Status 		Should Be Empty 	${M_val}
	${stat6}=		Run Keyword If 		'${is_EMPTY}'=='False'  	Check Range 	${M_val}	0		100
	...				ELSE 				Set Variable 		Pass
	
	# Markup if empty
	${stat7}=		Run Keyword If 		'${val_Detail}'=='Detailed' and '${is_EMPTY}'=='True'		Set Variable 	Fail
	...				ELSE 				Set Variable		Pass
	
	${markup_stat}=		Run Keyword If 		'${stat6}'=='Fail' or '${stat7}'=='Fail'		Set Variable 	Fail
	...					ELSE 				Set Variable 		Pass
	
	Log 	Credit Bureau: ${stat1}		warn
	Log 	Years at Job: ${stat2}		warn
	Log 	Income: ${stat3}			warn
	Log 	Bankruptcies: ${stat4}		warn
	Log 	Tradelines: ${stat5}		warn
	Log 	Markup Rate: ${markup_stat}		warn
	
	# wait for error
	Run Keyword If 		'${stat1}'=='Fail' or '${stat2}'=='Fail' or '${stat3}'=='Fail' or '${stat4}'=='Fail' or '${stat5}'=='Fail' or '${stat6}'=='Fail' or '${stat7}'=='Fail'  	Wait Until Keyword Succeeds             180s    3s          Page Should Contain Element             //div[@id='DTform']/div[@id='financeDriverMsgContainer']/div/ul 			Error frame was expected, it is not found. 		loglevel=NONE
	
	Run Keyword If 		'${stat1}'=='Fail' or '${stat2}'=='Fail' or '${stat3}'=='Fail' or '${stat4}'=='Fail' or '${stat5}'=='Fail' or '${stat6}'=='Fail' or '${stat7}'=='Fail' 		sleep 		8s
	
	################################################
	# Credit score
	${ERR_Text}=		Run Keyword If 		'${stat1}'=='Fail'		Get Text 		//div[@id='DTform']/div[@id='financeDriverMsgContainer']/div/ul
	...					ELSE				Set Variable 			${EMPTY}
	
	${result}=		Run Keyword If 		'${stat1}'!='Pass'		Run Keyword And Return Status 		Should Contain 			${ERR_Text}		Value of Credit Score should be between 300 and 850 
	...				ELSE 				Set Variable 			False
	
	Run Keyword And Continue On Failure 	Run Keyword If 		'${stat1}'!='Pass'		Should Contain 			${ERR_Text}		Value of Credit Score should be between 300 and 850 		${FILENAME}: Error was expected: Value of Credit Score should be between 300 and 850. This is not found. 	values=None
	# Run Keyword If 		'${result}'=='True'		Log 			${FILENAME}: Pass	WARN
	# ...		ELSE 								Log 			${FILENAME}: Fail	WARN
	
	###############################################
	# # Years At Job
	${ERR_Text}=		Run Keyword If 		'${stat2}'=='Fail'		Get Text 		//div[@id='DTform']/div[@id='financeDriverMsgContainer']/div/ul
	...					ELSE				Set Variable 			${EMPTY}
	
	Run Keyword And Continue On Failure 	Run Keyword If 		'${stat2}'!='Pass'	Should Contain 			${ERR_Text}		Value of Years at Current Job should be between 0 and 99 		${FILENAME}: Error was expected: Value of Years at Current Job should be between 0 and 99. This is not found. 	values=None
	# ${result}=		Run Keyword If 		'${stat2}'!='Pass'		Run Keyword And Return Status 		Should Contain 			${ERR_Text}		Value of Years at Current Job should be between 0 and 99 		Error was expected: Value of Years at Current Job should be between 0 and 99. This is not found. 	values=None
	# ...				ELSE 				Set Variable 			False
	
	# Run Keyword If 		'${result}'=='True'		Log 			${FILENAME}: Pass	WARN
	# ...		ELSE 								Log 			${FILENAME}: Fail	WARN
	
	###############################################
	# Annual Income
	${ERR_Text}=		Run Keyword If 		'${stat3}'=='Fail'		Get Text 		//div[@id='DTform']/div[@id='financeDriverMsgContainer']/div/ul
	...					ELSE				Set Variable 			${EMPTY}
	
	Run Keyword And Continue On Failure 	Run Keyword If 		'${stat3}'!='Pass'	Should Contain 			${ERR_Text}		Value of Annual Income should be between 0 and 999999 		${FILENAME}: Error was expected: Value of Annual Income should be between 0 and 999999. This is not found. 	values=None
	# ${result}=		Run Keyword If 		'${stat3}'!='Pass'		Run Keyword And Return Status 		Should Contain 			${ERR_Text}		Value of Annual Income should be between 0 and 999999 		Error was expected: Value of Annual Income should be between 0 and 999999. This is not found. 	values=None
	# ...				ELSE 				Set Variable 			False
	
	# Run Keyword If 		'${result}'=='True'		Log 			${FILENAME}: Pass	WARN
	# ...		ELSE 								Log 			${FILENAME}: Fail	WARN
	
	###############################################
	
	# Bankruptcies
	
	${ERR_Text}=		Run Keyword If 		'${stat4}'=='Fail'		Get Text 		//div[@id='DTform']/div[@id='financeDriverMsgContainer']/div/ul
	...					ELSE				Set Variable 			${EMPTY}
	
	Run Keyword And Continue On Failure 	Run Keyword If 		'${stat4}'!='Pass'	Should Contain 			${ERR_Text}		Value of Total Bankruptcies should be between 0 and 9 		${FILENAME}: Error was expected: Value of Total Bankruptcies should be between 0 and 9. This is not found. 	values=None
	# ${result}=		Run Keyword If 		'${stat4}'!='Pass'		Run Keyword And Return Status 		Should Contain 			${ERR_Text}		Value of Total Bankruptcies should be between 0 and 9 		Error was expected: Value of Total Bankruptcies should be between 0 and 9. This is not found. 	values=None
	# ...				ELSE 				Set Variable 			False
	
	# Run Keyword If 		'${result}'=='True'		Log 			${FILENAME}: Pass	WARN
	# ...		ELSE 								Log 			${FILENAME}: Fail	WARN
	
	###############################################
	# Tradelines
	
	${ERR_Text}=		Run Keyword If 		'${stat5}'=='Fail'		Get Text 		//div[@id='DTform']/div[@id='financeDriverMsgContainer']/div/ul
	...					ELSE				Set Variable 			${EMPTY}
	
	Run Keyword And Continue On Failure 	Run Keyword If 		'${stat5}'!='Pass'	Should Contain 			${ERR_Text}		Value of Total Open Satisfactory Tradelines should be between 0 and 99 		${FILENAME}: Error was expected: Value of Total Open Satisfactory Tradelines should be between 0 and 99. This is not found. 	values=None
	# ${result}=		Run Keyword If 		'${stat5}'!='Pass'		Run Keyword And Return Status 		Should Contain 			${ERR_Text}		Value of Total Open Satisfactory Tradelines should be between 0 and 99 		Error was expected: Value of Total Open Satisfactory Tradelines should be between 0 and 99. This is not found. 	values=None
	# ...				ELSE 				Set Variable 			False
	
	# Run Keyword If 		'${result}'=='True'		Log 			${FILENAME}: Pass	WARN
	# ...		ELSE 								Log 			${FILENAME}: Fail	WARN
	
	#######################################################
	
	# Buy rate markup
	
	${ERR_Text}=		Run Keyword If 		'${stat6}'=='Fail' 		Get Text 		//div[@id='DTform']/div[@id='financeDriverMsgContainer']/div/ul
	...					ELSE				Set Variable 			${EMPTY}
	
	Run Keyword And Continue On Failure 	Run Keyword If 		'${stat6}'!='Pass'		Check Error Messages For Buy Markup		${ERR_Text}
	# ...		ELSE 		Set Variable 		${EMPTY}
	
	#######################################################
	# Empty Markup
	${ERR_Text}=		Run Keyword If 		'${stat7}'=='Fail' 		Get Text 		//div[@id='DTform']/div[@id='financeDriverMsgContainer']/div/ul
	...					ELSE				Set Variable 			${EMPTY}
	
	Run Keyword And Continue On Failure 	Run Keyword If 		'${stat7}'!='Pass'		Should Contain 			${ERR_Text}		Rate markup field is required 		${FILENAME}: Error was expected: Rate markup field is required. This is not found. 	values=None
	# # ...		ELSE 		Set Variable 		${EMPTY}
	# ${result}=		Run Keyword If 		'${stat7}'!='Pass'		Run Keyword And Return Status 		Should Contain 			${ERR_Text}		Rate markup field is required 		Error was expected: Rate markup field is required. This is not found. 	values=None
	# ...				ELSE 				Set Variable 			False
	
	# Run Keyword If 		'${result}'=='True'		Log 			${FILENAME}: Pass	WARN
	# ...		ELSE 								Log 			${FILENAME}: Fail	WARN
	
		
	Run Keyword If 		'${stat1}'=='Pass' and '${stat2}'=='Pass' and '${stat3}'=='Pass' and '${stat4}'=='Pass' and '${stat5}'=='Pass' and '${stat6}'=='Pass' and '${stat7}'=='Pass'		Wait Until Keyword Succeeds             180s    3s          Page Should Contain Element             //*[text()='Leads Partner Integration | Edit Setup'] 			loglevel=NONE
	
	Run Keyword If 		'${stat1}'=='Fail' or '${stat2}'=='Fail' or '${stat3}'=='Fail' or '${stat4}'=='Fail' or '${stat5}'=='Fail' or '${stat6}'=='Fail' or '${stat7}'=='Fail'		Press Key		//input[@id='Cancel']		\\13
	Run Keyword If 		'${stat1}'=='Fail' or '${stat2}'=='Fail' or '${stat3}'=='Fail' or '${stat4}'=='Fail' or '${stat5}'=='Fail' or '${stat6}'=='Fail' or '${stat7}'=='Fail'		Sleep 			5s
	Unselect Frame
	
	${Ret_Val}=		Run Keyword If 		'${stat1}'=='Pass' and '${stat2}'=='Pass' and '${stat3}'=='Pass' and '${stat4}'=='Pass' and '${stat5}'=='Pass' and '${stat6}'=='Pass' and '${stat7}'=='Pass'	Set Variable 		Pass
	...				ELSE 				Set Variable 		Fail
	
	# Run Keyword If 		'${Ret_Val}'=='Pass'	Log 	${FILENAME}: Pass		WARN
	# ...		ELSE 								Log 	${FILENAME}: Fail		WARN
	
	[Return]	${Ret_Val}	
	
Check Error Messages For Buy Markup		[Arguments]		${ERR_Text}	
	@{Msg_List}=	Create List 	Buy Rate Markup value cannot be less than zero			Value of Rate markup should be between 0 and 100
	
	${stat_now}=		Run Keyword And Return Status 		List Should Contain Value 		${Msg_List}		${ERR_Text}
	
	Run Keyword And Continue On Failure 		Run Keyword If 		'${stat_now}'!='True'	Fail 		${FILENAME}: Expected error message is not found. Expected was one of '@{Msg_List[0]}' or '@{Msg_List[1]}'. Actual message: ${ERR_Text}
	...			ELSE 							Log 				Correct error message is shown.
	
	
	
Remove Credit Score Ranges	[Arguments]		${val}
	Run Keyword If 		'${status_enabled}'!='True' 				Press Key 		//div[@id='tierDisplayDiv0']/span[3]/a		\\13	
	Run Keyword If 		'${status_enabled}'!='True'					Sleep 			1s
	
	${Removelink}=		Run Keyword And Return Status 		Page Should Contain Element 		//tr[@id='divTier3']//td[3]//a[@id='lnkRemoveTier3']		loglevel=NONE	
	
	Run Keyword If 		'${status_enabled}'!='True' and '${Removelink}'=='True'		Mouse Down 		//tr[@id='divTier3']//td[3]//a[@id='lnkRemoveTier3']
	Run Keyword If 		'${status_enabled}'!='True' and '${Removelink}'=='True'		Mouse Up 		//tr[@id='divTier3']//td[3]//a[@id='lnkRemoveTier3']
	Run Keyword If 		'${status_enabled}'!='True' and '${Removelink}'=='True'		Sleep 			1s
	
	${Removelink}=		Run Keyword And Return Status 		Page Should Contain Element 		//tr[@id='divTier2']//td[3]//a[@id='lnkRemoveTier2']		loglevel=NONE	
	Run Keyword If 		'${status_enabled}'!='True' and '${Removelink}'=='True'		Mouse Down 		//tr[@id='divTier2']//td[3]//a[@id='lnkRemoveTier2']
	Run Keyword If 		'${status_enabled}'!='True' and '${Removelink}'=='True'		Mouse Up 		//tr[@id='divTier2']//td[3]//a[@id='lnkRemoveTier2']
	Run Keyword If 		'${status_enabled}'!='True' and '${Removelink}'=='True'		Sleep 			1s
	
	${Removelink}=		Run Keyword And Return Status 		Page Should Contain Element 		//tr[@id='divTier1']//td[3]//a[@id='lnkRemoveTier1']		loglevel=NONE	
	Run Keyword If 		'${status_enabled}'!='True' and '${Removelink}'=='True'		Mouse Down 		//tr[@id='divTier1']//td[3]//a[@id='lnkRemoveTier1']
	Run Keyword If 		'${status_enabled}'!='True' and '${Removelink}'=='True'			Mouse Up 		//tr[@id='divTier1']//td[3]//a[@id='lnkRemoveTier1']
	Run Keyword If 		'${status_enabled}'!='True' and '${Removelink}'=='True'		Sleep 			1s
	
	Run Keyword If 		'${status_enabled}'!='True'			Press Key 		//input[@id='SaveCreditScoreTiers']		\\13
	
	Run Keyword If 		'${status_enabled}'!='True'		sleep 	1s
	Run Keyword If 		'${status_enabled}'!='True'		Mouse Down 		//input[@id='CreditScoreTierRules_0__RuleCriteriaValue']
	Run Keyword If 		'${status_enabled}'!='True'		Mouse Up 		//input[@id='CreditScoreTierRules_0__RuleCriteriaValue']
	Run Keyword If 		'${status_enabled}'!='True'		Input Text		//input[@id='CreditScoreTierRules_0__RuleCriteriaValue']		${val}

#################################################################
Set Specific FD Preferences		[Arguments]		${PrefsFilePath}
#################################################################
	
	WriteToFile				${logfile}			Y				Set Specific FD Preferences>>>

	#Get LastPrefsSet	
	${LastPrefs}=  			Set Variable						${RESOURCE}\\${FOLDER_PATH}\\Preferences\\LastPrefs\\LastPrefsSet.txt	
	WriteToFile				${logfile}			Y				LastPrefsPath=${LastPrefs}
	
	${LastPrefs}=			Replace String		${LastPrefs}	.txt			${Empty}
	${GetDealerID}=			Get Substring		${DEALERID}		0		6	
	${LastPrefs}=			Catenate			SEPARATOR=		${LastPrefs}	${SPACE}	${GetDealerID}		.txt
	WriteToFile				${logfile}			Y				LastPrefsPath=${LastPrefs}		
	
	${LastPrefsSet}=		Read From File To String 	${LastPrefs}
	WriteToFile				${logfile}			Y		LastPrefsSet=${LastPrefsSet}
			
	#Get Requested Preferences
	WriteToFile				${logfile}			Y		PrefsFilePath=${PrefsFilePath}
	${PreferenceFile}=		Read From File To String 	${PrefsFilePath}
		WriteToFile			${logfile}			Y		PreferenceFile=${PreferenceFile}

	#Compare the files. If they are equal then we are done here.
	${LastPrefsSet}=		Replace String 				${LastPrefsSet}			\n 		${EMPTY}
	${LastPrefsSet}=		Evaluate					str('${LastPrefsSet}').strip()
	${PreferenceFile}=		Replace String 				${PreferenceFile}		\n 		${EMPTY}
	${PreferenceFile}=		Evaluate					str('${PreferenceFile}').strip()
	${ComparePrefs}=		Run Keyword If		'${PreferenceFile}'=='${LastPrefsSet}'		WriteToFile				${logfile}		Y		Preferences File is set how we need it so exiting without setting
	${ComparePrefs}=		Run Keyword If		'${PreferenceFile}'=='${LastPrefsSet}'		Return From Keyword		True	
	
	#If the compare shows a difference, then go set the requested preferences
	@{PrefList}= 			Split String 				${PreferenceFile}		;
		WriteToFile			${logfile}			Y		PrefList=${PrefList}

	#Create Pref_Dict
	${Pref_Dict}=			Create Dictionary
	${Pref_Dict}=			Create Pref Dict From List 	${PrefList}		${Pref_Dict}
	Set Suite Variable 		${Pref_Dict}
	
	#Go set them
	Login to DT And Switch Dealership					${DEALERID}	
	${Pref_Set}=			Set FD UI Preferences		${Pref_Dict}
	Set Suite Variable		${Pref_Set}
	WriteToFile				${logfile}			Y		Preferences Set as Requested=${Pref_Set} - ${PrefsFilePath}
	
	#We set new prefs. If we were successful then copy the new prefs to LastPrefs folder/file.
	Run Keyword If			'${Pref_Set}'=='Pass'		Copy File				${PrefsFilePath}			${LastPrefs}	
	Run Keyword If			'${Pref_Set}'=='Pass'		WriteToFile				${logfile}			Y		PrefsFilePath copied to LastPrefsSet = ${LASTPREFS}
	
	#We failed
	Run Keyword If			'${Pref_Set}'=='Fail'		WriteToFile				${logfile}			Y		Set Preferences Failed!
	Run Keyword If			'${Pref_Set}'=='Fail'		WriteToErrorLog			${ErrorLog}					Set Preferences Failed! - ${PrefsFilePath}
	Run Keyword If			'${Pref_Set}'=='Fail'		Fail					Set Preferences Failed!
	
	# ${GoHome}=				Set Variable				https://www.qa.dealertrack.com/default1.aspx
	# Go To					${GoHome}		
	Go To					${LOGINURL}
	
#######################################################
Set FD Preferences		[Arguments]		${FOLDER_NAME}
#######################################################
	
	@{LIST_FILENAMES}    List Files In Directory    ${FOLDER_NAME}    *.txt
    ${COUNT_FILES}=    Get Length    ${LIST_FILENAMES}
	Log 	Total Files: ${COUNT_FILES}	
	
	# Get List of App files in folder
	${PATTERN}= 	Catenate	SEPARATOR=		* 	Set	*	Preference 		*.txt
	${PASSED}=		Run Keyword And Return Status		List Files In Directory      ${FOLDER_NAME}         ${PATTERN}
	
	@{FILENAMES}       Run Keyword If		${PASSED}	List Files In Directory        ${FOLDER_NAME}         ${PATTERN}      
	...						ELSE		Fail		No text file is found in folder ${FOLDER_NAME} with pattern *SetPreference*.txt
	
	${len}= 	Get Length 		${FILENAMES}
	Log			No. of text files: ${len}	
	
	Run Keyword If 		'${len}'=='${0}'		Fail 	No File is found matching the pattern * txt in ${FOLDER_NAME}.
	
	:FOR 	${Item}			IN RANGE 	0 	${len}
	\		${FILENAME}=	Get From List 	${FILENAMES}	${Item}
	\		Set Suite Variable 			${FILENAME}
	\		Log 		------------------------------------------------ 	WARN
	\		Log 		Folder Name: ${FOLDER_NAME}		WARN
	\		Log 		File name: ${FILENAME}			WARN
	\		Log 		------------------------------------------------ 	WARN
	\		${PreferenceFile}=		Read From File To String 	${FOLDER_NAME}\\${FILENAME}
	\		Log 	${PreferenceFile}
	\		${PreferenceFile}=		Replace String 			${PreferenceFile}		\n 		${EMPTY}
	\		${PreferenceFile}=		Evaluate				str('${PreferenceFile}').strip()
	\		Log 	${PreferenceFile}		
	\		@{PrefList}= 	Split String 	${PreferenceFile}		;
	\		Log List 		${PrefList}		

	\		###############################################################################################
	\		${Pref_Dict}=			Create Dictionary
	\		${Pref_Dict}=			Create Pref Dict From List 		${PrefList}		${Pref_Dict}
	\		Set Suite Variable 		${Pref_Dict}
	
	\		###############################################################################################
	\		${Pref_Set}=			Set FD UI Preferences		${Pref_Dict}
	\		Set Suite Variable		${Pref_Set}
	\		###############################################################################################
	\		Run Keyword And Continue On Failure 			Run Keyword If 		'${Pref_Set}'=='Pass'			Validate Preferences Are Set As Expected				${Pref_Dict}
	# \		...  ELSE 			Fail 						Expected Preferences are not set.
	
Create Pref Dict From List 		[Arguments]			${PrefList}		${Pref_Dict}
	# Bureau
	${val}=		Get From List 		${PrefList}		0
	Set To Dictionary 				${Pref_Dict}	Bureau 				${val}	

	# Red Flags
	${val}=		Get From List 		${PrefList}		1
	Set To Dictionary 				${Pref_Dict}	Red Flags 			${val}
	
	# Credit Score
	${val}=		Get From List 		${PrefList}		2
	Set To Dictionary 				${Pref_Dict}	Credit Score 		${val}
	
	# Years Job
	${val}=		Get From List 		${PrefList}		3
	Set To Dictionary 				${Pref_Dict}	Years Job 			${val}
	
	# Income
	${val}=		Get From List 		${PrefList}		4
	Set To Dictionary 				${Pref_Dict}	Income 				${val}
	
	# Bankrupt
	${val}=		Get From List 		${PrefList}		5
	Set To Dictionary 				${Pref_Dict}	Bankrupt 			${val}
	
	# Tradelines
	${val}=		Get From List 		${PrefList}		6
	Set To Dictionary 				${Pref_Dict}	Tradelines 			${val}
	
	# OnlyRun
	${val}=		Get From List 		${PrefList}		7
	Set To Dictionary 				${Pref_Dict}	OnlyRun 			${val}
	
	# DetailedOrStatus
	${val}=		Get From List 		${PrefList}		8
	Set To Dictionary 				${Pref_Dict}	DetailedOrStatus 	${val}
	
	# BuyRate
	${val}=		Get From List 		${PrefList}		9
	Set To Dictionary 				${Pref_Dict}	BuyRate 			${val}
	
	# Range1
	${val}=		Get From List 		${PrefList}		10
	Set To Dictionary 				${Pref_Dict}	Range1 				${val}
	
	# Range2
	${val}=		Get From List 		${PrefList}		11
	Set To Dictionary 				${Pref_Dict}	Range2 				${val}
	
	# Range3
	${val}=		Get From List 		${PrefList}		12
	Set To Dictionary 				${Pref_Dict}	Range3 				${val}
	
	[Return]		${Pref_Dict}
	
Validate Preferences Are Set As Expected			[Arguments]		${Pref_Dict}

	WriteToFile			${logfile}			Y		Validate Preferences Are Set As Expected>>>
	
	# Wait Until Keyword Succeeds   240s	3s   	Page Should Contain Element 	//iframe[@id='iFrm']	Frame is not loaded on FD Preferences page.
	# Wait Until Page Contains Element            //iframe[@id='iFrm']
	# Select Frame                                iFrm
	# Wait Until Page Contains Element            //frame[@name='main']
	# Select Frame                                main
	
	# Check the Bureau Set
	# Actual value
	${stat}=				Run Keyword And Return Status 		Page Should Contain Element 	//div[@id='DTform']/table[2]/tbody/tr[2]/td/span		loglevel=NONE	
	${Act_Bureau}=			Run Keyword If 		'${stat}'=='True'	Get Text 		//div[@id='DTform']/table[2]/tbody/tr[2]/td/span
	...						ELSE 			Set Variable 		${EMPTY}
	${Act_Bureau}=			Evaluate		str('${Act_Bureau}').strip()
	
	# Expected value
	${Exp_Val}=				Get From Dictionary 	 		${Pref_Dict}	Bureau
	Run Keyword And Continue On Failure 	Run Keyword If 		'${Exp_Val}'=='EXP'		Should Be Equal As Strings  	${Act_Bureau}		Experian		Credit Bureau Provider does not match after Preference edit. Expected: Experian. Actual: ${Act_Bureau}	
	...										ELSE IF				'${Exp_Val}'=='EQU'		Should Be Equal As Strings  	${Act_Bureau}		Equifax			Credit Bureau Provider does not match after Preference edit. Expected: Equifax. Actual: ${Act_Bureau}	
	...										ELSE IF				'${Exp_Val}'=='TU'		Should Be Equal As Strings  	${Act_Bureau}		TransUnion		Credit Bureau Provider does not match after Preference edit. Expected: TransUnion. Actual: ${Act_Bureau}	
	...										ELSE IF				'${Exp_Val}'=='NON'		Should Be Equal As Strings  	${Act_Bureau}		${EMPTY}		Credit Bureau Provider does not match after Preference edit. Expected: Empty. Actual: ${Act_Bureau}	

	# Red flags
	# Actual value
	${stat}=			Run Keyword And Return Status 		Page Should Contain Element 	//div[@id='DTform']/table[3]/tbody/tr[2]/td/span/span		loglevel=NONE	
	${Act_Val}=			Run Keyword If 		'${stat}'=='True'	Get Text 		//div[@id='DTform']/table[3]/tbody/tr[2]/td/span/span
	...						ELSE 			Set Variable 		${EMPTY}
	${Act_Val}=			Evaluate		str('${Act_Val}').strip()
	
	${Exp_Val}=				Get From Dictionary 	 		${Pref_Dict}	Red Flags 			
	
	Run Keyword And Continue On Failure 	Run Keyword If 		'${Exp_Val}'=='Y'		Should Be Equal As Strings  	${Act_Val}		Run Red Flags				Compliance > Options do not match after Preference edit. Expected: Run Red Flags. Actual: ${Act_Val}	
	...										ELSE IF				'${Exp_Val}'=='N'		Should Be Equal As Strings  	${Act_Val}		Do not Run Red Flags		Compliance > Options do not match after Preference edit. Expected: Do not Run Red Flags. Actual: ${Act_Val}	

	
	# Credit Score
	${stat}=			Run Keyword And Return Status 		Page Should Contain Element 	//div[@id='DTform']/table[4]/tbody/tr[2]/td/table/tbody/tr/td		Credit Score is not shown after edit 	loglevel=NONE	
	${Act_Val_CRSCORE}=			Run Keyword If 		'${stat}'=='True'	Get Text 		//div[@id='DTform']/table[4]/tbody/tr[2]/td/table/tbody/tr/td
	...						ELSE 			Set Variable 		${EMPTY}
	# ${Act_Val_CRSCORE}=			Evaluate		str('${Act_Val_CRSCORE}').strip()
	
	${Exp_Val}=				Get From Dictionary 	 		${Pref_Dict}	Credit Score			
	
	Run Keyword And Continue On Failure 			Should Contain  	${Act_Val_CRSCORE}		${Exp_Val}				Prequalification Criteria > Credit Score do not match after Preference edit. Expected: ${Exp_Val}. Actual: ${Act_Val_CRSCORE}		values=None
	
	
	# Years
	# Actual value
	# ${stat}=			Run Keyword And Return Status 		Page Should Contain Element 	//div[@id='DTform']/table[4]/tbody/tr[2]/td/table[2]/tbody/tr/td/span[2]		loglevel=NONE	
	# ${Act_Val}=			Run Keyword If 		'${stat}'=='True'	Get Text 		//div[@id='DTform']/table[4]/tbody/tr[2]/td/table[2]/tbody/tr/td/span[2]
	# ...						ELSE 			Set Variable 		${EMPTY}
	# ${Act_Val}=			Evaluate		str('${Act_Val}').strip()
	
	# ${Exp_Val}=				Get From Dictionary 	 		${Pref_Dict}	Years Job			
	
	# Run Keyword And Continue On Failure 			Should Be Equal As Strings  	${Act_Val}		${Exp_Val}				Prequalification Criteria > Years at Job do not match after Preference edit. Expected: ${Exp_Val}. Actual: ${Act_Val}	
	
	# Years
	# Actual value
	${stat}=			Run Keyword And Return Status 		Page Should Contain Element 	//div[@id='DTform']/table[4]/tbody/tr[2]/td/table[2]/tbody/tr/td/span[2]		loglevel=NONE	
	${Act_Val}=			Run Keyword If 		'${stat}'=='True'	Get Text 		//div[@id='DTform']/table[4]/tbody/tr[2]/td/table[2]/tbody/tr/td/span[2]
	...						ELSE 			Set Variable 		${EMPTY}
	${Act_Val}=			Evaluate		str('${Act_Val}').strip()
	
	${Exp_Val}=				Get From Dictionary 	 		${Pref_Dict}	Years Job			
	
	Run Keyword And Continue On Failure 			Should Be Equal As Strings  	${Act_Val}		${Exp_Val}				Prequalification Criteria > Years at Job do not match after Preference edit. Expected: ${Exp_Val}. Actual: ${Act_Val}	
	
	
	# Income
	# Actual value
	${stat}=			Run Keyword And Return Status 		Page Should Contain Element 	//div[@id='DTform']/table[4]/tbody/tr[2]/td/table[2]/tbody/tr[2]/td/span[2]		loglevel=NONE	
	${Act_Val}=			Run Keyword If 		'${stat}'=='True'	Get Text 		//div[@id='DTform']/table[4]/tbody/tr[2]/td/table[2]/tbody/tr[2]/td/span[2]
	...						ELSE 			Set Variable 		${EMPTY}
	${Act_Val}=			Evaluate		str('${Act_Val}').strip()
	
	${Exp_Val}=				Get From Dictionary 	 		${Pref_Dict}	Income			
	
	Run Keyword And Continue On Failure 			Should Be Equal As Strings  	${Act_Val}		${Exp_Val}				Prequalification Criteria > Annual Income do not match after Preference edit. Expected: ${Exp_Val}. Actual: ${Act_Val}	

	# Bankruptcies
	# Actual value
	${stat}=			Run Keyword And Return Status 		Page Should Contain Element 	//div[@id='DTform']/table[4]/tbody/tr[2]/td/table[2]/tbody/tr[3]/td/span[2]		loglevel=NONE	
	${Act_Val}=			Run Keyword If 		'${stat}'=='True'	Get Text 		//div[@id='DTform']/table[4]/tbody/tr[2]/td/table[2]/tbody/tr[3]/td/span[2]
	...						ELSE 			Set Variable 		${EMPTY}
	${Act_Val}=			Evaluate		str('${Act_Val}').strip()
	
	${Exp_Val}=				Get From Dictionary 	 		${Pref_Dict}	Bankrupt			
	
	Run Keyword And Continue On Failure 			Should Be Equal As Strings  	${Act_Val}		${Exp_Val}				Prequalification Criteria > Total Bankruptcies do not match after Preference edit. Expected: ${Exp_Val}. Actual: ${Act_Val}	

	# tradelines
	# Actual value
	${stat}=			Run Keyword And Return Status 		Page Should Contain Element 	//div[@id='DTform']/table[4]/tbody/tr[2]/td/table[2]/tbody/tr[4]/td/span[2]		loglevel=NONE	
	${Act_Val}=			Run Keyword If 		'${stat}'=='True'	Get Text 		//div[@id='DTform']/table[4]/tbody/tr[2]/td/table[2]/tbody/tr[4]/td/span[2]	
	...						ELSE 			Set Variable 		${EMPTY}
	${Act_Val}=			Evaluate		str('${Act_Val}').strip()
	
	${Exp_Val}=				Get From Dictionary 	 		${Pref_Dict}	Tradelines			
	
	Run Keyword And Continue On Failure 			Should Be Equal As Strings  	${Act_Val}		${Exp_Val}				Prequalification Criteria > Total Open Satisfactory Tradelines do not match after Preference edit. Expected: ${Exp_Val}. Actual: ${Act_Val}	

	# Only run bureau
	# Actual value
	# ${stat}=			Run Keyword And Return Status 		Page Should Contain Element 	//div[@id='DTform']/table[4]/tbody/tr[4]/td/table[2]/tbody/tr[2]/td/span/lable		loglevel=NONE	
	${stat}=			Run Keyword And Return Status 		Page Should Contain Element 	//div[@id='DTform']/table[4]/tbody/tr[2]/td		loglevel=NONE	
	${Act_Val}=			Run Keyword If 		'${stat}'=='True'	Get Text 		//div[@id='DTform']/table[4]/tbody/tr[2]/td
	...						ELSE 			Set Variable 		${EMPTY}
	# ${Act_Val}=			Evaluate		str('${Act_Val}').strip()
	
	${Exp_Val}=				Get From Dictionary 	 		${Pref_Dict}	OnlyRun			
	
	Run Keyword And Continue On Failure 		Run Keyword If 		'${Exp_Val}'=='OnlyYes'		Should Contain	  		${Act_Val}		Only run the bureau on consumers who pass the employment and income filters			Prequalification Criteria > Only Run... do not match after Preference edit. Expected: Only run the bureau on consumers who pass the employment and income filters. Actual: ${Act_Val}	
	...											ELSE IF 			'${Exp_Val}'=='OnlyNo'		Should Not Contain	  		${Act_Val}		Only run the bureau on consumers who pass the employment and income filters			Prequalification Criteria > Only Run... do not match after Preference edit. The text 'Only run the bureau on consumers who pass the employment and income filters' is found. This is not expected.
	
	# DetailedOrStatus
	# Actual value
	${stat}=			Run Keyword And Return Status 		Page Should Contain Element 	//div[@id='DTform']/table[5]/tbody/tr[2]/td		loglevel=NONE	
	${Act_Val}=			Run Keyword If 		'${stat}'=='True'	Get Text 		//div[@id='DTform']/table[5]/tbody/tr[2]/td
	...					ELSE 			Set Variable 		${EMPTY}
	# ${Act_Val}=			Evaluate		str('${Act_Val}').strip()
	
	${Exp_Val}=				Get From Dictionary 	 		${Pref_Dict}	DetailedOrStatus			
	
	Run Keyword And Continue On Failure 		Run Keyword If 		'${Exp_Val}'=='Detailed'		Should Contain  	${Act_Val}		Send detailed information (rate, term, amount)			Decision Response does not match after Preference edit. Expected: Send detailed information (rate, term, amount). Actual: ${Act_Val}		values=None
	...											ELSE 				Should Contain  				${Act_Val}			Send status only (approved/declined)									Decision Response does not match after Preference edit. Expected: Send status only (approved/declined). Actual: ${Act_Val}		values=None
	
	${Exp_Val_Rate}=				Get From Dictionary 	 		${Pref_Dict}	BuyRate		
	
	Run Keyword And Continue On Failure 		Run Keyword If 		'${Exp_Val}'=='Detailed'		Should Contain  	${Act_Val}		${Exp_Val_Rate}		Decision Response does not match after Preference edit. Expected: ${Exp_Val_Rate}. Actual: ${Act_Val}		values=None
	
	# Credit Score ranges
	# Range2
	${Exp_Val}=				Get From Dictionary 	 		${Pref_Dict}	Range1
	
	# @{Range2}=			Run Keyword If 		'${Exp_Val}'!='${EMPTY}'		Split String 		${Exp_Val}		-		
	# ${Score_Val}=		Run Keyword If 		'${Exp_Val}'!='${EMPTY}'		Get From List 		${Range2}	1
	# ...					ELSE 				Set Variable 			${EMPTY}
	
	
	Run Keyword And Continue On Failure 	Run Keyword If 		'${Exp_Val}'!='${EMPTY}' 		Should Contain 		${Act_Val_CRSCORE}		${Exp_Val} 		Credit Score Tier2 does not match after Preference edit. Expected: ${Exp_Val}. Actual: ${Act_Val_CRSCORE}		values=None
	
	# Range3
	${Exp_Val}=				Get From Dictionary 	 		${Pref_Dict}	Range2
	# @{Range2}=			Run Keyword If 		'${Exp_Val}'!='${EMPTY}'		Split String 		${Exp_Val}		-		
	# ${Score_Val}=		Run Keyword If 		'${Exp_Val}'!='${EMPTY}'		Get From List 		${Range2}	1
	# ...					ELSE 				Set Variable 			${EMPTY}
	
	
	Run Keyword And Continue On Failure 	Run Keyword If 		'${Exp_Val}'!='${EMPTY}' 	Should Contain 		${Act_Val_CRSCORE}		${Exp_Val} 		Credit Score Tier3 does not match after Preference edit. Expected: ${Exp_Val}. Actual: ${Act_Val_CRSCORE}		values=None
	
	# Range4
	${Exp_Val}=				Get From Dictionary 	 		${Pref_Dict}	Range3
	
	# @{Range2}=			Run Keyword If 		'${Exp_Val}'!='${EMPTY}'		Split String 		${Exp_Val}		-		
	# ${Score_Val}=		Run Keyword If 		'${Exp_Val}'!='${EMPTY}'		Get From List 		${Range2}	1
	# ...					ELSE 				Set Variable 			${EMPTY}
	
	
	Run Keyword And Continue On Failure 	Run Keyword If 		'${Exp_Val}'!='${EMPTY}' 		Should Contain 		${Act_Val_CRSCORE}		${Exp_Val} 		Credit Score Tier4 does not match after Preference edit. Expected: ${Exp_Val}. Actual: ${Act_Val_CRSCORE}		values=None
	

Validate Prequal Pass Fail Details Against Preferences 		[Arguments]		${Global_Dict}		${Lead_Summary_Dict}	${Pref_Dict}	${List_LeadsSummary}
	Log Dictionary		${Pref_Dict}
	Log Dictionary		${Global_Dict}	
	Log List 			${List_LeadsSummary}
	# ${len}=		Get Length 		${Global_Dict}
	
	${len}=		Get Length 		${List_LeadsSummary}
	
	Log 		***** Pre-qual Bubble Validation *****  	WARN
	
	:FOR 		${I} 	IN RANGE 	0		${len}
	\			${IndexNow}=				Get From List 			${List_LeadsSummary}		${I}
	\			${IndexNow}=				Convert To Integer 		${IndexNow}
	\			${Record_Dict}=				Get From Dictionary 	${Global_Dict}				${IndexNow}
	\			Log Dictionary 				${Record_Dict}
	\			${Current_FileName}=		Get From Dictionary		${Record_Dict}		Filename
	\			${Bubble_Dict}=				Get From Dictionary 	${Lead_Summary_Dict}		${IndexNow}
	\			Log Dictionary				${Bubble_Dict}
	\			${BubbleText}=				Get From Dictionary 	${Bubble_Dict}		PQ_Bubble_Text
	\			${BubbleText}=				Convert To String 		${BubbleText}
	\			${BubbleText}=				Replace String 			${BubbleText}		\n 		${SPACE}
	\			${Current_FileName}=		Get From Dictionary		${Record_Dict}		Filename
	\			Log 						******************************				WARN
	\			Log 						File Name: ${Current_FileName}				WARN
	\			${FS}=						Get From Dictionary		${Record_Dict}		First Name
	\			${LS}=						Get From Dictionary		${Record_Dict}		Last Name
	\			${Applicant_name}=			Catenate				${LS}				${FS}
	\			Set Suite Variable 			${Applicant_name}
	\			Run Keyword If 				'${BubbleText}'=='${EMPTY}'		Log 		No details are found in Pre-qual bubble. 	WARN
	\			Run Keyword And Continue On Failure 		Run Keyword If 				'${BubbleText}'!='${EMPTY}' and '${BubbleText}'!='None'		Validate Pre-qual Bubble Details	${Bubble_Dict}		${Pref_Dict}	${Applicant_name}

	
Validate Pre-qual Bubble Details	[Arguments]		${Bubble_Dict}		${Pref_Dict}	${Applicant_name}
	${BubbleText}=			Get From Dictionary 	${Bubble_Dict}		PQ_Bubble_Text
	${PrefCB}=				Get From Dictionary		${Pref_Dict}		Credit Score
	${PrefYrs}=				Get From Dictionary		${Pref_Dict}		Years Job
	${PrefIncome}=			Get From Dictionary		${Pref_Dict}		Income
	${PrefBankrupt}=		Get From Dictionary		${Pref_Dict}		Bankrupt
	${PrefTrade}=			Get From Dictionary		${Pref_Dict}		Tradelines
	
	${BubbleText}=		Replace String 		${BubbleText}	\n 	*
	${BubbleText}=		Catenate 			SEPARATOR=		${BubbleText}		*
	Log 				${BubbleText}
	
	# ### Credit Score ###
	# Run Keyword And Continue On Failure		Run Keyword If 		'${PrefCB}'!='${EMPTY}'		Should Contain 		${BubbleText}	Credit Score 		${Applicant_name}: Pre-qual bubble doesnot contain Credit Score Info. This is not expected.
	
	# Years at Job
	Run Keyword And Continue On Failure		Run Keyword If 		'${PrefYrs}'!='${EMPTY}'		Should Contain 		${BubbleText}	Time at Job 		${Applicant_name}: Pre-qual bubble doesnot contain Time at Job Info. This is not expected.
	
	# Income
	Run Keyword And Continue On Failure		Run Keyword If 		'${PrefIncome}'!='${EMPTY}'		Should Contain 		${BubbleText}	Income 		${Applicant_name}: Pre-qual bubble doesnot contain Income Info. This is not expected.
	
	# # Bankruptcies
	# Run Keyword And Continue On Failure		Run Keyword If 		'${PrefBankrupt}'!='${EMPTY}'		Should Contain 		${BubbleText}	Bankruptcies 		${Applicant_name}: Pre-qual bubble doesnot contain Bankruptcies Info. This is not expected.
	
	# # Tradelines
	# Run Keyword And Continue On Failure		Run Keyword If 		'${PrefTrade}'!='${EMPTY}'		Should Contain 		${BubbleText}	Satis. Tradelines 		${Applicant_name}: Pre-qual bubble doesnot contain Satis. Tradelines Info. This is not expected.

	#########################################
	${stat_co}=			Run Keyword And Return Status 		Should Contain 		${BubbleText}	Co-Applicant	
	Set Suite Variable 	${stat_co}
	
	${App_data}=		Run Keyword If 		'${stat_co}'=='True'	WS_CommonUtil.extract_between		${BubbleText}	Applicant			Co-Applicant
	...					ELSE 				Set Variable 			${BubbleText}
	
	${App_data}=		Run Keyword If 		'${App_data}'=='None'	Set Variable 	${EMPTY}
	...					ELSE 				Set Variable 			${App_data}
	
	${CoApp_Data}=		Run Keyword If 		'${stat_co}'=='True'	Fetch From Right			${BubbleText}		Co-Applicant
	...					ELSE 				Set Variable			${EMPTY}
	
	${CoApp_Data}=		Run Keyword If 		'${CoApp_Data}'=='None'		Set Variable 	${EMPTY}
	...					ELSE 				Set Variable 				${CoApp_Data}
	
	
	${App_BK}=			Run Keyword If 		'${App_data}'!='${EMPTY}'	WS_CommonUtil.extract_between		${App_data}			Bankruptcies 	*
	...					ELSE 				Set Variable 		${EMPTY}
	${App_BK}=			Run Keyword If 		'${App_BK}'=='None'		Set Variable 	${EMPTY}
	...					ELSE 				Set Variable 			${App_BK}
	
	${App_CB}=			Run Keyword If 		'${App_data}'!='${EMPTY}'	WS_CommonUtil.extract_between		${App_data}			Credit Score 	*
	...					ELSE 				Set Variable 		${EMPTY}
	${App_CB}=			Run Keyword If 		'${App_CB}'=='None'		Set Variable 	${EMPTY}
	...					ELSE 				Set Variable 			${App_CB}
	
	
	${App_IN}=			Run Keyword If 		'${App_data}'!='${EMPTY}'	WS_CommonUtil.extract_between		${App_data}			Income $ 			/yr*
	...					ELSE 				Set Variable 		${EMPTY}
	${App_IN}=			Run Keyword If 		'${App_IN}'=='None'		Set Variable 	${EMPTY}
	...					ELSE 				Set Variable 			${App_IN}
	
	${App_YR}=			Run Keyword If 		'${App_data}'!='${EMPTY}'	WS_CommonUtil.extract_between		${App_data}			Time at Job		yrs*
	...					ELSE 				Set Variable 		${EMPTY}
	${App_YR}=			Run Keyword If 		'${App_YR}'=='None'		Set Variable 	${EMPTY}
	...					ELSE 				Set Variable 			${App_YR}
	
	
	${App_TD}=			Run Keyword If 		'${App_data}'!='${EMPTY}'	WS_CommonUtil.extract_between		${App_data}			Satis. Tradelines		*
	...					ELSE 				Set Variable 		${EMPTY}
	${App_TD}=			Run Keyword If 		'${App_TD}'=='None'		Set Variable 	${EMPTY}
	...					ELSE 				Set Variable 			${App_TD}
	
	
	${COApp_BK}=		Run Keyword If 		'${stat_co}'=='True' and '${CoApp_Data}'!='${EMPTY}'		WS_CommonUtil.extract_between		${CoApp_Data}			Bankruptcies 	*
	...					ELSE 				Set Variable 			${EMPTY}
	${COApp_BK}=		Run Keyword If 		'${COApp_BK}'=='None'		Set Variable 	${EMPTY}
	...					ELSE 				Set Variable 			${COApp_BK}
	
	
	${COApp_CB}=		Run Keyword If 		'${stat_co}'=='True' and '${CoApp_Data}'!='${EMPTY}'		WS_CommonUtil.extract_between		${CoApp_Data}			Credit Score 	*
	...					ELSE 				Set Variable 			${EMPTY}
	${COApp_CB}=		Run Keyword If 		'${COApp_CB}'=='None'		Set Variable 	${EMPTY}
	...					ELSE 				Set Variable 			${COApp_CB}
	
	${COApp_IN}=		Run Keyword If 		'${stat_co}'=='True' and '${CoApp_Data}'!='${EMPTY}'		WS_CommonUtil.extract_between		${CoApp_Data}			Income $			/yr*
	...					ELSE 				Set Variable 			${EMPTY}
	${COApp_IN}=		Run Keyword If 		'${COApp_IN}'=='None'		Set Variable 	${EMPTY}
	...					ELSE 				Set Variable 			${COApp_IN}
	
	${COApp_YR}=		Run Keyword If 		'${stat_co}'=='True' and '${CoApp_Data}'!='${EMPTY}'		WS_CommonUtil.extract_between		${CoApp_Data}			Time at Job		yrs*
	...					ELSE 				Set Variable 			${EMPTY}
	${COApp_YR}=		Run Keyword If 		'${COApp_YR}'=='None'		Set Variable 	${EMPTY}
	...					ELSE 				Set Variable 			${COApp_YR}
	
	
	${COApp_TD}=		Run Keyword If 		'${stat_co}'=='True' and '${CoApp_Data}'!='${EMPTY}'		WS_CommonUtil.extract_between		${CoApp_Data}			Satis. Tradelines		*
	...					ELSE 				Set Variable 			${EMPTY}
	${COApp_TD}=		Run Keyword If 		'${COApp_TD}'=='None'		Set Variable 	${EMPTY}
	...					ELSE 				Set Variable 			${COApp_TD}
	
	
	${App_BK}=			Evaluate 		str('${App_BK}').strip()
	${App_CB}=			Evaluate 		str('${App_CB}').strip()
	${App_IN}=			Evaluate 		str('${App_IN}').strip()
	${App_YR}=			Evaluate 		str('${App_YR}').strip()
	${App_TD}=			Evaluate 		str('${App_TD}').strip()
	
	${COApp_BK}=		Run Keyword If 		'${COApp_BK}'!='${EMPTY}'	Evaluate 		str('${COApp_BK}').strip()
	...					ELSE 				Set Variable 				${COApp_BK}		
	${COApp_CB}=		Run Keyword If 		'${COApp_CB}'!='${EMPTY}'	Evaluate 		str('${COApp_CB}').strip()
	...					ELSE 				Set Variable 				${COApp_CB}
	${COApp_IN}=		Run Keyword If 		'${COApp_IN}'!='${EMPTY}'	Evaluate 		str('${COApp_IN}').strip()
	...					ELSE 				Set Variable 				${COApp_IN}
	${COApp_YR}=		Run Keyword If 		'${COApp_YR}'!='${EMPTY}'	Evaluate 		str('${COApp_YR}').strip()
	...					ELSE 				Set Variable 				${COApp_YR}
	${COApp_TD}=		Run Keyword If 		'${COApp_TD}'!='${EMPTY}'	Evaluate 		str('${COApp_TD}').strip()
	...					ELSE 				Set Variable 				${COApp_TD}
	
	Set Suite Variable 		${App_BK}
	Set Suite Variable 		${App_CB}
	Set Suite Variable 		${App_IN}
	Set Suite Variable 		${App_YR}
	Set Suite Variable 		${App_TD}
	
	Set Suite Variable 		${COApp_BK}
	Set Suite Variable 		${COApp_CB}
	Set Suite Variable 		${COApp_IN}
	Set Suite Variable 		${COApp_YR}
	Set Suite Variable 		${COApp_TD}
	
	
	${Flag_CB_App}=				Set Variable			Pass
	${Flag_YR_App}=				Set Variable			Pass
	${Flag_IN_App}=				Set Variable			Pass
	${Flag_BK_App}=				Set Variable			Pass
	${Flag_TD_App}=				Set Variable			Pass
	
	${Flag_CB_COApp}=			Set Variable			Pass
	${Flag_YR_COApp}=			Set Variable			Pass
	${Flag_IN_COApp}=			Set Variable			Pass
	${Flag_BK_COApp}=			Set Variable			Pass
	${Flag_TD_COApp}=			Set Variable			Pass
	
	Set Suite Variable 		${Flag_CB_App}
	Set Suite Variable 		${Flag_YR_App}
	Set Suite Variable 		${Flag_IN_App}
	Set Suite Variable 		${Flag_BK_App}
	Set Suite Variable 		${Flag_TD_App}
	
	Set Suite Variable 		${Flag_CB_COApp}
	Set Suite Variable 		${Flag_YR_COApp}
	Set Suite Variable 		${Flag_IN_COApp}
	Set Suite Variable 		${Flag_BK_COApp}
	Set Suite Variable 		${Flag_TD_COApp}
	
	
	Run Keyword And Continue On Failure		Run Keyword If 		'${PrefYrs}'!='${EMPTY}' 	Check If YRS Correct 	${PrefYrs}	${App_YR}	${COApp_YR}		${stat_co}	${Bubble_Dict}
	# ...					ELSE 				Set Variable 				${Flag_YR}
	
	Log 	${Flag_YR_App}
	Log 	${Flag_YR_COApp}	
	
	${Yr_final_Flag}=		Run Keyword If 		'${Flag_YR_App}'=='Pass' or '${Flag_YR_COApp}'=='Pass'		Set Variable 	Pass
	...						ELSE 				Set Variable 		Fail
	
	Set Suite Variable 		${Yr_final_Flag}
	
	Run Keyword And Continue On Failure		Run Keyword If 		'${PrefIncome}'!='${EMPTY}'		Check If Income Correct 	${PrefIncome}	${App_IN}	${COApp_IN}		${stat_co}	${Bubble_Dict}
	# ...					ELSE 				Set Variable 				${Flag_IN}
	
	Log 	${Flag_IN_App}
	Log 	${Flag_IN_COApp}
	
	${Income_final_Flag}=		Run Keyword If 		'${Flag_IN_App}'=='Pass' or '${Flag_IN_COApp}'=='Pass'		Set Variable 	Pass
	...						ELSE 				Set Variable 		Fail
	
	Set Suite Variable 		${Income_final_Flag}
	
	####### Only run the bureau on consumers who pass the employment and income filters ################
	${PrefOnlyRun}=				Get From Dictionary		${Pref_Dict}		OnlyRun
	
	Run Keyword And Continue On Failure		Run Keyword If 		'${PrefOnlyRun}'=='OnlyYes' and '${PrefCB}'!='${EMPTY}'	and '${Income_final_Flag}'=='Pass' and '${PrefIncome}'!='${EMPTY}'		Should Contain 		${BubbleText}	Credit Score 		Folder: ${FOLDER_NAME} - ${Applicant_name}: Pre-qual bubble doesnot contain Credit Score Info. This is not expected.
	...										ELSE IF 			'${PrefOnlyRun}'=='OnlyYes' and '${PrefCB}'!='${EMPTY}'	and '${Yr_final_Flag}'=='Pass' and '${PrefYrs}'!='${EMPTY}'			Should Contain 		${BubbleText}	Credit Score 		Folder: ${FOLDER_NAME} - ${Applicant_name}: Pre-qual bubble doesnot contain Credit Score Info. This is not expected.
	...										ELSE IF 			'${PrefOnlyRun}'=='OnlyYes' and '${PrefCB}'!='${EMPTY}'	and '${Income_final_Flag}'=='Fail' and '${PrefIncome}'!='${EMPTY}'		Should Not Contain 		${BubbleText}	Credit Score 		Folder: ${FOLDER_NAME} - ${Applicant_name}: Pre-qual bubble does contain Credit Score Info. This is not expected.
	...										ELSE IF 			'${PrefOnlyRun}'=='OnlyYes' and '${PrefCB}'!='${EMPTY}'	and '${Yr_final_Flag}'=='Fail' and '${PrefYrs}'!='${EMPTY}'			Should Not Contain 		${BubbleText}	Credit Score 		Folder: ${FOLDER_NAME} - ${Applicant_name}: Pre-qual bubble does contain Credit Score Info. This is not expected.
	
	
	Run Keyword And Continue On Failure		Run Keyword If 		'${PrefOnlyRun}'=='OnlyYes' and '${PrefBankrupt}'!='${EMPTY}' and '${Income_final_Flag}'=='Pass' and '${PrefIncome}'!='${EMPTY}' 		Should Contain 		${BubbleText}	Bankruptcies 		Folder: ${FOLDER_NAME} - ${Applicant_name}: Pre-qual bubble doesnot contain Bankruptcies Info. This is not expected.
	...										ELSE IF 			'${PrefOnlyRun}'=='OnlyYes' and '${PrefBankrupt}'!='${EMPTY}' and '${Yr_final_Flag}'=='Pass' and '${PrefYrs}'!='${EMPTY}'		Should Contain 		${BubbleText}	Bankruptcies		Folder: ${FOLDER_NAME} - ${Applicant_name}: Pre-qual bubble doesnot contain Bankruptcies Info. This is not expected.
	...										ELSE IF 			'${PrefOnlyRun}'=='OnlyYes' and '${PrefBankrupt}'!='${EMPTY}' and '${Income_final_Flag}'=='Fail' and '${PrefIncome}'!='${EMPTY}'		Should Not Contain 		${BubbleText}	Bankruptcies 		Folder: ${FOLDER_NAME} - ${Applicant_name}: Pre-qual bubble does contain Bankruptcies Info. This is not expected.
	...										ELSE IF 			'${PrefOnlyRun}'=='OnlyYes' and '${PrefBankrupt}'!='${EMPTY}' and '${Yr_final_Flag}'=='Fail' and '${PrefYrs}'!='${EMPTY}'			Should Not Contain 		${BubbleText}	Bankruptcies 		Folder: ${FOLDER_NAME} - ${Applicant_name}: Pre-qual bubble does contain Bankruptcies Info. This is not expected.
	
	Run Keyword And Continue On Failure		Run Keyword If 		'${PrefOnlyRun}'=='OnlyYes' and '${PrefTrade}'!='${EMPTY}' and '${Income_final_Flag}'=='Pass' and '${PrefIncome}'!='${EMPTY}'		Should Contain 		${BubbleText}	Satis. Tradelines 		Folder: ${FOLDER_NAME} - ${Applicant_name}: Pre-qual bubble doesnot contain Satis. Tradelines Info. This is not expected.
	...										ELSE IF 			'${PrefOnlyRun}'=='OnlyYes' and '${PrefTrade}'!='${EMPTY}' and '${Yr_final_Flag}'=='Pass' and '${PrefYrs}'!='${EMPTY}'			Should Contain 		${BubbleText}	Satis. Tradelines		Folder: ${FOLDER_NAME} - ${Applicant_name}: Pre-qual bubble doesnot contain Satis. Tradelines Info. This is not expected.
	...										ELSE IF 			'${PrefOnlyRun}'=='OnlyYes' and '${PrefTrade}'!='${EMPTY}' and '${Income_final_Flag}'=='Fail' and '${PrefIncome}'!='${EMPTY}'		Should Not Contain 		${BubbleText}	Satis. Tradelines 		Folder: ${FOLDER_NAME} - ${Applicant_name}: Pre-qual bubble does contain Satis. Tradelines Info. This is not expected.
	...										ELSE IF 			'${PrefOnlyRun}'=='OnlyYes' and '${PrefTrade}'!='${EMPTY}' and '${Yr_final_Flag}'=='Fail' and '${PrefYrs}'!='${EMPTY}'			Should Not Contain 		${BubbleText}	Satis. Tradelines 		Folder: ${FOLDER_NAME} - ${Applicant_name}: Pre-qual bubble does contain Satis. Tradelines Info. This is not expected.

	
	####################################################################################################
	
	
	# check if status/ images in bubble are correct
	Run Keyword And Continue On Failure		Run Keyword If 		'${PrefCB}'!='${EMPTY}'		Check If CB Correct 	${PrefCB}	${App_CB}	${COApp_CB}		${stat_co}	${Bubble_Dict}
	# ...					ELSE 				Set Variable 				${Flag_CB}
	
	Run Keyword And Continue On Failure		Run Keyword If 		'${PrefBankrupt}'!='${EMPTY}' 	Check If Bankrupt Correct 	${PrefBankrupt}		${App_BK}	${COApp_BK}		${stat_co}	${Bubble_Dict}
	# ...					ELSE 				Set Variable 				${Flag_BK}
	
	Run Keyword And Continue On Failure		Run Keyword If 		'${PrefTrade}'!='${EMPTY}' 		Check If Tradelines Correct 	${PrefTrade}		${App_TD}	${COApp_TD}		${stat_co}	${Bubble_Dict}
	# ...					ELSE 				Set Variable 				${Flag_TD}
	
	#####################
	${FLAG_Applicant}=		Run Keyword If		'${Flag_CB_App}'=='Pass' and '${Flag_YR_App}'=='Pass' and '${Flag_IN_App}'=='Pass' and '${Flag_BK_App}'=='Pass' and '${Flag_TD_App}'=='Pass'	Set Variable 	Pass
	...						ELSE 				Set Variable 	Fail
	
	${FLAG_COApplicant}=	Run Keyword If		'${Flag_CB_COApp}'=='Pass' and '${Flag_YR_COApp}'=='Pass' and '${Flag_IN_COApp}'=='Pass' and '${Flag_BK_COApp}'=='Pass' and '${Flag_TD_COApp}'=='Pass'	Set Variable 	Pass
	...						ELSE 				Set Variable 	Fail
	
	
	${Final_Fl}=		Run Keyword And Continue On Failure		Run Keyword If		'${FLAG_Applicant}'=='Pass' or '${FLAG_COApplicant}'=='Pass'	Set Variable 		Pass
	...					ELSE				Set Variable 		Fail
	
	# check final image
	${Actual_Image}=	Get From Dictionary		 ${Bubble_Dict}		Final Image
	
	Run Keyword And Continue On Failure 		Run Keyword If 		'${Final_Fl}'=='Pass' and '${Actual_Image}'!='${EMPTY}'		Should Contain 		${Actual_Image}		icon_success 	Folder: ${FOLDER_NAME} - ${Applicant_name}: Final Image - Pass prequalification image (green tick) was expected, but its is not found.
	...											ELSE IF 			'${Final_Fl}'=='Fail' and '${Actual_Image}'!='${EMPTY}'		Should Contain 		${Actual_Image}		icon_decline	Folder: ${FOLDER_NAME} - ${Applicant_name}: Final Image - Fail prequalification image (red cross) was expected, but its is not found.
	...											ELSE IF 			'${Actual_Image}'=='${EMPTY}'		Log 					Folder: ${FOLDER_NAME} - ${Applicant_name}: Final Image is not stored in dictionary.	WARN
	
	
	${stat_check1}=		Run Keyword And Return Status	Should Contain 		${Actual_Image}		icon_success 	values=None
	${stat_check2}=		Run Keyword And Return Status	Should Contain 		${Actual_Image}		icon_decline 	values=None
	
	${stat_check}=		Run Keyword And Return Status	Run Keyword If 		'${Final_Fl}'=='Pass' and '${Actual_Image}'!='${EMPTY}'		Should Be Equal As Strings 		${stat_check1} 	True
						...								ELSE IF 			'${Final_Fl}'=='Fail' and '${Actual_Image}'!='${EMPTY}'		Should Be Equal As Strings 		${stat_check2} 	True

	Log 		******************************* 	warn
	Log 		Folder: ${FOLDER_NAME}		warn
	Log 		${Applicant_name}:		warn
	Log			Applicant Pre-qual Status: ${FLAG_Applicant}	warn
	Log			Co-Applicant Pre-qual Status: ${FLAG_COApplicant}	warn
	Log 		Final Prequal Status: ${Final_Fl}		warn
	
	Run Keyword If 		'${stat_check}'=='True'		Log 		Validation Result: Pass		warn
	...		ELSE 				Log 							Validation Result: Fail		warn
	
	
Check If CB Correct 	[Arguments]		${PrefCB}	${App_CB}	${COApp_CB}		${stat_co}		${Bubble_Dict}
	Run Keyword If 		'${App_CB}'=='${EMPTY}'			Log 		Folder: ${FOLDER_NAME} - ${Applicant_name}: Applicant Credit Score is not shown in Prequal bubble. 		WARN
	Run Keyword If 		'${COApp_CB}'=='${EMPTY}'		Log 		Folder: ${FOLDER_NAME} - ${Applicant_name}: Co-Applicant Credit Score is not shown in Prequal bubble. 	WARN
	
	# Run Keyword If 		'${App_CB}'=='${EMPTY}' or '${COApp_CB}'=='${EMPTY}'	Return From Keyword 	Pass
	Run Keyword If 		'${App_CB}'=='${EMPTY}' 	Return From Keyword 	Pass
	Run Keyword If 		'${COApp_CB}'=='${EMPTY}' 	Return From Keyword 	Pass
	
	${PrefCB}=			Convert To Integer 		${PrefCB}
	${App_CB}=			Run Keyword If 		'${App_CB}'!='${EMPTY}'		Convert To Integer 		${App_CB}
	
	${COApp_CB}=		Run Keyword If 		'${stat_co}'=='True' and '${COApp_CB}'!='${EMPTY}'	Convert To Integer 		${COApp_CB}
	...					ELSE 				Set Variable 			${COApp_CB}	
	
	${Flag_CB_App}=				Run Keyword If 		${App_CB}>=${PrefCB} 		Set Variable	Pass
	...					ELSE 				Set Variable 				Fail
	
	${Flag_CB_COApp}=				Run Keyword If 		${COApp_CB}>=${PrefCB} and '${stat_co}'=='True' 	Set Variable	Pass
	...					ELSE IF 			${COApp_CB}<=${PrefCB} and '${stat_co}'=='True'		Set Variable 	Fail
	...					ELSE 				Set Variable 			${EMPTY}
	
	${PQ_IMG_DICT}=		Get From Dictionary		${Bubble_Dict}		Prequal Image Dict
	
	${App_Img}=			Get From Dictionary		${PQ_IMG_DICT}		App Credit Score
	${COApp_Img}=		Get From Dictionary		${PQ_IMG_DICT}		CoApp Credit Score
	
	
	Run Keyword And Continue On Failure 		Run Keyword If 		'${Flag_CB_App}'=='Pass'		Should Contain 		${App_Img}		icon_success		Folder: ${FOLDER_NAME} - ${Applicant_name}: App Credit Score - Pass image was expected but not found.		values=None
	...		ELSE IF 	'${Flag_CB_App}'=='Fail'		Should Contain 		${App_Img}		icon_decline			Folder: ${FOLDER_NAME} - ${Applicant_name}: App Credit Score - Fail image was expected but not found.		values=None
	...		ELSE 		Fail					Folder: ${FOLDER_NAME} - ${Applicant_name}: App Credit Score - Expected Image is not found.
	
	Run Keyword And Continue On Failure			Run Keyword If 		'${Flag_CB_COApp}'=='Pass'		Should Contain 		${COApp_Img}		icon_success		Folder: ${FOLDER_NAME} - ${Applicant_name}: CoApp Credit Score - Pass image was expected but not found.		values=None
	...		ELSE IF 	'${Flag_CB_COApp}'=='Fail'		Should Contain 		${COApp_Img}		icon_decline			Folder: ${FOLDER_NAME} - ${Applicant_name}: CoApp Credit Score - Fail image was expected but not found.		values=None
	...		ELSE 		Fail					Folder: ${FOLDER_NAME} - ${Applicant_name}: CoApp Credit Score - Expected Image is not found.
	
	Set Suite Variable 		${Flag_CB_App}
	Set Suite Variable 		${Flag_CB_COApp}
	
	# ${ret_fl}=			Run Keyword If 		'${fg1}'=='Pass' and '${fg2}'=='Pass'		Set Variable 		Pass
	# ...					ELSE 				Set Variable 		Fail
	
	# [Return]			${ret_fl}


Check If YRS Correct 	[Arguments]		${PrefYrs}	${App_YR}	${COApp_YR}		${stat_co}	${Bubble_Dict}
	Run Keyword If 		'${App_YR}'=='${EMPTY}'			Log 		Folder: ${FOLDER_NAME} - ${Applicant_name}: Applicant Yrs At Job is not shown in Prequal bubble. 		WARN
	Run Keyword If 		'${COApp_YR}'=='${EMPTY}'		Log 		Folder: ${FOLDER_NAME} - ${Applicant_name}: Co-Applicant Yrs At Job is not shown in Prequal bubble. 	WARN
	
	# Run Keyword If 		'${App_YR}'=='${EMPTY}'	or '${COApp_YR}'=='${EMPTY}'		Return From Keyword 	Pass
	
	Run Keyword If 		'${App_YR}'=='${EMPTY}'		Return From Keyword 	Pass
	Run Keyword If 		'${COApp_YR}'=='${EMPTY}'		Return From Keyword 	Pass
	
	${PrefYrs}=			Convert To Integer 		${PrefYrs}
	${App_YR}=			Convert To Integer 		${App_YR}
	${COApp_YR}=		Run Keyword If 		'${stat_co}'=='True'	Convert To Integer 		${COApp_YR}
	...					ELSE 				Set Variable 			${COApp_YR}	
	
	${Flag_YR_App}=				Run Keyword If 		${App_YR}>=${PrefYrs} 	Set Variable	Pass
	...					ELSE 				Set Variable 			Fail
	
	${Flag_YR_COApp}=				Run Keyword If 		${COApp_YR}>=${PrefYrs} and '${stat_co}'=='True' 		Set Variable	Pass
	...					ELSE IF 			${COApp_YR}<=${PrefYrs} and '${stat_co}'=='True'		Set Variable 	Fail
	...					ELSE 				Set Variable 			${EMPTY}
	
	${PQ_IMG_DICT}=		Get From Dictionary		${Bubble_Dict}		Prequal Image Dict
	
	${App_Img}=			Get From Dictionary		${PQ_IMG_DICT}		App Time at Job
	${COApp_Img}=		Get From Dictionary		${PQ_IMG_DICT}		CoApp Time at Job
	
	
	Run Keyword And Continue On Failure 		Run Keyword If 		'${Flag_YR_App}'=='Pass'		Should Contain 		${App_Img}		icon_success		Folder: ${FOLDER_NAME} - ${Applicant_name}: App Time at Job - Pass image was expected but not found.		values=None
	...		ELSE IF 	'${Flag_YR_App}'=='Fail'		Should Contain 		${App_Img}		icon_decline			Folder: ${FOLDER_NAME} - ${Applicant_name}: App Time at Job - Fail image was expected but not found.		values=None
	...		ELSE 		Fail					Folder: ${FOLDER_NAME} - ${Applicant_name}: App Time at Job - Expected Image is not found.
	
	Run Keyword And Continue On Failure			Run Keyword If 		'${Flag_YR_COApp}'=='Pass'		Should Contain 		${COApp_Img}		icon_success		Folder: ${FOLDER_NAME} - ${Applicant_name}: CoApp Time at Job - Pass image was expected but not found.		values=None
	...		ELSE IF 	'${Flag_YR_COApp}'=='Fail'		Should Contain 		${COApp_Img}		icon_decline			Folder: ${FOLDER_NAME} - ${Applicant_name}: CoApp Time at Job - Fail image was expected but not found.		values=None
	...		ELSE 		Fail					Folder: ${FOLDER_NAME} - ${Applicant_name}: CoApp Time at Job - Expected Image is not found.
	
	Set Suite Variable 		${Flag_YR_App}
	Set Suite Variable 		${Flag_YR_COApp}
	# ${ret_fl}=			Run Keyword If 		'${fg1}'=='Pass' and '${fg2}'=='Pass'		Set Variable 		Pass
	# ...					ELSE 				Set Variable 		Fail
	
	# [Return]			${ret_fl}

Check If Income Correct 	[Arguments]		${PrefIncome}	${App_IN}	${COApp_IN}		${stat_co}	${Bubble_Dict}
	Run Keyword If 		'${App_IN}'=='${EMPTY}'			Log 		Folder: ${FOLDER_NAME} - ${Applicant_name}: Applicant Income is not shown in Prequal bubble. 		WARN
	Run Keyword If 		'${COApp_IN}'=='${EMPTY}'		Log 		Folder: ${FOLDER_NAME} - ${Applicant_name}: Co-Applicant Income is not shown in Prequal bubble. 	WARN
	
	# Run Keyword If 		'${App_IN}'=='${EMPTY}'	or '${COApp_IN}'=='${EMPTY}'		Return From Keyword 	Pass
	Run Keyword If 		'${App_IN}'=='${EMPTY}'			Return From Keyword 	Pass
	Run Keyword If 		'${COApp_IN}'=='${EMPTY}'			Return From Keyword 	Pass
	
	${PrefIncome}=		Convert To Integer 		${PrefIncome}
	
	${App_IN}=			Replace String 			${App_IN}		,	${EMPTY}
	${COApp_IN}=			Replace String 		${COApp_IN}		,	${EMPTY}
	
	${App_IN}=			Convert To Number 		${App_IN}
	${COApp_IN}=		Run Keyword If 		'${stat_co}'=='True'	Convert To Number 		${COApp_IN}
	...					ELSE 				Set Variable 			${COApp_IN}	
	
	${Flag_IN_App}=				Run Keyword If 		${App_IN}>=${PrefIncome} 	Set Variable	Pass
	...					ELSE 				Set Variable 				Fail
	
	${Flag_IN_COApp}=				Run Keyword If 		${COApp_IN}>=${PrefIncome} and '${stat_co}'=='True' 		Set Variable	Pass
	...					ELSE IF 			${COApp_IN}<=${PrefIncome} and '${stat_co}'=='True'			Set Variable 	Fail
	...					ELSE 				Set Variable 			${EMPTY}
	
	${PQ_IMG_DICT}=		Get From Dictionary		${Bubble_Dict}		Prequal Image Dict
	
	${App_Img}=			Get From Dictionary		${PQ_IMG_DICT}		App Income
	${COApp_Img}=		Get From Dictionary		${PQ_IMG_DICT}		CoApp Income
	
	
	Run Keyword And Continue On Failure 		Run Keyword If 		'${Flag_IN_App}'=='Pass'		Should Contain 		${App_Img}		icon_success		Folder: ${FOLDER_NAME} - ${Applicant_name}: App Income - Pass image was expected but not found.		values=None
	...		ELSE IF 	'${Flag_IN_App}'=='Fail'		Should Contain 		${App_Img}		icon_decline			Folder: ${FOLDER_NAME} - ${Applicant_name}: App Income - Fail image was expected but not found.		values=None
	...		ELSE 		Fail					Folder: ${FOLDER_NAME} - ${Applicant_name}: App Income - Expected Image is not found.
	
	Run Keyword And Continue On Failure			Run Keyword If 		'${Flag_IN_COApp}'=='Pass'		Should Contain 		${COApp_Img}		icon_success		Folder: ${FOLDER_NAME} - ${Applicant_name}: CoApp Income - Pass image was expected but not found.		values=None
	...		ELSE IF 	'${Flag_IN_COApp}'=='Fail'		Should Contain 		${COApp_Img}		icon_decline			Folder: ${FOLDER_NAME} - ${Applicant_name}: CoApp Income - Fail image was expected but not found.		values=None
	...		ELSE 		Fail					Folder: ${FOLDER_NAME} - ${Applicant_name}: CoApp Income - Expected Image is not found.
	
	Set Suite Variable 	${Flag_IN_App}
	Set Suite Variable 	${Flag_IN_COApp}
	
	# ${ret_fl}=			Run Keyword If 		'${fg1}'=='Pass' and '${fg2}'=='Pass'		Set Variable 		Pass
	# ...					ELSE 				Set Variable 		Fail
	
	# [Return]			${ret_fl}

Check If Bankrupt Correct 	[Arguments]		${PrefBankrupt}		${App_BK}	${COApp_BK}		${stat_co}	${Bubble_Dict}
	Run Keyword If 		'${App_BK}'=='${EMPTY}'			Log 		Folder: ${FOLDER_NAME} - ${Applicant_name}: Applicant Bankruptcies is not shown in Prequal bubble. 		WARN
	Run Keyword If 		'${COApp_BK}'=='${EMPTY}'		Log 		Folder: ${FOLDER_NAME} - ${Applicant_name}: Co-Applicant Bankruptcies is not shown in Prequal bubble. 	WARN
	
	Run Keyword If 		'${App_BK}'=='${EMPTY}'			Return From Keyword 	Pass
	Run Keyword If 		'${COApp_BK}'=='${EMPTY}'		Return From Keyword 	Pass
	
	${PrefBankrupt}=			Convert To Integer 		${PrefBankrupt}
	
	${App_BK}=			Run Keyword If 		'${App_BK}'!='${EMPTY}'		Convert To Integer 		${App_BK}
	...					ELSE 				Set Variable 				${EMPTY}
	
	${COApp_BK}=		Run Keyword If 		'${stat_co}'=='True'	Convert To Integer 		${COApp_BK}
	...					ELSE 				Set Variable 			${COApp_BK}	
	
	${Flag_BK_App}=				Run Keyword If 		${App_BK}<=${PrefBankrupt} 	Set Variable	Pass
	...					ELSE 				Set Variable 				Fail
	
	${Flag_BK_COApp}=				Run Keyword If 		${COApp_BK}<=${PrefBankrupt} and '${stat_co}'=='True' 		Set Variable	Pass
	...					ELSE IF 			${COApp_BK}>=${PrefBankrupt} and '${stat_co}'=='True'		Set Variable 	Fail
	...					ELSE 				Set Variable 			${EMPTY}
	
	${PQ_IMG_DICT}=		Get From Dictionary		${Bubble_Dict}		Prequal Image Dict
	
	${App_Img}=			Get From Dictionary		${PQ_IMG_DICT}		App Bankruptcies
	${COApp_Img}=		Get From Dictionary		${PQ_IMG_DICT}		CoApp Bankruptcies
	
	
	Run Keyword And Continue On Failure 		Run Keyword If 		'${Flag_BK_App}'=='Pass'		Should Contain 		${App_Img}		icon_success		${Applicant_name}: App Bankrupt - Pass image was expected but not found.		values=None
	...		ELSE IF 	'${Flag_BK_App}'=='Fail'		Should Contain 		${App_Img}		icon_decline			Folder: ${FOLDER_NAME} - ${Applicant_name}: App Bankrupt - Fail image was expected but not found.		values=None
	...		ELSE 		Fail					Folder: ${FOLDER_NAME} - ${Applicant_name}: App Bankrupt - Expected Image is not found.
	
	Run Keyword And Continue On Failure			Run Keyword If 		'${Flag_BK_COApp}'=='Pass'		Should Contain 		${COApp_Img}		icon_success		${Applicant_name}: CoApp Bankrupt - Pass image was expected but not found.		values=None
	...		ELSE IF 	'${Flag_BK_COApp}'=='Fail'		Should Contain 		${COApp_Img}		icon_decline			Folder: ${FOLDER_NAME} - ${Applicant_name}: CoApp Bankrupt - Fail image was expected but not found.		values=None
	...		ELSE 		Fail					Folder: ${FOLDER_NAME} - ${Applicant_name}: CoApp Bankrupt - Expected Image is not found.
	
	Set Suite Variable 	${Flag_BK_App}
	Set Suite Variable 	${Flag_BK_COApp}
	

	# ${ret_fl}=			Run Keyword If 		'${fg1}'=='Pass' or '${fg2}'=='Pass'		Set Variable 		Pass
	# ...					ELSE 				Set Variable 		Fail
	
	# [Return]	${ret_fl}
	
Check If Tradelines Correct 	[Arguments]		${PrefTrade}		${App_TD}	${COApp_TD}		${stat_co}	${Bubble_Dict}
	Run Keyword If 		'${App_TD}'=='${EMPTY}'			Log 		Folder: ${FOLDER_NAME} - ${Applicant_name}: Applicant Tradelines is not shown in Prequal bubble. 		WARN
	Run Keyword If 		'${COApp_TD}'=='${EMPTY}'		Log 		Folder: ${FOLDER_NAME} - ${Applicant_name}: Co-Applicant Tradelines is not shown in Prequal bubble. 	WARN
	
	# Run Keyword If 		'${App_TD}'=='${EMPTY}' or '${COApp_TD}'=='${EMPTY}'	Return From Keyword 	Pass
	Run Keyword If 		'${App_TD}'=='${EMPTY}'			Return From Keyword 	Pass
	Run Keyword If 		'${COApp_TD}'=='${EMPTY}'		Return From Keyword 	Pass
	
	${PrefTrade}=		Convert To Integer 		${PrefTrade}
	${App_TD}=			Run Keyword If 		'${App_TD}'!='-'		Convert To Integer 		${App_TD}
	...					ELSE 				Set Variable 			${App_TD}	
	${COApp_TD}=		Run Keyword If 		'${stat_co}'=='True' and '${COApp_TD}'!='-'		Convert To Integer 		${COApp_TD}
	...					ELSE 				Set Variable 			${COApp_TD}	
	
	${Flag_TD_App}=		Run Keyword If 		'${App_TD}'=='-'			Set Variable 	Fail
	...					ELSE IF				${App_TD}>=${PrefTrade} 	Set Variable	Pass
	...					ELSE 				Set Variable 				Fail
	
	${Flag_TD_COApp}=				Run Keyword If 		'${stat_co}'=='True' and '${COApp_TD}'=='-'		Set Variable 	Fail
	...					ELSE IF 			${COApp_TD}>=${PrefTrade} and '${stat_co}'=='True' 		Set Variable	Pass
	...					ELSE IF 			${COApp_TD}<=${PrefTrade} and '${stat_co}'=='True'		Set Variable 	Fail
	...					ELSE 				Set Variable 			${EMPTY}
	
	${PQ_IMG_DICT}=		Get From Dictionary		${Bubble_Dict}		Prequal Image Dict
	
	${App_Img}=			Get From Dictionary		${PQ_IMG_DICT}		App Satis. Tradelines
	${COApp_Img}=		Get From Dictionary		${PQ_IMG_DICT}		CoApp Satis. Tradelines
	
	
	Run Keyword And Continue On Failure 		Run Keyword If 		'${Flag_TD_App}'=='Pass'		Should Contain 		${App_Img}		icon_success		${Applicant_name}: App Tradelines - Pass image was expected but not found.		values=None
	...		ELSE IF 	'${Flag_TD_App}'=='Fail'		Should Contain 		${App_Img}		icon_decline			${Applicant_name}: App Tradelines - Fail image was expected but not found.		values=None
	...		ELSE 		Fail					Folder: ${FOLDER_NAME} - ${Applicant_name}: App Tradelines - Expected Image is not found.
	
	Run Keyword And Continue On Failure			Run Keyword If 		'${Flag_TD_COApp}'=='Pass'		Should Contain 		${COApp_Img}		icon_success		Folder: ${FOLDER_NAME} - ${Applicant_name}: CoApp Tradelines - Pass image was expected but not found.		values=None
	...		ELSE IF 	'${Flag_TD_COApp}'=='Fail'		Should Contain 		${COApp_Img}		icon_decline			Folder: ${FOLDER_NAME} - ${Applicant_name}: CoApp Tradelines - Fail image was expected but not found.		values=None
	...		ELSE 		Fail					Folder: ${FOLDER_NAME} - ${Applicant_name}: CoApp Tradelines - Expected Image is not found.
	
	Set Suite Variable 	${Flag_TD_App}
	Set Suite Variable 	${Flag_TD_COApp}
	
	
	# ${ret_fl}=			Run Keyword If 		'${fg1}'=='Pass' or '${fg2}'=='Pass'		Set Variable 		Pass
	# ...					ELSE 				Set Variable 		Fail
	
	# [Return]	${ret_fl}
	
Check Range		[Arguments]		${my_val}	${lower}	${upper}
	Log 		${my_val}	
	Log 		${lower}
	Log 		${upper}
	
	${x}= 				Run Keyword If 		${my_val}<${lower}	Set Variable 	True
	...					ELSE 		Set Variable 		False
	
	${y}= 				Run Keyword If 		${my_val}>${upper}	Set Variable 	True
	...					ELSE 		Set Variable 		False
	
	${ret}=		Run Keyword If 		'${x}'=='True' or '${y}'=='True'	Set Variable 	Fail
	...			ELSE 				Set Variable 		Pass
	
	[Return]	${ret}
	
Check Value 	[Arguments]		${M_val}	${limit}	
	Log 		${M_Val}
	${x}= 				Run Keyword If 		${M_val}<${limit}	Set Variable 	True
	...					ELSE 		Set Variable 		False
	
	${ret}=		Run Keyword If 		'${x}'=='True' 	Set Variable 	Fail
	...			ELSE 				Set Variable 		Pass
	
	[Return]	${ret}
	
	
Read Existing Preferences	[Arguments]		${Existing_Dict}

	Unselect Frame
	Wait Until Keyword Succeeds   240s	3s   	Page Should Contain Element 	//iframe[@id='iFrm']	Frame is not loaded on FD Preferences page.
	Wait Until Page Contains Element            //iframe[@id='iFrm']
	Select Frame                                iFrm
	Wait Until Page Contains Element            //frame[@name='main']
	Select Frame                                main

	Wait Until Keyword Succeeds   120	3s   	Page Should Contain Element 	//a[@href='/FinanceDriver/DealerPartnerIntegration/PrequalificationAndRouting?IsEditMode=True']			Page 'Leads Partner Integration | Prequalification & Routing' is not loded correctly.		loglevel=NONE
	
	# Credit Score
	${stat}=			Run Keyword And Return Status 		Page Should Contain Element 	//div[@id='DTform']/table[4]/tbody/tr[2]/td/table/tbody/tr/td		Credit Score is not shown after edit 	loglevel=NONE	
	${Act_Val_CRSCORE}=			Run Keyword If 		'${stat}'=='True'	Get Text 		//div[@id='DTform']/table[4]/tbody/tr[2]/td/table/tbody/tr/td
	...						ELSE 			Set Variable 		${EMPTY}
	
	Set To Dictionary		${Existing_Dict}		Credit Score	${Act_Val_CRSCORE}
	
	# Years
	# Actual value
	${stat}=			Run Keyword And Return Status 		Page Should Contain Element 	//div[@id='DTform']/table[4]/tbody/tr[2]/td/table[2]/tbody/tr/td/span[2]		loglevel=NONE	
	${Act_Val}=			Run Keyword If 		'${stat}'=='True'	Get Text 		//div[@id='DTform']/table[4]/tbody/tr[2]/td/table[2]/tbody/tr/td/span[2]
	...						ELSE 			Set Variable 		${EMPTY}
	${Act_Val}=			Evaluate		str('${Act_Val}').strip()
	
	Set To Dictionary		${Existing_Dict}		Years Job	${Act_Val}
	
	# Income
	# Actual value
	${stat}=			Run Keyword And Return Status 		Page Should Contain Element 	//div[@id='DTform']/table[4]/tbody/tr[2]/td/table[2]/tbody/tr[2]/td/span[2]		loglevel=NONE	
	${Act_Val}=			Run Keyword If 		'${stat}'=='True'	Get Text 		//div[@id='DTform']/table[4]/tbody/tr[2]/td/table[2]/tbody/tr[2]/td/span[2]
	...						ELSE 			Set Variable 		${EMPTY}
	${Act_Val}=			Evaluate		str('${Act_Val}').strip()
	
	Set To Dictionary		${Existing_Dict}		Income		${Act_Val}
	
	# Bankruptcies
	# Actual value
	${stat}=			Run Keyword And Return Status 		Page Should Contain Element 	//div[@id='DTform']/table[4]/tbody/tr[2]/td/table[2]/tbody/tr[3]/td/span[2]		loglevel=NONE	
	${Act_Val}=			Run Keyword If 		'${stat}'=='True'	Get Text 		//div[@id='DTform']/table[4]/tbody/tr[2]/td/table[2]/tbody/tr[3]/td/span[2]
	...						ELSE 			Set Variable 		${EMPTY}
	${Act_Val}=			Evaluate		str('${Act_Val}').strip()
	
	Set To Dictionary		${Existing_Dict}		Bankrupt		${Act_Val}
	
	# tradelines
	# Actual value
	${stat}=			Run Keyword And Return Status 		Page Should Contain Element 	//div[@id='DTform']/table[4]/tbody/tr[2]/td/table[2]/tbody/tr[4]/td/span[2]		loglevel=NONE	
	${Act_Val}=			Run Keyword If 		'${stat}'=='True'	Get Text 		//div[@id='DTform']/table[4]/tbody/tr[2]/td/table[2]/tbody/tr[4]/td/span[2]	
	...						ELSE 			Set Variable 		${EMPTY}
	${Act_Val}=			Evaluate		str('${Act_Val}').strip()
	
	Set To Dictionary		${Existing_Dict}		Tradelines		${Act_Val}
	
	Log Dictionary			${Existing_Dict}
	
	Unselect Frame
	
	[Return]		${Existing_Dict}
	
	
Check If Pref Are Already Set	[Arguments]		${Existing_Dict}	${PrefDict}	
	Log Dictionary		${Existing_Dict}	
	Log Dictionary		${PrefDict}	
	
	${CB_Exist}=	Get From Dictionary			${Existing_Dict}	Credit Score
	${CB_Now}=		Get From Dictionary			${PrefDict}			Credit Score
	${flag1}=		Run Keyword And Return Status 		Should Contain 		${CB_Exist}		${CB_Now}
	
	${YR_Exist}=	Get From Dictionary			${Existing_Dict}	Years Job
	${YR_Now}=		Get From Dictionary			${PrefDict}			Years Job
	${flag2}=		Run Keyword And Return Status 		Should Contain 		${YR_Exist}		${YR_Now}
	
	${IN_Exist}=	Get From Dictionary			${Existing_Dict}	Income
	${IN_Now}=		Get From Dictionary			${PrefDict}			Income
	${flag3}=		Run Keyword And Return Status 		Should Contain 		${IN_Exist}		${IN_Now}
	
	${BK_Exist}=	Get From Dictionary			${Existing_Dict}	Bankrupt
	${BK_Now}=		Get From Dictionary			${PrefDict}			Bankrupt
	${flag4}=		Run Keyword And Return Status 		Should Contain 		${BK_Exist}		${BK_Now}
	
	${TD_Exist}=	Get From Dictionary			${Existing_Dict}	Bankrupt
	${TD_Now}=		Get From Dictionary			${PrefDict}			Bankrupt
	${flag5}=		Run Keyword And Return Status 		Should Contain 		${TD_Exist}		${TD_Now}
	
	${RETFLAG}=		Run Keyword If 		'${flag1}'=='True' and '${flag2}'=='True' and '${flag3}'=='True' and '${flag4}'=='True' and '${flag5}'=='True' 		Set Variable 	True
	...				ELSE 				Set Variable 		False
	
	[Return]	${RETFLAG}
	
FD Preferences Complete Flow 	[Arguments]	${FOLDER_NAME}
	
	WriteToFile			${LogFile}			Y			FD Preferences Complete Flow>>>
	
	####################################################
	Set FD Preferences									${FOLDER_NAME}	
	# Log Dictionary										${Pref_Dict}		WARN
	WriteToFile			${LogFile}			Y			@Pref_Dict=${Pref_Dict}
	####################################################
	Process All Xml Files								${FOLDER_NAME}	
	####################################################
	Log List 											${List_LeadsSummary}
	${CountLeads}= 										Get Length 		${List_LeadsSummary}	
	Run Keyword If 				${CountLeads}!=0		Check Records On My Leads Page						${Global_Dict}				${List_LeadsSummary}			${MyLeads_Sleep}
	... 	ELSE				Log 					No records to be verifed on My Leads page.			WARN
	Run Keyword If 				${CountLeads}!=0		Log Dictionary 				${Lead_Summary_Dict}
	####################################################
	
	Run Keyword If 				${CountLeads}!=0		Validate Prequal Pass Fail Details Against Preferences 		${Global_Dict}		${Lead_Summary_Dict}	${Pref_Dict}	${List_LeadsSummary}
	
Check Records On Customer Folders Page		
	[Arguments]		${Global_Dict}				${List_Compliance}			${ComplianceSleep}
	Sleep 				${ComplianceSleep}
	Log Dictionary		${Global_Dict}
	
	Log List 					${List_Compliance}	
	${CountCust}= 				Get Length 		${List_Compliance}			
	${CountCustStat}=			Run Keyword And Return Status 		Evaluate 	${CountCust}<20
	Run Keyword And Continue On Failure 	 		Run Keyword If 				'${CountCustStat}'!='True'			Fail 	Total requests sent for Validation on Customer Folders Page: ${CountCust}. For validating records on Customer Folders Page UI please send 20 requests at the maximum.		
	
	Run Keyword If 				'${CountCustStat}'=='True'		Unselect Frame
	Run Keyword If 				'${CountCustStat}'=='True'		Navigate to Customer Folders
	Run Keyword If 				'${CountCustStat}'=='True'		Wait Till All Records Are Shown On Customer Folders Page 		${Global_Dict}		${List_Compliance}
	Run Keyword If 				'${CountCustStat}'=='True'		Validate Customer Folders Page 							${Global_Dict}				${List_Compliance}

# # # Setup Preferences Using CBWS Request		[Arguments]		${Setup_Folder}	
	# # # # Call keyword to do setup check
	# # # ${DEALERID}=		Get From Dictionary		${Scenario Setup}		Partner Dealer Id CB
	
	# # # ${Environment}=		Get From Dictionary		 ${Scenario Setup}		Environment
	# # # Log 		${Environment}
	
	# # # # Login and switch dealership
	# # # Run Keyword If 		'${Environment}'=='QA'		Login to DT And Switch Dealership		${DEALERID}
	# # # ...					ELSE 		Login Only If Required
	
	# # # # Create a dictionary of records on Customer Archive page before sending CBWS request
	# # # Take Initial Snapshot Of Customer Archive Page
	
	# # # # Send CBWS request
    # # # # ${FOLDER_NAME}=    		Set Variable    ${Setup_Folder}	
    # # # # Set Suite Variable    	${FOLDER_NAME}
    # # # ${VERSION}				Set Variable 			1.1
	# # # # Call kw to send CBWS request
	# # # Call FD Credit Bureau Service		${VERSION}		${Setup_Folder}
	
	# # # # Check if record is added on Customer Archive page or not
	# # # Check If Record Added To Customer Archive Page
	
	# # # # If record is found, verify the record
	# # # Run Keyword If		'${UpdatedValueStatus}'=='False'	Verify Record On Customer Archive Page		2
	# # # ... 				ELSE			Fail 				Record is not added on Customer Archive page after sending CBWS request.

	# # # # Set the preferences based on the Credit Scores returned.
	# # # # Run Keyword If 		'${CREDIT_SCORE}'!='${EMPTY}' and '${SCORE2}'!='${EMPTY}' and '${SCORE3}'!='${EMPTY}'		Set Required Preferences	Set2
	# # # # ...					ELSE 		Set Required Preferences	Set3
	
	
	# # # Run Keyword If 		'${CREDIT_SCORE}'!='${EMPTY}' and '${SCORE2}'!='${EMPTY}' and '${SCORE3}'!='${EMPTY}'		Set FD Preferences		C:\\Project\\FDLD\\testcases\\FDLD\\Input\\Regression\\Compliance\\Setup\\AllBureau
	# # # ...					ELSE		Set FD Preferences		C:\\Project\\FDLD\\testcases\\FDLD\\Input\\Regression\\Compliance\\Setup\\SinglePrequal
	
	# # # ${FLAG}=	Run Keyword If 		'${CREDIT_SCORE}'!='${EMPTY}' and '${SCORE2}'!='${EMPTY}' and '${SCORE3}'!='${EMPTY}'	Set Variable 	Set2
	# # # ...					ELSE		Set Variable	Set3
	
	# # # # logging which pref are set
	# # # ${MSG}=		Run Keyword If 		'${CREDIT_SCORE}'!='${EMPTY}' and '${SCORE2}'!='${EMPTY}' and '${SCORE3}'!='${EMPTY}'	Set Variable 	All Bureau scores were returned. FD Preferences were set for all 5 Prequalification Criteria.
	# # # ...			ELSE 				Set Variable 		All bureau scores were not returned. FD Preferences were set for Years At Job only
	
	# # # # Run Keyword If		'${FLAG}'=='Set3' 		Log 	${MSG}	
	# # # # ...		ELSE 		Log 		${MSG}		WARN
	
	# # # Log 		${MSG}		WARN
	
	# # # [Return]	${FLAG}

Wait Till All Records Are Shown On Customer Folders Page 		[Arguments]	${Global_Dict}		${List_Compliance}
	Log Dictionary		${Global_Dict}
	Log List 			${List_Compliance}
	
	@{FS}= 		Create List
	@{LS}= 		Create List
	
	${FS}=		Get Data In List From Dictionary For A Key 		${Global_Dict}		${List_Compliance}		First Name
	${LS}=		Get Data In List From Dictionary For A Key 		${Global_Dict}		${List_Compliance}		Last Name
	${MS}=		Get Data In List From Dictionary For A Key 		${Global_Dict}		${List_Compliance}		Middle Name
	
	Log List 		${FS}
	Log List 		${LS}
	Log List 		${MS}

	${C_FS}=		Get Data In List From Dictionary For A Key 		${Global_Dict}		${List_Compliance}		CoApp First Name
	${C_LS}=		Get Data In List From Dictionary For A Key 		${Global_Dict}		${List_Compliance}		CoApp Last Name
	${C_MS}=		Get Data In List From Dictionary For A Key 		${Global_Dict}		${List_Compliance}		CoApp Middle Name
	
	Log List 		${C_FS}
	Log List 		${C_LS}
	Log List 		${C_MS}
	
	# Expected app names 
	${len}=		Get Length 	${FS}
	@{Expected_AppNameList}=	Create List
	
	:FOR 	${I} 	IN RANGE 	0 		${len}
	\		${Appfistname}=		Get From List 		${FS}	${I}
	\		${Applastname}=		Get From List 		${LS}	${I}
	\		${AppMidname}=		Get From List 		${MS}	${I}
	
	\		${CoAppfistname}=		Get From List 		${C_FS}	${I}
	\		${CoApplastname}=		Get From List 		${C_LS}	${I}
	\		${CoAppMidname}=		Get From List 		${C_MS}	${I}
	
	\		${ExpName}=			Catenate 			SEPARATOR=		${Applastname}	,	${SPACE} 	${Appfistname}
	\		${ExpName}=			Run Keyword If 		'${AppMidname}'!='${EMPTY}'		Catenate 			SEPARATOR=		${ExpName}		${SPACE}	${AppMidname}	.
	\		...					ELSE 				Set Variable 	${ExpName}
	
	\		${ExpName}=			Run Keyword If 		'${CoApplastname}'!='${EMPTY}'	Catenate 			SEPARATOR=		${ExpName}		${SPACE}	(	${CoApplastname}	,	${SPACE}	${CoAppfistname}	)
	\		...					ELSE 				Set Variable 	${ExpName}
	\		Append To List 		${Expected_AppNameList}		${ExpName}
	
	# this list contaons all expected applicant names.
	Log List 		${Expected_AppNameList}
	
	# converting to lower case
	@{Expected_List}=		Create List
	:FOR 	${I} 	IN RANGE 	0 		${len}
	\		${name}=	Get From List 		${Expected_AppNameList}		${I}
	\		${lower_name}=		Evaluate 	str('${name}').lower()
	\		Append To List 	${Expected_List}	${lower_name}
	
	Log list		${Expected_List}
	
	${DELAY}=		Set Variable	90	#60
	${TIME_FRACTION}=	Set Variable	5
	
	${COUNT}			Evaluate				${DELAY}/${TIME_FRACTION}
	${COUNT}			Convert To Integer		${COUNT}
	${SCAN}				Set Variable			0
	
	# Wait Until Keyword Succeeds    60s    3s    Page Should Contain Element    //table[@id='DataGridArchive']/tbody/tr[${ROW}]/td[4]/span    Credit score is not shown on Customer Archive Page.    loglevel=NONE
	:For		${LOOP}		IN RANGE	1			${COUNT} + 1
	\	Sleep				${TIME_FRACTION}s	
	\	${Cust_List}=		Get Data On Customer Folders Page In A List		${len}		2
	\	Log List 			${Cust_List}
	\	Set Suite Variable 	${Cust_List}
	\	Sort List 			${Expected_List}
	\	Sort List 			${Cust_List}
	\	Log List 			${Cust_List}
	\	Log List 			${Expected_List}
	\	${EXEC_STATUS}=		Run Keyword And Return Status 	Lists Should Be Equal 		${Expected_List}	${Cust_List}
	\	Run Keyword If		'${EXEC_STATUS}'=='True'							Exit For Loop
	\	...		ELSE		Navigate Again To Customer Folders Page
	
	
	Run Keyword If		'${EXEC_STATUS}'!='True'	Fail 	All records are not shown on Customer Folders page.

Get Data On Customer Folders Page In A List		[Arguments]		${No_Apps}	${Col}
	${Data_List}=	Create List
	
	Unselect Frame
	Wait Until Page Contains Element            //iframe[@id='iFrm']
	Select Frame                                iFrm
	Wait Until Page Contains Element            //frame[@name='main']
	Select Frame                                main
	sleep 										2s
	Wait Until Keyword succeeds     60      10      Page Should Contain Element           //table[@id='RadGrid1_ctl00']/tbody	Table is not found on Customer Folders page 	loglevel=NONE
	
	# Log 			${CNT}
	# ${CNT1}=		Evaluate 		${CNT}+2
	
	Log 			${No_Apps}
	${CNT1}=		Evaluate 		${No_Apps}+1
	
	:For		${Row}		IN RANGE	1			${CNT1}
	\	Log 	${Row}
	\	Wait Until Keyword succeeds     60      10      Page Should Contain Element           //table[@id='RadGrid1_ctl00']/tbody/tr[${Row}]/td[${Col}]		Table is not found on Customer Folders page 	loglevel=NONE
	\	${is_pass}=			Run Keyword And Return Status 		Get Text		//table[@id='RadGrid1_ctl00']/tbody/tr[${Row}]/td[${Col}]
	\	Run Keyword If 		'${is_pass}'=='False'		Sleep 		2s
	\	Wait Until Keyword succeeds     60      10      Page Should Contain Element           //table[@id='RadGrid1_ctl00']/tbody/tr[${Row}]/td[${Col}]		Table is not found on Customer Folders page 	loglevel=NONE
	\	${ACT_Cust_SH1}=		Get Text		//table[@id='RadGrid1_ctl00']/tbody/tr[${Row}]/td[${Col}]
	\	${ACT_Cust_SH}=		Evaluate	str('${ACT_Cust_SH1}').lower()
	\	Run Keyword If 		'${ACT_Cust_SH}'=='None'			Fail			Unable to get value in Applicant column on Customer Folders Page. 
	\	${ACT_Cust}=		Evaluate		str('${ACT_Cust_SH}').strip()
	\	Append To List 		${Data_List}	${ACT_Cust}
	
	Log List 	${Data_List}
	[Return] 	${Data_List}
	
Navigate Again To Customer Folders Page	
	Unselect Frame
	Wait Until Page Contains Element            //iframe[@id='iFrm']		error=Navigate to Customer Folder page is not successful. Page is not loaded correctly. Please check.
	Select Frame                                iFrm
	Wait Until Page Contains Element            //frame[@name='nav']
	Select Frame                                nav
	
	Wait Until Keyword Succeeds               120s                   3s                   Page Should Contain Element            //a[@id='tabReportsA']			Reports tab is not found. 	loglevel=NONE
	# sleep 	3s
	Execute Javascript                          window.document.getElementById('tabReportsA').onclick()
	# sleep										5s
	Wait Until Keyword Succeeds               120s                   3s                   Page Should Contain Element             //a[@id='AutoComply'] 			loglevel=NONE
	Press Key									//a[@id='AutoComply']				\\13
	# sleep	3s
	Wait Until Keyword Succeeds               120s		3s			Page Should Contain Element             //a[@id='CustomerFiles'] 			loglevel=NONE
	Press Key									//a[@id='CustomerFiles']				\\13
	# sleep	3s
	
	Wait Until Keyword Succeeds               120s                   3s                   Page Should Contain Element             //*[text()='Customer Folders']  	Customer Folders Page is not loaded. Text Customer Folders is not shown on page.		loglevel=NONE
	Unselect Frame
	
	Wait Until Page Contains Element            //iframe[@id='iFrm']		error=Navigate to Customer Folder page is not successful. Page is not loaded correctly. Please check.
	Select Frame                                iFrm
	Wait Until Page Contains Element            //frame[@name='main']
	Select Frame                                main
	
Validate Customer Folders Page 					[Arguments]		${Global_Dict}				${List_Compliance}	
	Log Dictionary		${Global_Dict}
	Log List 			${List_Compliance}
	Unselect Frame
	# Check if any Credit App xml is processed		#HERE
	${GB_Len}=	Get Length 		${Global_Dict}
	:FOR 	${I} 	IN RANGE 	0 		${GB_Len}
	\		${dict}=		Get From Dictionary 	${Global_Dict}		${I}
	\		${TS_Code_App}=		Run Keyword And Return Status	Dictionary Should Contain Item 		${dict}		TransCode 	1
	\		Run Keyword If 		'${TS_Code_App}'=='True'	Exit For Loop
	
	Run Keyword If 		'${TS_Code_App}'=='True'	Navigate To My Leads
	${MyLeadLen}=		Get Length 		${List_LeadsSummary}
	@{MyLeads_Cust}=	Create List
	@{status_list}= 	Create List
	${MyLeads_Cust}=	Run Keyword If 		'${TS_Code_App}'=='True'	Get Customers On My Leads Page In A List		${MyLeadLen}
	${status_list}=		Run Keyword If 		'${TS_Code_App}'=='True'	Get Data On My Leads Page In A List				${MyLeadLen}	9
	
	Set Suite Variable 		${MyLeads_Cust}
	Set Suite Variable 		${status_list}
	
	Unselect Frame
	# Navigate to the page
	Navigate To Customer Folders

	# Log Dictionary		${Global_Dict}
	# Log List 			${List_Compliance}
	
	${len}=		Get Length 		${List_Compliance}
	
	# Making list of records shown on UI
	${Cust_List}=		Get Data On Customer Folders Page In A List		${len}		2
	Log List 			${Cust_List}
	Set Suite Variable 	${Cust_List}
	
	# ## Get Data From My leads page for Credit App
	# ${MyLeadsLen}=		Get Length 		${List_LeadsSummary}
	# Run Keyword If 			
	
	
	:FOR 	${I} 	IN RANGE 	0 		${len}
	\		${Index1}		Get From List 	${List_Compliance}		${I}
	\		${Index}=		Convert To Integer 		${Index1}
	\		${dict}=		Get From Dictionary 	${Global_Dict}		${Index1}
	\		Validate Dictionary Data With Customer Folders Page 	 ${dict}	${Cust_List}	${Index}
	
	# Log Dictionary			${Lead_Summary_Dict}		WARN

Validate Dictionary Data With Customer Folders Page 	 [Arguments]	${Dict_Records}	${Cust_List}	${Index}	
	Log Dictionary			${dict}
	Log List 				${Cust_List}
	Log 					${Index}
	
	# Applicant 
	${AppFirstName}=	Get From Dictionary		${Dict_Records}		First Name
	${AppLastName}=		Get From Dictionary		${Dict_Records}		Last Name
	${AppMidName}=		Get From Dictionary		${Dict_Records}		Middle Name
	${AppNameSH}=		Catenate 		SEPARATOR=		${AppLastName}		,		${SPACE}		${AppFirstName}
	${AppNameSH}=		Run Keyword If 	'${AppMidName}'!='${EMPTY}' 	Catenate 		SEPARATOR=		${AppNameSH}	${SPACE}	${AppMidName}	.
	...					ELSE 			Set Variable 	${AppNameSH}
	${AppName}=			Evaluate 		str('${AppNameSH}').lower()	
	
	# Co-App 
	${COAppFirstName}=	Get From Dictionary		${Dict_Records}		CoApp First Name
	${COAppLastName}=	Get From Dictionary		${Dict_Records}		CoApp Last Name
	${COAppMidName}=	Get From Dictionary		${Dict_Records}		CoApp Middle Name
	${COAppNameSH}=		Run Keyword If 	'${COAppLastName}'!='${EMPTY}'	Catenate 		SEPARATOR=		${COAppLastName}		,		${SPACE}		${COAppFirstName}
	...					ELSE		Set Variable 	${EMPTY}
	${COAppNameSH}=		Run Keyword If 	'${COAppLastName}'!='${EMPTY}' and '${COAppMidName}'!='${EMPTY}' 	Catenate 		SEPARATOR=		${COAppNameSH}	${SPACE}	${COAppMidName}		.
	...					ELSE 			Set Variable 	${COAppNameSH}
	${COAppName}=		Evaluate 		str('${COAppNameSH}').lower()	
	
	# ${CNT_MATCH}= 	Get Match Count 		${Cust_List}	${AppName}	
	
	${RecordToSearch}=	Run Keyword If 		'${COAppName}'!='${EMPTY}'		Catenate 	SEPARATOR=	${AppName}		${SPACE}	(	${COAppName}	)
	...					ELSE 				Set Variable 					${AppName}
	
	
	# get row no for particular record
	${Indx}=			Get Index From List 			${Cust_List}	${RecordToSearch}
	${Indx}=			Convert To Integer				${Indx}
	Run Keyword If 		'${Indx}'=='-1'		Fail 		No new record is found on UI for ${RecordToSearch}
	
	# get row number
	${Row_No}=				Evaluate 		${Indx}+1
	
	# now record details are compared with all columns of that UI row. 
	Verify Columns On Customer Folders Page For Row 	${Row_No}	${Dict_Records}		${Index}
	
	# Come back to Cust folders page
	# Navigate To Customer Folders
	
	Press Key 		//a[@href='../dealsummary/CustomerFolder.aspx']		\\13
	# Sleep 	1s
	Wait Until Keyword Succeeds       120s    3s         Page Should Contain Element            //table[@id='RadGrid1_ctl00']	loglevel=None	
	
	
Verify Columns On Customer Folders Page For Row 	[Arguments]		${Row_No}	${Record}		${Index}	
	Log 	${Row_No}
	Log 	${Record}
	${Row}= 	Set Variable 	${Row_No}
	
	${TransCode1}=		Get From Dictionary 	${Record}		TransCode
	${TransCode}=		Convert To Integer 		${TransCode1}
	
	# Read data from UI for the row
	Unselect Frame
	
	Wait Until Page Contains Element            //iframe[@id='iFrm']
	Select Frame                                iFrm
	Wait Until Page Contains Element            //frame[@name='main']
	Select Frame                                main
	
	Wait Until Keyword Succeeds       120s    3s         Page Should Contain Element            //table[@id='RadGrid1_ctl00']	loglevel=None	
	
	# read date
	${ROW}=		Convert To Integer		${ROW}
	
	# ${OnlyDate}= 	Get From List 	${Tlist}	0
	${yyyy}	 ${mm} 	${dd}= 		Get Time 		year,month,day 
	${dd}=	Convert To Integer 	${dd}
	${mm}=	Convert To Integer 	${mm}
	
	${EXPDATE}=		Catenate 	SEPARATOR=/		${mm}	${dd}	${yyyy}
	Log 		${EXPDATE}
	
	########## date ##############
	# Date
	Wait Until Keyword Succeeds      120s          3s        Page Should Contain Element        //table[@id='RadGrid1_ctl00']/tbody/tr[${ROW}]/td[5]		Element not found:Date in table		loglevel=NONE
	Wait Until Page Contains Element		//table[@id='RadGrid1_ctl00']/tbody/tr[${ROW}]/td[1]		10s
	# # # # Wait Until Element Is Visible			//table[@id='RadGrid1_ctl00']/tbody/tr[${ROW}]/td[5]		10s
	${ACT_DATE_SH}=		Get Text		//table[@id='RadGrid1_ctl00']/tbody/tr[${ROW}]/td[5]
	Run Keyword If 		'${ACT_DATE_SH}'=='None'			Fail			Unable to get value in Date column on Customer Folders Page. 
	${ACT_DATE}=		Evaluate		str('${ACT_DATE_SH}').strip()
	Run Keyword And Continue On Failure 	Should Be Equal As Strings			${EXPDATE}			${ACT_DATE}		Comparision of Date failed on Customer Folders page. Expected value: ${EXPDATE}. Actual Value: ${ACT_DATE}. 		values=False
	
	###########################################
	# Click the link to go to documents page
	Wait Until Keyword Succeeds 	60	3	Page Should Contain Element 	//table[@id='RadGrid1_ctl00']/tbody/tr[${ROW}]/td[2]/a	Table element is not found on Customer Folders page.	loglevel=None
	# Click link to open the details documents page
	Press Key 		//table[@id='RadGrid1_ctl00']/tbody/tr[${ROW}]/td[2]/a 		\\13
	
	# wait till page opens
	Wait Until Keyword succeeds        	60     10         Page Should Contain Element         //table[@id='CmplDetailRadGrid_ctl00']		Table is not found on Customer Folders details Page. 	loglevel=NONE	
	
	@{ActualDocList}=		Create List
	
	${filename_now}= 		Get From Dictionary		${Record}		Filename
	Log 		--------------------------------------------	WARN
	Log 		Filename: ${filename_now}		WARN
	
	
	##########################################
	# Get list of all actual documents
	${Count}		Get Matching Xpath Count		//table[@id='CmplDetailRadGrid_ctl00']/tbody/tr
	
	:For	${I}		IN RANGE	1			${COUNT}+1
	\		Wait Until Keyword succeeds        	60     10         Page Should Contain Element         //table[@id='CmplDetailRadGrid_ctl00']/tbody/tr[${I}]/td[2]/a	Table row not found on Customer Folder Page. 	loglevel=NONE
	\		${text}=	Get Text				//table[@id='CmplDetailRadGrid_ctl00']/tbody/tr[${I}]/td[2]
	\		Append To List 						${ActualDocList}		${text}
	
	Log List 	${ActualDocList}
	
	# List of expected documents
	@{ExpectedDocList}=		Create List
	
	${ExpectedDocList}=		Create Expected List Of Compliance Documents	${Record}	${TransCode}
	Log List 		${ExpectedDocList}
	
	Sort List 	${ActualDocList}
	Log List 	${ActualDocList}
	Sort List 	${ExpectedDocList}
	Log List 	${ExpectedDocList}
	
	# Run Keyword And Continue On Failure 	Lists Should Be Equal 		${ExpectedDocList} 		${ActualDocList}		Expected and Actual list of docuemnets do not match.
	
	${EXP_len}=		Get Length 		${ExpectedDocList}
	Log 		Expected number of documents: ${EXP_len}		WARN
	${ACT_len}=		Get Length 		${ActualDocList}
	Log 		Actual number of documents: ${ACT_len}		WARN
	
	# compare
	Run Keyword And Continue On Failure 		Should Be Equal 	${EXP_len}		${ACT_len}		Expected and Actual number of documents do not match. Expected number:${EXP_len}. Actual number: ${ACT_len}	
	
	
	# Convert both lists to lower case
	:FOR 		${I}	IN RANGE	0 	${EXP_len}
	\			${doc}=		Get From List 		${ExpectedDocList}		${I}
	\			${doc1}=	Evaluate 	str('${doc}').lower()
	\			Set List Value 		${ExpectedDocList}		${I}	${doc1}
	Log List 	${ExpectedDocList}
	
	:FOR 		${I}	IN RANGE	0 	${ACT_len}
	\			${doc}=		Get From List 		${ActualDocList}		${I}
	\			${doc1}=	Evaluate 	str('${doc}').lower()
	\			Set List Value 		${ActualDocList}		${I}	${doc1}
	Log List 	${ActualDocList}
	
	### Compare lists
	:FOR 		${I}	IN RANGE	0 	${EXP_len}
	\			${expdoc}=		Get From List 		${ExpectedDocList}		${I}
	\			${is_CBR}=		Run Keyword And Return Status 		Should Contain 		${expdoc}		credit bureau report
	\			${is_present}=		Run Keyword If 		'${is_CBR}'=='True'		Check CBR In Actual List		${ActualDocList}
	\			...					ELSE		Run Keyword And Return Status 		List Should Contain Value 	${ActualDocList}		${expdoc}
	\			Run Keyword And Continue On Failure 	Run Keyword If 		'${is_present}'=='False'		Fail 	Expected document is not found: ${expdoc}
	
	Run Keyword If 		'${is_present}'=='True'		Log 	Status: Pass 	WARN
	...		ELSE 		Log 	Status: Fail 	WARN
	
	
Check CBR In Actual List	[Arguments]		${ActualDocList}
	${actlen}=		Get Length 		${ActualDocList}
	${flag}=		Set Variable 	False
	:FOR 		${J}	IN RANGE	0 	${actlen}
	\			${actdoc}=		Get From List 		${ActualDocList}		${J}
	\			${ret_f}=		Run Keyword And Return Status 		Should Contain 		${actdoc}	credit bureau report
	\			${flag}=		Run Keyword If 		'${ret_f}'=='True'	Set Variable 	True
	\			...				ELSE 				Set Variable 		False
	\			Run Keyword If 		'${ret_f}'=='True'		Exit For Loop
	
	Log 	${ret_f}
	
	[Return]	${ret_f}
	
Create Expected List Of Compliance Documents	[Arguments]		${Dict_Records}		${TransCode}
	
	Log 	Pref Set:${Pref_Set} 		
	Set Suite Variable 		${Dict_Records}
	
	${AppFirstName}=	Get From Dictionary		${Dict_Records}		First Name
	${AppLastName}=		Get From Dictionary		${Dict_Records}		Last Name
	${AppMidName}=		Get From Dictionary		${Dict_Records}		Middle Name
	
	${COAppFirstName}=	Get From Dictionary		${Dict_Records}		CoApp First Name
	${COAppLastName}=	Get From Dictionary		${Dict_Records}		CoApp Last Name
	${COAppMidName}=	Get From Dictionary		${Dict_Records}		CoApp Middle Name
	
	Set Suite Variable 		${AppFirstName}
	Set Suite Variable 		${AppLastName}
	Set Suite Variable 		${AppMidName}
	
	Set Suite Variable 		${COAppFirstName}
	Set Suite Variable 		${COAppLastName}
	Set Suite Variable 		${COAppMidName}
	
	
	# generating document names ID and OFAC with customer names for App and Co-App
	# validate the documents created
	${App_ID}=		Catenate 	SEPARATOR=		ID Verification		${SPACE}	(	${AppLastName}		,		${SPACE}	${AppFirstName}	)
	Set Suite Variable 		${App_ID}
	${COAPP_ID}=	Catenate 	SEPARATOR=		ID Verification		${SPACE}	(	${COAppLastName}	,		${SPACE}	${COAppFirstName}	)
	Set Suite Variable 		${COAPP_ID}
	
	${App_OFAC}=		Catenate 	SEPARATOR=		OFAC	${SPACE}	(	${AppLastName}		,		${SPACE}	${AppFirstName}	)
	Set Suite Variable 		${App_OFAC}
	${COAPP_OFAC}=		Catenate 	SEPARATOR=		OFAC	${SPACE}	(	${COAppLastName}	,		${SPACE}	${COAppFirstName}	)
	Set Suite Variable 		${COAPP_OFAC}
	
	${CB_Report_APP}=	Catenate 	SEPARATOR=		Credit Bureau Report	${SPACE}	(	${AppLastName}		,		${SPACE}	${AppFirstName}	)
	${CB_Auth_Ind}=		Catenate 	SEPARATOR=		Credit Bureau Authorization		${SPACE}	(	${AppLastName}		,		${SPACE}	${AppFirstName}	)
	${RB_Ind}=		Catenate 	SEPARATOR=		Risk Based Pricing Notice		${SPACE}	(	${AppLastName}		,		${SPACE}	${AppFirstName}	)
	
	Set Suite Variable 		${CB_Report_APP}
	Set Suite Variable 		${CB_Auth_Ind}
	Set Suite Variable 		${RB_Ind}
	
	${ExpectedDocList}=		Create List
	
	${input_folder_path}=		Get From Dictionary		${Dict_Records}		Input Folder
	${is_it_chained1}=			Run Keyword And Return Status 		Should Contain 		${input_folder_path}		Chained
	${is_it_chained2}=			Run Keyword And Return Status 		Should Contain 		${input_folder_path}		chained
	${is_it_chained}=			Run Keyword If 		'${is_it_chained1}'=='True' or '${is_it_chained2}'=='True'		Set Variable 	True
	...							ELSE 				Set Variable 		False
	
	# Creating expected list of documents
	@{ExpectedDocList_CBWS}=		Create List
	@{ExpectedDocList_CA}=			Create List
	@{ExpectedDocList_PQ}=			Create List
	
	${ExpectedDocList_CBWS}=		Run Keyword If 			'${TransCode}'=='5' 	Create List Of Expected Docs For CBWS	
	${ExpectedDocList_CA}=			Run Keyword If 			'${TransCode}'=='1' 	Create List Of Expected Docs For CreditApp
	${ExpectedDocList_PQ}=			Run Keyword If 			'${TransCode}'=='4' 	Create List Of Expected Docs For Prequal
	
	${ExpectedDocList}=			Run Keyword If 			'${TransCode}'=='5' 	Set Variable 	${ExpectedDocList_CBWS}
	...							ELSE IF 				'${TransCode}'=='1' 	Set Variable 	${ExpectedDocList_CA}
	...							ELSE IF 				'${TransCode}'=='4' and '${is_it_chained}'=='False' 	Set Variable 	${ExpectedDocList_PQ}
	
	[Return]	${ExpectedDocList}
	
	
Create List Of Expected Docs For CBWS 	

	@{DocList}=		Create List
	
	##### Credit Bureau ####
	# Set2 - All
	# Set3 - Yrs At Job
	
	# Get from file
	${file}=			Get From Dictionary			${Dict_Records}		Filename	
	${folder}=			Get From Dictionary			${Dict_Records}		Input Folder
	${inputfile}=		Read From File To String 	${folder}\\${file}
	Log 				${inputfile}
	# Check for node
	${NODE}=		Set Variable 		BureauType
	${NODE}=		Convert To String 	${NODE}
	@{ELEMENTS}		Get Elements		${inputfile}		.//${NODE}
	${COUNT}		Get Length			${ELEMENTS}
	Log 			count: ${COUNT}		
	
	${Status_None}=		Set Variable 	False
	
	:FOR		${ELEMENT}		IN		@{ELEMENTS}   
	\			${NODE_CONTENT}			XML.Get Element Text		${ELEMENT}
	\			Log 					${NODE_CONTENT}
	\			${Status_None}=				Run Keyword And Return Status 	Should Contain 		${NODE_CONTENT}		None
	\			Run Keyword If 			'${Status_None}'=='True'		Exit For Loop
	
	
	
	# Credit Bureau report
	Run Keyword If 			${COUNT}!=0 and '${Status_None}'!='True' 	Append To List 		${DocList}		${CB_Report_APP}			
	
	# CB Auth
	Run Keyword If 			${COUNT}!=0 and '${COAppLastName}'=='${EMPTY}' and '${Status_None}'!='True'		Append To List 		${DocList}		${CB_Auth_Ind}
	...		ELSE IF			${COUNT}!=0 and '${COAppLastName}'!='${EMPTY}' and '${Status_None}'!='True'		Append To List 		${DocList}	Credit Bureau Authorization
	
	# RBN
	Run Keyword If 			${COUNT}!=0 and '${COAppLastName}'=='${EMPTY}' and '${Status_None}'!='True'		Append To List 		${DocList}		${RB_Ind}
	...		ELSE IF			${COUNT}!=0 and '${COAppLastName}'!='${EMPTY}' and '${Status_None}'!='True'		Append To List 		${DocList}		Risk Based Pricing Notice
	
	${Endpoint}=			Get From Dictionary		${Dict_Records}		Service Endpoint
	${IS_RF}=				Run Keyword And Return Status 		Should Contain 			${Endpoint}		redFlagrequest=Yes
	
	# CBWS
	Run Keyword If 			'${IS_RF}'=='True'	 Append To List 		${DocList}		${App_ID}	${App_OFAC}
	Run Keyword If 			'${IS_RF}'=='True' and '${COAppLastName}'!='${EMPTY}'		Append To List 		${DocList}		${COAPP_ID}		${COAPP_OFAC}
	
	Log List 	${DocList}

	[Return]	${DocList}
	
Create List Of Expected Docs For CreditApp
	@{DocList}=		Create List
	# Financial / Collateral Info
	${Applicant_Name}=		Catenate 	SEPARATOR= 		${AppLastName}		,		${SPACE}	${AppFirstName}
	${Applicant_Name}=		Evaluate 	str('${Applicant_Name}').lower()
	${MyLeadLen}=		Get Length 		${List_LeadsSummary}
	# Navigate To My Leads
	# ${CustList}=		Get Customers On My Leads Page In A List		${MyLeadLen}
	
	${indexno}=			Get From List 		${MyLeads_Cust}		${Applicant_Name}
	${indexno}=			Convert To Integer				${indexno}
	Run Keyword If 		'${indexno}'=='-1'		Fail 		No new record is found on My Leads for ${Applicant_Name}
	
	
	${stat_now}=		Get From List 		${status_list}		${indexno}
	...					ELSE 					Set Variable 			${EMPTY}
	
	${stat_now}=		Convert To String 	${stat_now}
	
	Run Keyword If 		'${stat_now}'=='App Submitted'		Append To List 		${DocList}		Personal Info		Financial / Collateral Info
	...					ELSE 								Append To List 		${DocList}		Personal Info
	
	
	#### Docs related to CB. if Bureau is 'NON' then do not add CB related docs.
	Log Dictionary		${Pref_Dict}
	${is_CB}=	Get From Dictionary		${Pref_Dict}	Credit Score
	
	Run Keyword If 		'${is_CB}'=='True'		${DocList}		${CB_Report_APP}
	
	Run Keyword If 			'${is_CB}'=='True' and '${COAppLastName}'=='${EMPTY}'		Append To List 		${DocList}		${CB_Auth_Ind}
	...		ELSE IF			'${is_CB}'=='True' and '${COAppLastName}'!='${EMPTY}'		Append To List 		${DocList}		Credit Bureau Authorization
	
	# RBN
	Run Keyword If 			'${is_CB}'=='True' and '${COAppLastName}'=='${EMPTY}'		Append To List 		${DocList}		${RB_Ind}
	...		ELSE IF			'${is_CB}'=='True' and '${COAppLastName}'!='${EMPTY}'		Append To List 		${DocList}		Risk Based Pricing Notice
	
	##### ID and OFAC
	Log Dictionary		${Pref_Dict}
	${is_RF}=	Get From Dictionary		${Pref_Dict}	Red Flags
	
	Run Keyword If 			'${IS_RF}'=='Y'	 Append To List 		${DocList}		${App_ID}	${App_OFAC}
	Run Keyword If 			'${IS_RF}'=='Y' and '${COAppLastName}'!='${EMPTY}'		Append To List 		${DocList}		${COAPP_ID}		${COAPP_OFAC}
	
	#### Privacy Notice
	Log Dictionary		${Dict_Records}
	${is_PN}=	Get From Dictionary		${Dict_Records} 	Privacy Notice
	Run Keyword If 			'${is_PN}'=='true'		Append To List 		${DocList}		Privacy Notice

	Log List 		${DocList}	
	
	[Return]	${DocList}	
	
	
Create List Of Expected Docs For Prequal
	@{DocList}=		Create List
	#### Docs related to CB
	Log Dictionary		${Pref_Dict}
	${is_CB}=	Get From Dictionary		${Pref_Dict}	Credit Score
	
	Run Keyword If 		'${is_CB}'=='True'		${DocList}		${CB_Report_APP}
	
	Run Keyword If 			'${is_CB}'=='True' and '${COAppLastName}'=='${EMPTY}'		Append To List 		${DocList}		${CB_Auth_Ind}
	...		ELSE IF			'${is_CB}'=='True' and '${COAppLastName}'!='${EMPTY}'		Append To List 		${DocList}		Credit Bureau Authorization
	
	# RBN
	Run Keyword If 			'${is_CB}'=='True' and '${COAppLastName}'=='${EMPTY}'		Append To List 		${DocList}		${RB_Ind}
	...		ELSE IF			'${is_CB}'=='True' and '${COAppLastName}'!='${EMPTY}'		Append To List 		${DocList}		Risk Based Pricing Notice
	
	##### ID and OFAC
	Log Dictionary		${Pref_Dict}
	${is_RF}=	Get From Dictionary		${Pref_Dict}	Red Flags
	
	Run Keyword If 			'${IS_RF}'=='Y'	 Append To List 		${DocList}		${App_ID}	${App_OFAC}
	
	#### Privacy Notice
	Log Dictionary		${Dict_Records}
	${is_PN}=	Get From Dictionary		${Dict_Records} 	Privacy Notice
	Run Keyword If 			'${is_PN}'=='true'		Append To List 		${DocList}		Privacy Notice
	
	Log List 		${DocList}	
	
	[Return]	${DocList}	
		
####################################################################################################
Process And Send ADFLead		[Arguments]		${FOLDER_NAME}		${FILENAME}		${Item}
####################################################################################################

	${PartnerType}=			Set Variable		FD	
	${Is_ADFLead}=			Set Variable		True

	WriteToFile				${logfile}			Y								Process And Send ADFLead
	WriteToFile				${logfile}			Y								InputPath=${FOLDER_NAME}\\${Filename}
	WriteToFile				${logfile}			Y								Item=${Item}
	WriteToFile				${logfile}			Y								Is_ADFLead=${Is_ADFLead}
	WriteToFile				${logfile}			Y								Partner=${PARTNERID}	
	WriteToFile				${logfile}			Y								DealerID=${DEALERID}			
	
	${FD_SERVICE}=			Run Keyword If	 	'${Is_ADFLead}'=='True'			Set Variable 			1.2-1:ADFLead		ELSE	Set Variable	${EMPTY}
	${Servicename}=			Run Keyword If	 	'${Is_ADFLead}'=='True'			Set Variable 			FD 1.2 ADFLead		ELSE	Set Variable	${EMPTY}
	${Xml_Type}=			Run Keyword If	 	'${Is_ADFLead}'=='True'			Set Variable			Lead				ELSE	Set Variable	${EMPTY}
	${TransCode}=			Run Keyword If	 	'${Is_ADFLead}'=='True'			Set Variable			3					ELSE	Set Variable	${EMPTY}		
	
	#Read the input file and parse the data

	${WS_REQUEST_XML}=		Read From File To String 		${FOLDER_NAME}\\${Filename}
	
	${Root}=				Parse XML			${WS_REQUEST_XML}
	
		${WS_REQUEST_XML}=	Replace String					${WS_REQUEST_XML}				>QQQ<				>${PARTNERID}<				
		${WS_REQUEST_XML}=	Replace String					${WS_REQUEST_XML}				>9999999<			>${DEALERID}<
	
		${Temp}=		Set Variable						.//prospect/customer/contact/name[@part='first'] 
		${Passed}=		Run Keyword And Return Status		XML.Get Element Text			${Root}				${Temp}
		${NameFirst}=	Run Keyword If		${Passed}		XML.Get Element Text			${Root}				${Temp}		ELSE	Set Variable	${EMPTY}	
		WriteToFile		${logfile}			Y				NameFirst=${NameFirst}	
		
		${Temp}=		Set Variable						.//prospect/customer/contact/name[@part='middle'] 
		${Passed}=		Run Keyword And Return Status		XML.Get Element Text			${Root}				${Temp}
		${NameMid}=	Run Keyword If			${Passed}		XML.Get Element Text			${Root}				${Temp}		ELSE	Set Variable	${EMPTY}	
		WriteToFile		${logfile}			Y				NameMid=${NameMid}		

		${Temp}=		Set Variable						.//prospect/customer/contact/name[@part='last'] 
		${Passed}=		Run Keyword And Return Status		XML.Get Element Text			${Root}				${Temp}
		${NameLast}=	Run Keyword If		${Passed}		XML.Get Element Text			${Root}				${Temp}		ELSE	Set Variable	${EMPTY}	
		WriteToFile		${logfile}			Y				NameLast=${NameLast}			
		
		${Temp}=		Set Variable						.//prospect/customer/contact/name[@part='suffix'] 
		${Passed}=		Run Keyword And Return Status		XML.Get Element Text			${Root}				${Temp}
		${NameSuffix}=	Run Keyword If		${Passed}		XML.Get Element Text			${Root}				${Temp}		ELSE	Set Variable	${EMPTY}	
		WriteToFile		${logfile}			Y				NameSuffix=${NameSuffix}				
		
		${Temp}=		Set Variable						.//prospect/customer/contact/address/street[@line='1'] 
		${Passed}=		Run Keyword And Return Status		XML.Get Element Text			${Root}				${Temp}
		${AddrLine1}=	Run Keyword If		${Passed}		XML.Get Element Text			${Root}				${Temp}		ELSE	Set Variable	${EMPTY}	
		WriteToFile		${logfile}			Y				AddrLine1=${AddrLine1}					
		
		${Temp}=		Set Variable						.//prospect/customer/contact/address/street[@line='2'] 
		${Passed}=		Run Keyword And Return Status		XML.Get Element Text			${Root}				${Temp}
		${AddrLine2}=	Run Keyword If		${Passed}		XML.Get Element Text			${Root}				${Temp}		ELSE	Set Variable	${EMPTY}	
		WriteToFile		${logfile}			Y				AddrLine2=${AddrLine2}						
		
		# ${Temp}=		Set Variable						.//prospect/customer/contact/address/apartment	
		# ${Passed}=		Run Keyword And Return Status		XML.Get Element Text			${Root}				${Temp}
		# ${AddrAppt}=	Run Keyword If		${Passed}		XML.Get Element Text			${Root}				${Temp}		ELSE	Set Variable	${EMPTY}	
		# WriteToFile		${logfile}			Y				AddrAppt=${AddrAppt}							
		
		${Temp}=		Set Variable						.//prospect/customer/contact/address/city	
		${Passed}=		Run Keyword And Return Status		XML.Get Element Text			${Root}				${Temp}
		${AddrCity}=	Run Keyword If		${Passed}		XML.Get Element Text			${Root}				${Temp}		ELSE	Set Variable	${EMPTY}	
		WriteToFile		${logfile}			Y				AddrCity=${AddrCity}								

		${Temp}=		Set Variable						.//prospect/customer/contact/address/regioncode	
		${Passed}=		Run Keyword And Return Status		XML.Get Element Text			${Root}				${Temp}
		${AddrState}=	Run Keyword If		${Passed}		XML.Get Element Text			${Root}				${Temp}		ELSE	Set Variable	${EMPTY}	
		WriteToFile		${logfile}			Y				AddrState=${AddrState}									
		
		${Temp}=		Set Variable						.//prospect/customer/contact/address/postalcode	
		${Passed}=		Run Keyword And Return Status		XML.Get Element Text			${Root}				${Temp}
		${AddrZip}=		Run Keyword If		${Passed}		XML.Get Element Text			${Root}				${Temp}		ELSE	Set Variable	${EMPTY}	
		WriteToFile		${logfile}			Y				AddrZip=${AddrZip}			
		
		#<vehicle interest="buy" status="New">
		${Temp}=		Set Variable						.//prospect/vehicle
		${Passed}=		Run Keyword And Return Status		XML.Get Element Attribute		${Root}				status		${Temp}		
		${VehStatus}=	Run Keyword If		${Passed}		XML.Get Element Attribute		${Root}				status		${Temp}		ELSE	Set Variable	${EMPTY}	
		WriteToFile		${logfile}			Y				VehStatus=${VehStatus}											
		
		${Temp}=		Set Variable						.//prospect/vehicle/year
		${Passed}=		Run Keyword And Return Status		XML.Get Element Text			${Root}				${Temp}
		${VehYear}=		Run Keyword If		${Passed}		XML.Get Element Text			${Root}				${Temp}		ELSE	Set Variable	${EMPTY}	
		WriteToFile		${logfile}			Y				VehYear=${VehYear}									

		${Temp}=		Set Variable						.//prospect/vehicle/make
		${Passed}=		Run Keyword And Return Status		XML.Get Element Text			${Root}				${Temp}
		${VehMake}=		Run Keyword If		${Passed}		XML.Get Element Text			${Root}				${Temp}		ELSE	Set Variable	${EMPTY}	
		WriteToFile		${logfile}			Y				VehMake=${VehMake}									

		${Temp}=		Set Variable						.//prospect/vehicle/model
		${Passed}=		Run Keyword And Return Status		XML.Get Element Text			${Root}				${Temp}
		${VehModel}=		Run Keyword If		${Passed}	XML.Get Element Text			${Root}				${Temp}		ELSE	Set Variable	${EMPTY}	
		WriteToFile		${logfile}			Y				VehModel=${VehModel}									

		${Temp}=		Set Variable						.//prospect/vehicle/trim
		${Passed}=		Run Keyword And Return Status		XML.Get Element Text			${Root}				${Temp}
		${VehTrim}=		Run Keyword If		${Passed}		XML.Get Element Text			${Root}				${Temp}		ELSE	Set Variable	${EMPTY}	
		WriteToFile		${logfile}			Y				VehTrim=${VehTrim}										
		
		${Temp}=		Set Variable						.//prospect/vehicle/vin
		${Passed}=		Run Keyword And Return Status		XML.Get Element Text			${Root}				${Temp}
		${VehVin}=		Run Keyword If		${Passed}		XML.Get Element Text			${Root}				${Temp}		ELSE	Set Variable	${EMPTY}	
		WriteToFile		${logfile}			Y				VehVin=${VehVin}										
		
		${Temp}=		Set Variable						.//prospect/vehicle/stock
		${Passed}=		Run Keyword And Return Status		XML.Get Element Text			${Root}				${Temp}
		${VehStock}=	Run Keyword If		${Passed}		XML.Get Element Text			${Root}				${Temp}		ELSE	Set Variable	${EMPTY}	
		WriteToFile		${logfile}			Y				VehStock=${VehStock}

		${Temp}=		Set Variable						.//prospect/vehicle/transmission
		${Passed}=		Run Keyword And Return Status		XML.Get Element Text			${Root}				${Temp}
		${VehTrans}=	Run Keyword If		${Passed}		XML.Get Element Text			${Root}				${Temp}		ELSE	Set Variable	${EMPTY}	
		WriteToFile		${logfile}			Y				VehTrans=${VehTrans}
		
		WriteToFile				${logfile}			Y								FD_SERVICE=${FD_SERVICE}
		WriteToFile				${logfile}			Y								Servicename=${Servicename}	
		WriteToFile				${logfile}			Y								Xml_Type=${Xml_Type}
		WriteToFile				${logfile}			Y								TransCode=${TransCode}
		WriteToFile				${logfile}			Y								Filename=${Filename}
		WriteToFile				${logfile}			N								InputXmlBeforeSend=${WS_REQUEST_XML}		
	
	####################
	#Send the ADF Lead
	####################
	
	Web Service Setup2		${FD_SERVICE}    	${PartnerType}		${PARTNERID}

	Send FD Request ADFLead		99		${PARTNERID}	${DEALERID}		${WS_REQUEST_XML}	${Filename}		${Servicename}
		WriteToFile			${logfile}					N							SendXml-File=${FOLDER_NAME}\\${Filename}
		${TimeStamp}=		Run Keyword					TimeStamp
		WriteToFile			${logfile}					Y							SendXml-TimeStamp=${TimeStamp}

		#Service rejected ADF Lead (ResponseCode != 200)
		Run Keyword And Continue On Failure				Run Keyword If	'${RESPONSECODE}'!= '200'				Fail 			ADFLead Rejected!==${RESPONSECODE}
		Run Keyword If		'${RESPONSECODE}'!= '200'	WriteToErrorLog				${ErrorLog}					${RESPONSECODE} | ${RESPONSETEXT}		
		Run Keyword If		'${RESPONSECODE}'!= '200'	WriteToFile					${logfile}					Y				SendXml ResponseCodeError!=${RESPONSECODE}	
		
		#Good response (200) from service but LeadRefID was not returned - this is an error/bug and should not occur
		Run Keyword And Continue On Failure				Run Keyword If	'${RESPONSECODE}'== '200' and '${RESPONSETEXT}'== '0'	Fail	ADFLead Error/Bug - LeadRef Not Returned!==${RESPONSETEXT}
		Run Keyword If		'${RESPONSECODE}'== '200' and '${RESPONSETEXT}'== '0'	WriteToErrorLog				${ErrorLog}		${RESPONSECODE} | ${RESPONSETEXT}		
		Run Keyword If		'${RESPONSECODE}'== '200' and '${RESPONSETEXT}'== '0'	WriteToFile					${logfile}		Y				ADFLead Error/Bug - LeadRef Not Returned!=${RESPONSETEXT}			
		
		#Good response (200) from service and LeadRefID was returned
		Run Keyword If		'${RESPONSECODE}'== '200' and '${RESPONSETEXT}'!= '0'	WriteToFile					${logfile}		Y				SendXml ResponseCode=${RESPONSECODE}
		Run Keyword If		'${RESPONSECODE}'== '200' and '${RESPONSETEXT}'!= '0'	WriteToFile					${logfile}		Y				SendXml ResponseCode=${RESPONSETEXT}
		
	#End send now save to Global Dict if good transaction
		
	${Returned_Lead}=		Run Keyword If		'${RESPONSECODE}'== '200' and '${RESPONSETEXT}'!= '0'			Set Variable		${RESPONSETEXT}		ELSE	Set Variable	${EMPTY}
	
	${lenDict}=				Get Length		 			${Global_Dict}
		WriteToFile			${logfile}		Y			-------------------------
		WriteToFile			${logfile}		Y			lenDict/Index=${lenDict}
		
	${Request_Dict}= 		Create Dictionary			#Add Details Of Request To Dictionary

		Set To Dictionary		${Request_Dict}		Environment 		${Environment}
		Set To Dictionary		${Request_Dict}		Version	 			1.2
		Set To Dictionary 		${Request_Dict}		First Name			${NameFirst}
		Set To Dictionary 		${Request_Dict}		Last Name			${NameLast}
		Set To Dictionary 		${Request_Dict}		Middle Name			${NameMid}
		Set To Dictionary 		${Request_Dict}		Input Folder		${FOLDER_NAME}
		Set To Dictionary 		${Request_Dict}		Partner ID			${PARTNERID}
		Set To Dictionary 		${Request_Dict}		Dealer ID			${DEALERID}
		Set To Dictionary 		${Request_Dict}		Filename			${FILENAME}
		Set To Dictionary 		${Request_Dict}		CoApp First Name	${EMPTY}
		Set To Dictionary 		${Request_Dict}		CoApp Last Name		${EMPTY}
		Set To Dictionary 		${Request_Dict}		CoApp Middle Name	${EMPTY}	
		Set To Dictionary 		${Request_Dict}		REF PQ				${EMPTY}
		Set To Dictionary 		${Request_Dict}		REF Lead			${Returned_Lead}
		Set To Dictionary 		${Request_Dict}		REF App				${EMPTY}
		Set To Dictionary 		${Request_Dict}		REF CB				${EMPTY}	
		Set To Dictionary 		${Request_Dict}		TransCode			${TransCode}
		Set To Dictionary 		${Request_Dict}		FinMethod			${EMPTY}
		Set To Dictionary 		${Request_Dict}		VehCond				${EMPTY}
		Set To Dictionary 		${Request_Dict}		Compliance			False
		Set To Dictionary 		${Request_Dict}		Decision			${EMPTY}
		Set To Dictionary 		${Request_Dict}		Email				${EMPTY}	
		Set To Dictionary	 	${Request_Dict}		EmailAddr			${EMPTY}
		Set To Dictionary	 	${Request_Dict}		PartnerRefId		${EMPTY}	
		Set To Dictionary 		${Request_Dict}		Vehicle Info 		${EMPTY}
		Set To Dictionary 		${Request_Dict}		CreditType 			${EMPTY}
		Set To Dictionary 		${Request_Dict}		Service Endpoint	${EMPTY}
		Set To Dictionary 		${Request_Dict}		Privacy Notice 		${EMPTY}
		Log Dictionary 			${Request_Dict}

	Run Keyword If 			'${RESPONSECODE}'== '200' and '${RESPONSETEXT}'!= '0' 	Set To Dictionary	${Global_Dict}	${lenDict}	${Request_Dict}	
	Log Dictionary 			${Global_Dict}
	# Set Suite Variable 		${Global_Dict}		
	
####################################################################################	
Call TPP Service2		[Arguments]		${FOLDER_NAME}		${FILENAME}		${Item}
####################################################################################	

	WriteToFile				${logfile}			Y					Call TPP Service2>>>
	WriteToFile				${logfile}			Y					InputPath=${FOLDER_NAME}\\${Filename}
	WriteToFile				${logfile}			Y					Item=${Item}	
	WriteToFile				${logfile}			Y					PartnerID=${PARTNERID}
	WriteToFile				${logfile}			Y					DealerID=${DEALERID}		

	${Servicename}=			Set Variable 		FD 1.2 TPP	
	${FD_SERVICE}= 			Set Variable 		1.2-1:TPP	
	Web Service Setup2		${FD_SERVICE}    	FD					${PARTNERID}	
	${WS_URL}=				Get From Dictionary	${WS Setup}			Service
	Set Suite Variable 		${WS_URL}
	WriteToFile				${logfile}			Y					TPP Url=${WS_URL}
	
	########################################################
	Go For TPP Request2		${FOLDER_NAME}		${FILENAME}
	########################################################	

############################################################################
Go For TPP Request2 		[Arguments]		${FOLDER_NAME}		${FILENAME}
############################################################################
	[Documentation]			This keyword sends checks for TPP input files in given folder matching the format and then sends request.
	...				  		Author  : Manisha Gadekar (Manisha.Gadekar@dealtertrack.com)
	...						Update Date\By: 24 Jun 2015
	
	WriteToFile				${logfile}		Y			Go For TPP Request2>>>	
	WriteToFile				${logfile}		Y			--------------------------
	WriteToFile				${logfile}		Y			TPP FileName=${FILENAME}	
	${WS_REQUEST_XML}=		Read From File To String 	${FOLDER_NAME}\\${Filename}
	Log	${WS_REQUEST_XML}
	${LENDLR_Id}=			Return Node Value  			${WS_REQUEST_XML}			<dt_lender_id>		</dt_lender_id>
	${D_Id}=				Return Node Value  			${WS_REQUEST_XML}			<dt_dealer_id>		</dt_dealer_id>
	# replace ids
	${WS_REQUEST_XML}=		Run Keyword If	'${REPLACE_PARTNER}'=='y'				Replace String 		${WS_REQUEST_XML}	<dt_lender_id>${LENDLR_Id}</dt_lender_id>		<dt_lender_id>${PARTNERID}</dt_lender_id>
	...						ELSE						Set Variable 				${WS_REQUEST_XML}	
	${WS_REQUEST_XML}=		Run Keyword If	'${REPLACE_PARTNER}'=='y'				Replace String 		${WS_REQUEST_XML}	<dt_dealer_id>${D_Id}</dt_dealer_id>		<dt_dealer_id>${DEALERID}</dt_dealer_id>
	...						ELSE						Set Variable			 	${WS_REQUEST_XML}
	Log	${WS_REQUEST_XML}
	# generate random lender_app_id
	${LENAPPID}=			Return Node Value  			${WS_REQUEST_XML}			<lender_app_id>		</lender_app_id>
	${RANDOMID}=			Generate Random String  	6   [NUMBERS]
	${WS_REQUEST_XML}=		Run Keyword If	'${REPLACE_PARTNER}'=='y'				Replace String		${WS_REQUEST_XML}	<lender_app_id>${LENAPPID}</lender_app_id>		<lender_app_id>${RANDOMID}</lender_app_id>
	Log	${WS_REQUEST_XML}
	# generate random tpp_ref_id
	${TempTPP}=				Return Node Value  			${WS_REQUEST_XML}			<tpp_ref_id>		</tpp_ref_id>
	${RANDOMID}=			Generate Random String    	6   [NUMBERS]
	${WS_REQUEST_XML}=		Run Keyword If	'${REPLACE_PARTNER}'=='y'				Replace String		${WS_REQUEST_XML}	<tpp_ref_id>${TempTPP}</tpp_ref_id>		<tpp_ref_id>${RANDOMID}</tpp_ref_id>
	Log	${WS_REQUEST_XML}
	Set Suite Variable		${WS_REQUEST_XML}
	WriteToFile				${logfile}					N							TPP File Pre-Send=${WS_REQUEST_XML}			
	
	#get FirstName, LastName, Mid from input xml
	${stat}= 				Run Keyword And Return status							Get Element Text	${WS_REQUEST_XML}	.//application_data/applicant_data/first_name
	${FIRSTNAME}=			Run Keyword If 				${stat}						Get Element Text	${WS_REQUEST_XML}	.//application_data/applicant_data/first_name
	WriteToFile				${logfile}					Y							FirstName=${FIRSTNAME}
	${stat}= 				Run Keyword And Return status							Get Element Text	${WS_REQUEST_XML}	.//application_data/applicant_data/mi
	${MIDDLENAME}=			Run Keyword If 				${stat}						Get Element Text	${WS_REQUEST_XML}	.//application_data/applicant_data/mi
	WriteToFile				${logfile}					Y							MidInit=${MIDDLENAME}	
	${stat}= 				Run Keyword And Return status							Get Element Text	${WS_REQUEST_XML}	.//application_data/applicant_data/last_name
	${LASTNAME}=			Run Keyword If 				${stat}						Get Element Text	${WS_REQUEST_XML}	.//application_data/applicant_data/last_name
	WriteToFile				${logfile}					Y							LastName=${LASTNAME}	

	##################
	Send TPP Request2 		${PARTNERID}	${DEALERID}		${WS_REQUEST_XML}	${FILENAME}		${Servicename}
	##################	

	#get TPPRefID from response xml
	${TPPRefID}= 		Run Keyword If	'${RESPONSECODE}'=='200'					Get Element Text	${RESPONSETEXT}		.//dt_app_id
	...						ELSE 				Set Variable 						${EMPTY}
	WriteToFile				${logfile}			Y									TPPRefID=${TPPRefID}

	#check for error from TPP (if error then TPPRefID is blank and error message is passed in err_description node)
	${TPP_Error}=	 		Run Keyword If	'${TPPRefID}'=='${EMPTY}'				Get Element Text	${RESPONSETEXT}		.//err_description
	...						ELSE 				Set Variable 						${EMPTY}
	WriteToFile				${logfile}			Y									TPP_Error=${TPP_Error}		
	Run Keyword And Continue On Failure			Run Keyword If	'${TPP_Error}'!='${EMPTY}'				Fail	TPP Returned Error! Lead NOT created - ${TPP_Error}

	${COFIRSTNAME}=			Set Variable		${EMPTY}
	${COLASTNAME}=			Set Variable		${EMPTY}		
	${COMIDDLENAME}=		Set Variable		${EMPTY}			
	Set Suite Variable		${FIRSTNAME}		
	Set Suite Variable		${MIDDLENAME}	
	Set Suite Variable		${LASTNAME}		
	Set Suite Variable		${COFIRSTNAME}	
	Set Suite Variable		${COLASTNAME}	
	Set Suite Variable		${COMIDDLENAME}
	${Request_Dict}=		Add Details Of Request To Dictionary
	Set To Dictionary 		${Request_Dict}		TPPRefID		${TPPRefID}
	${TransCode}=			Set Variable		12
	Set To Dictionary 		${Request_Dict}		TransCode			${TransCode}
	Set To Dictionary 		${Request_Dict}		REF PQ				${EMPTY}	
	Set To Dictionary 		${Request_Dict}		REF Lead			${EMPTY}	
	Set To Dictionary 		${Request_Dict}		REF App				${EMPTY}	
	Set To Dictionary 		${Request_Dict}		REF CB				${EMPTY}	
	Set To Dictionary 		${Request_Dict}		Compliance			${EMPTY}	
	Set To Dictionary 		${Request_Dict}		Decision			${EMPTY}		
	Log Dictionary 			${Request_Dict}
	Run Keyword If 			'${RESPONSECODE}'== '200' and '${TPPRefID}'!= '${EMPTY}'	Set To Dictionary	${Global_Dict}	${Item}	${Request_Dict}	
	Log Dictionary 			${Global_Dict}
	Set Suite Variable 		${Global_Dict}

	WriteToFile				${logfile}			Y					Request_Dict=${Request_Dict}		
	WriteToFile				${logfile}			Y					--------------------------	
			
#######################################################################################################################	
Send TPP Request2 	[Arguments]		${PARTNERID}	${DEALERID}		${WS_REQUEST_XML}	${Filename}		${Servicename}
#######################################################################################################################

	WriteToFile				${logfile}			Y					Send TPP Request2>>>
	
	# Set up parameters to send request
	${WS_URL}=				Set Variable		${WS Setup['Service']}	
	${Username}=			Set Variable		${WS Setup['User Name']}
	${Password}=			Set Variable		${WS Setup['Password']}
	${WS_REQUEST_XML}=		Convert To String	${WS_REQUEST_XML}
	Log	${WS_REQUEST_XML}
	
	# Send TPP Request
	############################################################################################################################################################
	${RESPONSECODE}		${ERRORTEXT}	${RESPONSETEXT}		Send TPP Request Finance Driver2	${WS_URL}		${WS_REQUEST_XML}	${Username}		${Password}
	############################################################################################################################################################
	Set Test Variable		${RESPONSECODE}
	Set Test Variable		${RESPONSETEXT}
	Set Test Variable		${ERRORTEXT}
	WriteToFile				${logfile}			Y					RESPONSECODE=${RESPONSECODE}	
	WriteToFile				${logfile}			Y					ERRORTEXT=${ERRORTEXT}		
	WriteToFile				${logfile}			Y					RESPONSETEXT=${RESPONSETEXT}	
	
	# Write Response in a file 
	${F_name}=									WS_CommonUtil.trimFromRight	${Filename}		4
	${RESPONSE_FILE}							Catenate	SEPARATOR=		${F_name}		_1.2	_TPP_Response.xml
	WS_CommonUtil.Write_String_To_File			${RESOURCE}\\Other\\WebService\\Response\\${RESPONSE_FILE}		${RESPONSETEXT}
	
	Log	Code: ${RESPONSECODE}	
	Log	Response: ${RESPONSETEXT} 	
	Run Keyword And Continue On Failure			Run Keyword If	'${RESPONSECODE}'!= '200'       Fail        Your Request: ${Servicename} is not successful. You have received response code: ${RESPONSECODE}. The error message is: ${RESPONSETEXT}.
	Run Keyword And Continue On Failure			Run Keyword If	'${ERRORTEXT}'!='Nothing'		Fail		${Servicename}: Web Service Returned Error : ${ERRORTEXT} So Exiting Node Validation
	Run Keyword If	'${RESPONSECODE}'!= '200'	WriteToFile		${logfile}		Y			TPP Request FAILED!. ResponseCode=${RESPONSECODE} | ResponseText=${RESPONSETEXT}
	Run Keyword If	'${ERRORTEXT}'!='Nothing'	WriteToFile		${logfile}		Y			TPP Request FAILED!. ErrorText=${ERRORTEXT}
	Run Keyword If	'${RESPONSECODE}'== '200'	Log 			Request: ${Servicename} is successful 	

	
#############################################################################################################
Send TPP Request Finance Driver2		[Arguments]		${URL}		${XML_REQUEST} 	${USERNAME}	 ${PASSWORD}
#############################################################################################################			
	[Documentation]			This keyword is common for all web services and used to send TPP request for given Request XML.
	
	WriteToFile				${logfile}		Y			Send TPP Request Finance Driver2>>>	
	
	${RESPONSECODE}	${ERRORTEXT}	${RESPONSETEXT}=	Run Keyword If		${GRID}==False		WS_CommonUtil.Send_TPP_Request       ${WS_URL}		${XML_REQUEST}		${USERNAME}		${PASSWORD}		${RESOURCE}\\Other\\WebService
	...	ELSE						WS_CommonUtil.Send_TPP_Request	       	${WS_URL}			${XML_REQUEST}		${USERNAME}	     ${PASSWORD}	${RESOURCE}/Other/WebService

	[Return]						${RESPONSECODE}		${ERRORTEXT}		${RESPONSETEXT}
		

##################################################################################################
Compliance Validation  [Arguments]   ${ComplianceSleep}
##################################################################################################

    [Documentation]			This keyword Checks for compliance documents
	...				  		Author        : Manish Singh
	...						Creation Date : N/A
	...						Update Date\By: N/A

	 WriteToFile			${logfile}					Y							Compliance Validation>>>
     WriteToFile			${logfile}					Y							Compliance Sleep: ${ComplianceSleep}
	 WriteToFile			${logfile}					N							GlobalDict: ${Global_Dict}
	 WriteToFile			${logfile}					Y							Compliance List: ${List_Compliance}
	 
	Sleep 				${ComplianceSleep}
	${len}=		Get Length 		${List_Compliance}
	:FOR 	${I} 	IN RANGE 	0 		${len}
	\		${Index1}		Get From List 	${List_Compliance}		${I}
	\		${Index}=		Convert To Integer 		${Index1}
	\		${dict}=		Get From Dictionary 	${Global_Dict}		${Index1}
    \		WriteToFile			${logfile}			Y		-----------------------------------------------
	\		WriteToFile			${logfile}			Y		List Compliance: ${Index1}
	\		Validate Dictionary Data With Customer Folders Page1	 ${dict}
    
Validate Dictionary Data With Customer Folders Page1	[Arguments]  ${Dict_Records}	
	[Documentation]			This keyword Search the applicant by last name and verify date column in table
	...				  		Author        : Manish Singh
	...						Creation Date : N/A
	...						Update Date\By: N/A
	
	Navigate To Customer Folders
	Wait Until Page Contains Element            //iframe[@id='iFrm']
	Select Frame                                iFrm
	Wait Until Page Contains Element            //frame[@name='main']
	Select Frame      main
	
	${AppLastName}=   Get From Dictionary    ${Dict_Records}    Last Name
    WriteToFile			${logfile}			Y		ApplicantLastName=${AppLastName}
	
	Wait Until Keyword Succeeds       120s    3s         Page Should Contain Element            //input[@id='TextBoxSearchEntry']	loglevel=None	
	Input Text    //input[@id='TextBoxSearchEntry']     ${AppLastName}
	Press Key    //input[@id='searchButton']     \\13
	Sleep  7s
	
	
	${filename_now}= 		Get From Dictionary		${Dict_Records}		Filename
	${File_status}=   Run Keyword and Return Status   Should Contain      ${filename_now}          00
	
	# Write condition when last name is not found
	${flag}=  Run Keyword And Return Status     Page Should Contain Element 	//tr[@id='errRow']
	Run Keyword If    ${flag}==True and ${File_status}==False   WriteToFile			${logfile}					Y					Failed to find Last Name! - ${AppLastName}
	Run Keyword If    ${flag}==True and ${File_status}==False   Run Keyword And Continue On Failure    Fail    Applicant is not found with last name! - ${AppLastName}
	Run Keyword If    ${flag}==True and ${File_status}==False   Run Keyword And Return   Navigate To Customer Folders
	
	Run Keyword And Return If    ${File_status}==True      Page Should Not Contain Element    //table[@id='RadGrid1_ctl00']     No Document is found on Customer Folders page.	 loglevel=None
	Verify Columns On Customer Folders Page For Row1 	${Dict_Records}		1
	
	
	
Verify Columns On Customer Folders Page For Row1 	[Arguments]			${Record}		    ${Row_No}

	[Documentation]			This Keyword validates actual and expected documents on customer folder page
	...				  		Author        : Manish Singh
	...						Creation Date : N/A
	...						Update Date\By: N/A
	
	WriteToFile			${logfile}					N							Record: ${Record}
	
	${CBRActual}			Set Variable			${EMPTY}
	${CBRExpected}			Set Variable			${EMPTY}	
	
	${Row}= 	Set Variable 	${Row_No}
	
	# Read data from UI for the row
	Unselect Frame
	
	Wait Until Page Contains Element            //iframe[@id='iFrm']
	Select Frame                                iFrm
	Wait Until Page Contains Element            //frame[@name='main']
	Select Frame                                main
	
	Wait Until Keyword Succeeds       120s    3s         Page Should Contain Element            //table[@id='RadGrid1_ctl00']	loglevel=None	
	# read date
	${ROW}=		Convert To Integer		${ROW}
	
	${yyyy}	 ${mm} 	${dd}= 		Get Time 		year,month,day 
	${dd}=	Convert To Integer 	${dd}
	${mm}=	Convert To Integer 	${mm}
	
	${EXPDATE}=		Catenate 	SEPARATOR=/		${mm}	${dd}	${yyyy}
	# WriteToFile			${logfile}					Y							Expected date: ${EXPDATE}
	
	########## date ##############
	
	Wait Until Keyword Succeeds      120s          3s        Page Should Contain Element        //table[@id='RadGrid1_ctl00']/tbody/tr[${ROW}]/td[5]		Element not found:Date in table		loglevel=NONE
	Wait Until Page Contains Element		//table[@id='RadGrid1_ctl00']/tbody/tr[${ROW}]/td[1]		10s
	${ACT_DATE_SH}=		Get Text		//table[@id='RadGrid1_ctl00']/tbody/tr[${ROW}]/td[5]
	Run Keyword If 		'${ACT_DATE_SH}'=='None'			Fail			Unable to get value in Date column on Customer Folders Page. 
	${ACT_DATE}=		Evaluate		str('${ACT_DATE_SH}').strip()
	Run Keyword And Continue On Failure 	Should Be Equal As Strings			${EXPDATE}			${ACT_DATE}		Comparision of Date failed on Customer Folders page. Expected value: ${EXPDATE}. Actual Value: ${ACT_DATE}. 		values=False
	
	###########################################
	# Click the link to go to documents page
	Wait Until Keyword Succeeds 	60	3	Page Should Contain Element 	//table[@id='RadGrid1_ctl00']/tbody/tr[${ROW}]/td[2]/a	Table element is not found on Customer Folders page.	loglevel=None
	# Click link to open the details documents page
	Press Key 		//table[@id='RadGrid1_ctl00']/tbody/tr[${ROW}]/td[2]/a 		\\13
	
	# wait till page opens
	Wait Until Keyword succeeds        	60     10         Page Should Contain Element         //table[@id='CmplDetailRadGrid_ctl00']		Table is not found on Customer Folders details Page. 	loglevel=NONE	
	@{ActualDocList}=		Create List
	
	${filename_now}= 		Get From Dictionary		${Record}		Filename
	# WriteToFile			${logfile}					Y							File name: ${filename_now}

	${input_folder_path}=  Get From Dictionary   ${record}   Input Folder
	
	${file_txt}=   Replace String   ${filename_now}   xml    txt
	${file_loc}=  Catenate   SEPARATOR=    ${input_folder_path}  \\${file_txt}
	WriteToFile			${logfile}					Y							File Location: ${file_loc}
	##########################################
	# Get list of all actual documents
	
	${Count}		Get Matching Xpath Count		//table[@id='CmplDetailRadGrid_ctl00']/tbody/tr
	${PCI_List}=  Create List
	:For	${I}		IN RANGE	1			${COUNT}+1
	\		Wait Until Keyword succeeds        	60     10         Page Should Contain Element         //table[@id='CmplDetailRadGrid_ctl00']/tbody/tr[${I}]/td[2]/a	Table row not found on Customer Folder Page. 	loglevel=NONE
	\		${text}=	Get Text				//table[@id='CmplDetailRadGrid_ctl00']/tbody/tr[${I}]/td[2]
	\       @{text1}=   Split String    ${text}    (
	\       ${text2}=   Get From List 		${text1}	0
	\		${text2}=  Evaluate  '${text2}'.strip()
	\       ${PCI_status}=  Run Keyword and Return Status    Should Contain   ${text2}   Personal Credit Info
	\       Run Keyword If    ${PCI_status}==True    Append To List    ${PCI_List}    ${I}
	\		Append To List 						${ActualDocList}		${text2}
	WriteToFile			${logfile}					N							Actual Document List: ${ActualDocList}
	Sort List 	${ActualDocList}
	Log List 	${ActualDocList}
	
	${len_PCI}=  Get Length   ${PCI_List}
	Log    ${len_PCI}
	:For	${I}		IN RANGE	0			${len_PCI}
	\       ${val}=  Get From List   ${PCI_List}    ${I}
	\      ${text}=	Get Text				//table[@id='CmplDetailRadGrid_ctl00']/tbody/tr[${val}]/td[7]
	\      Log    ${text}
	\      Run Keyword And Continue On Failure   Should Be Equal 	${text}		Complete		 Personal Credit Info Status: Complete
	\      Run Keyword If  '${text}'!='Complete'     WriteToFile			${logfile}					Y							Persoanl Credit Info status was NOT marked as Complete!
	
	
	# List of expected documents
	@{ExpectedDocList}=		Create List
	${ExpectedDocList}=		Create Expected List Of Compliance Documents1	${record}	${file_loc}
	Log   ${ExpectedDocList}
	# Remove applicant and coapplicant in case of Credit bureau report document
	${EXP_len}=		Get Length 		${ExpectedDocList}
	
	Log List 	${ExpectedDocList}
	Sort List 	${ExpectedDocList}
	Log List 	${ExpectedDocList}
	WriteToFile			${logfile}					N							Expected Document List: ${ExpectedDocList}
	#${EXP_len}=		Get Length 		${ExpectedDocList}
	
	#Log 		Expected number of documents: ${EXP_len}		WARN
	WriteToFile			${logfile}					Y							Expected number of documents: ${EXP_len}
	
	${ACT_len}=		Get Length 		${ActualDocList}	
	#Log 		Actual number of documents: ${ACT_len}		WARN
	WriteToFile			${logfile}					Y							Actual number of documents: ${ACT_len}
	
	# compare
	Run Keyword And Continue On Failure 		Should Be Equal 	${EXP_len}		${ACT_len}		Expected and Actual number of documents do not match. Expected number:${EXP_len}. Actual number: ${ACT_len}	
	Run Keyword If 		'${EXP_len}'!='${ACT_len}'		WriteToFile			${logfile}		Y		Expected and Actual number of documents do not match! Expected number:${EXP_len}. Actual number: ${ACT_len}		
	
	# Convert both lists to lower case
	:FOR 		${I}	IN RANGE	0 	${EXP_len}
	\			${doc}=		Get From List 		${ExpectedDocList}		${I}
	\			${doc1}=	Evaluate 	str('${doc}').lower()
	\			Set List Value 		${ExpectedDocList}		${I}	${doc1}
	Log List 	${ExpectedDocList}
	
	:FOR 		${I}	IN RANGE	0 	${ACT_len}
	\			${doc}=		Get From List 		${ActualDocList}		${I}
	\			${doc1}=	Evaluate 	str('${doc}').lower()
	\			Set List Value 		${ActualDocList}		${I}	${doc1}
	Log List 	${ActualDocList}

	#TH - there is often a discrepancy for Credit Bureau Report	Name. It is either a bug in Compliance or we don't have the correct understanding about how the docs get named.
	Run Keyword And Continue On Failure 	Lists Should Be Equal 		${ExpectedDocList} 		${ActualDocList}		Expected and Actual list of docuemnets do not match.

	@{DiffList}=	Create List
	${len}=			Get Length 		${ExpectedDocList}
	
	:For	${I}		IN RANGE	0		${len}
	\		${Val}=		Get From List 		${ExpectedDocList}		${I}
	\       ${count}=   Get Match Count   ${ExpectedDocList}    ${Val}
	\		${stat}=	Check Docs And Count In Actual List   ${count}		${Val}		${ActualDocList}
	\		Run Keyword If 		'${stat}'!='True'	Append To List 		${DiffList}		${Val}
	
	${DiffLen}=			Get Length 			${DiffList}
	Log List			${DiffList}
	#Run Keyword If 		${DiffLen}!=0		Run Keywords	Log 	These documents are are not found: 		WARN	AND 	Log List 	${DiffList}		WARN 
	Run Keyword If 		${DiffLen}!=0		Run Keywords	WriteToFile		${logfile}	Y	These documents are are not found:	AND		WriteToFile		${logfile}	Y	${DiffList}
  	
Create Expected List Of Compliance Documents1 	[Arguments]   ${Dict_Records}	 ${File}

    [Documentation]			This Keyword creates expected document list from text file
	...				  		Author        : Manish Singh
	...						Creation Date : N/A
	...						Update Date\By: N/A
	
	 ${InFile}=				Get File				${File}
	
	@{AllLines}= 			Split To Lines 			${InFile}
	Log List  ${AllLines}
	[Return]   ${AllLines}  
Check Docs And Count In Actual List 		[Arguments]		${count}     ${Val}		${ActualDocList}	
	 ${len1}=	Get Length 		${ActualDocList}	
	 ${count1}=  Get Match Count   ${ActualDocList}   ${Val}	
     ${stat}=  Run Keyword and Return Status  List Should Contain Value   ${ActualDocList}   ${Val}	
	 ${diff}=   Evaluate   ${count} - ${count1}
	 ${flag}=  Run Keyword If  ${stat}==True and ${diff}==0    Set Variable   True
	                 ...   ELSE   Set Variable  False
	Run Keyword If   ${diff}!=0    Run Keyword And Continue On Failure    Fail   ${diff} ${Val} are missing				 
	 #Run Keyword If   ${diff}!=0    WriteToFile		${logfile}	Y   ${diff} ${Val} are missing
	${retval}=		Run Keyword If 	'${flag}'!='True'		Set Variable 	False
	...				ELSE 		Set Variable 	True
	[Return]	${retval}
		
############################################################################################################	
Decision Validation   [Arguments]  ${DecisionSleep}      ${MyleadsFlag}	 ${MyleadsSleep}
############################################################################################################
	[Documentation]			This keyword decisions credit apps and optionally validates the decisions on MyLeads Summary
	...				  		Author        : Manish Singh
	
	WriteToFile			${logfile}					Y							Decision Validation>>>
	WriteToFile			${logfile}					Y							Decision Sleep: ${DecisionSleep}
	WriteToFile			${logfile}					Y							Decision List: ${List_Decision}
	#WriteToFile			${logfile}					Y							Decision Dealer: ${DecisionDealerList}
	WriteToFile			${logfile}					Y							My Leads Flag: ${MyleadsFlag}
	
	${MyleadsSleep}=	Run Keyword If		'${MyleadsFlag}'=='False'		Set Variable	0	ELSE	Set Variable	${MyleadsSleep}	
	Sleep 						${DecisionSleep}	
	Navigate To App Status Page
	# Navigate To My Leads
	WriteToFile			${logfile}					Y							-----	
	${DealQue_Dec}=    			Create Dictionary		#This dictionary has all data that we have put in Dealqueue operation
	Set Suite Variable    		${DealQue_Dec}
	
    #Click on Dealqueue link
	#Navigate To DealQueue
	${len}=		Get Length 		${List_Decision}
	:FOR 	${I} 	IN RANGE 	0 		${len}
	\		${Index1}		Get From List 			${List_Decision}		${I}
	\		${Index}=		Convert To Integer 		${Index1}
	\		${dict}=		Get From Dictionary 	${Global_Dict}			${Index1}
	\		DealQueue Operation 	 				${dict}   		${Index1}
	\       Set To Dictionary     ${DealQue_Dec}    ${I}    ${DealQueDealer}
	WriteToFile				${logfile}				Y						DealQueue dict: ${DealQue_Dec}
	Run Keyword If			${MyleadsFlag}			WriteToFile				${logfile}				Y		MyLeadsSleep=${MyleadsSleep}
	Sleep  ${MyleadsSleep}
	Run Keyword If    		${MyleadsFlag}==True	Validate Status on My Leads Page     	${DealQue_Dec}
	...  ELSE 	     		WriteToFile				${logfile}				Y				Leads Validation was NOT requested
	

DealQueue Operation  [Arguments]	 ${Dict_Records}   	${Index1}
	[Documentation]			This keyword decisions the request as per filename of xml
	...				  		Author        : Manish Singh

	WriteToFile			${logfile}					Y					Dealqueue Operation>>>	
	${len1}=  Get Length   ${DecisionDealerList}
		
	${DealQueDealer}=    			Create Dictionary		#This dictionary has all data that we have put in Dealqueue operation
	 Set Suite Variable    		${DealQueDealer}
	 #Set To Dictionary   ${DealQueDealer}     NbrLenders     ${len1}
    
    ${Lnumber}=   Set Variable   1
	Set Test Variable    ${Lnumber}
	:FOR 	${I} 	IN RANGE 	0 		${len1}
	\   ${val}=  Get From List   ${DecisionDealerList}   ${I}
	\   @{LDSplit}=   Split String  ${val}   -
	\   ${lenderID}=  	Get From List   ${LDSplit}  0
	\   ${dealerID1}=    Get From List   ${LDSplit}  1
	\	WriteToFile		${logfile}	Y	---
	\   Dealer Switch To Dealer    ${dealerID1}
	\   Navigate To DealQueue 
	\   ${I}=   Convert To Integer   ${I}
	\   ${lVal}=   Evaluate    ${I}+1
	\   ${LID}=   Catenate    SEPARATOR=    L     ${Lnumber}
	\   Decision Request By Dealer     ${Dict_Records}   ${LID}	  ${Index1}
	${Lnumber}=   Evaluate    ${Lnumber}-1
	Run Keyword If   ${Lnumber}!=0   Set To Dictionary   ${DealQueDealer}     NbrLenders     ${Lnumber}
	
	Log Dictionary     ${DealQueDealer} 
		
		
Decision Request By Dealer     [Arguments]  ${Dict_Records}   ${LID}   ${Index1}
		${AppLastName}=   	Get From Dictionary    		${Dict_Records}    	Last Name
	    ${Dec_Type}=  		Get From Dictionary      	${Dict_Records}		Decision
	   ${Modify_status}=    Run Keyword If	'${Dec_Type}'=='Approve'		Set Variable    Approved		
	                      ...  ELSE IF	'${Dec_Type}'=='Counter'		Set Variable    Counter Offer	  
	                      ...  ELSE IF	'${Dec_Type}'=='Decline'		Set Variable    Declined		
	
	
	#Set To Dictionary    ${Dict_Records}      		REF App     		${Modify_status}
	WriteToFile			${logfile}					Y					Iteration: ${Index1} - ${AppLastName}
	WriteToFile			${logfile}					Y					Decision: ${Modify_status}
	Wait Until Page Contains Element            	//iframe[@id='iFrm']
	Select Frame                                	iFrm
	Wait Until Page Contains Element            	//frame[@name='main']
	Select Frame    	main
	Wait Until Keyword Succeeds       120s    3s    Page Should Contain Element			//input[@id='txtSearchValue']	loglevel=None
	# select Last name from drop down
	Select From List    cmbSearch     				Applicant Last Name
	
	Input Text    //input[@id='txtSearchValue']     ${AppLastName}
	Sleep  2s
	Press Key    //input[@id='btnSearch']     		\\13
	Sleep  7s
	${flag}=  Run Keyword And Return Status     Page Should Contain Element 	//div[@id='errorMsgIs']
	Run Keyword If    ${flag}==True    WriteToFile			${logfile}					Y					Failed to find Last Name! - ${AppLastName}
	Run Keyword If    ${flag}==True    Run Keyword And Continue On Failure    Fail    Applicant is not found with last name! - ${AppLastName}
	${Lnumber}=   Run Keyword If    ${flag}==True    Set Variable     ${Lnumber}
	            ...   ELSE    Evaluate    ${Lnumber}+1
	Set Test Variable    ${Lnumber}
	Run Keyword If    ${flag}==True    Run Keyword And Return   Navigate To DealQueue

	Wait Until Keyword Succeeds 	60	3			Page Should Contain Element 	//table[@id='dgDealQueue']/tbody/tr[2]/td[4]/a	  Dealqueue table page is not found on page.	loglevel=None
	# Click link to open the details documents page
	Press Key 										//table[@id='dgDealQueue']/tbody/tr[2]/td[4]/a		\\13
	Wait Until Keyword Succeeds 	60	3			Page Should Contain Element 	//input[@id='btn_SubmitDec']	Submit Decision button is not found on page.	loglevel=None

	#Make the Decision   
	${RefAppID}=   Get From Dictionary   ${Dict_Records}    REF App
	#${Dec_Dict}=   		Create Dictionary
	#${Lname}=  Catenate   SEPARATOR=-    ${LID}   Last Name
	Set To Dictionary	${DealQueDealer}    				Last Name    		${AppLastName}
	${LDecision}=  Catenate   SEPARATOR=-    ${LID}   Decision
	Set To Dictionary	${DealQueDealer}   				${LDecision}     		${Modify_status}
	Set To Dictionary	${DealQueDealer}   				AppRefID     		${RefAppID}
	${LLender}=  Catenate   SEPARATOR=-    ${LID}   Lender
	Set To Dictionary	${DealQueDealer}   				${LLender}     		   ${lenderID}
	${Dec_Type}=  		Get From Dictionary      	${Dict_Records}		Decision
	Run Keyword If		'${Dec_Type}'=='Approve'						Approve Application1	Approve		${LID}	${DealQueDealer}
	Run Keyword If		'${Dec_Type}'=='Counter'		    		Approve Application1	CounterOffer   ${LID} 	${DealQueDealer}
	Run Keyword If		'${Dec_Type}'=='Decline'			    		Decline Application1	${LID}   ${DealQueDealer}

	Set To Dictionary	${DealQueDealer}   			GDI    		${index1}
	#Set To Dictionary	${DealQue_Dec}   			${Index1}    		${Dec_Dict}
	#Set To Dictionary	${DealQue_Dec}   			${RefAppID}    		${DealQueDealer}
	#Set To Dictionary	${DealQue_Dec}   			${Index1}     		${DealQueDealer}
    Set Suite Variable	${DealQue_Dec}
	Set Suite Variable	${Dict_Records}	
	
	
#########################################################################################################
Approve Application1
	[Arguments]				${DECISION}   ${LID}   ${DealQueDealer}
	[Documentation]			This keyword is used to select radio button, enter required values and then submit the decision (Approve or Counteroffer)
	...						Keyword Return True, otherwise False.
	...						Pre-requisite : N/A
	...						Note: 		  : N/A
	...				  		Author        : Manish Singh
	
	Log 	${DECISION}
	Log    ${LID}
	# sleep	3s
	Unselect Frame
	Sleep  3s
	Wait Until Page Contains Element            //iframe[@id='iFrm']
	Select Frame                                iFrm
	Wait Until Page Contains Element            //frame[@name='main']
	Select Frame                                main
	# sleep 	5s
	
	Wait Until Keyword Succeeds               120s      3s        Page Should Contain Element           //input[@id='AppDecisionEdit_radioApproved']			 			loglevel=NONE		
	# click on Approve radio
	Mouse Down		//input[@id='AppDecisionEdit_radioApproved']
	sleep 	1s
	Mouse Up		//input[@id='AppDecisionEdit_radioApproved']
	
	sleep	2s
	${APPROVE_TERM}=		Get Value		//input[@id='AppDecisionEdit_txtTerm']
	
	Set Test Variable		${APPROVE_TERM}
	sleep	1s
   
	# click on Counter radio
	Run Keyword If		'${DECISION}'=='CounterOffer'		Mouse Down		//input[@id='AppDecisionEdit_radioCounter']
	Run Keyword If		'${DECISION}'=='CounterOffer'		Mouse Up		//input[@id='AppDecisionEdit_radioCounter']
	sleep	2s
	${Amt_random} =  Evaluate  random.randint(20000, 99000)  random,sys
	
	Run Keyword If		'${DECISION}'=='CounterOffer'		Input Text			//input[@id='AppDecisionEdit_txtAmount']		${Amt_random}
	${LAmount}=  Catenate   SEPARATOR=-   ${LID}   Amount
	Set To Dictionary   ${DealQueDealer}    ${LAmount}     ${Amt_random}
	sleep	1s
	${Term_random} =  Evaluate  random.randint(36, 72)  random,sys
	Run Keyword If		'${DECISION}'=='CounterOffer'		Input Text			//input[@id='AppDecisionEdit_txtTerm']		${Term_random}
	
	${LTerm}=  Catenate   SEPARATOR=-   ${LID}    Term
	Set To Dictionary   ${DealQueDealer}    ${LTerm}    ${Term_random}
	sleep 	1s
	${BuyRate_random} =  Evaluate  random.randint(1, 3)  random,sys
	${stat}=			Run Keyword And Return Status 		Page Should Contain Element 	//input[@id='AppDecisionEdit_txtBuyRate']
	Run Keyword If 		'${stat}'=='True'					Input Text			//input[@id='AppDecisionEdit_txtBuyRate']		${BuyRate_random}
	
	${LBuyRate}=  Catenate   SEPARATOR=-   ${LID}    Buy Rate
	Set To Dictionary   ${DealQueDealer}     ${LBuyRate}   ${BuyRate_random}
	Run Keyword If 		'${stat}'=='True'					sleep 		1s
	
	${stat}=			Run Keyword And Return Status 		Page Should Contain Element		//input[@id='AppDecisionEdit_txtBuyRate']	
	Run Keyword If 		'${stat}'=='True'					Input Text			//input[@id='AppDecisionEdit_txtBuyRate']		${BuyRate_random}
	
	Run Keyword If 		'${stat}'=='True'					Sleep 		1s
	${Tier_random} =  Evaluate  random.randint(1, 3)  random,sys
	${stat}=			Run Keyword And Return Status 		Page Should Contain Element		//input[@id='AppDecisionEdit_txtTier']	
	Run Keyword If 		'${stat}'=='True'					Input Text			//input[@id='AppDecisionEdit_txtTier']			${Tier_random}
	
	${LTier}=  Catenate   SEPARATOR=-   ${LID}    Tier
	Set To Dictionary   ${DealQueDealer}     ${LTier}   ${Tier_random}
	Run Keyword If 		'${stat}'=='True'					sleep 		1s
	${MonPay_random} =  Evaluate  random.randint(159, 699)  random,sys
	${stat}=			Run Keyword And Return Status 		Page Should Contain Element		//input[@id='AppDecisionEdit_txtMonthlyPymt']	
	Run Keyword If 		'${stat}'=='True'					Input Text			//input[@id='AppDecisionEdit_txtMonthlyPymt']		${MonPay_random}
	
	${LMP}=  Catenate   SEPARATOR=-   ${LID}     Monthly Payment
	Set To Dictionary   ${DealQueDealer}     ${LMP}   ${MonPay_random}
	Run Keyword If 		'${stat}'=='True'					sleep 		1s
	
	Press Key		//input[@id='btn_SubmitDec']		\\13
	
	sleep		3s
	
	Run Keyword If			'${DECISION}'=='Approve'			Press Key		//input[@id='btnAppSubmit']			\\13
	Run Keyword If			'${DECISION}'=='CounterOffer'		Press Key		//input[@id='btnSubmit']			\\13
	
	Set Test Variable    ${DealQueDealer}
	sleep	5s
	Unselect Frame	
	
#####################################################################################################################
Decline Application1   [Arguments]         ${LID}   ${DealQueDealer} 
	[Documentation]			This keyword is used to select 'Decline' radio button, enter required values and then submit the decision (Decline)
	...						Keyword Return True, otherwise False.
	...						Pre-requisite : N/A
	...						Note: 		  : N/A
	...				  		Author        : Manish Singh
	Log    ${LID}
	Unselect Frame
	sleep	3s
	Wait Until Page Contains Element            //iframe[@id='iFrm']
	Select Frame                                iFrm
	Wait Until Page Contains Element            //frame[@name='main']
	Select Frame                                main
	sleep 	5s
	# click on Approve radio
	Wait Until Keyword Succeeds               120s                   3s                   Page Should Contain Element           //input[@id='AppDecisionEdit_radioDecline']			 			loglevel=NONE		
	Mouse Down		//input[@id='AppDecisionEdit_radioDecline']
	Mouse Up		//input[@id='AppDecisionEdit_radioDecline']
	
	# select reason to decline
	sleep	1s
	Select From List		//select[@id='reason_list']			Insufficient number of credit references provided
	
	${LAmount}=  Catenate   SEPARATOR=-   ${LID}   Amount
	Set To Dictionary   ${DealQueDealer}    ${LAmount}     ${EMPTY}
	
	${LBuyRate}=  Catenate   SEPARATOR=-   ${LID}    Buy Rate
	Set To Dictionary   ${DealQueDealer}    ${LBuyRate}    ${EMPTY}
	
	${LMP}=  Catenate   SEPARATOR=-   ${LID}    Monthly Payment
	Set To Dictionary   ${DealQueDealer}    ${LMP}    ${EMPTY}
	
	${LTier}=  Catenate   SEPARATOR=-   ${LID}    Tier
	Set To Dictionary   ${DealQueDealer}    ${LTier}    ${EMPTY}
	
	${LTerm}=  Catenate   SEPARATOR=-   ${LID}    Term
	Set To Dictionary   ${DealQueDealer}    ${LTerm}    ${EMPTY}
	sleep	1s
	# Click on Enter button
	Press Key		//input[@value='Enter']		\\13
	
	# Submit button
	sleep	3s
	Press Key		//input[@id='btn_SubmitDec']		\\13
	
	# Next submit button
	sleep		5s
	Press Key		//input[@id='btnDecSubmit']			\\13
	Set Test Variable    ${DealQueDealer}
	sleep	5s
	Unselect Frame

		
Validate Status on My Leads Page  [Arguments]   ${Dict_Records}
    [Documentation]			This Keyword validates decision on My Leads page
	...				  		Author        : Manish Singh
	...						Creation Date : N/A
	...						Update Date\By: N/A
	
	WriteToFile			${logfile}					Y					Validate Status on My Leads Page>>>
	${Dic_len}=  		Get length   				${Dict_Records}
    ${Dict_Key}=  Get Dictionary Keys    ${Dict_Records}
	
	Login to DT And Switch Dealership	${DEALERID}		
	# ${dealer}=   		Get From Dictionary			${Scenario Setup}		Partner Dealer Id FD
	# ${dealerID}=  Get SubString      ${dealer}     0      6
	# Dealer Switch To Dealer    ${dealerID}
	WriteToFile			${logfile}					Y					-----	
	Navigate To My Leads
	:FOR  ${K}   IN RANGE  0   ${Dic_len}
	\    ${J}=  Get From List    ${Dict_Key}    ${K}
	\	 ${dict}=		Get From Dictionary 		${Dict_Records}		${J}
	\    ${lname}=  	Get From Dictionary  		${dict}   			Last Name	
	\    WriteToFile	${logfile}					Y					Iteration: ${J} - ${lname}
	\    Unselect Frame
	\    Wait Until Page Contains Element            //iframe[@id='iFrm']
	\    Select Frame                                iFrm
	\    Wait Until Page Contains Element            //frame[@name='main']
	\    Select Frame                                main
	\ 	 Wait Until Keyword Succeeds 	60	3	Page Should Contain Element 	//tr[@id='pagerRow']	Page navigator is not present on page.	loglevel=None
	\    Input Text    	//input[@id='SearchEntryTextBox']     ${lname}
	\    Press Key    	//input[@id='btnSearch']     \\13
	\    Sleep  6s
	\    ${text}=			Get Text				//table[@id='DGLeadsReport']/tbody/tr[2]/td[6]/table/tbody/tr/td[1]/a
	\    ${Dec_Type}=  		Get From Dictionary		${dict}    			L1-Decision
	\    Run Keyword If   '${text}'=='${Dec_Type}'	WriteToFile			${logfile}			Y		Decision verified on My Leads Page: ${Dec_Type}
	\    ...   ELSE IF    '${text}'!='${Dec_Type}'	Run Keyword and Continue on Failure    	Fail	Actual decision and expected decision do not match: ${text},${Dec_Type}
	\	 Run Keyword If   '${text}'!='${Dec_Type}'	WriteToFile			${logfile}			Y		Failed! Actual decision and expected decision do not match: ${text},${Dec_Type}
	\	 WriteToFile		${logfile}				Y					-----
	\    Navigate To My Leads
	\    Sleep  5s
	
#Last Name search for customer Archive page 	
#############################################################################################
Customer Page Validation   [Arguments]   ${CustArchSleep}	
   [Documentation]			This Keyword Verifies that Records are displayed on Customer Archive page
	...						Pre-requisite : N/A
	...						Note: 		  : N/A
	...				  		Author        : Manish Singh

	WriteToFile			${logfile}					Y					${Global_Dict}
	WriteToFile			${logfile}					Y					${List_CustArchive}
	Sleep   ${CustArchSleep}
	Navigate To Customer Archive
	${len}=		Get Length 		${List_CustArchive}
	:FOR 	${I} 	IN RANGE 	0 		${len}
	\		${Index1}		Get From List 			${List_CustArchive}		${I}
	\		${Index}=		Convert To Integer 		${Index1}
	\		${dict}=		Get From Dictionary 	${Global_Dict}			${Index}
	\		 Customer Page Search	 				${dict}   				${Index}
	
Customer Page Search   [Arguments]	 ${dict}  ${index}
    [Documentation]			This Keyword Searches the records unique with last name
	...						Pre-requisite : N/A
	...						Note: 		  : N/A
	...				  		Author        : Manish Singh
	
	Log  ${dict}
	Unselect Frame
	Wait Until Page Contains Element            //iframe[@id='iFrm']
	Select Frame                                iFrm
	Wait Until Page Contains Element            //frame[@name='main']
	Select Frame                                main
	${lname}=  Get From Dictionary   ${dict}   Last Name 
	${fname}=  Get From Dictionary   ${dict}   First Name
	${mname}=  Get From Dictionary   ${dict}   Middle Name
	${TCode}=  Get From Dictionary   ${dict}   TransCode
	Select From List    drpdownSearch     			Applicant (Last Name)  #Social Security (xxxxxxxxx)
	
	Input Text   textSearchEntry     ${lname}   #SSN nuber will be put here
	Press Key		//input[@id='btnSearch']		\\13
	Sleep  15s

	Run Keyword If    ${BureauFlag}==False and ${OfacFlag}==False and ${TCode}!=5     No Record Function   ${lname}
	Run Keyword If    ${BureauFlag}==False and ${OfacFlag}==False and ${TCode}!=5    Run Keyword And Return  Log  No Record should found on page 

	${flag}=  Run Keyword And Return Status     Page Should Contain Element 	//div[@id='errorMsg']
	
	Run Keyword If    ${flag}==True    WriteToFile			${logfile}					Y					Failed to find Last Name! - ${lname}
	Run Keyword If    ${flag}==True    Run Keyword And Continue On Failure    Fail    Applicant is not found with last name! - ${lname}
	Run Keyword If    ${flag}==True    Run Keyword And Return      Log   Failed to find Last Name! - ${lname}
	Unselect Frame
	Wait Until Page Contains Element            //iframe[@id='iFrm']
	Select Frame                                iFrm
	Wait Until Page Contains Element            //frame[@name='main']
	Select Frame                                main
	Wait Until Keyword Succeeds 	60	3			Page Should Contain Element 	//table[@id='DataGridArchive']/tbody/tr[2]/td[2]/a	  Applicant is not found on page.	loglevel=None
	
	# Date
	${EXPDATE}=		Get Current Date			# existing keyword from phase II
	Set Test Variable	${EXPDATE}
	
	Wait Until Keyword Succeeds      120s          3s        Page Should Contain Element        //table[@id='DataGridArchive']/tbody/tr[2]/td[1]		Element not found:Date in table		loglevel=NONE
	Wait Until Page Contains Element		//table[@id='DataGridArchive']/tbody/tr[2]/td[1]		10s
	
	${ACT_DATE_SH}=		Get Text		//table[@id='DataGridArchive']/tbody/tr[2]/td[1]
	Run Keyword If 		'${ACT_DATE_SH}'=='None'			Fail			Unable to get value in Date column on Customer Archive Page. 
	${ACT_DATE}=		Evaluate		str('${ACT_DATE_SH}').strip()
	Should Be Equal As Strings			${EXPDATE}			${ACT_DATE}		Comparision of Date failed on Customer Archive page. Expected value: ${EXPDATE}. Actual Value: ${ACT_DATE}. 		values=False
	
	# app name
	${STR1}=				Catenate		SEPARATOR=			${SPACE}				${fname}
	${EXP_APPLICANT}=		Catenate		SEPARATOR=,  		${lname}				${STR1}
	${STR2}=				Catenate		SEPARATOR=		${mname}			.	
	${EXP_APPLICANT}=		Run Keyword If		'${mname}'!='${EMPTY}'		Catenate		${EXP_APPLICANT}		${STR2}		ELSE		Set Variable	${EXP_APPLICANT}
	${EXP_APPLICANT}=		Evaluate		str('${EXP_APPLICANT}').lower()
	# Actual
	Wait Until Page Contains Element		//table[@id='DataGridArchive']/tbody/tr[2]/td[2]/a		10s
	${ACT_APPLICANT}=		Get Text		//table[@id='DataGridArchive']/tbody/tr[2]/td[2]/a
	${ACT_APPLICANT}=		Evaluate		str('${ACT_APPLICANT}').lower()
	
	${EXEC_STATUS}=			Run Keyword And Continue On Failure		Run Keyword And Return Status		Should Contain			${EXP_APPLICANT}		${ACT_APPLICANT}		Comparision of Applicant Name failed. Expected name value: ${EXP_APPLICANT}. Actual Value: ${ACT_APPLICANT}. Please make sure that FD - Credit App Web Service is working fine as the expected record is not shown on Customer Archive page.		values=False
	
	###############Enhancement here
	
	Run Keyword If		'${EXEC_STATUS}'=='True' 	WriteToFile			${logfile}					Y					Applicant: ${EXP_APPLICANT}
	
	Run Keyword If		'${EXEC_STATUS}'!='True'  	Fail		Comparision of Applicant Name failed. Expected value: ${EXP_APPLICANT}. Actual Value: ${ACT_APPLICANT}. Please make sure that FD - Credit App Web Service is working fine as the expected record is not shown on App Status page.
	
	${TCode}=  Get From Dictionary   ${dict}  TransCode 
	Run Keyword If  ${TCode}!=5    Data Verification_FD   ${dict}
	...  ELSE    Data Verification_CB   ${dict}

No Record Function   [Arguments]   ${lname}
	${flag}=  Run Keyword And Return Status     Page Should Contain Element 	//div[@id='errorMsg']
	Run Keyword If    ${flag}==True        WriteToFile			${logfile}					Y    Applicant is not found with last name! - ${lname} because RF and Bureau flags are false
	

Data Verification_FD  [Arguments]   ${dict}
   [Documentation]			This Keyword Verifies Data for FD requests excepts Credit Bureau
	...						Pre-requisite : N/A
	...						Note: 		  : N/A
	...				  		Author        : Manish Singh
	
	 Wait Until Page Contains Element		//table[@id='DataGridArchive']/tbody/tr[2]/td[4]/span		10s
	${SCORE1}=		Get Text		//table[@id='DataGridArchive']/tbody/tr[2]/td[4]/span
	Run Keyword If   ${BureauFlag}==False    No Bureau Verification   ${SCORE1}
	#commented till OFAC does not start working properly
	#Run Keyword If   ${OfacFlag}==True  OFAC Verification   ${dict}   5
	Run Keyword If   ${BureauFlag}==False   Return From Keyword
	Score Verification_One
	#OFAC Verification   ${dict}   5

Data Verification_CB   [Arguments]   ${Dict_Records}
	[Documentation]			This Keyword Verifies data for Credit Bureau requests
	...						Pre-requisite : N/A
	...						Note: 		  : N/A
	...				  		Author        : Manish Singh
	
    ${file}=			Get From Dictionary			${Dict_Records}		Filename	
	${folder}=			Get From Dictionary			${Dict_Records}		Input Folder
	${inputfile}=		Read From File To String 	${folder}\\${file}
	Log 				${inputfile}
	${count}=  Set Variable   0
	
	${Status_Equ}=		Run Keyword And Return Status 	Should Contain 		${inputfile}		Equifax
	${Status_Exp}=		Run Keyword And Return Status 	Should Contain 		${inputfile}		Experian
    ${Status_TU}=		Run Keyword And Return Status 	Should Contain 		${inputfile}		Transunion
	
	${count}=   Run Keyword If   ${Status_Equ}==True    Evaluate    ${count} + 1    ELSE   Set Variable   ${count}

	${count}=   Run Keyword If   ${Status_Exp}==True    Evaluate    ${count} + 1    ELSE   Set Variable   ${count}

	${count}=   Run Keyword If   ${Status_TU}==True     Evaluate    ${count} + 1    ELSE   Set Variable   ${count}

	Log  ${count}
	
	
	Run Keyword If   ${count}==0 or ${count}==1         Score Verification_One
	Run Keyword If   ${count}==2        Run Keywords    Score Verification_One   AND    Score Verification_Two
	Run Keyword If   ${count}==3        Run Keywords    Score Verification_One   AND    Score Verification_Two    AND  Score Verification_Three
	
	${OFACColumn}=    Run Keyword If   ${count}==0 or ${count}==1      Set Variable  5
	               ...  ELSE IF    ${count}==2   Set Variable  6
				   ...  ELSE IF    ${count}==3   Set Variable  7
          				   

	#commented till OFAC does not start working properly
	#OFAC Verification   ${Dict_Records}  ${OFACColumn}

	
Score Verification_One
	[Documentation]			This Keyword Verifies OFAC data on customer archive page
	...						Pre-requisite : N/A
	...						Note: 		  : N/A
	...				  		Author        : Manish Singh
	
    Wait Until Page Contains Element		//table[@id='DataGridArchive']/tbody/tr[2]/td[4]/span		10s
	${SCORE1}=		Get Text		//table[@id='DataGridArchive']/tbody/tr[2]/td[4]/span
	${SCORE1}=		Run Keyword If		'${SCORE1}'=='None'		Set Variable		${EMPTY}		ELSE		Set Variable	${SCORE1}
	@{SCORE1_LIST}=		Run Keyword If		'${SCORE1}'!= '${EMPTY}'		Split String		${SCORE1}			-		ELSE		Set Variable		${EMPTY}		${EMPTY}
	${SCORE1_NAME}=			Get From List		${SCORE1_LIST}		0
	Set Test Variable		${SCORE1_NAME}
	${CREDIT_SCORE}=		Get From List		${SCORE1_LIST}		1		
	Convert To String		${CREDIT_SCORE}
	WriteToFile			${logfile}					Y					${SCORE1_NAME}: ${CREDIT_SCORE}
	Set Test Variable		${CREDIT_SCORE}

No Bureau Verification   [Arguments]  ${SCORE1}
	Run Keyword If		'${SCORE1}'=='${EMPTY}'  WriteToFile			${logfile}					Y  Successfully verified that no score is returned if bureau flag is false
	...  ELSE    Run Keyword And Continue On Failure   Fail   Score-${SCORE1} is returned for false bureau flag
	
Score Verification_Two
	[Documentation]			This Keyword Verifies that Records are displayed on Customer Archive page
	...						Pre-requisite : N/A
	...						Note: 		  : N/A
	...				  		Author        : Manish Singh
	
    Wait Until Page Contains Element		//table[@id='DataGridArchive']/tbody/tr[2]/td[5]/span		10s
	${SCORE2}=		Get Text		//table[@id='DataGridArchive']/tbody/tr[2]/td[5]/span
	${SCORE2}=		Run Keyword If		'${SCORE2}'=='None'		Set Variable		${EMPTY}		ELSE		Set Variable	${SCORE2}
	@{SCORE2_LIST}=		Run Keyword If		'${SCORE2}'!= '${EMPTY}'		Split String		${SCORE2}			-		ELSE		Set Variable		${EMPTY}		${EMPTY}
	${SCORE2_NAME}=			Get From List		${SCORE2_LIST}		0
	Set Test Variable		${SCORE2_NAME}
	${CREDIT_SCORE2}=		Get From List		${SCORE2_LIST}		1		
	Convert To String		${CREDIT_SCORE2}
	WriteToFile			${logfile}					Y					${SCORE2_NAME}: ${CREDIT_SCORE2}
	Set Test Variable		${CREDIT_SCORE2}
	
Score Verification_Three
	[Documentation]			This Keyword Verifies that Records are displayed on Customer Archive page
	...						Pre-requisite : N/A
	...						Note: 		  : N/A
	...				  		Author        : Manish Singh
	
    Wait Until Page Contains Element		//table[@id='DataGridArchive']/tbody/tr[2]/td[6]/span		10s
	${SCORE3}=		Get Text		//table[@id='DataGridArchive']/tbody/tr[2]/td[6]/span
	${SCORE3}=		Run Keyword If		'${SCORE3}'=='None'		Set Variable		${EMPTY}		ELSE		Set Variable	${SCORE3}
	@{SCORE3_LIST}=		Run Keyword If		'${SCORE3}'!= '${EMPTY}'		Split String		${SCORE3}			-		ELSE		Set Variable		${EMPTY}		${EMPTY}
	${SCORE3_NAME}=			Get From List		${SCORE3_LIST}		0
	Set Test Variable		${SCORE3_NAME}
	${CREDIT_SCORE3}=		Get From List		${SCORE3_LIST}		1		
	Convert To String		${CREDIT_SCORE3}
	WriteToFile			${logfile}					Y					${SCORE3_NAME}: ${CREDIT_SCORE3}
	Set Test Variable		${CREDIT_SCORE3}
	
	 
OFAC Verification    [Arguments]   ${Record}   ${OFACColumn} 	
	[Documentation]			This Keyword Verifies that Records are displayed on Customer Archive page
	...						Pre-requisite : N/A
	...						Note: 		  : N/A
	...				  		Author        : Manish Singh
	
    ${CoAppFirstName}=		Get From Dictionary		${Record}		CoApp First Name
	${CoAppLastName}=		Get From Dictionary		${Record}		CoApp Last Name
	${AppFirstName}=	Get From Dictionary		${Record}		First Name
	${AppLastName}=		Get From Dictionary		${Record}		Last Name
	${AppNameSH}=		Catenate 		SEPARATOR=		${AppLastName}		,		${SPACE}		${AppFirstName}
	
   Run Keyword If 		${OFACColumn}==5		Mouse Over 			//table[@id='DataGridArchive']/tbody/tr[2]/td[5]
	...					ELSE IF	  ${OFACColumn}==6		Mouse Over 			//table[@id='DataGridArchive']/tbody/tr[2]/td[6]
	...					ELSE IF	  ${OFACColumn}==7		Mouse Over 			//table[@id='DataGridArchive']/tbody/tr[2]/td[7]
   
   sleep 		2s
   Run Keyword And Ignore Error 	Wait Until Page Contains Element	//html/body//table[@id='StatusBox']	10s
	${text}=		Get Text 		//html/body//table[@id='StatusBox']/tbody
	Log 			${text}			WARN

	${stat}=		Run Keyword And Return Status 	Should Be Empty 	${text}
	
	# TH 20160422 - this ID/OFAC check fails every time. Making a decision to not do the check.
	# # # Run Keyword And Continue On Failure		Run Keyword If 		${stat}		Fail 	No text is shown in ID/OFAC bubble for ${AppNameSH}
	

	Run Keyword If 		${stat}		Return From Keyword
	
	${lines}=		Get Line Count		${text}		# 8
	
	${line1}=		Get Line 	${text}		0
	${line2}=		Get Line 	${text}		1
	${line3}=		Get Line 	${text}		2
	${line4}=		Get Line 	${text}		3
	
	
	${stat}=		Run Keyword And Return Status			 	Get Line 	${text}		4
	Run Keyword And Continue On Failure 	Run Keyword If 		'${CoAppLastName}'!='${EMPTY}' and '${stat}'=='False' 	Fail 	ID/OFAC Information for co-applicant is not shown for ${AppNameSH}.
	
	
	${line5}=		Run Keyword If 		'${CoAppLastName}'!='${EMPTY}' and '${stat}'!='False'		Get Line 	${text}		4		ELSE 	Set Variable 	${EMPTY}
	${line6}=		Run Keyword If 		'${CoAppLastName}'!='${EMPTY}' and '${stat}'!='False'		Get Line 	${text}		5		ELSE 	Set Variable 	${EMPTY}
	${line7}=		Run Keyword If 		'${CoAppLastName}'!='${EMPTY}' and '${stat}'!='False'		Get Line 	${text}		6		ELSE 	Set Variable 	${EMPTY}
	${line8}=		Run Keyword If 		'${CoAppLastName}'!='${EMPTY}' and '${stat}'!='False'		Get Line 	${text}		7		ELSE 	Set Variable 	${EMPTY}
	
	${status}=		Run Keyword And Return Status 	Should Contain 		${text} 	Trans Error
	Run Keyword If 		'${status}'=='True'		Set Test Message 	\nID/OFAC Information is not shown for ${AppNameSH} 		append=yes
	
	# Applicant
	${status}=		Run Keyword And Return Status 	Should Contain 		${line1}		Applicant
		Run Keyword And Continue On Failure 	Run keyword If		'${status}'!='True'		WriteToFile		${LogFile}	Y	Text 'Applicant' is not found in ID/OFAC bubble for ${AppNameSH}
	
	# Red Flags Score
	${status}=		Run Keyword And Return Status 	Should Contain 		${line2}				Red Flags Score: N/A
	
	Run Keyword And Continue On Failure 	Run keyword If				'${status}'=='True'		WriteToFile		${LogFile}	Y	Red Flags Score is not shown in ID/OFAC bubble for ${AppNameSH}
	...				ELSE 					WriteToFile		${LogFile}	Y	 	Applicant: ${AppNameSH} - ${line2}	
	
	# ID Verification
	${status}=		Run Keyword And Return Status 	Should Contain 		${line3}			ID Verification: Trans Error
	
	Run Keyword And Continue On Failure 	Run keyword If				'${status}'=='True'		WriteToFile		${LogFile}	Y	ID Verification Status is not shown in ID/OFAC bubble for ${AppNameSH}
	...				ELSE 					WriteToFile		${LogFile}	Y		Applicant: ${AppNameSH} - ${line3}
	
	# OFAC
	${status}=		Run Keyword And Return Status 	Should Contain 		${line4}			OFAC: Trans Error
	
	Run Keyword And Continue On Failure 	Run keyword If				'${status}'=='True'		WriteToFile		${LogFile}	Y	OFAC Status is not shown in ID/OFAC bubble for ${AppNameSH}
	...				ELSE 					WriteToFile		${LogFile}	Y	 	Applicant: ${AppNameSH} - ${line4}

	
	# Co-Applicant
	${status}=		Run Keyword And Return Status 	Run Keyword If 		'${CoAppLastName}'!='${EMPTY}'		Should Contain 		${line5}		Co-Applicant
	
	Run Keyword And Continue On Failure 	Run keyword If			'${status}'!='True' and '${CoAppLastName}'!='${EMPTY}'			WriteToFile		${LogFile}	Y	Co-Applicant information is not found in ID/OFAC bubble for ${AppNameSH}
	
	# Red Flags Score
	${status}=		Run Keyword And Return Status 	Run Keyword If 		'${CoAppLastName}'!='${EMPTY}'		Should Contain 		${line6}				Red Flags Score: N/A
	
	Run Keyword And Continue On Failure 	Run keyword If				'${status}'=='True' and '${CoAppLastName}'!='${EMPTY}'		WriteToFile		${LogFile}	Y	Co-Applicant: Red Flags Score is not shown in ID/OFAC bubble for ${AppNameSH}	
	
	# ID Verification
	${status}=		Run Keyword And Return Status 	Run Keyword If 		'${CoAppLastName}'!='${EMPTY}'		Should Contain 		${line7}			ID Verification: Trans Error
	
	Run Keyword And Continue On Failure 	Run keyword If				'${status}'=='True' and '${CoAppLastName}'!='${EMPTY}'			WriteToFile		${LogFile}	Y	Co-Applicant: ID Verification Status is not shown in ID/OFAC bubble for ${AppNameSH}	
	
	# OFAC
	${status}=		Run Keyword And Return Status 	Run Keyword If 		'${CoAppLastName}'!='${EMPTY}'		Should Contain 		${line8}			OFAC: Trans Error
	
	Run Keyword And Continue On Failure 	Run keyword If				'${status}'=='True' and '${CoAppLastName}'!='${EMPTY}'		WriteToFile		${LogFile}	Y	Co-Applicant: OFAC Status is not shown in ID/OFAC bubble for ${AppNameSH}	
	
	#Set To Dictionary		${IDOFAC_Bubble_Dict}		${Index}	${text}
   
#########################################################################################################	
Set CRM Routing Data   [Arguments]   ${FOLDER_NAME}

	WriteToFile			${LogFile}				Y		Set CRM Routing Data>>>

	@{LIST_FILENAMES}    List Files In Directory    ${FOLDER_NAME}    *.xml
    ${COUNT_FILES}=    Get Length    ${LIST_FILENAMES}
	Log 	Total Files: ${COUNT_FILES}	
	
	# Get List of App files in folder
	${PATTERN}= 	Catenate	SEPARATOR=		* 	Messaging	*	Notification 		*.xml
	${PASSED}=		Run Keyword And Return Status		List Files In Directory      ${FOLDER_NAME}         ${PATTERN}
	
	@{FILENAMES}       Run Keyword If		${PASSED}	List Files In Directory        ${FOLDER_NAME}         ${PATTERN}      
	...						ELSE		Fail		No xml file is found in folder ${FOLDER_NAME} with pattern *Messaging*.xml
	
	${len}= 	Get Length 		${FILENAMES}
	Log			No. of text files: ${len}	
	
	Run Keyword If 		'${len}'=='${0}'		Fail 	No File is found matching the pattern * xml in ${FOLDER_NAME}.
	:FOR 	${Item}			IN RANGE 	0 	${len}
	\		${FILENAME}=	Get From List 	${FILENAMES}	${Item}
	\		Set Suite Variable 			${FILENAME}
	\		Log 		------------------------------------------------ 	WARN
	\		Log 		Folder Name: ${FOLDER_NAME}		WARN
	\		Log 		File name: ${FILENAME}			WARN
	\		Log 		------------------------------------------------ 	WARN
	\		${PreferenceFile}=	Set Variable	${FOLDER_NAME}\\${FILENAME}
	\		WriteToFile			${LogFile}				Y			File: ${PreferenceFile}
	\		Fetch Values From XML Document    ${PreferenceFile}
	\       Set Values In Message And Notification Section  ${Post_Pref_Msg_Not}
	\       Verify The Updated Values On Review Page   ${Post_Pref_Msg_Not}
	
Open Message And Notification Section In Edit Mode
   [Documentation]			This keyword Opens Messaging and Notification Section in edit mode
	...						Pre-requisite : N/A
	...						Note: 		  : N/A
	...						Return Type   : N/A
	...				  		Author        : Manish Singh
	...						Creation Date : 
	...						Update Date\By: N/A
	
    Navigate To Preferences		NotificationsAndMessaging
	
	# # # Wait Until Keyword Succeeds   240s	3s   	Page Should Contain Element 	//iframe[@id='iFrm']	Frame is not loaded on FD Preferences page.
	# # # Wait Until Page Contains Element            //iframe[@id='iFrm']
	# # # Select Frame                                iFrm
	# # # Wait Until Page Contains Element            //frame[@name='main']
	# # # Select Frame                                main  
	# # # Wait Until Keyword Succeeds       240s      3s         Page Should Contain Element             //a[@href='/FinanceDriver/DealerPartnerIntegration/NotificationAndMessaging?IsEditMode=True'] 		Edit button is not found.	loglevel=NONE		
	# # # Press Key									//a[@href='/FinanceDriver/DealerPartnerIntegration/NotificationAndMessaging?IsEditMode=True']					\\13
	# # # Wait Until Keyword Succeeds       240s      3s          Page Should Contain Element             //input[@id='SaveNotificationsAndMessaging'] 	
		
Get Values From Notification And Messaging Section
    [Documentation]			This keyword Returns values from Messaging and Notification section
	...						Pre-requisite : N/A
	...						Note: 		  : N/A
	...						Return Type   : Dictionary
	...				  		Author        : Manish Singh
	...						Creation Date : 
	...						Update Date\By: N/A
	
	WriteToFile			${LogFile}				Y			Get Values From Notification And Messaging Section>>>	
	
    Open Message And Notification Section In Edit Mode
    ${Exist_Values}=  Create Dictionary   
	${Data}=   Selenium2Library.Get Element Attribute   //input[@id='NotificationEmailAddresses_0_']@value 
	Set To Dictionary		${Exist_Values}			EMail			${Data}
	${Data}=  Selenium2Library.Get Element Attribute   //input[@id='AdfEmailAddresses_0_']@value   
	Set To Dictionary		${Exist_Values}			ADFEMail			${Data}
	${Data}=  Selenium2Library.Get Element Attribute   //input[@id='FromEmail']@value   
	Set To Dictionary		${Exist_Values}			FromEMail			${Data}
	
	${Data}=   Get Value		//table[@id='PrequalificationPassMessage']/tbody/tr[2]/td/textarea
	Set To Dictionary		${Exist_Values}			PrequalPassMessage			${Data}
	
	${Data}=   Get Value		//table[@id='PrequalificationFailMessage']/tbody/tr[2]/td/textarea
	Set To Dictionary		${Exist_Values}			PrequalFailMessage			${Data}
	
	${Data}=   Get Value		//table[@id='ApprovedMessage']/tbody/tr[2]/td/textarea
	Set To Dictionary		${Exist_Values}			LenderApproveMessage			${Data}
	
	Log   ${Exist_Values}	
	Set Suite Variable    ${Exist_Values}
	[Return]			${Exist_Values}	
	
Verify The Updated Values On Review Page   [Arguments]   ${Dict_Val}
   [Documentation]			This keyword Checks upadated values on review page
	...						Pre-requisite : N/A
	...						Note: 		  : N/A
	...						Return Type   : N/A
	...				  		Author        : Manish Singh
	...						Creation Date : 
	...						Update Date\By: N/A

	WriteToFile			${LogFile}				Y			Verify The Updated Values On Review Page>>>
	
    #GetSubStringFromAString
	Wait Until Keyword Succeeds		120s	3s		Page Should Contain Element      //*[@id="DTform"]/table[8]/tbody/tr[3]/td/span				loglevel=NONE
	#${text}=  Get From Dictionary    ${Dict_Val}   EMail
	${val}=  Get From Dictionary   ${Dict_Val}    CRM Format
	${st1}=  Run Keyword And Return Status   Should Contain   ${val}  0
	Run Keyword If  ${st1}==True     NO CRM Routing Enabled
	...   ELSE    CRM Routing Verification    ${Dict_Val}
	
NO CRM Routing Enabled
	[Documentation]			This keyword verifies the preference page when no CRM routing checkbox is selected
	...						Pre-requisite : N/A
	...						Return Type   : N/A
	...				  		Author        : Manish Singh
	...						Creation Date : 
	...						Update Date\By: N/A
	
	${text}=  Get Text   //*[@id="DTform"]/table[8]/tbody/tr[5]/td/span
	${Status}=  Run Keyword And Return Status    Should Contain   ${text}  No partner is configured for LeadDriver routing
	Run Keyword If   ${Status}==True    WriteToFile			${LogFile}				Y			No CRM checkbox value is present on preference page.
	...  ELSE    Run Keyword And Continue On Failure    Fail     Some checkbox value is present on preference page.
	
CRM Routing Verification   [Arguments]  ${Dict_Val}
	[Documentation]			This keyword verifies the preference page when CRM routing checkbox are selected
	...						Pre-requisite : N/A
	...						Return Type   : N/A
	...				  		Author        : Manish Singh
	...						Creation Date : 
	...						Update Date\By: N/A
	
	${st}=   Get From Dictionary   ${Dict_Val}   CRM Format
	 @{List_Format}=		Split String		${st}			,
	${len}=  Get Length    ${List_Format}
	:FOR   ${J}			IN RANGE 	0 	${len}
	\   ${val}=   Get From List    ${List_Format}   ${J}
	\   Verification CRM Checkboxes   ${val}  
	

Verification CRM Checkboxes  [Arguments]   ${val} 
	[Documentation]			This keyword verifies the preference page when no CRM routing checkbox is selected
	...						Pre-requisite : N/A
	...						Return Type   : N/A
	...				  		Author        : Manish Singh
	...						Creation Date : 
	...						Update Date\By: N/A
	
	${cnt}=    Get Matching Xpath Count    //*[text()='can receive\/update leads created by'] 
	@{ss}=   Split String   ${val}  :
	${v1}=   Set Variable   @{ss}[0]
	${v2}=   Set Variable   @{ss}[1]
	${cnt}=   Evaluate   ${cnt} + 5
	${temp}=   Set Variable  0
	:FOR 	${K}		IN RANGE 	5 	${cnt}
	\   ${temp}=  Evaluate    ${temp} + 1
	\   ${text2}=  Get Text   //*[@id="DTform"]/table[8]/tbody/tr[${K}]/td/span
	\   ${sta1}=  Run Keyword And Return Status  Should Contain    ${text2}     ${v1}
	\   ${sta2}=   Run Keyword And Return Status  Should Contain    ${text2}    ${v2}
	\   Run Keyword If  ${sta1}==True and ${sta2}==True   Exit For Loop
	\   ...    ELSE    Continue For Loop
	
	Run Keyword If  ${cnt}==${temp} and ${sta1}!=True and ${sta2}!=True   Run Keyword And Continue On Failure    Fail    Checkboxe value ${v2} is not present under section ${v1} on preference page.
	...   ELSE  WriteToFile			${LogFile}				Y			Checkbox value ${v2} is present under section ${v1} on preference page.
	
	
Fetch Values From XML Document   [Arguments]   ${path}  
    [Documentation]			This keyword Fetch the values from xml into dictionary
	...						Pre-requisite : N/A
	...						Note: 		  : N/A
	...						Return Type   : Dictionary
	...				  		Author        : Manish Singh
	...						Creation Date : 
	...						Update Date\By: N/A

	WriteToFile			${LogFile}				Y			Fetch Values From XML Document>>>
	
	${Post_Pref_Msg_Not} 			Create Dictionary 
	${status}=   Run Keyword And Return Status    Get Element  ${path}    Format
    ${Data}=  Run Keyword If 	${status}==True   Get Element Text   ${path}    Format
	        ...  ELSE   Set Variable    0
	Log   ${Data}		
	#${Data}=   Get Element Text   ${path}    Format
	Set To Dictionary		${Post_Pref_Msg_Not}			CRM Format			${Data}
	${Data}=   Get Element Text   ${path}    EMail
	Set To Dictionary		${Post_Pref_Msg_Not}			EMail			${Data}
	${Data}=   Get Element Text   ${path}    ADFEMail
	Set To Dictionary		${Post_Pref_Msg_Not}			ADFEMail			${Data}
	${Data}=   Get Element Text   ${path}    PrequalPassMessage
	Set To Dictionary		${Post_Pref_Msg_Not}			PrequalPassMessage			${Data}
	${Data}=   Get Element Text   ${path}    PrequalFailMessage
	Set To Dictionary		${Post_Pref_Msg_Not}			PrequalFailMessage			${Data}
	${Data}=   Get Element Text   ${path}    LenderApproveMessage
	Set To Dictionary		${Post_Pref_Msg_Not}			LenderApproveMessage			${Data}
	${Data}=   Get Element Text   ${path}    FromEMail
	Set To Dictionary		${Post_Pref_Msg_Not}			FromEMail			${Data}
	Log    ${Post_Pref_Msg_Not}	
	Set Suite Variable   ${Post_Pref_Msg_Not}
	#[Return]			${Post_Pref_Msg_Not}

Set Values In Message And Notification Section   [Arguments]  ${Dict_Values} 
   [Documentation]			This keyword Set Values in Notification and messaging section
	...						Pre-requisite : N/A
	...						Note: 		  : N/A
	...						Return Type   : N/A
	...				  		Author        : Manish Singh
	...						Creation Date : 
	...						Update Date\By: N/A
	
	WriteToFile			${LogFile}				Y			Set Values In Message And Notification Section>>>
	Open Message And Notification Section In Edit Mode
    ${Val}=  Get From Dictionary    ${Dict_Values}     EMail
	#Input Text   //input[@id='NotificationEmailAddresses_0_']    ${Val}
	${Val}=  Get From Dictionary    ${Dict_Values}     ADFEMail
	#Input Text   //input[@id='AdfEmailAddresses_0_']    ${Val}
	${Val}=  Get From Dictionary    ${Dict_Values}     FromEMail
	#Input Text   //input[@id='FromEmail']    ${Val}
	# enter text in Prequalification pass section
	${Val}=  Get From Dictionary    ${Dict_Values}     CRM Format
	${st}=  Run Keyword And Return Status  Should Contain   ${Val}   0 
	Run Keyword If   ${st}==True    Unselect All Checkbox 
	...  ELSE   Select Given Checkbox   ${Val}

	Wait Until Keyword Succeeds       240s      3s          Page Should Contain Element             //input[@id='SaveNotificationsAndMessaging'] 		Button is not found!	loglevel=NONE				
	Press Key		//input[@id='SaveNotificationsAndMessaging']		\\13

Select Given Checkbox   [Arguments]   ${st}

	WriteToFile			${LogFile}				Y			Select Given Checkbox>>>
	
	@{List_Format}=		Split String		${st}			,
	${len}=  Get Length    ${List_Format}
	Unselect All Checkbox
	:FOR   ${J}			IN RANGE 	0 	${len}
	\   ${val}=  Get From List    ${List_Format}   ${J}
	\   Checkbox Operation   ${Val}
	Sleep  5s
	
Unselect All Checkbox

	WriteToFile			${LogFile}				Y			Unselect All Checkbox>>>
	
   ${xpath}=    Set Variable    //input[@type='checkbox']
   ${count}=    Selenium2Library.Get Webelements    ${xpath}
   Log   ${count}
   :FOR    ${i}    IN RANGE    0    32
    \     ${val}=   Get From List    ${count}    ${i} 
	\     ${status}=  Run Keyword And Return Status    Checkbox Should Be Selected    ${val}
	\     Run Keyword If   ${status}==True    My Operationss    ${val}
  
My Operationss   [Arguments]     ${val}
	 [Documentation]		This keyword handles checkbox selection operation
	...						Pre-requisite : N/A
	...						Note: 		  : N/A
	...						Return Type   : N/A
	...				  		Author        : Manish Singh
	...						Creation Date : 
	...						Update Date\By: N/A
	 Mouse Down      ${val}
	 Mouse Up       ${val}
	
Checkbox Operation	[Arguments]	  ${test1} 
   [Documentation]			This keyword Select checkbox in CRM routing section
	...						Pre-requisite : N/A
	...						Note: 		  : N/A
	...						Return Type   : N/A
	...				  		Author        : Manish Singh
	...						Creation Date : 
	...						Update Date\By: N/A

	WriteToFile			${LogFile}				Y			Checkbox Operation Start>>>
	
    @{ss}=  Split String   ${test1}  :
	${v1}=  Set Variable   @{ss}[0]
	${v2}=  Set Variable   @{ss}[1]
	Log  @{ss}[0]
	Log  @{ss}[1]
	:FOR 	${FDR}			IN RANGE 	3 	7
	\		Log 			${FDR}
	\       ${text1}=  Selenium2Library.Get Element Attribute   //*[@id="DTform"]/table[2]/tbody/tr[${FDR}]/td/span/input[2]@value
	\       Log    ${text1}  
	\       ${text2}=  Set Variable   ${text1}
	\       Run Keyword If   '${text1}'=='${v1}'     Parent Selection     ${FDR}   ${v2}
	\       Run Keyword If   '${text1}'=='${v1}'     Exit For Loop

	WriteToFile			${LogFile}				Y			Checkbox Operation End>>>	
	
Parent Selection      [Arguments]	 ${FDR}   ${v2}
   [Documentation]			This keyword  Identify checkbox in CRM routing section
	...						Pre-requisite : N/A
	...						Note: 		  : N/A
	...						Return Type   : N/A
	...				  		Author        : Manish Singh
	...						Creation Date : 
	...						Update Date\By: N/A
	
	WriteToFile			${LogFile}				Y			Parent Selection Start>>>	
	
      :FOR 	${FDR1}			IN RANGE 	2 	7
	  \		Log 			${FDR}
	  \       ${text2}=  Selenium2Library.Get Element Attribute   //*[@id="DTform"]/table[2]/tbody/tr[${FDR}]/td/span/span[${FDR1}]/input[4]@value
	  \       Run Keyword If   '${text2}'=='${v2}'   Child Selection   ${FDR}   ${FDR1}
	  \		  Run Keyword If   '${text2}'=='${v2}'   Exit For Loop
	  
	WriteToFile			${LogFile}				Y			Parent Selection End>>>		  
	  
Child Selection   [Arguments]	   ${FDR}   ${FDR1}
   [Documentation]			This keyword select the Checkbox in CRM routing section
	...						Pre-requisite : N/A
	...						Note: 		  : N/A
	...						Return Type   : N/A
	...				  		Author        : Manish Singh
	...						Creation Date : 
	...						Update Date\By: N/A
	
	WriteToFile			${LogFile}				Y			Child Selection>>>		  	
	
	   ${Checkbox_Flag}=  Set Variable   //*[@id="DTform"]/table[2]/tbody/tr[${FDR}]/td/span/span[${FDR1}]/input[1]
	   Log   ${Checkbox_Flag}
	   Operation    //*[@id="DTform"]/table[2]/tbody/tr[${FDR}]/td/span/span[${FDR1}]/input[1]
       Set Suite Variable    ${Checkbox_Flag}
	      
Operation    [Arguments]   ${vall}
	 [Documentation]		This keyword handles Keypress operations on desired checkboxes
	...						Pre-requisite : N/A
	...						Return Type   : N/A
	...				  		Author        : Manish Singh
	...						Creation Date : 
	...						Update Date\By: N/A
	
    Mouse Down    ${vall}
	Mouse Up     ${vall}

#######################################################################
Process DTV Validation Loop	[Arguments]			${FOLDER_NAME}	
#######################################################################
	[Documentation]		**********************

	# 1) process all files in passed folder
	# 2) get list of subfolders
	# 3) loop through list of subfolders and process all files in each subfolder
	
	WriteToFile				${logfile}		Y		Process DTV Validation Loop>>>
	WriteToFile				${logfile}		Y		***FoldernameToProcess*** | ${FOLDER_NAME}

	${li_DTV}= 				Create List
	Set Suite Variable		${li_DTV}
	
	#Create a DTVParentList of all the folders and each of their subfolders that exist under the folder that was passed in
	${DTVParentList}=		Create List	
	${DTVParentList}=		Run Keyword				Get Subdirectories 1	${FOLDER_NAME}		${DTVParentList}			#This will return a list of all subfolders and their children for 9 levels deep
	WriteToFile				${logfile}				Y						Folders&Subfolders=${DTVParentList}
	${CountDirectories}=	Get Length				${DTVParentList}
		WriteToFile			${logfile}				Y						Count SubDirectories=${CountDirectories}
	
	##################################################################################
	# Process All DTV Files in Folder 		${FOLDER_NAME}						#This will process any/all files in the root folder [this is not needed here]
	##################################################################################
		
	#Loop and process each one of the folders and subfolders of the passed in folder
	:FOR 	${Item}			IN RANGE 	0 	${CountDirectories}
	\
	\		${SUBFOLDER_NAME}=	Get From List	 	${DTVParentList}	${Item}			#This is the folder that we're processing
	\			WriteToFile		${logfile}			Y				|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
	\			WriteToFile		${logfile}			Y				***SubFoldernameToProcess*** Index=${Item} | ${SUBFOLDER_NAME}
	\
	\		######################################################################################## 
	\		Process All DTV Files in Folder			${SUBFOLDER_NAME}
	\		########################################################################################
	
	#Perform all the UI validation
	${ll}=  							Get Length    		${li_DTV}
	:FOR 	${L}	IN RANGE	0		${ll}
	\    ${DTVlist}=   					Get From List   	${li_DTV} 	  ${L}
	\    Log    ${DTVlist}
	\	 DTV-DTV Validation     		${DTVlist}		
	
###################################################################	
Process All DTV Files in Folder	[Arguments]		${FOLDER_NAME}

	WriteToFile			${logfile}		Y					Process All DTV Files in Folder>>>${FOLDER_NAME}

	DTV-Set DTV Preferences     		${FOLDER_NAME}
	Process All Xml Files				${FOLDER_NAME}
	Append To List						${li_DTV}  			${Global_Dict}
	Log   ${li_DTV}	
		
###################################################################

DTV-Set DTV Access to Dealer   [Arguments]   ${dealer}   ${user}   ${password}
	 [Documentation]		This keyword set DTV access to particular dealer
	...						Pre-requisite : N/A
	...						Return Type   : N/A
	...				  		Author        : Manish Singh
	...						Creation Date : 
	...						Update Date\By: N/A

	WriteToFile			${LogFile}				Y			Setting DTV Access to Dealer>>>
	
	Open Browser					${URL_BASE}${URL_LEADVIEWERACCESS}			chrome
	Maximize Browser Window
	WriteToFile			${LogFile}				Y			URLLeadViewerAccess=${URL_BASE}${URL_LEADVIEWERACCESS}
	
	Input Text  //*[@id="login"]/div[1]/input  ${user}
	
	#Enter password
	Input Password  //*[@id="login"]/div[2]/input[2]  ${password}
	Sleep 	2s
	
	#Click on the SignIn button
	Click Element  	//*[@id="login"]/input[6]
	
	Wait Until Page Contains		FinanceDriver DTV Pilot Access
	WriteToFile			${LogFile}				Y			User Is Logged In
	Input Text		//*[@id="add-container"]/input[1]		${dealer} 
	
	Click Element		//*[@id="add-container"]/input[2]
	Sleep  10s
	WriteToFile			${LogFile}				Y			Dealer is added to DTV list>>>
	DTV-PivotDealerFilter  ${dealer} 
	
#########################################################################################################	
DTV-PivotDealerFilter   [Arguments]    ${dealer} 
	 [Documentation]		This keyword search the dealer In dealer list
	...						Pre-requisite : N/A
	...						Return Type   : N/A
	...				  		Author        : Manish Singh
	...						Creation Date : 
	...						Update Date\By: N/A
	
    WriteToFile			${LogFile}				Y			Checking Existance of dealer In DTV >>>
	Input Text		//*[@id="filter-container"]/form/input[1] 	${dealer} 
	
	Click Element		//*[@id="filter-container"]/form/input[2]
	Sleep  10s
	${rowCount}=		Get Matching Xpath Count		//*[@id="grid"]/table/tbody/tr
	
	Run Keyword If   ${rowCount}==1    WriteToFile			${LogFile}				Y			Dealer is present to DTV list>>>
	Set Test Variable		${rowCount}

#########################################################################################################	
DTV-RemovePivotDealerAccess  [Arguments]   ${dealer}
	 [Documentation]		This keyword search the dealer In dealer list
	...						Pre-requisite : N/A
	...						Return Type   : N/A
	...				  		Author        : Manish Singh
	...						Creation Date : 
	...						Update Date\By: N/A
	
	WriteToFile			${LogFile}				Y			Removing dealer From DTV >>>
	DTV-PivotDealerFilter   ${dealer}

	Select Checkbox		Id
	
	Click Element		btnRemove
	
	Sleep		10s
	
	Click Button		//button[@type='button']
	Sleep  10s
    WriteToFile			${LogFile}				Y			Dealer Is removed From dealer list

###########################################################################################################

DTV-Set DTV Preferences   [Arguments]   ${FOLDER_NAME}
	 [Documentation]		This keyword set the DTV preferences on preference page
	...						Pre-requisite : N/A
	...						Return Type   : N/A
	...				  		Author        : Manish Singh
	...						Creation Date : 
	...						Update Date\By: N/A
	
	WriteToFile			${logfile}		Y				DTV-Set DTV Preferences>>>${FOLDER_NAME}	
	
	# Get List of DTV_Preferences files in folder
	${PATTERN}= 	Catenate	SEPARATOR=		* 	DTV	*	Preferences 		*.txt
	${PASSED}=		Run Keyword And Return Status		List Files In Directory      ${FOLDER_NAME}         ${PATTERN}
	
	@{FILENAMES}       Run Keyword If		${PASSED}	List Files In Directory        ${FOLDER_NAME}         ${PATTERN}      
	...						ELSE		Fail		No file is found in folder ${FOLDER_NAME} with pattern *DTV*.txt
	
	${len}= 	Get Length 		${FILENAMES}
	Log			No. of xml files: ${len}	
	
	:FOR 	${Item}			IN RANGE 	0 	${len}
	\		${FILENAME}=	Get From List 	${FILENAMES}	${Item}
	\		Set Suite Variable 			${FILENAME}
	\		Log 		------------------------------------------------ 	WARN
	\		Log 		Folder Name: ${FOLDER_NAME}		WARN
	\		Log 		File name: ${FILENAME}			WARN
	\		Log 		------------------------------------------------ 	WARN
	\		${DTVPreferenceFile}=	Set Variable	${FOLDER_NAME}\\${FILENAME}
	\		WriteToFile			${LogFile}				Y			DTV Prefs File: ${DTVPreferenceFile}
	\		DTV-Fetch Values From DTV XML Document    ${DTVPreferenceFile}
	\       DTV-Set Values In DTV Section  ${DTV_Dict}
	#\       DTV-Verify DTV Values On Review Page   ${DTV_Dict}

###########################################################################################################

DTV-Fetch Values From DTV XML Document   [Arguments]   ${path}  
    [Documentation]			This keyword Fetch the values from xml into dictionary
	...						Pre-requisite : N/A
	...						Note: 		  : N/A
	...						Return Type   : Dictionary
	...				  		Author        : Manish Singh
	...						Creation Date : 
	...						Update Date\By: N/A

	WriteToFile			${LogFile}				Y			DTV-Fetch Values From DTV XML Document>>>
	
	${DTV_Dict} 			Create Dictionary 
	
    ${Data}=   Get Element Text   ${path}    Option	
	Set To Dictionary		${DTV_Dict}			Option			${Data}
	${Data}=   Get Element Text   ${path}    BookType
	Set To Dictionary		${DTV_Dict}			BookType			${Data}
	${Data}=   Get Element Text   ${path}    Condition
	Set To Dictionary		${DTV_Dict}			Condition			${Data}
	Log    ${DTV_Dict}	
	WriteToFile			${LogFile}				Y			DTV Dict:${DTV_Dict}	 
	Set Suite Variable   ${DTV_Dict}
	#[Return]			${DTV_Dict}

###########################################################################################################	
DTV-Set Values In DTV Section   [Arguments]  ${DTV_Dict} 
   [Documentation]			This keyword Set Values in DTV section
	...						Pre-requisite : N/A
	...						Note: 		  : N/A
	...						Return Type   : N/A
	...				  		Author        : Manish Singh
	...						Creation Date : 
	...						Update Date\By: N/A
	
	WriteToFile			${LogFile}				Y			DTV-Set Values In DTV Section>>>
	# for CRM preferences
	Navigate To Preferences						PrequalificationsAndRouting
	#Navigate To CRM
	#Sleep  3s
	#Wait Until Keyword Succeeds   240s	3s   	Page Should Contain Element 	//iframe[@id='iFrm']	Frame is not loaded on FD Preferences page.
	#Wait Until Page Contains Element            //iframe[@id='iFrm']
	#Select Frame                                iFrm
	#Wait Until Page Contains Element            //frame[@name='main']
	#Select Frame                                main  
	#Wait Until Keyword Succeeds       240s      3s         Page Should Contain Element             //a[@href='/FinanceDriver/DealerPartnerIntegration/PrequalificationAndRouting?IsEditMode=True'] 		Edit button is not found.	loglevel=NONE		
	#Press Key									//a[@href='/FinanceDriver/DealerPartnerIntegration/PrequalificationAndRouting?IsEditMode=True']					\\13
	#Wait Until Keyword Succeeds       240s      3s          Page Should Contain Element             //input[@id='SavePrequalificationAndRouting'] 	
	Sleep  3s
	#Sleep  30s
       ${Val}=  Get From Dictionary    ${DTV_Dict}     Option
	Run Keyword If  ${Val}==True  Select Checkbox  //input[@id='IsAutoBookValuation']
	...   ELSE   Return From Keyword
	
	${Val}=  Get From Dictionary    ${DTV_Dict}     BookType
	Select From List By Label   //select[@id='BookCode']  ${Val}
	
	${Val}=  Get From Dictionary    ${DTV_Dict}     Condition
	Select From List By Label   //select[@id='BookConditionCode']   ${Val}
	

	Wait Until Keyword Succeeds       240s      3s          Page Should Contain Element             //input[@id='SavePrequalificationAndRouting'] 		Button is not found!	loglevel=NONE				
	Press Key		//input[@id='SavePrequalificationAndRouting']		\\13
	Wait Until Keyword Succeeds               120s                   3s                   Page Should Contain Element             //*[text()='Leads Partner Integration | Edit Setup'] 			loglevel=NONE	
	sleep 	5s
	Unselect Frame

###########################################################################################################
	
DTV-Verify DTV Values On Review Page  [Arguments]    ${DTV_Dict}	
   [Documentation]			This keyword verifies values in DTV section on preference page
	...						Pre-requisite : N/A
	...						Note: 		  : N/A
	...						Return Type   : N/A
	...				  		Author        : Manish Singh
	...						Creation Date : 
	...						Update Date\By: N/A
	
	${text}=  Get Text   //*[@id="DTform"]/table[6]/tbody/tr[2]/td/span[1]
	${val}=  Get From Dictionary   ${DTV_Dict}  Option
    ${val1}=   Run Keyword If   ${val}==False  Set Variable   N
	            ...   ELSE   Set Variable   Y
	Run Keyword If  '${text}'=='${val1}'	 Log   Values are set: ${val1}  
    ...   ELSE    Fail  	${text} ${val1}
	
	${text}=  Get Text   //*[@id="DTform"]/table[6]/tbody/tr[2]/td/span[2]
	${val}=  Get From Dictionary   ${DTV_Dict}   BookType
	
	${val1}=   Run Keyword If   ${val}!=NONE  Set Variable   ${val}
	            ...   ELSE   Set Variable   NONE
				
	Run Keyword If  '${text}'=='${val1}'	 Log   Values are set: ${val1}  
    ...   ELSE    Fail  	${text} ${val1}	

    ${text}=  Get Text   //*[@id="DTform"]/table[6]/tbody/tr[2]/td/span[3]
	${val}=  Get From Dictionary   ${DTV_Dict}   Condition
	
	${val1}=   Run Keyword If   ${val}!=NONE  Set Variable   ${val}
	            ...   ELSE   Set Variable   NONE
				
	Run Keyword If  '${text}'=='${val1}'	 Log   Values are set: ${val1}  
    ...   ELSE    Fail  	${text} ${val1}	


#########################################################################################################
DTV-DTV Validation  [Arguments]   ${Ddict}
	WriteToFile			${LogFile}				Y			DTV-Validation>>>
	Log Dictionary  ${Ddict}
	Sleep  20s
	Go To					${LOGINURL}
	${DTVDict}=  Create Dictionary
	${len}=		Get Length 		${Ddict}
	
	:FOR 	${I}	IN RANGE 	0	${len}
	\       ${dict}=  Create Dictionary
	\       Set Test Variable   ${dict}
	\		${req_dict}=	Get From Dictionary		${Ddict}		${I}
	\        ${filename_now}= 		Get From Dictionary		${req_dict}		Filename
	\       ${fname}=  Get From Dictionary  ${req_dict}   First Name
	\       Set To Dictionary    ${dict}   First Name    ${fname}
	\       ${lname}=  Get From Dictionary  ${req_dict}   Last Name
	\       Set To Dictionary    ${dict}   Last Name   ${lname}
	\        ${input_folder_path}=  Get From Dictionary   ${req_dict}   Input Folder
	\        ${file_loc}=  Catenate   SEPARATOR=    ${input_folder_path}  \\${filename_now}
	\        DTV-Fetch Values From XML    ${file_loc} 
	\       Set To Dictionary  ${DTVDict}  ${I}   ${dict}
	Set Suite Variable  ${DTVDict}  
	${list22}=  Get Dictionary Keys   ${DTVDict} 
	Sleep  10s
	DTV-Verify wholesale_Invoice Value On UI
	
    Log Dictionary   ${DTVDict} 

###########################################################################################################	
DTV-DTV Verification   [Arguments]   ${DTVSleep}
   [Documentation]			This keyword verifies values in DTV section on preference page
	...						Pre-requisite : N/A
	...						Note: 		  : N/A
	...						Return Type   : N/A
	...				  		Author        : Manish Singh
	...						Creation Date : 
	...						Update Date\By: N/A
	
	WriteToFile			${LogFile}				Y			DTV Verification
    Sleep    ${DTVSleep}
	Log Dictionary  ${Global_Dict}
	${DTVDict}=  Create Dictionary
	${len}=		Get Length 		${Global_Dict}
	
	:FOR 	${I}	IN RANGE 	0	${len}
	\       ${dict}=  Create Dictionary
	\       Set Test Variable   ${dict}
	\		${req_dict}=	Get From Dictionary		${Global_Dict}		${I}
	\        ${filename_now}= 		Get From Dictionary		${req_dict}		Filename
	\       ${fname}=  Get From Dictionary  ${req_dict}   First Name
	\       Set To Dictionary    ${dict}   First Name    ${fname}
	\       ${lname}=  Get From Dictionary  ${req_dict}   Last Name
	\       Set To Dictionary    ${dict}   Last Name   ${lname}
	\        ${input_folder_path}=  Get From Dictionary   ${req_dict}   Input Folder
	\        ${file_loc}=  Catenate   SEPARATOR=    ${input_folder_path}  \\${filename_now}
	\        DTV-Fetch Values From XML    ${file_loc} 
	\       Set To Dictionary  ${DTVDict}  ${I}   ${dict}
	Set Suite Variable  ${DTVDict}  
	${list22}=  Get Dictionary Keys   ${DTVDict} 
	Sleep  10s
	DTV-Verify wholesale_Invoice Value On UI
	
    Log Dictionary   ${DTVDict} 

###########################################################################################################	
DTV-Fetch Values From XML  [Arguments]   ${path} 
    [Documentation]			This keyword Fetch the values from xml into dictionary
	...						Pre-requisite : N/A
	...						Note: 		  : N/A
	...						Return Type   : Dictionary
	...				  		Author        : Manish Singh
	...						Creation Date : 
	...						Update Date\By: N/A

	WriteToFile			${LogFile}				Y			Fetch Values From XML>>>
	
	${path1}=   Parse Xml    ${path}
	${st1}=    Get Element Count  ${path1}   ProductInfo/InvoiceAmount
    ${val33}=   Run Keyword If   ${st1}==1    Get Element Text   ${path}    ProductInfo/InvoiceAmount
	            ...  ELSE   Get Element Text   ${path}    ProductInfo/WholesaleValue
				
	Run Keyword If   ${st1}==1   Set To Dictionary   ${dict}   InvoiceAmount  	${val33}
	...    ELSE   Set To Dictionary   ${dict}  WholesaleValue  	${val33}
	${cond}=  Get Element Text   ${path}    VehicleInfo/VehicleCondition
	Set To Dictionary   ${dict}   VehCond   	${cond}
	
###########################################################################################################	
DTV-Verify wholesale_Invoice Value On UI
	 [Documentation]			This keyword Fetch the values from xml into dictionary
	...						Pre-requisite : N/A
	...						Note: 		  : N/A
	...						Return Type   : Dictionary
	...				  		Author        : Manish Singh
	...						Creation Date : 
	...						Update Date\By: N/A
	
   Log Dictionary   ${DTVDict}
   WriteToFile			${LogFile}				Y			DTV Dict: ${DTVDict}
   
   ${len}=		Get Length 		${DTVDict}
	
	:FOR 	${I}	IN RANGE 	0	${len}
	\		${req_dict}=	Get From Dictionary		${DTVDict}		${I}
	\       ${cond}= 		Get From Dictionary		${req_dict}		VehCond
    \       Run Keyword If  	 '${cond}'=='Used' or '${cond}'=='Demo'     DTV-Wholesale Value Verification   ${req_dict}
	\       ...  ELSE   DTV-Invoice Value Verification   ${req_dict}
	\       Navigate To Transmission Status Page

###########################################################################################################
DTV-Wholesale Value Verification   [Arguments]   ${req_dict}	
	 [Documentation]			This keyword Fetch the values from xml into dictionary
	...						Pre-requisite : N/A
	...						Note: 		  : N/A
	...						Return Type   : Dictionary
	...				  		Author        : Manish Singh
	...						Creation Date : 
	...						Update Date\By: N/A
    Navigate To Transmission Status Page
	
	Wait Until Page Contains Element            //iframe[@id='iFrm']
	Select Frame                                iFrm
	Wait Until Page Contains Element            //frame[@name='main']
	Select Frame                                main
	${Lname}=  Get From Dictionary    ${req_dict}  Last Name
	#WriteToFile			${LogFile}				Y			DTV verification for last name:${Lname}
	Input Text    TextBoxSearchEntry    ${Lname}
	Click Element    btnSearch
	Sleep  5s
    ${flag}=  Run Keyword And Return Status     Page Should Contain Element 	//td[@id='TDErrorMsg']
	Run Keyword If    ${flag}==True    WriteToFile			${LogFile}				Y			Applicant with Last Name not found:${Lname}
	Run Keyword If    ${flag}==True    Run Keyword And Continue On Failure    Fail    Applicant is not found with last name! - ${Lname}
	Run Keyword If    ${flag}==True   Run Keyword And Return   Navigate To Transmission Status Page
	Mouse Over    //table[@id='DataGridTran']/tbody/tr[2]/td[2]/a
	
	Click Element   LinkView
	Sleep  3s	
	Wait Until Page Contains Element      app_wholesale_value	
	${text1}=  Get Value  app_wholesale_value
	${wVal}=   Get From Dictionary    ${req_dict}   WholesaleValue 
	Run Keyword If   ${wVal}==1   DTV-Random Value verification   ${req_dict}   ${text1}
	...  ELSE    DTV-Actual Value Verification    ${req_dict}   ${wVal}  ${text1}

###########################################################################################################
DTV-Invoice Value Verification   [Arguments]   ${req_dict}
	[Documentation]			This keyword Fetch the values from xml into dictionary
	...						Pre-requisite : N/A
	...						Note: 		  : N/A
	...						Return Type   : Dictionary
	...				  		Author        : Manish Singh
	...						Creation Date : 
	...						Update Date\By: N/A	
	Navigate To Transmission Status Page
	
	Wait Until Page Contains Element            //iframe[@id='iFrm']
	Select Frame                                iFrm
	Wait Until Page Contains Element            //frame[@name='main']
	Select Frame                                main
	${Lname}=  Get From Dictionary    ${req_dict}  Last Name
	#WriteToFile			${LogFile}				Y			DTV verification for last name:${Lname}
	Input Text    TextBoxSearchEntry    ${Lname}
	Click Element    btnSearch
	Sleep  5s
	${flag}=  Run Keyword And Return Status     Page Should Contain Element 	//td[@id='TDErrorMsg']
	Run Keyword If    ${flag}==True    WriteToFile			${LogFile}				Y			Applicant with Last Name not found:${Lname}
	Run Keyword If    ${flag}==True    Run Keyword And Continue On Failure    Fail    Applicant is not found with last name! - ${Lname}
	Run Keyword If    ${flag}==True   Run Keyword And Return   Navigate To Transmission Status Page
	
	Mouse Over    //table[@id='DataGridTran']/tbody/tr[2]/td[2]/a
	Click Element   LinkView
	Sleep  3s	
	Wait Until Page Contains Element      app_invoice_amt    
	${text1}=  Get Value  app_invoice_amt
	${wVal}=   Get From Dictionary    ${req_dict}   InvoiceAmount
	Run Keyword If   ${wVal}==1   DTV-Random Value verification   ${req_dict}   ${text1}
	...   ELSE   DTV-Actual Value Verification  ${req_dict}   ${wVal}   ${text1}
	
###########################################################################################################	
DTV-Random Value verification   [Arguments]   ${req_dict}  ${val}
   [Documentation]			This keyword verify random value on UI other than 1
	...						Pre-requisite : N/A
	...						Note: 		  : N/A
	...						Return Type   : Dictionary
	...				  		Author        : Manish Singh
	...						Creation Date : 
	...						Update Date\By: N/A
	${lname}=  Get From Dictionary      ${req_dict}   Last Name
	Run Keyword If  ${val}!=1   WriteToFile			${LogFile}				Y		DTV Verification for Last Name ${lname}-Changed value after DTV integration:${val}
	...   ELSE   Run keyword And Continue On Failure    Fail    DTV Verification for Last Name ${lname}-Actual value is unchanged after DTV integration:1

###########################################################################################################
DTV-Actual Value Verification   [Arguments]   ${req_dict}   ${val1}   ${val2}
	[Documentation]			This keyword Actual and expected value
	...						Pre-requisite : N/A
	...						Note: 		  : N/A
	...						Return Type   : Dictionary
	...				  		Author        : Manish Singh
	...						Creation Date : 
	...						Update Date\By: N/A
	
	 ${lname}=  Get From Dictionary      ${req_dict}    Last Name 
     Run Keyword If  ${val1}== ${val2}   WriteToFile			${LogFile}				Y			DTV Verification for ${lname}-Actual value unchanged after DTV integration:${val1}
	 ...   ELSE   Run keyword And Continue On Failure   Fail   DTV Verification for ${lname}-Actual and expectd values are not equal:${val1},${val2}
	 
###########################################################################################################	 

CLDV-Lead Dict Creation
    [Documentation]			This keyword Creates dictionary from requested xml CLDV
	...						Pre-requisite : N/A
	...						Note: 		  : CLDV stands for Classic Leads Detail Validation
	...						Return Type   : Dictionary
	...				  		Author        : Manish Singh
	...						Creation Date : 
	...						Update Date\By: N/A

    Log Dictionary  ${Global_Dict}
 	 ${len}=		Get Length 		${Global_Dict}
	${xmlDict}=   Create Dictionary
	:FOR 	${I}	IN RANGE 	0	${len}
	\       ${dict}=  Create Dictionary
	\       Set Test Variable   ${dict}
	\		${req_dict}=	Get From Dictionary		${Global_Dict}		${I}
	\       ${filename_now}= 		Get From Dictionary		${req_dict}		Filename
	\       ${fname}=  Get From Dictionary  ${req_dict}   First Name
	\       Set To Dictionary    ${dict}   First Name    ${fname}
	\       ${lname}=  Get From Dictionary  ${req_dict}   Last Name
	\       ${CoApplname}=   Get From Dictionary  ${req_dict}   CoApp Last Name
	\       Set To Dictionary    ${dict}   Last Name   ${lname}
	\       Set To Dictionary    ${dict}   Last Name   ${lname}
	\       Set To Dictionary    ${dict}   CoApp Last Name   ${CoApplname}
	\       ${TC}=  Get From Dictionary  ${req_dict}   TransCode
	\		Set To Dictionary    ${dict}   TransCode   ${TC}
	\       ${input_folder_path}=  Get From Dictionary   ${req_dict}   Input Folder
	\       ${fieldFile}=  Run Keyword If  ${TC} ==1   Set Variable    App Xml Fields.txt    #xml filed file path
	\                      ...   ELSE     Set Variable    Lead Xml Fields.txt     #xml filed file path
	\        ${file_loc}=  Catenate   SEPARATOR=    ${input_folder_path}  \\${filename_now}
	\         ${fieldFile}=  Catenate   SEPARATOR=    ${input_folder_path}  \\${fieldFile}
	\        CLDV-Fetching Values From XML    ${file_loc}   ${fieldFile}
	\       Set To Dictionary  ${xmlDict}  ${I}   ${dict}
	Set Suite Variable  ${xmlDict}  
	Log Dictionary    ${xmlDict}
	WriteToFile			${LogFile}				Y			xml dict:${xmlDict}
	
CLDV-Fetching Values From XML   [Arguments]  ${file_loc}   ${fieldFile}	
    [Documentation]			This keyword creates key value pair from xml
	...						Pre-requisite : N/A
	...						Note: 		  : N/A
	...						Return Type   : Dictionary
	...				  		Author        : Manish Singh
	...						Creation Date : 
	...						Update Date\By: N/A

     ${path1}=   Parse Xml    ${file_loc}
	 
	${fieldFile}=				Get File				${fieldFile}
	@{AuditLines}= 			Split To Lines 			${fieldFile}	
	:FOR 	${xmlNode}			IN 		 							@{AuditLines}
	\    ${key}	${xpath}=									Split String		${xmlNode}			-
	\    ${Stat1}=    		Run Keyword And Return Status    XML.Get Element Text    ${path1}    ${xpath}
	\    ${val}=     Run Keyword If    ${Stat1}    XML.Get Element Text    ${path1}    ${xpath}
    \               ...    ELSE    		Set Variable    ${EMPTY}
	\    Set To Dictionary    ${dict}    ${key}    ${val}
	 
#########################################################################

CLDV-Lead Details Page Verification
    [Documentation]			This keyword verifies information on lead details page
	...						Pre-requisite : N/A
	...						Note: 		  : N/A
	...						Return Type   : Dictionary
	...				  		Author        : Manish Singh
	...						Creation Date : 
	...						Update Date\By: N/A
		
	Log Dictionary  ${xmlDict}
	${len}=		Get Length 		${xmlDict}
	
	:FOR 	${I}	IN RANGE 	0	${len}
	\		${req_dict}=	Get From Dictionary		${xmlDict}		${I}
	\       ${lname}= 		Get From Dictionary		${req_dict}	  Last Name
	\       CLDV-Verify Lead Details Page Information   ${req_dict}

#####################################################################

CLDV-Verify Lead Details Page Information  [Arguments]   ${req_dict}
    [Documentation]			This keyword search the customer on leads page and open the details page
	...						Pre-requisite : N/A
	...						Note: 		  : N/A
	...						Return Type   : Dictionary
	...				  		Author        : Manish Singh
	...						Creation Date : 
	...						Update Date\By: N/A

	Navigate To My Leads
	Unselect Frame
	Wait Until Page Contains Element            //iframe[@id='iFrm']
	Select Frame                                iFrm
	Wait Until Page Contains Element            //frame[@name='main']
	Select Frame                                main
	${lastname}=  Get From Dictionary   ${req_dict}  Last Name
	Wait Until Keyword Succeeds 	60	3	Page Should Contain Element 	//tr[@id='pagerRow']	Page navigator is not present on page.	loglevel=None
	Input Text   SearchEntryTextBox     ${lastname} 
	Press Key		//input[@id='btnSearch']		\\13
	Sleep  10s
	${flag}=  Run Keyword And Return Status     Page Should Contain Element 	//div[@id='errMsgIs']
	Run Keyword If    ${flag}==True    WriteToFile			${logfile}					Y					Failed to find Last Name! - ${lname}
	Run Keyword If    ${flag}==True    Run Keyword And Continue On Failure    Fail    Applicant is not found with last name! - ${lname}
	Run Keyword If    ${flag}==True    Run Keyword And Return      Log   Failed to find Last Name! - ${lname}
	Unselect Frame
	Wait Until Page Contains Element            //iframe[@id='iFrm']
	Select Frame                                iFrm
	Wait Until Page Contains Element            //frame[@name='main']
	Select Frame                                main
	Wait Until Keyword Succeeds 	60	3			Page Should Contain Element 	//table[@id='DGLeadsReport']/tbody/tr[2]/td[3]/a	  Applicant is not found on page.	loglevel=None
	Press Key   //table[@id='DGLeadsReport']/tbody/tr[2]/td[3]/a     \\13
	Sleep  2s
	Wait Until Keyword Succeeds 	60	3			Page Should Contain Element             //*[text()='Lead Detail'] 			loglevel=NONE
	CLDV-Verify Lead Information   ${req_dict}
	CLDV-Verify Primary Applicant Information  ${req_dict}
	${CoAppLName}=  Get From Dictionary   ${req_dict}   CoApp Last Name
	Run Keyword If   '${CoAppLName}'!='${EMPTY}'    CLDV-Verify CoApplicant Information  ${req_dict}
	...  ELSE    WriteToFile			${LogFile}				Y			CoApplicant data verification is not requested
	CLDV-Financial Verification    ${req_dict}

##################################################################
CLDV-Financial Verification   [Arguments]   ${record}
    [Documentation]			This keyword Verifies the info on finance section on lead details page
	...						Pre-requisite : N/A
	...						Note: 		  : N/A
	...						Return Type   : Dictionary
	...				  		Author        : Manish Singh
	...						Creation Date : 
	...						Update Date\By: N/A
	WriteToFile			${LogFile}				Y			Financial Info Verification>>>>
	WriteToFile			${LogFile}				Y			----------------------------------------
	${finance_req} 		Get Text  	//*[@id="table1"]/tbody/tr[2]/td[1]		
	Log 	${finance_req} 	Warn
	CLDV-Verify Finance Requirements 	${record} 	${finance_req}
	
	${vehicle_finance_data} 		Get Text  	//*[@id="table1"]/tbody/tr[4]/td
	Log 	${vehicle_finance_data} 	Warn
	CLDV-Verify Vehicle To Finance 	${record} 	${vehicle_finance_data}

	${trade_in_vehilce_data} 		Get Text  	//*[@id="table4"]/tbody/tr/td[2]
	Log 	${trade_in_vehilce_data} 	Warn
	CLDV-Verify Trade In Vehilce Info 	${record} 	${trade_in_vehilce_data}
	
################################################################
CLDV-Verify Lead Information  [Arguments]  ${req_dict}	
    [Documentation]			This keyword verifies info on top section of lead details page(Applicant basic info)
	...						Pre-requisite : N/A
	...						Note: 		  : N/A
	...						Return Type   : Dictionary
	...				  		Author        : Manish Singh
	...						Creation Date : 
	...						Update Date\By: N/A
	
	Unselect Frame
	Wait Until Page Contains Element            //iframe[@id='iFrm']
	Select Frame                                iFrm
	Wait Until Page Contains Element            //frame[@name='main']
	Select Frame                                main
	
	${lname}=  Get From Dictionary   ${req_dict}  Last Name
	WriteToFile			${LogFile}				Y			$Data Verification for Applicant:${lname}
	WriteToFile			${LogFile}				Y			----------------------------------------
	WriteToFile			${LogFile}				Y			Applicant Info Verification in Top Section>>>>
	WriteToFile			${LogFile}				Y			----------------------------------------
	# Name Verification
	${val}=  Get Text   //*[@id="Name"]
	${fname}=  Get From Dictionary   ${req_dict}  First Name
	${STR1}=			Catenate		SEPARATOR=			${SPACE}				${fname}
	${FullName}=  Catenate 	SEPARATOR=, 	${lname} 	 ${STR1}
	CLDV-Comparision Operation   Name	${val}  ${FullName}
	
	# Street Verification
	${val}=  Get Text   //*[@id="StreetAddress"]
	${UprCseAddr}=		Convert To Uppercase		${val}
	${SplitAddress}=		Split String		${UprCseAddr}
	Sort List		${SplitAddress}
	${Addressline1}=  Get From Dictionary   ${req_dict}   PAddressLine1
	${Addressline2}=  Get From Dictionary   ${req_dict}   PAddressLine2
	${fullAddress}=   Catenate		  ${Addressline1}    ${Addressline2} 
	${fullAddress}=   CLDV-Address Parser   ${fullAddress}
	CLDV-Address Comparision Operation 	Street   ${SplitAddress}  ${fullAddress}
	
	# City State Zip Verification
	${val}=  Get Text   //*[@id="TownStateZip"]
	${Town}=  Get From Dictionary   ${req_dict}   PCity
	${State}=  Get From Dictionary   ${req_dict}   PState
	${Zip}=  Get From Dictionary   ${req_dict}   PZipCode
	${fullPostAddress}=  Catenate     ${Town}   ${State}   ${Zip}
	CLDV-Comparision Operation 	City State Zip  ${val}  ${fullPostAddress}
	
	# HomePhone Verification
	${val}=  Get Text   //*[@id="Phone"]
	${val}=  CLDV-UI Phone Conversion  ${val}
	${Phone}=  Get From Dictionary   ${req_dict}   PHomePhone
	CLDV-Comparision Operation 	Home Phone  ${val}  ${Phone}
	
	# Email Address Verification
	${val}=  Get Text   //div[@class="AppInfo"]/a[2]
	${Email}=  Get From Dictionary   ${req_dict}   PEmailAddress
	CLDV-Comparision Operation 	Email  ${val}  ${Email}
	
###################################################################
CLDV-Verify Primary Applicant Information  [Arguments]  ${req_dict}
    [Documentation]			This keyword verifies Primary applicant info in third section of leads details page
	...						Pre-requisite : N/A
	...						Note: 		  : N/A
	...						Return Type   : Dictionary
	...				  		Author        : Manish Singh
	...						Creation Date : 
	...						Update Date\By: N/A

	WriteToFile			${LogFile}				Y			Primary Applicant Info Verification>>>>
	WriteToFile			${LogFile}				Y			----------------------------------------
	###Personal info verification
	${ApplicantText}=		CLDV-Get Information		//*[@id="table14"]/tbody/tr[4]/td[1]
	@{list1}=  Create List   First Name   Last Name   PSuffix
	@{list2}=  Create List   First Name   PMiddleName   Last Name   PSuffix
	${mname}=  Get From Dictionary   ${req_dict}   PMiddleName
	@{list}=  Run Keyword If   '${mname}'!='${EMPTY}'   Set Variable   @{list2}
	          ...  ELSE    Set Variable   @{list1}
			  
	CLDV-Multi Value Comparision   ${ApplicantText}   0   ${req_dict}   @{list} 
	# SSN Verification
	${UISSN}=  Get From List   ${ApplicantText}  1
	${UISSN_Conv}=   CLDV-SSN Last Four Digit Fetch   ${UISSN}
	${PSSN}=  Get From Dictionary   ${req_dict}   PSSN
    ${PSSN_Conv}=   CLDV-SSN Last Four Digit Fetch   ${PSSN}
	CLDV-Comparision Operation   PSSN   ${UISSN_Conv}   ${PSSN_Conv}
	
	# DOB Verification
	${UIDOB}=  Get From List   ${ApplicantText}  2
	${UIDOB}=   CLDV-DOB Conversion   ${UIDOB}
	${PDOB}=  Get From Dictionary   ${req_dict}   PDOB
	CLDV-Comparision Operation   PDOB  ${UIDOB}   ${PDOB}
	
	# Email Address Verification
	CLDV-Single Value Comparision	 ${ApplicantText}  3  ${req_Dict}  PEmailAddress
	
	# Applicant current residential Verification
	${AppDetails}=		CLDV-Get Information		//*[@id="table14"]/tbody/tr[7]/td[1]
	@{dict_List}=  Create List  PAddressLine1  PAddressLine2  PCity   PState   PZipCode  PHomePhone
				   ...   PTotalMonthsAtAddress	 PHousingStatus  PMortgageOrRent
	
	${RT_Add1}=  Get From Dictionary   ${req_Dict}   PAddressLine1
	${RT_Add2}=  Get From Dictionary   ${req_Dict}   PAddressLine2
	
	${Add_RT}=  Catenate   ${RT_Add1}  ${RT_Add2}
	${st_RT1}=  Run Keyword And Return Status		Should Contain		${Add_RT}	 RR
	${st_RT2}=  Run Keyword And Return Status		Should Contain		${Add_RT}	 PO
	Run Keyword If   ${st_RT1}==True or ${st_RT2}==True   Insert Into List    ${AppDetails}  0  ${SPACE}
					...  ELSE   Set Variable   ${AppDetails}		
	CLDV-Residential Information Verification   ${AppDetails}   ${req_dict} 	 @{dict_List}
	
	# Applicant previuos residential Verification
	${AppPrevRedidentialDetails}=		CLDV-Get Information		//*[@id="table14"]/tbody/tr[10]/td[1]
	@{dict_List}=  Create List  PPreviousAddressLine1  PPreviousAddressLine2  PPreviousCity   PPreviousState   PPreviousZipCode  PTotalMonthsAtPreviousAddress
	
	${RT_PrevAdd1}=  Get From Dictionary   ${req_Dict}   PPreviousAddressLine1
	${RT_PrevAdd2}=  Get From Dictionary   ${req_Dict}   PPreviousAddressLine2
	
	${Add_PrevRT}=  Catenate   ${RT_PrevAdd1}  ${RT_PrevAdd2}
	${st_PrevRT1}=  Run Keyword And Return Status		Should Contain		${Add_PrevRT}	 RR
	${st_PrevRT2}=  Run Keyword And Return Status		Should Contain		${Add_PrevRT}	 PO
	Run Keyword If   ${st_PrevRT1}==True or ${st_PrevRT2}==True   Insert Into List    ${AppPrevRedidentialDetails}  0  ${SPACE}
					...  ELSE   Set Variable   ${AppPrevRedidentialDetails}				   
	CLDV-Previous Residential Information Verification   ${AppPrevRedidentialDetails}   ${req_dict} 	 @{dict_List}
	
	# Employment Status Verification
	${AppEmploymentInformation}=		CLDV-Get Information		//*[@id="table14"]/tbody/tr[13]/td[1]
	@{dict_List}=  Create List  PEmploymentStatus  POccupation  PEmployedBy   PBusinessPhone   PTotalMonthsEmployed  PIncomeValue
				   ...   PIncomeType  POtherMonthlyIncome  POtherIncomeSource
				   
	CLDV-Employment Information Verification   ${AppEmploymentInformation}   ${req_dict} 	 @{dict_List}
	
	 # Previous EmploymentStatus Verification
	${AppPrevEmploymentInformation}=		CLDV-Get Information		//*[@id="table14"]/tbody/tr[16]/td[1]/p
	@{dict_List}=  Create List  PPreviousEmploymentStatus  PPreviousOccupation  PPreviousEmployedBy   PPreviousBusinessPhone   PPreviousTotalMonthsEmployed
	CLDV-Previous Employment Information Verification   ${AppPrevEmploymentInformation}   ${req_dict} 	 @{dict_List}			   

	#${Comment}=		CLDV-Get Information		//*[@id="table14"]/tbody/tr[19]/td/p	

#############################################################
CLDV-Verify CoApplicant Information	 [Arguments]   ${req_dict} 
    [Documentation]			This keyword verifies Coapplicant info in third section of lead details page
	...						Pre-requisite : N/A
	...						Note: 		  : N/A
	...						Return Type   : Dictionary
	...				  		Author        : Manish Singh
	...						Creation Date : 
	...						Update Date\By: N/A
	WriteToFile			${LogFile}				Y			 CoApplicant Info Verification>>>>
	WriteToFile			${LogFile}				Y			----------------------------------------
	${CoApplicant}=  CLDV-Get Information   //*[@id="table14"]/tbody/tr[4]/td[2]
	#Relationship Comparison
	CLDV-Single Value Comparision 	 ${CoApplicant}  0  ${req_Dict}  CoAppRelationship
	
	#Name Comparison
	@{list1}=  Create List   CoAppFirstName   CoApp Last Name   CoAppSuffix
	@{list2}=  Create List   CoAppFirstName   CoAppMiddleName   CoApp Last Name   CoAppSuffix
	${mname}=  Get From Dictionary   ${req_dict}   CoAppMiddleName
	@{list}=  Run Keyword If   '${mname}'!='${EMPTY}'   Set Variable   @{list2}
	          ...  ELSE    Set Variable   @{list1}
			  
	CLDV-Multi Value Comparision    ${CoApplicant}   1   ${req_dict}   @{list}
	
	#Email Comparison
	${UICoAppEmail}=  Get From List   ${CoApplicant}  2
	CLDV-Single Value Comparision  	 ${CoApplicant}  2  ${req_Dict}  CoAppEmailAddress

	#DOB Comparison 
	${UICoAppDOB}=  Get From List   ${CoApplicant}  3
	${UICoAppDOB}=   CLDV-DOB Conversion   ${UICoAppDOB}
	${DictCoAppDOB}=	Get From Dictionary		${req_dict}		CoAppDOB
	CLDV-Comparision Operation   CoAppDOB   ${UICoAppDOB}  ${DictCoAppDOB}   
	
	#SSN Comparison
	#Fetched the last four digits of SSN from UI
	${UICoAppSSN}=  Get From List   ${CoApplicant}  4
	${SSNUI}=		CLDV-SSN Last Four Digit Fetch   ${UICoAppSSN}
	${DictCoAppSSN}=	Get From Dictionary		${req_dict}		CoAppSSN
	${SSNDict}=		CLDV-SSN Last Four Digit Fetch   ${DictCoAppSSN}
	CLDV-Comparision Operation   CoAppSSN  ${SSNUI}   ${SSNDict}

	#CoApplicant Current Residential Information
	${CoAppCurrentResAddr}=  CLDV-Get Information   //*[@id="table14"]/tbody/tr[7]/td[2]
	@{dict_List}=  Create List  CoAppAddressLine1  CoAppAddressLine2  CoAppCity   CoAppState   CoAppZipCode  CoAppHomePhone
	               ...  CoAppTotalMonthsAtAddress  CoAppHousingStatus  CoAppMortgageOrRent
					
	${AddLine1}=  Get From Dictionary  	${req_dict}	  	CoAppAddressLine1
    Run Keyword If  	'${AddLine1}'!='${EMPTY}'   CLDV-Residential Information Verification  	 ${CoAppCurrentResAddr}   ${req_dict}  	 @{dict_List}
	...  ELSE    WriteToFile			${LogFile}				Y		CoApp Residential Information Verification is not requested
				   

	#CoApplicant previuos Residential Information
	${CoAppPreviousResAddr}=  CLDV-Get Information   //*[@id="table14"]/tbody/tr[10]/td[2]
	@{dict_List}=  Create List  CoAppPreviousAddressLine1  CoAppPreviousAddressLine2  CoAppPreviousCity   CoAppPreviousState  CoAppPreviousZipCode  CoAppTotalMonthsAtPreviousAddress
	${AddLine1}=  Get From Dictionary  	${req_dict}	  	CoAppPreviousAddressLine1
	Run Keyword If  	'${AddLine1}'!='${EMPTY}'   CLDV-Previous Residential Information Verification  	 ${CoAppPreviousResAddr}   ${req_dict}  	 @{dict_List}
	...  ELSE    WriteToFile			${LogFile}				Y		CoApp Previous Residential Information Verification is not requested
	
	
	#CoApplicant Current Employment Information
	${CoAppCurrrentEmployent}=  CLDV-Get Information   //*[@id="table14"]/tbody/tr[13]/td[2]
	@{dict_List}=  Create List  CoAppEmploymentStatus  CoAppOccupation  CoAppEmployedBy   CoAppBusinessPhone  CoAppTotalMonthsEmployed
                   ...  CoAppIncomeValue  CoAppIncomeType  CoAppOtherMonthlyIncome  CoAppOtherIncomeSource
	${EmpStatus}=  Get From Dictionary  	${req_dict}	  	CoAppEmploymentStatus		
	Run Keyword If  	'${EmpStatus}'!='${EMPTY}'   CLDV-Employment Information Verification  	 ${CoAppCurrrentEmployent}   ${req_dict}  	 @{dict_List}
	...  ELSE    WriteToFile			${LogFile}				Y		CoApp Employment Information Verification is not requested
	
    #CoApplicant previuos Employment Information
	${CoAppPreviousEmployent}=  CLDV-Get Information   //*[@id="table14"]/tbody/tr[16]/td[2]
	# Log to console   ${val}	
	@{dict_List}=  Create List  CoAppPreviousEmploymentStatus  CoAppPreviousOccupation  CoAppPreviousEmployedBy   CoAppPreviousBusinessPhone  CoAppPreviousTotalMonthsEmployed
	${EmpStatus}=  Get From Dictionary  	${req_dict}	  	CoAppPreviousEmploymentStatus
	Run Keyword If  	'${EmpStatus}'!='${EMPTY}'   CLDV-Previous Employment Information Verification  	 ${CoAppPreviousEmployent}   ${req_dict}  	 @{dict_List}
	...  ELSE    WriteToFile			${LogFile}				Y		CoApp Previous Employment Information Verification is not requested
	
#####################################################################

CLDV-UI Phone Conversion  [Arguments]	 ${val}
    ${val}=  Replace String   ${val}  )  -
	${val}=  Replace String   ${val}  (    ${SPACE} 
	${val}=  Replace String  ${val}   ${space}  ${empty}
	${val}=   Evaluate		str('${val}').strip()
	[Return]   ${val}

######################################################################

CLDV-Comparision Operation   [Arguments]	  ${message}   ${val1}   ${val2}
    [Documentation]			This keyword compares two string values
	...						Pre-requisite : N/A
	...						Note: 		  : N/A
	...				  		Author        : Manish Singh
	...						Creation Date : 
	...						Update Date\By: N/A
	${val1}=  Convert To Uppercase    ${val1}
	${val2}=  Convert To Uppercase    ${val2}
	${val1}=   Evaluate  str('${val1}').strip()
	${val2}=   Evaluate  str('${val2}').strip()
	${status}=   Run Keyword And Return Status		Should Be Equal As Strings			${val1}			${val2}
	
	Run Keyword If   ${status}==True    WriteToFile			${LogFile}				Y			${message} verification-- UI value:${val1} and xml value:${val2}
	...  ELSE   Run Keyword And Continue On Failure    Fail    ${message} verification-- $Failure Error-UI value:${val1} and xml value:${val2} are not equal


CLDV-Get Information  [Arguments]  ${TextPath}

	${IndividualsDetails}=  Get Text   ${TextPath}
	${indLine}=  Split String    ${IndividualsDetails}  \n
	[Return]   ${indLine}
	
#################################################################

CLDV-Months to Year Conversion   [Arguments]  ${months}
	${years}=		Evaluate	${months}/12
	${remainingmonths}=		Evaluate	${months}%12
	Log to console		${remainingmonths}mos.
	${rt}=  Set Variable  ${years} yrs. ${remainingmonths} mos.
	Log to console		${years}yrs. ${remainingmonths} mos.
	[Return]    ${rt}
##################################################################

CLDV-DOB Conversion  [Arguments]   ${DOB}

	${DOBSplit}=	Split String		${DOB}		separator=/
	${MM}=		Get From List		${DOBSplit}		0
	${DD}=		Get From List		${DOBSplit}		1
	${YY}=		Get From List		${DOBSplit}		2
	
	${MM}=  Run Keyword If   ${MM}<10   Catenate   0${MM}
			...  ELSE   Set Variable  ${MM}
	${DD}=  Run Keyword If   ${DD}<10   Catenate   0${DD}
	        ...  ELSE   Set Variable  ${DD}
	${ArngdDOB}=		Catenate		SEPARATOR=-		${YY}		${MM}		${DD}		
	[Return]		${ArngdDOB}
###################################################################

CLDV-Compare Money
	[Arguments] 	${msg}  ${record_value} 	${value}
	${record_value}= 	Catenate 	SEPARATOR= 	 	$ 	${record_value}
	#Run Keyword And Continue On Failure 	Should Be Equal 	${record_value} 	${value} 
    ${st}=  Run Keyword And Return Status    Should Be Equal 	${record_value} 	${value}	
    Run Keyword If  ${st}==True   WriteToFile			${LogFile}				Y		${msg} verification--${record_value},${value} are equal
    ...  ELSE   Run Keyword And Continue On Failure 	Should Be Equal 	${record_value} 	${value} 
	
###################################################################

CLDV-Compare Duration Month
	[Arguments] 	${msg}   ${record_value} 	${value}
	${record_value}= 	Catenate 	${record_value} 	Months.
	#Run Keyword And Continue On Failure 	Should Be Equal 	${record_value} 	${value} 	
	${st}=  Run Keyword And Return Status    Should Be Equal 	${record_value} 	${value}	
    Run Keyword If  ${st}==True   WriteToFile			${LogFile}				Y		${msg} verification--${record_value},${value} are equal
    ...  ELSE   Run Keyword And Continue On Failure 	Should Be Equal 	${record_value} 	${value}

#####################################################################

CLDV-Verify Finance Requirements
	[Documentation]			This keyword checks the FinanceRequirement section of the LeadDetails page
	...						when request is sent through FD.
	...				  		Author  : Jitendra Sandbhor
	...						Creation Date: 16th May 2016
	...						Update Date\By: NA 

	[Arguments] 	${record} 	${finance_req} 	

	# Creating Mapping to map from UI key to XML key.
	${lead_mapping_dict} 	Create Dictionary 	Applicant Type=LoanInfoApplicantType 	Amount Req.=LoanInfoAmountRequesting 	 
	... 	Loan Term=LoanInfoTerm 	Cash Down=LoanInfoCashDown 	Monthly Pymt.=TradeInVehicleInfoMonthlyPayment
	${ca_mapping_dict} 	Create Dictionary 	Amount Req.=ProductAmountRequesting 	 
	... 	Loan Term=ProductTerm 	Cash Down=ProductCashDown 	Monthly Pymt.=TradeInVehicleInfoMonthlyPayment
	${transcode_mapping} 	Create Dictionary 	1=${ca_mapping_dict} 	3=${lead_mapping_dict}
	# Applicant Type=ProductApplicantType  #TODO: Need to Consider this field

	${money_values} 	Create List 	Cash Down 		Monthly Pymt. 	Amount Req.
	${month_values} 	Create List 	Loan Term
	${not_checking} 	Create List 	Applicant Type 	Lead Type
	
	#Fetching mapping related to Trsnscode of a request.
	${TransCode}= 		Get From Dictionary 	${record}  	TransCode	
	${mapping_dict}= 	Get From Dictionary 	${transcode_mapping} 	${TransCode}
	
	@{words}= 	Split String 	${finance_req} 	separator=\n 	# Splitting Text to have key: value pairs.
	:For 	${word} 	IN 	@{words} 
	\ 	${key_value}= 	Split String 	${word} 	separator=:
	\	${key}=  	Get From List 	${key_value} 	0 		#Separating Key and Value
	\ 	Run Keyword If 		'${key}' in @{not_checking} 	Continue For Loop	#Skip if value coming to UI is dynamic. 
	\	${value}=  	Get From List 	${key_value} 	1
	\ 	${value}= 	Evaluate		str('${value}').lstrip() 	#Strip leading white spaces of a Value.
	\ 	${record_key}= 	Get From Dictionary 	${mapping_dict} 	${key}
	\	${record_value}= 	Get From Dictionary 	${record} 	${record_key}
	\ 	Run Keyword If 		'${key}' in @{money_values} 		CLDV-Compare Money  ${key}  ${record_value} 	${value}
	...			ELSE IF 	'${key}' in @{month_values} 		CLDV-Compare Duration Month   ${key}	 ${record_value} 	${value}
	...         ELSE         CLDV-Comparision Operation     ${record_key}    ${record_value}    ${value}
	#... 		ELSE		Run Keyword And Continue On Failure 	Should Be Equal 	${record_value} 	${value}

###################################################################

CLDV-Compare Color Value
	[Arguments]   ${msg}	${record_value} 	${value}
	${record_value}= 	Evaluate 	str('${record_value}').upper()
	#Run Keyword And Continue On Failure 	Should Be Equal 	${record_value} 	${value} 	
	${st}=  Run Keyword And Return Status    Should Be Equal 	${record_value} 	${value}	
    Run Keyword If  ${st}==True   WriteToFile			${LogFile}				Y		${msg} verification--${record_value},${value} are equal
    ...  ELSE   Run Keyword And Continue On Failure 	Should Be Equal 	${record_value} 	${value}

#####################################################################

CLDV-Check Substring 
	[Arguments]   ${record_value} 	${value}
	${record_value}= 	Evaluate 	str('${record_value}').upper()
	${function_out}= 	Evaluate 	str('${record_value}').find(str('${value}'))
	
	 Run Keyword If  ${function_out}>=0   WriteToFile			${LogFile}				Y		Stock verification--${record_value},${value} 
    ...  ELSE   Run Keyword And Continue On Failure 	Should Be True 		${function_out}>=0 		msg=Stock numbers are not matching.
	
	#Run Keyword And Continue On Failure 	Should Be True 		${function_out}>=0 		msg=Stock numbers are not matching.

####################################################################
CLDV-Verify Vehicle To Finance
	[Documentation]			This keyword checks the VehicleToFinance section of the LeadDetails page
	...						when request is sent through FD.
	...				  		Author  : Jitendra Sandbhor
	...						Creation Date: 16th May 2016
	...						Update Date\By: NA 
	[Arguments] 	${record} 	${finance_req} 	

	# Creating Mapping to map from UI key to XML key.
	${lead_mapping_dict} 	Create Dictionary 	Stock Num=VehicleStockNumber
	... 	Mileage=VehicleMileage 	Interior Color=VehicleInteriorColor 	Exterior Color=VehicleExteriorColor
	${ca_mapping_dict} 	Create Dictionary 	Stock Num=VehicleStockNumber
	... 	Mileage=ProductMileage 	Interior Color=VehicleInteriorColor 	Exterior Color=VehicleExteriorColor
	${transcode_mapping} 	Create Dictionary 	1=${ca_mapping_dict} 	3=${lead_mapping_dict}

	${color_values} 		Create List 	Interior Color 		Exterior Color
	${substring_checking}	Create List 	Stock Num
	${not_checking} 	Create List 	
		
	#Fetching mapping related to Trsnscode of a request.
	${TransCode}= 		Get From Dictionary 	${record}  	TransCode	
	${mapping_dict}= 	Get From Dictionary 	${transcode_mapping} 	${TransCode}
		
	@{words}= 	Split String 	${finance_req} 	separator=\n 	# Splitting Text to have key: value pairs.
	:For 	${word} 	IN 	@{words} 
	\ 	${key_value}= 	Split String 	${word} 	separator=:
	\	${key}=  	Get From List 	${key_value} 	0 		#Separating Key and Value
	\ 	Run Keyword If 		'${key}' in @{not_checking} 	Continue For Loop	#Skip if value coming to UI is dynamic.
	\ 	${list_length} 		Get Length 		${key_value}
	\ 	Run Keyword If  	'${list_length}'=='1' 		Continue For Loop
	\	${value}=  	Get From List 	${key_value} 	1
	\ 	${value}= 	Evaluate		str('${value}').lstrip() 	#Strip leading white spaces of a Value.
	\ 	${record_key}= 	Get From Dictionary 	${mapping_dict} 	${key}
	\	${record_value}= 	Get From Dictionary 	${record} 	${record_key}
	\ 	Run Keyword If 		'${key}' in @{color_values} 			CLDV-Compare Color Value  ${key}  ${record_value} 	${value}
	...			ELSE IF 	'${key}' in @{substring_checking} 		CLDV-Check Substring 	${record_value} 	${value}
	...         ELSE         CLDV-Comparision Operation     ${record_key}   ${record_value}   ${value}
	#... 		ELSE		Run Keyword And Continue On Failure 	Should Be Equal 	${record_value} 	${value}

#######################################################################

CLDV-Compare Intials
	[Arguments]  ${msg}	  ${record_value} 	${value}
	${record_value}= 	Run Keyword If 		'${record_value}'!='' 	Evaluate 	str('${record_value}')[0]
	... 	ELSE 		Set Variable  	${record_value}
	#Run Keyword And Continue On Failure 	Should Be Equal 	${record_value} 	${value} 	
	${st}=  Run Keyword And Return Status    Should Be Equal 	${record_value} 	${value}	
    Run Keyword If  ${st}==True   WriteToFile			${LogFile}				Y		${msg} verification--${record_value},${value} are equal
    ...  ELSE   Run Keyword And Continue On Failure 	Should Be Equal 	${record_value} 	${value}

######################################################################

CLDV-Compare Vehicle Label
	[Arguments] 	${record} 	${value}
	${keys}= 	Create List 	TradeInVehicleInfoYear 	TradeInVehicleInfoMake 	TradeInVehicleInfoModel 	
	... 	TradeInVehicleInfoTrim
	
	${vehicle_label}= 	Set Variable
	: For 	${key} 	IN 	@{keys}
	\	${record_value}= 	Get From Dictionary 	${record} 	${key}
	\ 	${record_value}= 	Evaluate  	str('${record_value}').upper()
	\ 	${vehicle_label}= 	Catenate 	${vehicle_label} 	${record_value} 	
	
	${vehicle_label}= 	Evaluate	str('${vehicle_label}').lstrip()
	#Run Keyword And Continue On Failure 	Should Be Equal 	${value} 	${vehicle_label} 	
	${st}=  Run Keyword And Return Status    Should Be Equal 	${value} 	${vehicle_label}	
    Run Keyword If  ${st}==True   WriteToFile			${LogFile}				Y		Vehicle Label verification--${value},${vehicle_label} are equal
    ...  ELSE   Run Keyword And Continue On Failure 	Should Be Equal 	${vehicle_label} 	${value}

####################################################################

CLDV-Verify Trade In Vehilce Info
	[Documentation]			This keyword checks the TradeInVehicleINfo section of the LeadDetails page
	...						when request is sent through FD.
	...				  		Author  : Jitendra Sandbhor
	...						Creation Date: 16th May 2016
	...						Update Date\By: NA 
	[Arguments] 	${record} 	${finance_req} 	

	# Creating Mapping to map from UI key to XML key.
	${mapping_dict} 	Create Dictionary 	Vehicle=VehicleYear  # Vehicle is the special case so to avoid normal flow failure, added VehicleYear as the value here.
	... 	Mileage=TradeInVehicleInfoMileage 	Interior Color=TradeInVehicleInfoInteriorColor
	... 	Exterior Color=TradeInVehicleInfoExteriorColor 		Trade In Paid=TradeInVehicleInfoTradeInPaid
	
	${color_values} 	Create List 	Interior Color 		Exterior Color
	${boolen_values} 	Create List 	Trade In Paid
	${not_checking} 	Create List
			
	${TransCode}= 		Get From Dictionary 	${record}  	TransCode	
		
	@{words}= 	Split String 	${finance_req} 	separator=\n 	# Splitting Text to have key: value pairs.
	:For 	${word} 	IN 	@{words} 
	\ 	${key_value}= 	Split String 	${word} 	separator=:
	\	${key}=  	Get From List 	${key_value} 	0 		#Separating Key and Value
	\ 	Run Keyword If 		'${key}' in @{not_checking} 	Continue For Loop	#Skip if value coming to UI is dynamic.
	\	${value}=  	Get From List 	${key_value} 	1
	\ 	${value}= 	Evaluate		str('${value}').lstrip() 	#Strip leading white spaces of a Value.
	\ 	${record_key}= 	Get From Dictionary 	${mapping_dict} 	${key}
	\	${record_value}= 	Get From Dictionary 	${record} 	${record_key}
	\ 	Run Keyword If 		'${key}' in @{color_values} 		CLDV-Compare Color Value   ${key}   ${record_value} 	${value}
	...			ELSE IF		'${key}' in @{boolen_values} 		CLDV-Compare Intials   ${key}   ${record_value} 	${value}
	...			ELSE IF		'${key}'=='Vehicle'  	CLDV-Compare Vehicle Label   ${record} 	${value}
	... 		ELSE		Run Keyword And Continue On Failure 	Should Be Equal 	${record_value} 	${value}

###############################################################
	
CLDV-Single Value Comparision  [Arguments]	 ${list}  ${index}  ${req_Dict}  ${dict_Key}
	
	${data1}=  Get From List   ${list}   ${index}
	${data2}=  Get From Dictionary    ${req_Dict}  ${dict_Key}
	#WriteToFile			${LogFile}				Y			${dict_Key} verification:
	CLDV-Comparision Operation 	${dict_Key}  ${data1}  ${data2}

######################################################################
		
CLDV-Multi Value Comparision  [Arguments]  ${list}   ${index}   ${req_dict}   @{list} 

    ${data1}=  Get From List   ${list}   ${index}
	${data2}=  Set Variable  ${EMPTY}
	${dictKey}=   Set Variable       ${EMPTY}
	:FOR   ${I}   IN    @{list}
	\  ${t1}=  Get From Dictionary   ${req_dict}   ${I}
	\  ${dictKey}=  Catenate   ${dictKey}  ${I}
	\  ${data2}=  Catenate   ${data2}   ${t1}
	Log    ${data2}
	Log    ${dictKey}
	${dictKey}=  Evaluate  str('${dictKey}').strip()
	#WriteToFile			${LogFile}				Y			${dictKey} verification:
	CLDV-Comparision Operation   ${dictKey} 	${data1}  ${data2}

####################################################################
	
CLDV-SSN Last Four Digit Fetch   [Arguments]	  ${ssNnumber}

   ${UISSNLastFourDigits} = 	Get Slice From List 	${ssNnumber} 	7 	11
   [Return]   ${UISSNLastFourDigits}
###################################################################
   
CLDV-Address Parser  [Arguments]  ${Address}
	${AbbrvList}=		Create List		apt		Apt		APT		apartment		appart		appartment		APP		aprt		Suite		ste		suite		RR		Rural Rt		RurRoute		Rural R		rural routeRUR RT		PO Box		PO.BOX.		POBOX		PO.BOX		P.O.Box		P O Box
	
	${AbbrvListLength}=		Get Length		${AbbrvList} 
	${ModifdAddr}=		Set Variable		${Address}
	:FOR     ${I}        IN RANGE         0          ${AbbrvListLength}
	\		${GetFromAbbrvList}=		Get From List		${AbbrvList}		${I}
	\		${ReplcdAddr}=		Remove String		${ModifdAddr}		${GetFromAbbrvList}
	\		${ModifdAddr}=		Set Variable		${ReplcdAddr}
	Log to console	  	${ModifdAddr}
	
	${StreetTypeDict}=		Create Dictionary		Avenue=AV	Boulevard=BV	Circle=CI	Court=CT	Crescent=CR	Drive=DR	Freeway=FW	Highway=HW	Lane=LN	Parkway=PK	Path=PA	Place=PL	Plaza=PZ	Road=RD	Square=SQ	Street=ST	Terrace=TE	Trail=TR	Turnpike=TP	Way=WA
	
	${tesmp}=		Set Variable		${ModifdAddr}
	${AbbrvDictLength}=		Get Length		${StreetTypeDict}
	${GetFromDictKey}=		Get Dictionary Keys		${StreetTypeDict}
	:FOR		${J}		IN RANGE		0		${AbbrvDictLength}
	\		${GetFromDictList}=		Get From List		${GetFromDictKey}		${J}
	\		${St}=		Run Keyword And Return Status		Should Contain		${tesmp}		${GetFromDictList}
	\		${DictValue}=		Get From Dictionary		${StreetTypeDict}		${GetFromDictList}
	\		${StrFinalConversion}=		Run Keyword If		${St}==True		Replace String		${tesmp}		${GetFromDictList}		${DictValue}
	\									...  ELSE		Set Variable		${tesmp}
	\		${tesmp}=		Set Variable		${StrFinalConversion}
	Log to console		${StrFinalConversion}
	
	${UprCseAddr}=		Convert To Uppercase		${StrFinalConversion}
	${SplitAddress}=		Split String		${UprCseAddr}
	Sort List		${SplitAddress}
	[Return]   ${SplitAddress}	

###################################################################	
	
CLDV-Address Comparision Operation	[Arguments]	  ${Msg}  ${SplitAddress}		${ad12}	
	${Lists_Matched}=		Run Keyword and Return Status		Lists Should Be Equal		${SplitAddress}		${ad12}
	Run Keyword If   ${Lists_Matched}==True    WriteToFile			${LogFile}				Y			${Msg} verification:UI value:${SplitAddress} and xml value:${ad12}
	...  ELSE   Run Keyword And Continue On Failure    Fail    ${Msg} verification-- $Failure Error-UI value:${SplitAddress} and xml value:${ad12} are not equal

####################################################################

CLDV-Residential Information Verification  	[Arguments]  ${CoAppCurrentResAddr}   ${req_dict} 	 @{dict_List}
    [Documentation]			This keyword verifies residential info for applicant and coapplicant
	...						Pre-requisite : N/A
	...						Note: 		  : N/A
	...						Return Type   : Dictionary
	...				  		Author        : Manish Singh
	...						Creation Date : 
	...						Update Date\By: N/A

	
	${UICoAppCurrrentResAddrLineOne}=		Get From List		${CoAppCurrentResAddr}		0
	${UICoAppCurrrentResAddrLineTwo}=		Get From List		${CoAppCurrentResAddr}		1
	${UIAdd1_Add2}=  Catenate    ${UICoAppCurrrentResAddrLineOne}   ${UICoAppCurrrentResAddrLineTwo}
	
	${UprCseAddr}=		Convert To Uppercase		${UIAdd1_Add2}
	${SplitAddress}=		Split String		${UprCseAddr}
	Sort List		${SplitAddress}
	
	${val1}=  Get From List   ${dict_List}   0
	${DictCoAppCurrrentResAddrLineOne}=		Get From Dictionary		${req_dict}		${val1}
	# #Fetch Address Line Two
	${val2}=  Get From List   ${dict_List}   1
	${DictCoAppCurrrentResAddrLineTwo}=		Get From Dictionary		${req_dict}		${val2}
	${add1_add2}=  Catenate   ${DictCoAppCurrrentResAddrLineOne}   ${DictCoAppCurrrentResAddrLineTwo}
	${add1_add2}=   CLDV-Address Parser   ${add1_add2}
	CLDV-Address Comparision Operation		Address     ${SplitAddress}   ${add1_add2}		
	
	#CoApp City State Zip 
	${val3}=  Get From List   ${dict_List}   2
	${val4}=  Get From List   ${dict_List}   3
	${val5}=  Get From List   ${dict_List}   4
	@{list}=  Create List   ${val3}  ${val4}   ${val5}
	CLDV-Multi Value Comparision    ${CoAppCurrentResAddr}   2   ${req_dict}   @{list}

	#Fetch 	CoApplicant Current Residential Phone
	${UICoAppCurrrentResPhone}=		Get From List		${CoAppCurrentResAddr}		3
	${ConvertedCurrResPhone}=		CLDV-UI Phone Conversion  ${UICoAppCurrrentResPhone}
	${val6}=  Get From List   ${dict_List}   5
	${DictCoAppCurrrentResPhone}=		Get From Dictionary		${req_dict}		${val6}
	CLDV-Comparision Operation		${val6}  ${DictCoAppCurrrentResPhone}		${ConvertedCurrResPhone}
	
	#Fetch CoApp Total Months At Current Address
	${UICoAppCurrrentResDuration}=		Get From List		${CoAppCurrentResAddr}		4
	${UICoAppCurrrentResDuration}=   Replace String   ${UICoAppCurrrentResDuration}   ${SPACE}    ${EMPTY}
	${val7}=  Get From List   ${dict_List}   6
	${DictCoAppCurrrentResDuration}=		Get From Dictionary		${req_dict}		${val7}
	${CnvrtdUICoAppCurrrentResDuration}=		CLDV-Months to Year Conversion		${DictCoAppCurrrentResDuration}
	${CnvrtdUICoAppCurrrentResDuration}=   Replace String   ${CnvrtdUICoAppCurrrentResDuration}   ${SPACE}    ${EMPTY}
	CLDV-Comparision Operation		${val7}  ${CnvrtdUICoAppCurrrentResDuration}		${UICoAppCurrrentResDuration}
	
	
	#Fetch CoApp Current Residential HousingStatus
	${val8}=  Get From List   ${dict_List}   7
	CLDV-Single Value Comparision  	 ${CoAppCurrentResAddr}  5  ${req_Dict}  ${val8}
	
	#Fetch CoApp Current Residential Rent
	${CoAppUIMortgageRent}=  Get From List   ${CoAppCurrentResAddr}  6
	${val9}=  Get From List   ${dict_List}   8
	${CoAppMortageRent}=  Get From Dictionary   ${req_dict}   ${val9}
	${Conv_MortageRent}=  Catenate 	SEPARATOR= 	 	$ 	${CoAppMortageRent}
	#WriteToFile			${LogFile}				Y			PMortgageOrRent Verification:
	CLDV-Comparision Operation 	${val9}   ${CoAppUIMortgageRent}  ${Conv_MortageRent}
	
##################################################################

CLDV-Previous Residential Information Verification  [Arguments]  ${CoAppPreviousResAddr}   ${req_dict} 	 @{dict_List}
    [Documentation]			This keyword previous residentials information
	...						Pre-requisite : N/A
	...						Note: 		  : N/A
	...						Return Type   : Dictionary
	...				  		Author        : Manish Singh
	...						Creation Date : 
	...						Update Date\By: N/A
	
	#Fetch Address Line One
	${UICoAppPreviousResAddrLineOne}=		Get From List		${CoAppPreviousResAddr}		0
	${UICoAppPreviousResAddrLineTwo}=		Get From List		${CoAppPreviousResAddr}		1
	${UI_Add1Add2}=  Catenate    ${UICoAppPreviousResAddrLineOne}   ${UICoAppPreviousResAddrLineTwo}
	${UprCseAddr}=		Convert To Uppercase		${UI_Add1Add2}
	${SplitAddress}=		Split String		${UprCseAddr}
	Sort List		${SplitAddress}
	${val1}=  Get From List  ${dict_List}  0
	${val2}=  Get From List  ${dict_List}  1
	${DictCoAppPreviousResAddrLineOne}=		Get From Dictionary		${req_dict}		${val1}
	${DictCoAppPreviousResAddrLineTwo}=		Get From Dictionary		${req_dict}		${val2}
	${ad12}=  Catenate   ${DictCoAppPreviousResAddrLineOne}    ${DictCoAppPreviousResAddrLineTwo}
	${ad12}=  CLDV-Address Parser   ${ad12}
	CLDV-Address Comparision Operation		Previous Address  ${SplitAddress}		${ad12}
	
	#Fetch State City ZipCode
	${val3}=  Get From List  ${dict_List}  2
	${val4}=  Get From List  ${dict_List}  3
	${val5}=  Get From List  ${dict_List}  4
	@{list}=  Create List  ${val3}   ${val4}  ${val5}
	CLDV-Multi Value Comparision    ${CoAppPreviousResAddr}   2   ${req_dict}   @{list}
	
	#Fetch CoApp Total Months At Previous Address
	${UICoAppPreviousResDuration}=		Get From List		${CoAppPreviousResAddr}		3
	${val6}=  Get From List  ${dict_List}  5
	${UICoAppPreviousResDuration}=   Replace String   ${UICoAppPreviousResDuration}   ${SPACE}    ${EMPTY}
	${DictCoAppPreviousResDuration}=		Get From Dictionary		${req_dict}		${val6}
	${DictCoAppPreviousResDuration}=		CLDV-Months to Year Conversion		${DictCoAppPreviousResDuration}
	${DictCoAppPreviousResDuration}=   Replace String   ${DictCoAppPreviousResDuration}   ${SPACE}    ${EMPTY}
	CLDV-Comparision Operation		${val6}  ${UICoAppPreviousResDuration}		${DictCoAppPreviousResDuration}
	
##################################################################

CLDV-Employment Information Verification   [Arguments]  ${CoAppCurrrentEmployent}   ${req_dict} 	 @{dict_List}
    [Documentation]			This keyword verifies employment information
	...						Pre-requisite : N/A
	...						Note: 		  : N/A
	...						Return Type   : Dictionary
	...				  		Author        : Manish Singh
	...						Creation Date : 
	...						Update Date\By: N/A
	
	${val1}=  Get From List   ${dict_List}  0
	CLDV-Single Value Comparision  	 ${CoAppCurrrentEmployent}  0  ${req_Dict}  ${val1}
	
	#Fetch CoApp Current Employer - Occupation
	${val2}=  Get From List   ${dict_List}  1
	CLDV-Single Value Comparision  	 ${CoAppCurrrentEmployent}  1  ${req_Dict}  ${val2}
	
	#Fetch CoApp Current Employer
	${val3}=  Get From List   ${dict_List}  2
	CLDV-Single Value Comparision  	 ${CoAppCurrrentEmployent}  2  ${req_Dict}  ${val3}
	
	#Fetch 	CoApplicant Current Business Phone
	${val4}=  Get From List   ${dict_List}  3
	${UICoAppCurrrentBuisnessPhone}=		Get From List		${CoAppCurrrentEmployent}		3
	${ConvrtdUICoAppCurrrentBuisnessPhone}=		CLDV-UI Phone Conversion  ${UICoAppCurrrentBuisnessPhone}
	${DictCoAppCurrrentBuisnessPhone}=		Get From Dictionary		${req_dict}		${val4}
	CLDV-Comparision Operation		CoAppBusinessPhone  ${ConvrtdUICoAppCurrrentBuisnessPhone}		${DictCoAppCurrrentBuisnessPhone}
	
	#Fetch Current Employment Duration
	${val5}=  Get From List   ${dict_List}  4
	${UICoAppCurrentTotalMonthsEmployed}=  Get From List   ${CoAppCurrrentEmployent}		4
	${UICoAppCurrentTotalMonthsEmployed}=   Replace String   ${UICoAppCurrentTotalMonthsEmployed}   ${SPACE}    ${EMPTY}
	${DictCoAppTotalMonthsEmployed}=  Get From Dictionary   ${req_dict}   ${val5}
	${Convt_DictCoAppTotalMonthsEmployed}=   CLDV-Months to Year Conversion   ${DictCoAppTotalMonthsEmployed}
	${Convt_DictCoAppTotalMonthsEmployed}=   Replace String   ${Convt_DictCoAppTotalMonthsEmployed}   ${SPACE}    ${EMPTY}
	CLDV-Comparision Operation 	${val5}  ${UICoAppCurrentTotalMonthsEmployed}  ${Convt_DictCoAppTotalMonthsEmployed}
	
	#Fetch Current Employment Income
	${val6}=  Get From List   ${dict_List}  5
	${UICoAppCurrentIncome}=  Get From List   ${CoAppCurrrentEmployent}		5
	${DictCoAppCurrentIncome}=  Get From Dictionary   ${req_dict}   ${val6}
	${Convrtd_DictCoAppCurrentIncome}=  Catenate 	SEPARATOR= 	 	$ 	${DictCoAppCurrentIncome}
	CLDV-Comparision Operation		${val6}  ${UICoAppCurrentIncome}		${Convrtd_DictCoAppCurrentIncome}
	
	#Fetch Current Employment Type
	${val7}=  Get From List   ${dict_List}  6
	CLDV-Single Value Comparision  	 ${CoAppCurrrentEmployent}  6  ${req_Dict}  ${val7}
	
	#Fetch Current Employment OtherIncomeSource and OtherMonthlyIncome
	${val8}=  Get From List   ${dict_List}  7
	${val9}=  Get From List   ${dict_List}  8
	${UICoAppCurrentOtherIncome}=  Get From List   ${CoAppCurrrentEmployent}		7
	${DictCoAppCurrentOtherMnthlyIncome}=  Get From Dictionary   ${req_dict}   ${val8}
	${Conv_DictCoAppCurrentOtherIncome}=  Catenate 	SEPARATOR= 	 	$ 	${DictCoAppCurrentOtherMnthlyIncome}
	${DictCoAppCurrentOtherIncomeSrc}=  Get From Dictionary   ${req_dict}   ${val9}
	${DictCoAppCurrentOtherIncome}=		Catenate		${Conv_DictCoAppCurrentOtherIncome}		${DictCoAppCurrentOtherIncomeSrc}
	CLDV-Comparision Operation		CoAppOtherMonthlyIncome  ${UICoAppCurrentOtherIncome}		${DictCoAppCurrentOtherIncome}

#####################################################################

CLDV-Previous Employment Information Verification  [Arguments]  ${CoAppPreviousEmployent}   ${req_dict} 	 @{dict_List}
    [Documentation]			This keyword verifies previous employment information
	...						Pre-requisite : N/A
	...						Note: 		  : N/A
	...						Return Type   : Dictionary
	...				  		Author        : Manish Singh
	...						Creation Date : 
	...						Update Date\By: N/A
	
	#Fetch CoApp Previous Employment status
	${val1}=  Get From List   ${dict_List}  0
	CLDV-Single Value Comparision  	 ${CoAppPreviousEmployent}  0  ${req_Dict}  ${val1}

	#Fetch CoApp Current Employer - Occupation
	${val2}=  Get From List   ${dict_List}  1
	CLDV-Single Value Comparision  	 ${CoAppPreviousEmployent}  1  ${req_Dict}  ${val2}
	
	#Fetch CoApp Current Employer
	${val3}=  Get From List   ${dict_List}  2
	CLDV-Single Value Comparision  	 ${CoAppPreviousEmployent}  2  ${req_Dict}  ${val3}
	
	#Fetch 	CoApplicant Current Business Phone
	${val4}=  Get From List   ${dict_List}  3
	${UICoAppPreviousBuisnessPhone}=		Get From List		${CoAppPreviousEmployent}		3
	${ConvrtdUICoAppPreviousBuisnessPhone}=		CLDV-UI Phone Conversion  ${UICoAppPreviousBuisnessPhone}
	${DictCoAppPreviousBuisnessPhone}=		Get From Dictionary		${req_dict}		${val4}
	CLDV-Comparision Operation	 ${val4}	  ${ConvrtdUICoAppPreviousBuisnessPhone}		${DictCoAppPreviousBuisnessPhone}
	
	#Fetch Current Employment Duration
	${val5}=  Get From List   ${dict_List}  4
	${UICoAppPreviousTotalMonthsEmployed}=  Get From List   ${CoAppPreviousEmployent}		4
	${UICoAppPreviousTotalMonthsEmployed}=   Replace String   ${UICoAppPreviousTotalMonthsEmployed}   ${SPACE}    ${EMPTY}
	${DictCoAppTotalPreviousMonthsEmployed}=  Get From Dictionary   ${req_dict}   ${val5}
	
	${Convt_DictCoAppTotalPreviousMonthsEmployed}=   CLDV-Months to Year Conversion   ${DictCoAppTotalPreviousMonthsEmployed}
	${Convt_DictCoAppTotalPreviousMonthsEmployed}=   Replace String   ${Convt_DictCoAppTotalPreviousMonthsEmployed}   ${SPACE}    ${EMPTY}
	CLDV-Comparision Operation  	${val5}  ${UICoAppPreviousTotalMonthsEmployed}  ${Convt_DictCoAppTotalPreviousMonthsEmployed}

#########################################################################################################
Validate DT2.0 UI	[Arguments] 	#${NameLast2}

	WriteToFile						${logfile}				Y					Validate DT2.0 UI>>>
	
	WriteToFile						${logfile}				Y					@GlobalDict=${Global_Dict}
	WriteToFile						${logfile}				Y					List_DT2Apps=${List_DT2Apps}	
	${lenList}=						Get Length				${List_DT2Apps}
		
	#For each item in List_DT2Apps (the list contains an index to the Global Dict for any previously submitted xml)
	:FOR 	${I} 	IN RANGE	0		${lenList}
	\
	\		#Pull needed info from Global Dict using List_DT2Apps index		
	\		${Index1}				Get From List 			${List_DT2Apps}				${I}
	\		${Index}=				Convert To Integer 		${Index1}
	\		${dict}=				Get From Dictionary 	${Global_Dict}				${Index}
	\			WriteToFile			${logfile}				Y							----------------------^
	\			WriteToFile			${logfile}				Y							$DictIndex=${Index}
	\			WriteToFile			${logfile}				N							Dictionary=${dict}
	\		${PQ_Ref}=				Get From Dictionary		${dict}						REF PQ
	\			WriteToFile			${logfile}				Y							PQ_Ref=${PQ_Ref}
	\		${App_Ref}=				Get From Dictionary		${dict}						REF App
	\			WriteToFile			${logfile}				Y							App_Ref=${App_Ref}
	\		${InFolder}=			Get From Dictionary		${dict}						Input Folder
	# \			WriteToFile			${logfile}				Y							InFolder=${InFolder}
	\		${InFile}=				Get From Dictionary		${dict}						Filename
	# \			WriteToFile			${logfile}				Y							InFile=${InFile}
	\		${FolderPath}=			Catenate 				SEPARATOR=					${InFolder}	\\	${InFile}
	\			WriteToFile			${logfile}				Y							FolderPath=${FolderPath}		
	\		${NameLast}=			Get From Dictionary		${dict}						Last Name
	\			WriteToFile			${logfile}				Y							NameLast=${NameLast}		
	\
	\		Validate DT2.0 App		${FolderPath}			${NameLast}

#########################################################################################################
CompareDTtoFD		[Arguments]   ${FieldName}		${DTField}		${FDField}	
	
	WriteToFile			${logfile}					Y					CompareDTtoFD>>>${FieldName}
	WriteToFile			${logfile}					Y					${SPACE * 3}DTField=${DTField}	
	WriteToFile			${logfile}					Y					${SPACE * 3}FDField=${FDField}	
	
	# ${DTField}=			Run Keyword If	'${DTField}'=='Bi-weekly'							Set Variable	'BiWeekly'		ELSE	Set Variable	${DTField}
	# ${DTField}=			Run Keyword If	'${DTField}'=='Own Outright'						Set Variable	'OwnOutright'	ELSE	Set Variable	${DTField}
	
	${FDField}=			Run Keyword If	'${DTField}'=='${EMPTY}' and '${FDField}'=='None'		Set Variable	${EMPTY}			ELSE	Set Variable	${FDField}
	${DTField}=			Run Keyword If	'${DTField}'=='${None}' and '${FDField}'=='${EMPTY}'	Set Variable	${EMPTY}			ELSE	Set Variable	${DTField}	
	
	# ${DTField}=			Run Keyword If	'${DTField}'!='${EMPTY}'		Evaluate			str('${DTField}').lower()	ELSE Set Variable	${DTField}
	# ${FDField}=			Run Keyword If	'${FDField}'!='${EMPTY}'		Evaluate			str('${FDField}').lower()	ELSE Set Variable	${FDField}
	
	${DTField}=			Evaluate					str('${DTField}').lower()	
	${FDField}=			Evaluate					str('${FDField}').lower()		

	${NotEqual}=		Run Keyword If	'${DTField}'!='${FDField}'		WriteToFile			${logfile}		Y	$ERROR=DT not equal to FD	

#########################################################################################################
Validate DT2.0 App		[Arguments]   ${FolderPath}		${LastName}	
# Search For DT2.0 Customer   [Arguments]   ${LastName}	

	WriteToFile			${logfile}					Y					Search For DT2.0 Customer>>>
	
	#Search for Customer and navigate to Edit Application page
	Input Text			//*[@id="main-menu"]/app-search/div/form/div/input					${LastName}			#Search For Customer Text Box
	Click Element		//*[@id="main-menu"]/app-search/div/form/div/button/I									#Search Button
	Run Keyword And Ignore Error				Alert Should Be Present											#1st time through there will be no alert. All other times there will be alert "Are you sure you want to leave this page?".
	#Return if LastName not found in DealJacket Search
	${stat}=				Run Keyword And Return Status	Page Should Not Contain								There are no records to display
	Run Keyword If			${stat}==False					WriteToFile		${logfile}				Y			Error: Customer Not Found=${LastName}
	Run Keyword If			${stat}==False					Run Keyword And Continue On Failure		Fail		Customer Not Found=${LastName}
	Run Keyword If			${stat}==False					Return From Keyword				${LastName}	
	#Ok the customer was found
	Click Element		//*[@id="list_table"]/table/tbody/tr/td[1]/strong/a										#1st search record returned
	Click Element		//*[@id="dj-left-nav"]/ul/li[3]/a														#Left side Navigation - Application
	# Click Element		//*[@id="view_application"]/div/div/div[6]/span/a[2]									#Edit Application

	#The application is out of date because this deal has been modified
	${stat}=				Run Keyword And Return Status	Element Should Be Visible		//*[@id="view_application"]/div[1]/div/div/a			#Edit Application
	${DTTemp}=				Run Keyword If	${stat}==True	Click Element					//*[@id="view_application"]/div[1]/div/div/a
	
	${stat}=				Run Keyword And Return Status	Element Should Be Visible		//*[@id="view_application"]/div/div/div[6]/span/a[2]	#Edit Application
	${DTTemp}=				Run Keyword If	${stat}==True	Click Element					//*[@id="view_application"]/div/div/div[6]/span/a[2]


	
	
	#Open the xml and parse it.
	${Root}=				Parse XML						${FolderPath}
		WriteToFile			${logfile}		Y				FolderPath=${FolderPath}
		
	# Credit Application | Applicant
	# Credit Application | Co-Applicant
	# Credit Application | Spouse Information
	# Credit Application | Vehicle & Finance
	
	##########################################################
	#Get the app data from the Application page Applicant	
		WriteToFile			${logfile}		Y				${Empty}					
		WriteToFile			${logfile}		Y				*Note: DT2/FD compares occur after conversion to lowercase*
		WriteToFile			${logfile}		Y				${Empty}					
		WriteToFile			${logfile}		Y				@DT App Page-Applicant --------------------------------		

	#Check for DT2 error on page. There nmay be data that was not accepted by DT2 in AppSave.
	${stat}=				Run Keyword And Return Status	Page Should Not Contain 						There was an error found below
	Run Keyword If			${stat}==False					WriteToFile		${logfile}		Y				$ERROR - FAILED: Error on DT2 Page
	Run Keyword If			${stat}==False					Run Keyword And Continue On Failure		Fail	$ERROR - FAILED: Error on DT2 Page
	
	${DTTemp}=				Get Value						//*[@id="id_first_name"]
	${Stat}=    			Run Keyword And Return Status	XML.Get Element Text    		${Root}    .//PrimaryApplicant/ApplicantInfo/FirstName
	${FDTemp}=				Run Keyword If	${Stat}			XML.Get Element Text    		${Root}    .//PrimaryApplicant/ApplicantInfo/FirstName			
	CompareDTtoFD			ApplicantFirstName				${DTTemp}		${FDTemp}	
	
	${DTTemp}=				Get Value						//*[@id="id_middle_name"]
	${Stat}=    			Run Keyword And Return Status	XML.Get Element Text    		${Root}    	.//PrimaryApplicant/ApplicantInfo/MiddleInitial
	${FDTemp}=				Run Keyword If	${Stat}			XML.Get Element Text    		${Root}    	.//PrimaryApplicant/ApplicantInfo/MiddleInitial
	CompareDTtoFD			ApplicantMidName				${DTTemp}		${FDTemp}	
	
	${DTTemp}=				Get Value						//*[@id="id_last_name"]	
	${Stat}=    			Run Keyword And Return Status	XML.Get Element Text    		${Root}    	.//PrimaryApplicant/ApplicantInfo/LastName
	${FDTemp}=				Run Keyword If	${Stat}			XML.Get Element Text    		${Root}    	.//PrimaryApplicant/ApplicantInfo/LastName
	${len}=					Get Length						${FDTemp}
	${DDTemp2}=				Get Substring					${DTTemp}		0	${len}
		WriteToFile			${logfile}		Y				DTLastNameAsDisplayed!=${DTTemp}						
	CompareDTtoFD			ApplicantLastName				${DDTemp2}		${FDTemp}	

	${DTTemp}=				Get Value						//*[@id="id_suffix_code"]	
	${Stat}=    			Run Keyword And Return Status	XML.Get Element Text    		${Root}    	.//PrimaryApplicant/ApplicantInfo/Suffix		
	${FDTemp}=				Run Keyword If	${Stat}			XML.Get Element Text    		${Root}    	.//PrimaryApplicant/ApplicantInfo/Suffix
	CompareDTtoFD			ApplicantSuffix					${DTTemp}		${FDTemp}	
		
	${DTTemp}=				Get Value						//*[@id="id_line_1_address"]	
	${Stat}=    			Run Keyword And Return Status	XML.Get Element Text    		${Root}    	.//PrimaryApplicant/ApplicantInfo/CurrentAddress/AddressLine1		
	${FDTemp}=				Run Keyword If	${Stat}			XML.Get Element Text    		${Root}    	.//PrimaryApplicant/ApplicantInfo/CurrentAddress/AddressLine1
	CompareDTtoFD			ApplicantAddress1				${DTTemp}		${FDTemp}	
		
	${DTTemp}=				Get Value						//*[@id="id_line_2_address"]		
	${Stat}=    			Run Keyword And Return Status	XML.Get Element Text    		${Root}    	.//PrimaryApplicant/ApplicantInfo/CurrentAddress/AddressLine2		
	${FDTemp}=				Run Keyword If	${Stat}			XML.Get Element Text    		${Root}    	.//PrimaryApplicant/ApplicantInfo/CurrentAddress/AddressLine2
	CompareDTtoFD			ApplicantAddress2				${DTTemp}		${FDTemp}	
		
	${DTTemp}=				Get Value						//*[@id="id_city"]		
	${Stat}=    			Run Keyword And Return Status	XML.Get Element Text    		${Root}    	.//PrimaryApplicant/ApplicantInfo/CurrentAddress/City		
	${FDTemp}=				Run Keyword If	${Stat}			XML.Get Element Text    		${Root}    	.//PrimaryApplicant/ApplicantInfo/CurrentAddress/City
	CompareDTtoFD			ApplicantCity					${DTTemp}		${FDTemp}	
		
	${DTTemp}=				Get Value						//*[@id="id_us_state_code"]		
	${Stat}=    			Run Keyword And Return Status	XML.Get Element Text    		${Root}    	.//PrimaryApplicant/ApplicantInfo/CurrentAddress/State		
	${FDTemp}=				Run Keyword If	${Stat}			XML.Get Element Text    		${Root}    	.//PrimaryApplicant/ApplicantInfo/CurrentAddress/State
	CompareDTtoFD			ApplicantState					${DTTemp}		${FDTemp}	
		
	${DTTemp}=				Get Value						//*[@id="id_zip_code"]		
	${Stat}=    			Run Keyword And Return Status	XML.Get Element Text    		${Root}    	.//PrimaryApplicant/ApplicantInfo/CurrentAddress/ZipCode		
	${FDTemp}=				Run Keyword If	${Stat}			XML.Get Element Text    		${Root}    	.//PrimaryApplicant/ApplicantInfo/CurrentAddress/ZipCode
	CompareDTtoFD			ApplicantZip					${DTTemp}		${FDTemp}	

	${DTTemp}=				Get Value						//*[@id="id_primary_phone_type"]
		WriteToFile			${logfile}		Y				ApplicantPhoneType1=${FDTemp}

	${DTTemp}=				Get Value						//*[@id="id_primary_phone_number"]		
		${DTTemp}=			Run Keyword If	'${DTTemp}'!='${None}'		Replace String					${DTTemp}			(			${EMPTY}	
		${DTTemp}=			Run Keyword If	'${DTTemp}'!='${None}'		Replace String					${DTTemp}			)			${EMPTY}	
		${DTTemp}=			Run Keyword If	'${DTTemp}'!='${None}'		Replace String					${DTTemp}			-			${EMPTY}	
		${DTTemp}=			Run Keyword If	'${DTTemp}'!='${None}'		Replace String					${DTTemp}			${SPACE}	${EMPTY}		
	${Stat}=    			Run Keyword And Return Status	XML.Get Element Text    		${Root}    	.//PrimaryApplicant/ApplicantInfo/HomePhone		
	${FDTemp}=				Run Keyword If	${Stat}			XML.Get Element Text    		${Root}    	.//PrimaryApplicant/ApplicantInfo/HomePhone
		${FDTemp}=			Run Keyword If	'${FDTemp}'!='${None}'		Replace String					${FDTemp}			-			${EMPTY}		
	CompareDTtoFD			ApplicantPhone1					${DTTemp}		${FDTemp}	

	${DTTemp}=				Get Value						//*[@id="id_alternate_phone_type"]
		WriteToFile			${logfile}		Y				ApplicantPhoneType2=${DTTemp}						
	
	${DTTemp}=				Get Value						//*[@id="id_alternate_phone_number"]
		${DTTemp}=			Run Keyword If	'${DTTemp}'!='${None}'		Replace String					${DTTemp}			(			${EMPTY}	
		${DTTemp}=			Run Keyword If	'${DTTemp}'!='${None}'		Replace String					${DTTemp}			)			${EMPTY}	
		${DTTemp}=			Run Keyword If	'${DTTemp}'!='${None}'		Replace String					${DTTemp}			-			${EMPTY}	
		${DTTemp}=			Run Keyword If	'${DTTemp}'!='${None}'		Replace String					${DTTemp}			${SPACE}	${EMPTY}			
	${Stat}=    			Run Keyword And Return Status	XML.Get Element Text    		${Root}    	.//PrimaryApplicant/ApplicantInfo/CellPhone		
	${FDTemp}=				Run Keyword If	${Stat}			XML.Get Element Text    		${Root}    	.//PrimaryApplicant/ApplicantInfo/CellPhone
		${FDTemp}=			Run Keyword If	'${FDTemp}'!='${None}'			Replace String				${FDTemp}			-			${EMPTY}			
	CompareDTtoFD			ApplicantCell1					${DTTemp}		${FDTemp}	

	${DTTemp}=				Get Value						//*[@id="id_birth_date"]
	${Stat}=    			Run Keyword And Return Status	XML.Get Element Text    		${Root}    	.//PrimaryApplicant/ApplicantInfo/DateOfBirth		
	${FDTemp}=				Run Keyword If	${Stat}			XML.Get Element Text    		${Root}    	.//PrimaryApplicant/ApplicantInfo/DateOfBirth
		WriteToFile			${logfile}			Y			DT DOB=${DTTemp}			
		WriteToFile			${logfile}			Y			FD DOB=${FDTemp}			
	# CompareDTtoFD			ApplicantDOB					${DTTemp}		${FDTemp}	

	${DTTemp}=				Get Value						//*[@id="id_tax_id"]
	${Stat}=    			Run Keyword And Return Status	XML.Get Element Text    		${Root}    	.//PrimaryApplicant/ApplicantInfo/SSN		
	${FDTemp}=				Run Keyword If	${Stat}			XML.Get Element Text    		${Root}    	.//PrimaryApplicant/ApplicantInfo/SSN
		# remove hyphens, get ssn-last4, reformat as masked like DT2
		${FDTemp}=			Run Keyword If	'${FDTemp}'!='${None}'			Replace String				${FDTemp}			-			${EMPTY}				
		${FDTemp}=			Run Keyword If	'${FDTemp}'!='${None}'			WS_CommonUtil.GetSubStringFromAStringByPositions			${FDTemp}		5	9
		${FDTemp}=			Catenate	SEPARATOR=			***-**-			${FDTemp}
	CompareDTtoFD			ApplicantSSN					${DTTemp}		${FDTemp}		
	
	${stat}=				Run Keyword And Return Status	Element Should Be Visible		//*[@id="id_marital_status_code"]
	${DTTemp}=				Run Keyword If	${stat}==True	Get Selected List Label			//*[@id="id_marital_status_code"]
	${Stat}=    			Run Keyword And Return Status	XML.Get Element Text    		${Root}    	.//PrimaryApplicant/ApplicantInfo/MaritalStatus		
	${FDTemp}=				Run Keyword If	${Stat}			XML.Get Element Text    		${Root}    	.//PrimaryApplicant/ApplicantInfo/MaritalStatus
	CompareDTtoFD			ApplicantMaritalStatus			${DTTemp}		${FDTemp}			
		WriteToFile			${logfile}			Y			NOTE: This will always show a mismatch for WI where Relationship Status = 'Spouse' because FD behind the scenes is forcing MaritalStatus to be 'Married' to satisfy DT2 UI even though we don't even require MaritalStatus to be sent to service in xml				
	
	${DTTemp}=				Get Selected List Label			//*[@id="id_housing_status_code"]	
	${DTTemp}=				Run Keyword If	'${DTTemp}'=='Own Outright'		Replace String	${DTTemp}	${SPACE}		${Empty}	ELSE	Set Variable	${DTTemp}
	${Stat}=    			Run Keyword And Return Status	XML.Get Element Text    		${Root}    	.//PrimaryApplicant/ApplicantInfo/HousingStatus		
	${FDTemp}=				Run Keyword If	${Stat}			XML.Get Element Text    		${Root}    	.//PrimaryApplicant/ApplicantInfo/HousingStatus	
	${FDOwnOutright}=		Run Keyword If	${Stat} and '${DTTemp}'=='OwnOutright'			Set Variable	True	ELSE	Set Variable	False	
	CompareDTtoFD			ApplicantHousingStatus			${DTTemp}		${FDTemp}		
	
	${DTTemp}=				Get Value						//*[@id="id_mortgage_payment_or_rent"]
		${DTTemp}=			Run Keyword If	'${DTTemp}'!='${None}'		Replace String					${DTTemp}			,			${EMPTY}	
	${Stat}=    			Run Keyword And Return Status	XML.Get Element Text    		${Root}    	.//PrimaryApplicant/ApplicantInfo/MortgageOrRent		
	${FDTemp}=				Run Keyword If	${Stat}			XML.Get Element Text    		${Root}    	.//PrimaryApplicant/ApplicantInfo/MortgageOrRent
	Run Keyword If			'${FDOwnOutright}'=='False'		CompareDTtoFD					ApplicantMortgageOrRent			${DTTemp}		${FDTemp}				
	
	${stat1}=				Run Keyword And Return Status	Element Should Be Visible		//*[@id="id_current_address_years"]
	${DTTemp1}=				Run Keyword If	${stat1}==True	Get Value						//*[@id="id_current_address_years"]
	${stat2}=				Run Keyword And Return Status	Element Should Be Visible		//*[@id="id_current_address_months"]
	${DTTemp2}=				Run Keyword If	${stat2}==True	Get Value						//*[@id="id_current_address_months"]
	${DTTemp1}=				Run Keyword If	${stat1}==True						Evaluate	${DTTemp1} * 12		ELSE	Set Variable	${DTTemp1}
	${DTTemp1}=				Run Keyword If	${stat1}==True and ${stat2}==True	Evaluate	${DTTemp1} + ${DTTemp2}			ELSE	Set Variable	${DTTemp1}		
	${Stat}=    			Run Keyword And Return Status	XML.Get Element Text    		${Root}    	.//PrimaryApplicant/ApplicantInfo/TotalMonthsAtAddress		
	${FDTemp}=				Run Keyword If	${Stat}			XML.Get Element Text    		${Root}    	.//PrimaryApplicant/ApplicantInfo/TotalMonthsAtAddress
	CompareDTtoFD			ApplicantTotalMonthsAtAddress	${DTTemp1}		${FDTemp}		
	
	${DTTemp}=				Get Value						//*[@id="id_email_address"]
	${Stat}=    			Run Keyword And Return Status	XML.Get Element Text    		${Root}    	.//PrimaryApplicant/ApplicantInfo/EmailAddress		
	${FDTemp}=				Run Keyword If	${Stat}			XML.Get Element Text    		${Root}    	.//PrimaryApplicant/ApplicantInfo/EmailAddress
	CompareDTtoFD			ApplicantEmailAddress			${DTTemp}		${FDTemp}			
	
	${DTTemp}=				Get Value						//*[@id="id_drivers_license"]	
	${Stat}=    			Run Keyword And Return Status	XML.Get Element Text    		${Root}    	.//PrimaryApplicant/ApplicantInfo/DriverLicenseNumber		
	${FDTemp}=				Run Keyword If	${Stat}			XML.Get Element Text    		${Root}    	.//PrimaryApplicant/ApplicantInfo/DriverLicenseNumber
	CompareDTtoFD			ApplicantLicenseNumber			${DTTemp}		${FDTemp}				

	${DTTemp}=				Get Value						//*[@id="id_drivers_license_us_state_code"]		
	${Stat}=    			Run Keyword And Return Status	XML.Get Element Text    		${Root}    	.//PrimaryApplicant/ApplicantInfo/DriverLicenseState		
	${FDTemp}=				Run Keyword If	${Stat}			XML.Get Element Text    		${Root}    	.//PrimaryApplicant/ApplicantInfo/DriverLicenseState
	CompareDTtoFD			ApplicantLicenseState			${DTTemp}		${FDTemp}				

	${stat}=				Run Keyword And Return Status	Element Should Be Visible		//*[@id="id_previous_line_1_address"]
	${DTTemp}=				Run Keyword If	${stat}==True	Get Value						//*[@id="id_previous_line_1_address"]	
	${Stat}=    			Run Keyword And Return Status	XML.Get Element Text    		${Root}    	.//PrimaryApplicant/ApplicantInfo/PreviousAddress/AddressLine1		
	${FDTemp}=				Run Keyword If	${Stat}			XML.Get Element Text    		${Root}    	.//PrimaryApplicant/ApplicantInfo/PreviousAddress/AddressLine1
	CompareDTtoFD			ApplicantPrevAddressLine1		${DTTemp}		${FDTemp}	
		
	${stat}=				Run Keyword And Return Status	Element Should Be Visible		//*[@id="id_previous_line_2_address"]
	${DTTemp}=				Run Keyword If	${stat}==True	Get Value						//*[@id="id_previous_line_2_address"]
	${Stat}=    			Run Keyword And Return Status	XML.Get Element Text    		${Root}    	.//PrimaryApplicant/ApplicantInfo/PreviousAddress/AddressLine2		
	${FDTemp}=				Run Keyword If	${Stat}			XML.Get Element Text    		${Root}    	.//PrimaryApplicant/ApplicantInfo/PreviousAddress/AddressLine2
	CompareDTtoFD			ApplicantPrevAddressLine2		${DTTemp}		${FDTemp}	
		
	${stat}=				Run Keyword And Return Status	Element Should Be Visible		//*[@id="id_previous_city"]
	${DTTemp}=				Run Keyword If	${stat}==True	Get Value						//*[@id="id_previous_city"]
	${Stat}=    			Run Keyword And Return Status	XML.Get Element Text    		${Root}    	.//PrimaryApplicant/ApplicantInfo/PreviousAddress/City
	${FDTemp}=				Run Keyword If	${Stat}			XML.Get Element Text    		${Root}    	.//PrimaryApplicant/ApplicantInfo/PreviousAddress/City
	CompareDTtoFD			ApplicantPrevCity				${DTTemp}		${FDTemp}	
		
	${stat}=				Run Keyword And Return Status	Element Should Be Visible		//*[@id="id_previous_us_state_code"]
	${DTTemp}=				Run Keyword If	${stat}==True	Get Value						//*[@id="id_previous_us_state_code"]
	${Stat}=    			Run Keyword And Return Status	XML.Get Element Text    		${Root}    	.//PrimaryApplicant/ApplicantInfo/PreviousAddress/State
	${FDTemp}=				Run Keyword If	${Stat}			XML.Get Element Text    		${Root}    	.//PrimaryApplicant/ApplicantInfo/PreviousAddress/State
	CompareDTtoFD			ApplicantPrevState				${DTTemp}		${FDTemp}	
		
	${stat}=				Run Keyword And Return Status	Element Should Be Visible		//*[@id="id_previous_zip_code"]
	${DTTemp}=				Run Keyword If	${stat}==True	Get Value						//*[@id="id_previous_zip_code"]
	${Stat}=    			Run Keyword And Return Status	XML.Get Element Text    		${Root}    	.//PrimaryApplicant/ApplicantInfo/PreviousAddress/ZipCode
	${FDTemp}=				Run Keyword If	${Stat}			XML.Get Element Text    		${Root}    	.//PrimaryApplicant/ApplicantInfo/PreviousAddress/ZipCode
	CompareDTtoFD			ApplicantPrevZipCode			${DTTemp}		${FDTemp}	

	${stat1}=				Run Keyword And Return Status	Element Should Be Visible		//*[@id="id_previous_address_years"]
	${DTTemp1}=				Run Keyword If	${stat1}==True	Get Value						//*[@id="id_previous_address_years"]
	${stat2}=				Run Keyword And Return Status	Element Should Be Visible		//*[@id="id_previous_address_months"]
	${DTTemp2}=				Run Keyword If	${stat2}==True	Get Value						//*[@id="id_previous_address_months"]
	${DTTemp1}=				Run Keyword If	${stat1}==True						Evaluate	${DTTemp1} * 12		ELSE	Set Variable	${DTTemp1}
	${DTTemp1}=				Run Keyword If	${stat1}==True and ${stat2}==True	Evaluate	${DTTemp1} + ${DTTemp2}			ELSE	Set Variable	${DTTemp1}		
	${Stat}=    			Run Keyword And Return Status	XML.Get Element Text    		${Root}    	.//PrimaryApplicant/ApplicantInfo/TotalMonthsAtPreviousAddress		
	${FDTemp}=				Run Keyword If	${Stat}			XML.Get Element Text    		${Root}    	.//PrimaryApplicant/ApplicantInfo/TotalMonthsAtPreviousAddress
	CompareDTtoFD			ApplicantPrevTotalMonthsAtAddress	${DTTemp1}		${FDTemp}	
	
	${DTTemp}=				Get Selected List Label			//*[@id="id_employment_status_code"]	
	# ${DTTemp}=				Run Keyword If	'${DTTemp}'=='Active Military'		Replace String	${DTTemp}	${SPACE}		${Empty}	ELSE	Set Variable	${DTTemp}	
	${DTTemp}=				Replace String					${DTTemp}		${SPACE}		${Empty}
	${DTTemp}=				Replace String					${DTTemp}		-				${Empty}	
	${Stat}=    			Run Keyword And Return Status	XML.Get Element Text    		${Root}    	.//PrimaryApplicant/ApplicantInfo/CurrentEmploymentInfo/EmploymentStatus		
	${FDTemp}=				Run Keyword If	${Stat}			XML.Get Element Text    		${Root}    	.//PrimaryApplicant/ApplicantInfo/CurrentEmploymentInfo/EmploymentStatus
	# ${FDTemp}=				Run Keyword If	'${FDTemp}'=='SelfEmployed'						Set Variable	SELF EMPLOYED	ELSE	Set Variable	${FDTemp}	
	CompareDTtoFD			ApplicantEmploymentStatus		${DTTemp}		${FDTemp}				
	
	${DTTemp}=				Get Value						//*[@id="id_organization_name"]
	${Stat}=    			Run Keyword And Return Status	XML.Get Element Text    		${Root}    	.//PrimaryApplicant/ApplicantInfo/CurrentEmploymentInfo/EmployedBy		
	${FDTemp}=				Run Keyword If	${Stat}			XML.Get Element Text    		${Root}    	.//PrimaryApplicant/ApplicantInfo/CurrentEmploymentInfo/EmployedBy
	${FDTemp}=				Run Keyword If	'${DTTemp}'=='SELF EMPLOYED' and '${FDTemp}'=='${EMPTY}'	Set Variable	SELF EMPLOYED	ELSE	Set Variable	${FDTemp}		
	CompareDTtoFD			ApplicantEmployedBy				${DTTemp}		${FDTemp}				
		
	${DTTemp}=				Get Value						//*[@id="id_occupation_name"]
	${Stat}=    			Run Keyword And Return Status	XML.Get Element Text    		${Root}    	.//PrimaryApplicant/ApplicantInfo/CurrentEmploymentInfo/Occupation		
	${FDTemp}=				Run Keyword If	${Stat}			XML.Get Element Text    		${Root}    	.//PrimaryApplicant/ApplicantInfo/CurrentEmploymentInfo/Occupation
	CompareDTtoFD			ApplicantOccupation				${DTTemp}		${FDTemp}				

	${DTTemp}=				Get Value						//*[@id="id_work_phone_number"]
		${DTTemp}=			Run Keyword If	'${DTTemp}'!='${None}'		Replace String					${DTTemp}			(			${EMPTY}	
		${DTTemp}=			Run Keyword If	'${DTTemp}'!='${None}'		Replace String					${DTTemp}			)			${EMPTY}	
		${DTTemp}=			Run Keyword If	'${DTTemp}'!='${None}'		Replace String					${DTTemp}			-			${EMPTY}	
		${DTTemp}=			Run Keyword If	'${DTTemp}'!='${None}'		Replace String					${DTTemp}			${SPACE}	${EMPTY}		
	${Stat}=    			Run Keyword And Return Status	XML.Get Element Text    		${Root}    	.//PrimaryApplicant/ApplicantInfo/CurrentEmploymentInfo/BusinessPhone		
	${FDTemp}=				Run Keyword If	${Stat}			XML.Get Element Text    		${Root}    	.//PrimaryApplicant/ApplicantInfo/CurrentEmploymentInfo/BusinessPhone
		${FDTemp}=			Run Keyword If	'${FDTemp}'!='${None}'		Replace String					${FDTemp}			-			${EMPTY}		
	CompareDTtoFD			ApplicantBusinessPhone			${DTTemp}		${FDTemp}				
		
	${stat}=				Run Keyword And Return Status	Element Should Be Visible		//*[@id="id_salary"]
	${DTTemp}=				Run Keyword If	${stat}==True	Get Value						//*[@id="id_salary"]
		${DTTemp}=			Run Keyword If	'${DTTemp}'!='${None}'		Replace String					${DTTemp}			,			${EMPTY}	
	${Stat}=    			Run Keyword And Return Status	XML.Get Element Text    		${Root}    	.//PrimaryApplicant/ApplicantInfo/Income/Value		
	${FDTemp}=				Run Keyword If	${Stat}			XML.Get Element Text    		${Root}    	.//PrimaryApplicant/ApplicantInfo/Income/Value
	CompareDTtoFD			ApplicantIncomeValue			${DTTemp}		${FDTemp}				
		
	${stat}=				Run Keyword And Return Status	Element Should Be Visible		//*[@id="id_salary_type_code"]
	${DTTemp}=				Run Keyword If	${stat}==True	Get Selected List Label			//*[@id="id_salary_type_code"]
		${DTTemp}=			Run Keyword If	'${DTTemp}'!='${None}'		Replace String					${DTTemp}			-			${EMPTY}	#Bi-weekly		
	${Stat}=    			Run Keyword And Return Status	XML.Get Element Text    		${Root}    	.//PrimaryApplicant/ApplicantInfo/Income/Type		
	${FDTemp}=				Run Keyword If	${Stat}			XML.Get Element Text    		${Root}    	.//PrimaryApplicant/ApplicantInfo/Income/Type
	CompareDTtoFD			ApplicantIncomeType				${DTTemp}		${FDTemp}				

	${stat1}=				Run Keyword And Return Status	Element Should Be Visible		//*[@id="id_current_employed_years"]
	${DTTemp1}=				Run Keyword If	${stat1}==True	Get Value						//*[@id="id_current_employed_years"]
	${stat2}=				Run Keyword And Return Status	Element Should Be Visible		//*[@id="id_current_employed_months"]
	${DTTemp2}=				Run Keyword If	${stat2}==True	Get Value						//*[@id="id_current_employed_months"]
	${DTTemp1}=				Run Keyword If	${stat1}==True						Evaluate	${DTTemp1} * 12		ELSE	Set Variable	${DTTemp1}
	${DTTemp1}=				Run Keyword If	${stat1}==True and ${stat2}==True	Evaluate	${DTTemp1} + ${DTTemp2}			ELSE	Set Variable	${DTTemp1}			
	${Stat}=    			Run Keyword And Return Status	XML.Get Element Text    		${Root}    	.//PrimaryApplicant/ApplicantInfo/CurrentEmploymentInfo/TotalMonthsEmployed		
	${FDTemp}=				Run Keyword If	${Stat}			XML.Get Element Text    		${Root}    	.//PrimaryApplicant/ApplicantInfo/CurrentEmploymentInfo/TotalMonthsEmployed
	CompareDTtoFD			ApplicantTotalMonthsEmployed	${DTTemp1}		${FDTemp}				
		
	${DTTemp}=				Get Value						//*[@id="id_other_monthly_income"]			
		${DTTemp}=			Run Keyword If	'${DTTemp}'!='${None}'		Replace String					${DTTemp}			,			${EMPTY}		
	${Stat}=    			Run Keyword And Return Status	XML.Get Element Text    		${Root}    	.//PrimaryApplicant/ApplicantInfo/OtherMonthlyIncome				
	${FDTemp}=				Run Keyword If	${Stat}			XML.Get Element Text    		${Root}    	.//PrimaryApplicant/ApplicantInfo/OtherMonthlyIncome		
	CompareDTtoFD			ApplicantOtherMonthlyIncome		${DTTemp}		${FDTemp}				
		
	${DTTemp}=				Get Value						//*[@id="id_other_income_source"]		
	${Stat}=    			Run Keyword And Return Status	XML.Get Element Text    		${Root}    	.//PrimaryApplicant/ApplicantInfo/OtherIncomeSource		
	${FDTemp}=				Run Keyword If	${Stat}			XML.Get Element Text    		${Root}    	.//PrimaryApplicant/ApplicantInfo/OtherIncomeSource
	CompareDTtoFD			ApplicantOtherIncomeSource		${DTTemp}		${FDTemp}				

	${stat}=				Run Keyword And Return Status	Element Should Be Visible		//*[@id="id_previous_employment_status_code"]
	${DTTemp}=				Run Keyword If	${stat}==True	Get Selected List Label			//*[@id="id_previous_employment_status_code"]	
	${DTTemp}=				Run Keyword If	'${stat}'=='True'	Replace String	${DTTemp}	${SPACE}	${Empty}	ELSE	Set Variable	${DTTemp}		
	${DTTemp}=				Run Keyword If	'${stat}'=='True'	Replace String	${DTTemp}	-			${Empty}	ELSE	Set Variable	${DTTemp}			
	${Stat}=    			Run Keyword And Return Status	XML.Get Element Text    		${Root}    	.//PrimaryApplicant/ApplicantInfo/PreviousEmploymentInfo/EmploymentStatus		
	${FDTemp}=				Run Keyword If	${Stat}			XML.Get Element Text    		${Root}    	.//PrimaryApplicant/ApplicantInfo/PreviousEmploymentInfo/EmploymentStatus
	# ${FDTemp}=				Run Keyword If	'${FDTemp}'=='SelfEmployed'						Set Variable	SELF EMPLOYED	ELSE	Set Variable	${FDTemp}		
	CompareDTtoFD			ApplicantPrevEmploymentStatus	${DTTemp}		${FDTemp}	
	
	${stat}=				Run Keyword And Return Status	Element Should Be Visible		//*[@id="id_previous_organization_name"]
	${DTTemp}=				Run Keyword If	${stat}==True	Get Value						//*[@id="id_previous_organization_name"]
	${Stat}=    			Run Keyword And Return Status	XML.Get Element Text    		${Root}    	.//PrimaryApplicant/ApplicantInfo/PreviousEmploymentInfo/EmployedBy
	${FDTemp}=				Run Keyword If	${Stat}			XML.Get Element Text    		${Root}    	.//PrimaryApplicant/ApplicantInfo/PreviousEmploymentInfo/EmployedBy
	${FDTemp}=				Run Keyword If	'${DTTemp}'=='SELF EMPLOYED' and '${FDTemp}'=='${EMPTY}'	Set Variable	SELF EMPLOYED	ELSE	Set Variable	${FDTemp}		
	CompareDTtoFD			ApplicantPrevEmployedBy			${DTTemp}		${FDTemp}	

	${stat}=				Run Keyword And Return Status	Element Should Be Visible		//*[@id="id_previous_occupation_name"]
	${DTTemp}=				Run Keyword If	${stat}==True	Get Value						//*[@id="id_previous_occupation_name"]
	${Stat}=    			Run Keyword And Return Status	XML.Get Element Text    		${Root}    	.//PrimaryApplicant/ApplicantInfo/PreviousEmploymentInfo/Occupation		
	${FDTemp}=				Run Keyword If	${Stat}			XML.Get Element Text    		${Root}    	.//PrimaryApplicant/ApplicantInfo/PreviousEmploymentInfo/Occupation
	CompareDTtoFD			ApplicantPrevOccupation			${DTTemp}		${FDTemp}	
	
	${stat}=				Run Keyword And Return Status	Element Should Be Visible		//*[@id="id_previous_work_phone_number"]
	${DTTemp}=				Run Keyword If	${stat}==True	Get Value						//*[@id="id_previous_work_phone_number"]
		${DTTemp}=			Run Keyword If	'${DTTemp}'!='${None}'		Replace String					${DTTemp}			(			${EMPTY}	
		${DTTemp}=			Run Keyword If	'${DTTemp}'!='${None}'		Replace String					${DTTemp}			)			${EMPTY}	
		${DTTemp}=			Run Keyword If	'${DTTemp}'!='${None}'		Replace String					${DTTemp}			-			${EMPTY}	
		${DTTemp}=			Run Keyword If	'${DTTemp}'!='${None}'		Replace String					${DTTemp}			${SPACE}	${EMPTY}		
	${Stat}=    			Run Keyword And Return Status	XML.Get Element Text    		${Root}    	.//PrimaryApplicant/ApplicantInfo/PreviousEmploymentInfo/BusinessPhone		
	${FDTemp}=				Run Keyword If	${Stat}			XML.Get Element Text    		${Root}    	.//PrimaryApplicant/ApplicantInfo/PreviousEmploymentInfo/BusinessPhone
		${FDTemp}=			Run Keyword If	'${FDTemp}'!='${None}'		Replace String					${FDTemp}			-			${EMPTY}		
	CompareDTtoFD			ApplicantPrevBusinessPhone		${DTTemp}		${FDTemp}	
	
	${stat1}=				Run Keyword And Return Status	Element Should Be Visible		//*[@id="id_previous_employed_years"]
	${DTTemp1}=				Run Keyword If	${stat1}==True	Get Value						//*[@id="id_previous_employed_years"]
	${stat2}=				Run Keyword And Return Status	Element Should Be Visible		//*[@id="id_previous_employed_months"]
	${DTTemp2}=				Run Keyword If	${stat2}==True	Get Value						//*[@id="id_previous_employed_months"]
	${DTTemp1}=				Run Keyword If	${stat1}==True						Evaluate	${DTTemp1} * 12		ELSE	Set Variable	${DTTemp1}
	${DTTemp1}=				Run Keyword If	${stat1}==True and ${stat2}==True	Evaluate	${DTTemp1} + ${DTTemp2}			ELSE	Set Variable	${DTTemp1}	
	${Stat}=    			Run Keyword And Return Status	XML.Get Element Text    		${Root}    	.//PrimaryApplicant/ApplicantInfo/PreviousEmploymentInfo/TotalMonthsEmployed
	${FDTemp}=				Run Keyword If	${Stat}			XML.Get Element Text    		${Root}    	.//PrimaryApplicant/ApplicantInfo/PreviousEmploymentInfo/TotalMonthsEmployed
	# ${FDTemp}=				Set Variable					None
	CompareDTtoFD			ApplicantPrevTotalMonthsEmployed	${DTTemp1}		${FDTemp}	
	
	${DTTemp}=				Get Value						//*[@id="id_custom_credit_score"]
		WriteToFile			${logfile}		Y				DT CreditScore=${DTTemp}										
		
	${stat}=				Run Keyword And Return Status	Element Should Be Visible						//*[@id="submit-id-_continue_"]	
	Click Button																							//*[@id="submit-id-_continue_"]	
	
	#Check for DT2 error on page. There nmay be data that was not accepted by DT2 in AppSave.
	${stat}=				Run Keyword And Return Status	Page Should Not Contain 						There was an error found below
	Run Keyword If			${stat}==False					WriteToFile		${logfile}		Y				$ERROR - FAILED: Error on DT2 Page
	Run Keyword If			${stat}==False					Run Keyword And Continue On Failure		Fail	$ERROR - FAILED: Error on DT2 Page
		
	##########################################################
	#Get the app data from the Application page Co-Applicant		
		WriteToFile			${logfile}		Y				${Empty}					
		WriteToFile			${logfile}		Y				@DT App Page-Co-Applicant --------------------------------				
		
	${stat}=				Run Keyword And Return Status	Element Should Be Visible		//*[@id="id_party_relationship_code"]
	${DTTemp}=				Run Keyword If	${stat}==True	Get Selected List Label			//*[@id="id_party_relationship_code"]	
	${DTTemp}=				Run Keyword If	'${stat}'=='True'	Replace String	${DTTemp}	${SPACE}	${Empty}	ELSE	Set Variable	${DTTemp}		
	${DTTemp}=				Run Keyword If	'${stat}'=='True'	Replace String	${DTTemp}	.			${Empty}	ELSE	Set Variable	${DTTemp}				
	${Stat}=    			Run Keyword And Return Status	XML.Get Element Text    		${Root}    	.//CoApplicant/Relationship		
	${FDTemp}=				Run Keyword If	${Stat}			XML.Get Element Text    		${Root}    	.//CoApplicant/Relationship
	CompareDTtoFD			CoAppRelationship				${DTTemp}		${FDTemp}				

	${stat}=				Run Keyword And Return Status	Element Should Be Visible		//*[@id="id_first_name"]
	${DTTemp}=				Run Keyword If	${stat}==True	Get Value						//*[@id="id_first_name"]	
	${Stat}=    			Run Keyword And Return Status	XML.Get Element Text    		${Root}    	.//CoApplicant/ApplicantInfo/FirstName		
	${FDTemp}=				Run Keyword If	${Stat}			XML.Get Element Text    		${Root}    	.//CoApplicant/ApplicantInfo/FirstName
	CompareDTtoFD			CoAppFirstName					${DTTemp}		${FDTemp}				
		
	${stat}=				Run Keyword And Return Status	Element Should Be Visible		//*[@id="id_middle_name"]
	${DTTemp}=				Run Keyword If	${stat}==True	Get Value						//*[@id="id_middle_name"]
	${Stat}=    			Run Keyword And Return Status	XML.Get Element Text    		${Root}    	.//CoApplicant/ApplicantInfo/MiddleInitial		
	${FDTemp}=				Run Keyword If	${Stat}			XML.Get Element Text    		${Root}    	.//CoApplicant/ApplicantInfo/MiddleInitial
	CompareDTtoFD			CoAppMidName					${DTTemp}		${FDTemp}				
		
	${stat}=				Run Keyword And Return Status	Element Should Be Visible		//*[@id="id_last_name"]
	${DTTemp}=				Run Keyword If	${stat}==True	Get Value						//*[@id="id_last_name"]
	${Stat}=    			Run Keyword And Return Status	XML.Get Element Text    		${Root}    	.//CoApplicant/ApplicantInfo/LastName		
	${FDTemp}=				Run Keyword If	${Stat}			XML.Get Element Text    		${Root}    	.//CoApplicant/ApplicantInfo/LastName
	${len}=					Run Keyword If	${Stat}			Get Length						${FDTemp}
	${DDTemp2}=				Run Keyword If	${Stat}			Get Substring					${DTTemp}		0	${len}
		WriteToFile			${logfile}		Y				DTLastNameAsDisplayed!=${DTTemp}		
	CompareDTtoFD			CoAppLastName					${DDTemp2}		${FDTemp}				
		
	${stat}=				Run Keyword And Return Status	Element Should Be Visible		//*[@id="id_suffix_code"]
	${DTTemp}=				Run Keyword If	${stat}==True	Get Selected List Label			//*[@id="id_suffix_code"]
	${Stat}=    			Run Keyword And Return Status	XML.Get Element Text    		${Root}    	.//CoApplicant/ApplicantInfo/Suffix		
	${FDTemp}=				Run Keyword If	${Stat}			XML.Get Element Text    		${Root}    	.//CoApplicant/ApplicantInfo/Suffix
	CompareDTtoFD			CoAppSuffix						${DTTemp}		${FDTemp}	

	${stat}=				Run Keyword And Return Status	Element Should Be Visible		//*[@id="id_line_1_address"]
	${DTTemp}=				Run Keyword If	${stat}==True	Get Value						//*[@id="id_line_1_address"]	
	${Stat}=    			Run Keyword And Return Status	XML.Get Element Text    		${Root}    	.//CoApplicant/ApplicantInfo/CurrentAddress/AddressLine1		
	${FDTemp}=				Run Keyword If	${Stat}			XML.Get Element Text    		${Root}    	.//CoApplicant/ApplicantInfo/CurrentAddress/AddressLine1
	CompareDTtoFD			CoAppAddressLine1				${DTTemp}		${FDTemp}	
		
	${stat}=				Run Keyword And Return Status	Element Should Be Visible		//*[@id="id_line_2_address"]
	${DTTemp}=				Run Keyword If	${stat}==True	Get Value						//*[@id="id_line_2_address"]
	${Stat}=    			Run Keyword And Return Status	XML.Get Element Text    		${Root}    	.//CoApplicant/ApplicantInfo/CurrentAddress/AddressLine2		
	${FDTemp}=				Run Keyword If	${Stat}			XML.Get Element Text    		${Root}    	.//CoApplicant/ApplicantInfo/CurrentAddress/AddressLine2
	CompareDTtoFD			CoAppAddressLine2				${DTTemp}		${FDTemp}	
		
	${stat}=				Run Keyword And Return Status	Element Should Be Visible		//*[@id="id_city"]
	${DTTemp}=				Run Keyword If	${stat}==True	Get Value						//*[@id="id_city"]
	${Stat}=    			Run Keyword And Return Status	XML.Get Element Text    		${Root}    	.//CoApplicant/ApplicantInfo/CurrentAddress/City
	${FDTemp}=				Run Keyword If	${Stat}			XML.Get Element Text    		${Root}    	.//CoApplicant/ApplicantInfo/CurrentAddress/City
	CompareDTtoFD			CoAppCity						${DTTemp}		${FDTemp}	
		
	${stat}=				Run Keyword And Return Status	Element Should Be Visible		//*[@id="id_us_state_code"]
	${DTTemp}=				Run Keyword If	${stat}==True	Get Value						//*[@id="id_us_state_code"]
	${Stat}=    			Run Keyword And Return Status	XML.Get Element Text    		${Root}    	.//CoApplicant/ApplicantInfo/CurrentAddress/State
	${FDTemp}=				Run Keyword If	${Stat}			XML.Get Element Text    		${Root}    	.//CoApplicant/ApplicantInfo/CurrentAddress/State
	CompareDTtoFD			CoAppState						${DTTemp}		${FDTemp}	
		
	${stat}=				Run Keyword And Return Status	Element Should Be Visible		//*[@id="id_zip_code"]
	${DTTemp}=				Run Keyword If	${stat}==True	Get Value						//*[@id="id_zip_code"]
	${Stat}=    			Run Keyword And Return Status	XML.Get Element Text    		${Root}    	.//CoApplicant/ApplicantInfo/CurrentAddress/ZipCode
	${FDTemp}=				Run Keyword If	${Stat}			XML.Get Element Text    		${Root}    	.//CoApplicant/ApplicantInfo/CurrentAddress/ZipCode
	CompareDTtoFD			CoAppZipCode					${DTTemp}		${FDTemp}	
		
	${stat}=				Run Keyword And Return Status	Element Should Be Visible		//*[@id="id_primary_phone_type"]
	${DTTemp}=				Run Keyword If	${stat}==True	Get Value						//*[@id="id_primary_phone_type"]
		WriteToFile			${logfile}		Y				DT PhoneType1=${DTTemp}				
		
	${stat}=				Run Keyword And Return Status	Element Should Be Visible		//*[@id="id_primary_phone_number"]
	${DTTemp}=				Run Keyword If	${stat}==True	Get Value						//*[@id="id_primary_phone_number"]
		${DTTemp}=			Run Keyword If	'${DTTemp}'!='${None}'		Replace String					${DTTemp}			(			${EMPTY}	
		${DTTemp}=			Run Keyword If	'${DTTemp}'!='${None}'		Replace String					${DTTemp}			)			${EMPTY}	
		${DTTemp}=			Run Keyword If	'${DTTemp}'!='${None}'		Replace String					${DTTemp}			-			${EMPTY}	
		${DTTemp}=			Run Keyword If	'${DTTemp}'!='${None}'		Replace String					${DTTemp}			${SPACE}	${EMPTY}						
	${Stat}=    			Run Keyword And Return Status	XML.Get Element Text    		${Root}    	.//CoApplicant/ApplicantInfo/HomePhone		
	${FDTemp}=				Run Keyword If	${Stat}			XML.Get Element Text    		${Root}    	.//CoApplicant/ApplicantInfo/HomePhone
		${FDTemp}=			Run Keyword If	'${FDTemp}'!='${None}'		Replace String					${FDTemp}			-			${EMPTY}			
	CompareDTtoFD			CoAppHomePhone					${DTTemp}		${FDTemp}	

	${stat}=				Run Keyword And Return Status	Element Should Be Visible		//*[@id="id_alternate_phone_type"]
	${DTTemp}=				Run Keyword If	${stat}==True	Get Value						//*[@id="id_alternate_phone_type"]
		WriteToFile			${logfile}		Y				DT PhoneType2=${DTTemp}	

	${stat}=				Run Keyword And Return Status	Element Should Be Visible		//*[@id="id_alternate_phone_number"]
	${DTTemp}=				Run Keyword If	${stat}==True	Get Value						//*[@id="id_alternate_phone_number"]
		${DTTemp}=			Run Keyword If	'${DTTemp}'!='${None}'		Replace String					${DTTemp}			(			${EMPTY}	
		${DTTemp}=			Run Keyword If	'${DTTemp}'!='${None}'		Replace String					${DTTemp}			)			${EMPTY}	
		${DTTemp}=			Run Keyword If	'${DTTemp}'!='${None}'		Replace String					${DTTemp}			-			${EMPTY}	
		${DTTemp}=			Run Keyword If	'${DTTemp}'!='${None}'		Replace String					${DTTemp}			${SPACE}	${EMPTY}				
	${Stat}=    			Run Keyword And Return Status	XML.Get Element Text    		${Root}    	.//CoApplicant/ApplicantInfo/CellPhone		
	${FDTemp}=				Run Keyword If	${Stat}			XML.Get Element Text    		${Root}    	.//CoApplicant/ApplicantInfo/CellPhone
		${FDTemp}=			Run Keyword If	'${FDTemp}'!='${None}'		Replace String					${FDTemp}			-			${EMPTY}			
	CompareDTtoFD			CoAppCellPhone					${DTTemp}		${FDTemp}	
	
	${stat}=				Run Keyword And Return Status	Element Should Be Visible		//*[@id="id_birth_date"]
	${DTTemp}=				Run Keyword If	${stat}==True	Get Value						//*[@id="id_birth_date"]
	${Stat}=    			Run Keyword And Return Status	XML.Get Element Text    		${Root}    	.//CoApplicant/ApplicantInfo/DateOfBirth		
	${FDTemp}=				Run Keyword If	${Stat}			XML.Get Element Text    		${Root}    	.//CoApplicant/ApplicantInfo/DateOfBirth
		WriteToFile			${logfile}			Y			DT DOB=${DTTemp}			
		WriteToFile			${logfile}			Y			FD DOB=${FDTemp}				
	# CompareDTtoFD			CoAppDOB						${DTTemp}		${FDTemp}	
	
	${DTTemp}=				Get Value						//*[@id="id_tax_id"]
	${Stat}=    			Run Keyword And Return Status	XML.Get Element Text    		${Root}    	.//CoApplicant/ApplicantInfo/SSN		
	${FDTemp}=				Run Keyword If	${Stat}			XML.Get Element Text    		${Root}    	.//CoApplicant/ApplicantInfo/SSN
		# remove hyphens, get ssn-last4, reformat as masked like DT2
		${FDTemp}=			Run Keyword If	'${FDTemp}'!='${None}'			Replace String				${FDTemp}			-			${EMPTY}				
		${FDTemp}=			Run Keyword If	'${FDTemp}'!='${None}'			WS_CommonUtil.GetSubStringFromAStringByPositions			${FDTemp}		5	9
		${FDTemp}=			Run Keyword If	'${FDTemp}'!='${None}'			Catenate		SEPARATOR=			***-**-			${FDTemp}
	CompareDTtoFD			CoAppApplicantSSN				${DTTemp}		${FDTemp}		
	
	${stat}=				Run Keyword And Return Status	Element Should Be Visible		//*[@id="id_marital_status_code"]
	${DTTemp}=				Run Keyword If	${stat}==True	Get Selected List Label			//*[@id="id_marital_status_code"]
	${Stat}=    			Run Keyword And Return Status	XML.Get Element Text    		${Root}    	.//CoApplicant/ApplicantInfo/MaritalStatus		
	${FDTemp}=				Run Keyword If	${Stat}			XML.Get Element Text    		${Root}    	.//CoApplicant/ApplicantInfo/MaritalStatus
	CompareDTtoFD			CoAppMaritalStatus				${DTTemp}		${FDTemp}				
		WriteToFile			${logfile}			Y			NOTE: This will always show a mismatch for WI where Relationship Status = 'Spouse' because FD behind the scenes is forcing MaritalStatus to be 'Married' to satisfy DT2 UI even though we don't even require MaritalStatus to be sent to service in xml					
	
	${stat}=				Run Keyword And Return Status	Element Should Be Visible		//*[@id="id_housing_status_code"]
	${DTTemp}=				Run Keyword If	${stat}==True	Get Selected List Label			//*[@id="id_housing_status_code"]
	${DTTemp}=				Run Keyword If	${stat}==True and '${DTTemp}'=='Own Outright'	Replace String	${DTTemp}	${SPACE}		${Empty}	ELSE	Set Variable	${DTTemp}	
	${Stat}=    			Run Keyword And Return Status	XML.Get Element Text    		${Root}    	.//CoApplicant/ApplicantInfo/HousingStatus		
	${FDTemp}=				Run Keyword If	${Stat}			XML.Get Element Text    		${Root}    	.//CoApplicant/ApplicantInfo/HousingStatus
	CompareDTtoFD			CoAppHousingStatus				${DTTemp}		${FDTemp}	
	
	#Doesn't look like this is captured for CoApp
	${stat}=				Run Keyword And Return Status	Element Should Be Visible		//*[@id="id_mortgage_payment_or_rent"]
	${DTTemp}=				Run Keyword If	${stat}==True	Get Value						//*[@id="id_mortgage_payment_or_rent"]
		${DTTemp}=			Run Keyword If	'${DTTemp}'!='${None}'		Replace String					${DTTemp}			,			${EMPTY}		
	${Stat}=    			Run Keyword And Return Status	XML.Get Element Text    		${Root}    	.//CoApplicant/ApplicantInfo/MortgageOrRent		
	${FDTemp}=				Run Keyword If	${Stat}			XML.Get Element Text    		${Root}    	.//CoApplicant/ApplicantInfo/MortgageOrRent
	# CompareDTtoFD			CoAppMortgageOrRent				${DTTemp}		${FDTemp}	
	
	${stat1}=				Run Keyword And Return Status	Element Should Be Visible		//*[@id="id_current_address_years"]
	${DTTemp1}=				Run Keyword If	${stat1}==True	Get Value						//*[@id="id_current_address_years"]
	${stat2}=				Run Keyword And Return Status	Element Should Be Visible		//*[@id="id_current_address_months"]
	${DTTemp2}=				Run Keyword If	${stat2}==True	Get Value						//*[@id="id_current_address_months"]
	${DTTemp1}=				Run Keyword If	${stat1}==True						Evaluate	${DTTemp1} * 12		ELSE	Set Variable	${DTTemp1}
	${DTTemp1}=				Run Keyword If	${stat1}==True and ${stat2}==True	Evaluate	${DTTemp1} + ${DTTemp2}			ELSE	Set Variable	${DTTemp1}		
	${Stat}=    			Run Keyword And Return Status	XML.Get Element Text    		${Root}    	.//CoApplicant/ApplicantInfo/TotalMonthsAtAddress		
	${FDTemp}=				Run Keyword If	${Stat}			XML.Get Element Text    		${Root}    	.//CoApplicant/ApplicantInfo/TotalMonthsAtAddress
	CompareDTtoFD			CoAppTotalMonthsAtAddress		${DTTemp1}		${FDTemp}	

	${stat}=				Run Keyword And Return Status	Element Should Be Visible		//*[@id="id_email_address"]
	${DTTemp}=				Run Keyword If	${stat}==True	Get Value						//*[@id="id_email_address"]
	${Stat}=    			Run Keyword And Return Status	XML.Get Element Text    		${Root}    	.//CoApplicant/ApplicantInfo/EmailAddress		
	${FDTemp}=				Run Keyword If	${Stat}			XML.Get Element Text    		${Root}    	.//CoApplicant/ApplicantInfo/EmailAddress
	CompareDTtoFD			CoAppEmailAddress				${DTTemp}		${FDTemp}	
	
	${stat}=				Run Keyword And Return Status	Element Should Be Visible		//*[@id="id_drivers_license"]
	${DTTemp}=				Run Keyword If	${stat}==True	Get Value						//*[@id="id_drivers_license"]
	${Stat}=    			Run Keyword And Return Status	XML.Get Element Text    		${Root}    	.//CoApplicant/ApplicantInfo/DriverLicenseNumber		
	${FDTemp}=				Run Keyword If	${Stat}			XML.Get Element Text    		${Root}    	.//CoApplicant/ApplicantInfo/DriverLicenseNumber
	CompareDTtoFD			CoAppLicenseNumber				${DTTemp}		${FDTemp}	
	
	${stat}=				Run Keyword And Return Status	Element Should Be Visible		//*[@id="id_drivers_license_us_state_code"]
	${DTTemp}=				Run Keyword If	${stat}==True	Get Value						//*[@id="id_drivers_license_us_state_code"]
	${Stat}=    			Run Keyword And Return Status	XML.Get Element Text    		${Root}    	.//CoApplicant/ApplicantInfo/DriverLicenseState			
	${FDTemp}=				Run Keyword If	${Stat}			XML.Get Element Text    		${Root}    	.//CoApplicant/ApplicantInfo/DriverLicenseState	
	CompareDTtoFD			CoAppLicenseState				${DTTemp}		${FDTemp}	

	${stat}=				Run Keyword And Return Status	Element Should Be Visible		//*[@id="id_previous_line_1_address"]
	${DTTemp}=				Run Keyword If	${stat}==True	Get Value						//*[@id="id_previous_line_1_address"]	
	${Stat}=    			Run Keyword And Return Status	XML.Get Element Text    		${Root}    	.//CoApplicant/ApplicantInfo/PreviousAddress/AddressLine1		
	${FDTemp}=				Run Keyword If	${Stat}			XML.Get Element Text    		${Root}    	.//CoApplicant/ApplicantInfo/PreviousAddress/AddressLine1
	CompareDTtoFD			CoAppPrevAddressLine1			${DTTemp}		${FDTemp}	
		
	${stat}=				Run Keyword And Return Status	Element Should Be Visible		//*[@id="id_previous_line_2_address"]
	${DTTemp}=				Run Keyword If	${stat}==True	Get Value						//*[@id="id_previous_line_2_address"]
	${Stat}=    			Run Keyword And Return Status	XML.Get Element Text    		${Root}    	.//CoApplicant/ApplicantInfo/PreviousAddress/AddressLine2		
	${FDTemp}=				Run Keyword If	${Stat}			XML.Get Element Text    		${Root}    	.//CoApplicant/ApplicantInfo/PreviousAddress/AddressLine2
	CompareDTtoFD			CoAppPrevAddressLine2			${DTTemp}		${FDTemp}	
		
	${stat}=				Run Keyword And Return Status	Element Should Be Visible		//*[@id="id_previous_city"]
	${DTTemp}=				Run Keyword If	${stat}==True	Get Value						//*[@id="id_previous_city"]
	${Stat}=    			Run Keyword And Return Status	XML.Get Element Text    		${Root}    	.//CoApplicant/ApplicantInfo/PreviousAddress/City
	${FDTemp}=				Run Keyword If	${Stat}			XML.Get Element Text    		${Root}    	.//CoApplicant/ApplicantInfo/PreviousAddress/City
	CompareDTtoFD			CoAppPrevCity					${DTTemp}		${FDTemp}	
		
	${stat}=				Run Keyword And Return Status	Element Should Be Visible		//*[@id="id_previous_us_state_code"]
	${DTTemp}=				Run Keyword If	${stat}==True	Get Value						//*[@id="id_previous_us_state_code"]
	${Stat}=    			Run Keyword And Return Status	XML.Get Element Text    		${Root}    	.//CoApplicant/ApplicantInfo/PreviousAddress/State
	${FDTemp}=				Run Keyword If	${Stat}			XML.Get Element Text    		${Root}    	.//CoApplicant/ApplicantInfo/PreviousAddress/State
	CompareDTtoFD			CoAppPrevState					${DTTemp}		${FDTemp}	
		
	${stat}=				Run Keyword And Return Status	Element Should Be Visible		//*[@id="id_previous_zip_code"]
	${DTTemp}=				Run Keyword If	${stat}==True	Get Value						//*[@id="id_previous_zip_code"]
	${Stat}=    			Run Keyword And Return Status	XML.Get Element Text    		${Root}    	.//CoApplicant/ApplicantInfo/PreviousAddress/ZipCode
	${FDTemp}=				Run Keyword If	${Stat}			XML.Get Element Text    		${Root}    	.//CoApplicant/ApplicantInfo/PreviousAddress/ZipCode
	CompareDTtoFD			CoAppPrevZipCode				${DTTemp}		${FDTemp}	

	${stat1}=				Run Keyword And Return Status	Element Should Be Visible		//*[@id="id_previous_address_years"]
	${DTTemp1}=				Run Keyword If	${stat1}==True	Get Value						//*[@id="id_previous_address_years"]
	${stat2}=				Run Keyword And Return Status	Element Should Be Visible		//*[@id="id_previous_address_months"]
	${DTTemp2}=				Run Keyword If	${stat2}==True	Get Value						//*[@id="id_previous_address_months"]
	${DTTemp1}=				Run Keyword If	${stat1}==True						Evaluate	${DTTemp1} * 12		ELSE	Set Variable	${DTTemp1}
	${DTTemp1}=				Run Keyword If	${stat1}==True and ${stat2}==True	Evaluate	${DTTemp1} + ${DTTemp2}			ELSE	Set Variable	${DTTemp1}		
	${Stat}=    			Run Keyword And Return Status	XML.Get Element Text    		${Root}    	.//CoApplicant/ApplicantInfo/TotalMonthsAtPreviousAddress		
	${FDTemp}=				Run Keyword If	${Stat}			XML.Get Element Text    		${Root}    	.//CoApplicant/ApplicantInfo/TotalMonthsAtPreviousAddress
	CompareDTtoFD			CoAppPrevTotalMonthsAtAddress	${DTTemp1}		${FDTemp}	
	
	${stat}=				Run Keyword And Return Status	Element Should Be Visible		//*[@id="id_employment_status_code"]
	${DTTemp}=				Run Keyword If	${stat}==True	Get Selected List Label			//*[@id="id_employment_status_code"]	
	${DTTemp}=				Run Keyword If	'${stat}'=='True'	Replace String	${DTTemp}	${SPACE}	${Empty}	ELSE	Set Variable	${DTTemp}		
	${DTTemp}=				Run Keyword If	'${stat}'=='True'	Replace String	${DTTemp}	-			${Empty}	ELSE	Set Variable	${DTTemp}			
	${Stat}=    			Run Keyword And Return Status	XML.Get Element Text    		${Root}    	.//CoApplicant/ApplicantInfo/CurrentEmploymentInfo/EmploymentStatus		
	${FDTemp}=				Run Keyword If	${Stat}			XML.Get Element Text    		${Root}    	.//CoApplicant/ApplicantInfo/CurrentEmploymentInfo/EmploymentStatus
	# ${FDTemp}=				Run Keyword If	'${FDTemp}'=='SelfEmployed'						Set Variable	SELF EMPLOYED	ELSE	Set Variable	${FDTemp}		
	CompareDTtoFD			CoAppEmploymentStatus			${DTTemp}		${FDTemp}	
	
	${stat}=				Run Keyword And Return Status	Element Should Be Visible		//*[@id="id_organization_name"]
	${DTTemp}=				Run Keyword If	${stat}==True	Get Value						//*[@id="id_organization_name"]
	${Stat}=    			Run Keyword And Return Status	XML.Get Element Text    		${Root}    	.//CoApplicant/ApplicantInfo/CurrentEmploymentInfo/EmployedBy		
	${FDTemp}=				Run Keyword If	${Stat}			XML.Get Element Text    		${Root}    	.//CoApplicant/ApplicantInfo/CurrentEmploymentInfo/EmployedBy
	${FDTemp}=				Run Keyword If	'${DTTemp}'=='SELF EMPLOYED' and '${FDTemp}'=='${EMPTY}'	Set Variable	SELF EMPLOYED	ELSE	Set Variable	${FDTemp}		
	CompareDTtoFD			CoAppEmployedBy					${DTTemp}		${FDTemp}	

	${stat}=				Run Keyword And Return Status	Element Should Be Visible		//*[@id="id_occupation_name"]
	${DTTemp}=				Run Keyword If	${stat}==True	Get Value						//*[@id="id_occupation_name"]
	${Stat}=    			Run Keyword And Return Status	XML.Get Element Text    		${Root}    	.//CoApplicant/ApplicantInfo/CurrentEmploymentInfo/Occupation		
	${FDTemp}=				Run Keyword If	${Stat}			XML.Get Element Text    		${Root}    	.//CoApplicant/ApplicantInfo/CurrentEmploymentInfo/Occupation
	CompareDTtoFD			CoAppOccupation					${DTTemp}		${FDTemp}	
	
	${stat}=				Run Keyword And Return Status	Element Should Be Visible		//*[@id="id_work_phone_number"]
	${DTTemp}=				Run Keyword If	${stat}==True	Get Value						//*[@id="id_work_phone_number"]
		${DTTemp}=			Run Keyword If	'${DTTemp}'!='${None}'		Replace String					${DTTemp}			(			${EMPTY}	
		${DTTemp}=			Run Keyword If	'${DTTemp}'!='${None}'		Replace String					${DTTemp}			)			${EMPTY}	
		${DTTemp}=			Run Keyword If	'${DTTemp}'!='${None}'		Replace String					${DTTemp}			-			${EMPTY}	
		${DTTemp}=			Run Keyword If	'${DTTemp}'!='${None}'		Replace String					${DTTemp}			${SPACE}	${EMPTY}		
	${Stat}=    			Run Keyword And Return Status	XML.Get Element Text    		${Root}    	.//CoApplicant/ApplicantInfo/CurrentEmploymentInfo/BusinessPhone		
	${FDTemp}=				Run Keyword If	${Stat}			XML.Get Element Text    		${Root}    	.//CoApplicant/ApplicantInfo/CurrentEmploymentInfo/BusinessPhone
		${FDTemp}=			Run Keyword If	'${FDTemp}'!='${None}'		Replace String					${FDTemp}			-			${EMPTY}		
	CompareDTtoFD			CoAppBusinessPhone				${DTTemp}		${FDTemp}	
	
	${stat}=				Run Keyword And Return Status	Element Should Be Visible		//*[@id="id_salary"]
	${DTTemp}=				Run Keyword If	${stat}==True	Get Value						//*[@id="id_salary"]
		${DTTemp}=			Run Keyword If	'${DTTemp}'!='${None}'		Replace String					${DTTemp}			,			${EMPTY}		
	${Stat}=    			Run Keyword And Return Status	XML.Get Element Text    		${Root}    	.//CoApplicant/ApplicantInfo/Income/Value		
	${FDTemp}=				Run Keyword If	${Stat}			XML.Get Element Text    		${Root}    	.//CoApplicant/ApplicantInfo/Income/Value
	CompareDTtoFD			CoAppIncomeValue				${DTTemp}		${FDTemp}	

	${stat}=				Run Keyword And Return Status	Element Should Be Visible		//*[@id="id_salary_type_code"]
	${DTTemp}=				Run Keyword If	${stat}==True	Get Selected List Label			//*[@id="id_salary_type_code"]	
		${DTTemp}=			Run Keyword If	'${DTTemp}'!='${None}'		Replace String					${DTTemp}			-			${EMPTY}	#Bi-weekly	
	${Stat}=    			Run Keyword And Return Status	XML.Get Element Text    		${Root}    	.//CoApplicant/ApplicantInfo/Income/Type		
	${FDTemp}=				Run Keyword If	${Stat}			XML.Get Element Text    		${Root}    	.//CoApplicant/ApplicantInfo/Income/Type
	CompareDTtoFD			CoAppIncomeType					${DTTemp}		${FDTemp}	

	${stat1}=				Run Keyword And Return Status	Element Should Be Visible		//*[@id="id_current_employed_years"]
	${DTTemp1}=				Run Keyword If	${stat1}==True	Get Value						//*[@id="id_current_employed_years"]
	${stat2}=				Run Keyword And Return Status	Element Should Be Visible		//*[@id="id_current_employed_months"]
	${DTTemp2}=				Run Keyword If	${stat2}==True	Get Value						//*[@id="id_current_employed_months"]
	${DTTemp1}=				Run Keyword If	${stat1}==True						Evaluate	${DTTemp1} * 12		ELSE	Set Variable	${DTTemp1}
	${DTTemp1}=				Run Keyword If	${stat1}==True and ${stat2}==True	Evaluate	${DTTemp1} + ${DTTemp2}			ELSE	Set Variable	${DTTemp1}			
	${Stat}=    			Run Keyword And Return Status	XML.Get Element Text    		${Root}    	.//CoApplicant/ApplicantInfo/CurrentEmploymentInfo/TotalMonthsEmployed		
	${FDTemp}=				Run Keyword If	${Stat}			XML.Get Element Text    		${Root}    	.//CoApplicant/ApplicantInfo/CurrentEmploymentInfo/TotalMonthsEmployed
	CompareDTtoFD			CoAppTotalMonthsEmployed		${DTTemp1}		${FDTemp}	
	
	${stat}=				Run Keyword And Return Status	Element Should Be Visible		//*[@id="id_other_monthly_income"]
	${DTTemp}=				Run Keyword If	${stat}==True	Get Value						//*[@id="id_other_monthly_income"]
		${DTTemp}=			Run Keyword If	'${DTTemp}'!='${None}'		Replace String					${DTTemp}			,			${EMPTY}		
	${Stat}=    			Run Keyword And Return Status	XML.Get Element Text    		${Root}    	.//CoApplicant/ApplicantInfo/OtherMonthlyIncome		
	${FDTemp}=				Run Keyword If	${Stat}			XML.Get Element Text    		${Root}    	.//CoApplicant/ApplicantInfo/OtherMonthlyIncome
	CompareDTtoFD			CoAppOtherMonthlyIncome			${DTTemp}		${FDTemp}	
	
	${stat}=				Run Keyword And Return Status	Element Should Be Visible		//*[@id="id_other_income_source"]	
	${DTTemp}=				Run Keyword If	${stat}==True	Get Value						//*[@id="id_other_income_source"]
	${Stat}=    			Run Keyword And Return Status	XML.Get Element Text    		${Root}    	.//CoApplicant/ApplicantInfo/OtherIncomeSource		
	${FDTemp}=				Run Keyword If	${Stat}			XML.Get Element Text    		${Root}    	.//CoApplicant/ApplicantInfo/OtherIncomeSource
	
	${stat}=				Run Keyword And Return Status	Element Should Be Visible		//*[@id="id_previous_employment_status_code"]
	${DTTemp}=				Run Keyword If	${stat}==True	Get Selected List Label			//*[@id="id_previous_employment_status_code"]	
	${DTTemp}=				Run Keyword If	'${stat}'=='True'	Replace String	${DTTemp}	${SPACE}	${Empty}	ELSE	Set Variable	${DTTemp}		
	${DTTemp}=				Run Keyword If	'${stat}'=='True'	Replace String	${DTTemp}	-			${Empty}	ELSE	Set Variable	${DTTemp}				
	${Stat}=    			Run Keyword And Return Status	XML.Get Element Text    		${Root}    	.//CoApplicant/ApplicantInfo/PreviousEmploymentInfo/EmploymentStatus		
	${FDTemp}=				Run Keyword If	${Stat}			XML.Get Element Text    		${Root}    	.//CoApplicant/ApplicantInfo/PreviousEmploymentInfo/EmploymentStatus
	# ${FDTemp}=				Run Keyword If	'${FDTemp}'=='SelfEmployed'						Set Variable	SELF EMPLOYED	ELSE	Set Variable	${FDTemp}		
	CompareDTtoFD			CoAppPrevEmploymentStatus		${DTTemp}		${FDTemp}	
	
	${stat}=				Run Keyword And Return Status	Element Should Be Visible		//*[@id="id_previous_organization_name"]
	${DTTemp}=				Run Keyword If	${stat}==True	Get Value						//*[@id="id_previous_organization_name"]
	${Stat}=    			Run Keyword And Return Status	XML.Get Element Text    		${Root}    	.//CoApplicant/ApplicantInfo/PreviousEmploymentInfo/EmployedBy
	${FDTemp}=				Run Keyword If	${Stat}			XML.Get Element Text    		${Root}    	.//CoApplicant/ApplicantInfo/PreviousEmploymentInfo/EmployedBy
	${FDTemp}=				Run Keyword If	'${DTTemp}'=='SELF EMPLOYED' and '${FDTemp}'=='${EMPTY}'	Set Variable	SELF EMPLOYED	ELSE	Set Variable	${FDTemp}		
	CompareDTtoFD			CoAppPrevEmployedBy				${DTTemp}		${FDTemp}	

	${stat}=				Run Keyword And Return Status	Element Should Be Visible		//*[@id="id_previous_occupation_name"]
	${DTTemp}=				Run Keyword If	${stat}==True	Get Value						//*[@id="id_previous_occupation_name"]
	${Stat}=    			Run Keyword And Return Status	XML.Get Element Text    		${Root}    	.//CoApplicant/ApplicantInfo/PreviousEmploymentInfo/Occupation		
	${FDTemp}=				Run Keyword If	${Stat}			XML.Get Element Text    		${Root}    	.//CoApplicant/ApplicantInfo/PreviousEmploymentInfo/Occupation
	CompareDTtoFD			CoAppPrevOccupation				${DTTemp}		${FDTemp}	
	
	${stat}=				Run Keyword And Return Status	Element Should Be Visible		//*[@id="id_previous_work_phone_number"]
	${DTTemp}=				Run Keyword If	${stat}==True	Get Value						//*[@id="id_previous_work_phone_number"]
		${DTTemp}=			Run Keyword If	'${DTTemp}'!='${None}'		Replace String					${DTTemp}			(			${EMPTY}	
		${DTTemp}=			Run Keyword If	'${DTTemp}'!='${None}'		Replace String					${DTTemp}			)			${EMPTY}	
		${DTTemp}=			Run Keyword If	'${DTTemp}'!='${None}'		Replace String					${DTTemp}			-			${EMPTY}	
		${DTTemp}=			Run Keyword If	'${DTTemp}'!='${None}'		Replace String					${DTTemp}			${SPACE}	${EMPTY}		
	${Stat}=    			Run Keyword And Return Status	XML.Get Element Text    		${Root}    	.//CoApplicant/ApplicantInfo/PreviousEmploymentInfo/BusinessPhone		
	${FDTemp}=				Run Keyword If	${Stat}			XML.Get Element Text    		${Root}    	.//CoApplicant/ApplicantInfo/PreviousEmploymentInfo/BusinessPhone
		${FDTemp}=			Run Keyword If	'${FDTemp}'!='${None}'		Replace String					${FDTemp}			-			${EMPTY}		
	CompareDTtoFD			CoAppPrevBusinessPhone			${DTTemp}		${FDTemp}	
	
	${stat1}=				Run Keyword And Return Status	Element Should Be Visible		//*[@id="id_previous_employed_years"]
	${DTTemp1}=				Run Keyword If	${stat1}==True	Get Value						//*[@id="id_previous_employed_years"]
	${stat2}=				Run Keyword And Return Status	Element Should Be Visible		//*[@id="id_previous_employed_months"]
	${DTTemp2}=				Run Keyword If	${stat2}==True	Get Value						//*[@id="id_previous_employed_months"]
	${DTTemp1}=				Run Keyword If	${stat1}==True						Evaluate	${DTTemp1} * 12		ELSE	Set Variable	${DTTemp1}
	${DTTemp1}=				Run Keyword If	${stat1}==True and ${stat2}==True	Evaluate	${DTTemp1} + ${DTTemp2}			ELSE	Set Variable	${DTTemp1}			
	${Stat}=    			Run Keyword And Return Status	XML.Get Element Text    		${Root}		.//CoApplicant/ApplicantInfo/PreviousEmploymentInfo/TotalMonthsEmployed    	
	${FDTemp}=				Run Keyword If	${Stat}			XML.Get Element Text    		${Root}    	.//CoApplicant/ApplicantInfo/PreviousEmploymentInfo/TotalMonthsEmployed    	
	# ${FDTemp}=				Set Variable					None
	CompareDTtoFD			CoAppPrevTotalMonthsEmployed	${DTTemp1}		${FDTemp}		
	
	${DTTemp}=				Get Value						//*[@id="id_custom_credit_score"]
		WriteToFile			${logfile}		Y				DT CreditScore=${DTTemp}								

	${stat}=				Run Keyword And Return Status	Element Should Be Visible						//*[@id="submit-id-_continue_"]
	Run Keyword And Ignore Error							Click Button									//*[@id="submit-id-_continue_"]	
	
	#Check for DT2 error on page. There nmay be data that was not accepted by DT2 in AppSave.
	${stat}=				Run Keyword And Return Status	Page Should Not Contain 						There was an error found below
	Run Keyword If			${stat}==False					WriteToFile		${logfile}		Y				$ERROR - FAILED: Error on DT2 Page
	Run Keyword If			${stat}==False					Run Keyword And Continue On Failure		Fail	$ERROR - FAILED: Error on DT2 Page

	##########################################################	
	#Community Property Spouse Information Page
		WriteToFile			${logfile}		Y				${Empty}					
		WriteToFile			${logfile}		Y				@DT App Page-Community Property Spouse Information --------------------------------		
		
	${stat}=				Run Keyword And Return Status	Element Should Be Visible		//*[@id="id_app_spouse_first_name"]
	${DTTemp}=				Run Keyword If	${stat}==True	Get Value						//*[@id="id_app_spouse_first_name"]
	${Stat}=    			Run Keyword And Return Status	XML.Get Element Text    		${Root}    	.//PrimaryApplicant/ApplicantInfo/SpouseInfo/FirstName		
	${FDTemp}=				Run Keyword If	${Stat}			XML.Get Element Text    		${Root}    	.//PrimaryApplicant/ApplicantInfo/SpouseInfo/FirstName		
	CompareDTtoFD			ApplicantSpouseFirstName		${DTTemp}		${FDTemp}			

	${stat}=				Run Keyword And Return Status	Element Should Be Visible		//*[@id="id_app_spouse_middle_name"]
	${DTTemp}=				Run Keyword If	${stat}==True	Get Value						//*[@id="id_app_spouse_middle_name"]
	${Stat}=    			Run Keyword And Return Status	XML.Get Element Text    		${Root}    	.//PrimaryApplicant/ApplicantInfo/SpouseInfo/MiddleInitial		
	${FDTemp}=				Run Keyword If	${Stat}			XML.Get Element Text    		${Root}    	.//PrimaryApplicant/ApplicantInfo/SpouseInfo/MiddleInitial		
	CompareDTtoFD			ApplicantSpouseMid				${DTTemp}		${FDTemp}				
	
	${stat}=				Run Keyword And Return Status	Element Should Be Visible		//*[@id="id_app_spouse_last_name"]
	${DTTemp}=				Run Keyword If	${stat}==True	Get Value						//*[@id="id_app_spouse_last_name"]
	${Stat}=    			Run Keyword And Return Status	XML.Get Element Text    		${Root}    	.//PrimaryApplicant/ApplicantInfo/SpouseInfo/LastName		
	${FDTemp}=				Run Keyword If	${Stat}			XML.Get Element Text    		${Root}    	.//PrimaryApplicant/ApplicantInfo/SpouseInfo/LastName		
	CompareDTtoFD			ApplicantSpouseLastName			${DTTemp}		${FDTemp}					
		
	${stat}=				Run Keyword And Return Status	Element Should Be Visible		//*[@id="id_app_spouse_suffix_code"]
	${DTTemp}=				Run Keyword If	${stat}==True	Get Selected List Label			//*[@id="id_app_spouse_suffix_code"]
	${Stat}=    			Run Keyword And Return Status	XML.Get Element Text    		${Root}    	.//PrimaryApplicant/ApplicantInfo/SpouseInfo/Suffix		
	${FDTemp}=				Run Keyword If	${Stat}			XML.Get Element Text    		${Root}    	.//PrimaryApplicant/ApplicantInfo/SpouseInfo/Suffix		
	CompareDTtoFD			ApplicantSpouseSuffix			${DTTemp}		${FDTemp}							
		
	${stat}=				Run Keyword And Return Status	Element Should Be Visible		//*[@id="id_app_spouse_line_1_address"]
	${DTTemp}=				Run Keyword If	${stat}==True	Get Value						//*[@id="id_app_spouse_line_1_address"]
	${Stat}=    			Run Keyword And Return Status	XML.Get Element Text    		${Root}    	.//PrimaryApplicant/ApplicantInfo/SpouseInfo/CurrentAddress/AddressLine1		
	${FDTemp}=				Run Keyword If	${Stat}			XML.Get Element Text    		${Root}    	.//PrimaryApplicant/ApplicantInfo/SpouseInfo/CurrentAddress/AddressLine1
	CompareDTtoFD			ApplicantSpouseAddress1			${DTTemp}		${FDTemp}							
	
	${stat}=				Run Keyword And Return Status	Element Should Be Visible		//*[@id="id_app_spouse_line_2_address"]
	${DTTemp}=				Run Keyword If	${stat}==True	Get Value						//*[@id="id_app_spouse_line_2_address"]
	${Stat}=    			Run Keyword And Return Status	XML.Get Element Text    		${Root}    	.//PrimaryApplicant/ApplicantInfo/SpouseInfo/CurrentAddress/AddressLine2
	${FDTemp}=				Run Keyword If	${Stat}			XML.Get Element Text    		${Root}    	.//PrimaryApplicant/ApplicantInfo/SpouseInfo/CurrentAddress/AddressLine2
	CompareDTtoFD			ApplicantSpouseAddress2			${DTTemp}		${FDTemp}								
	
	${stat}=				Run Keyword And Return Status	Element Should Be Visible		//*[@id="id_app_spouse_city"]
	${DTTemp}=				Run Keyword If	${stat}==True	Get Value						//*[@id="id_app_spouse_city"]
	${Stat}=    			Run Keyword And Return Status	XML.Get Element Text    		${Root}    	.//PrimaryApplicant/ApplicantInfo/SpouseInfo/CurrentAddress/City
	${FDTemp}=				Run Keyword If	${Stat}			XML.Get Element Text    		${Root}    	.//PrimaryApplicant/ApplicantInfo/SpouseInfo/CurrentAddress/City
	CompareDTtoFD			ApplicantSpouseCity				${DTTemp}		${FDTemp}									
		
	${stat}=				Run Keyword And Return Status	Element Should Be Visible		//*[@id="id_app_spouse_us_state_code"]
	${DTTemp}=				Run Keyword If	${stat}==True	Get Value						//*[@id="id_app_spouse_us_state_code"]
	${Stat}=    			Run Keyword And Return Status	XML.Get Element Text    		${Root}    	.//PrimaryApplicant/ApplicantInfo/SpouseInfo/CurrentAddress/State
	${FDTemp}=				Run Keyword If	${Stat}			XML.Get Element Text    		${Root}    	.//PrimaryApplicant/ApplicantInfo/SpouseInfo/CurrentAddress/State
	CompareDTtoFD			ApplicantSpouseState				${DTTemp}		${FDTemp}											

	${stat}=				Run Keyword And Return Status	Element Should Be Visible		//*[@id="id_app_spouse_zip_code"]
	${DTTemp}=				Run Keyword If	${stat}==True	Get Value						//*[@id="id_app_spouse_zip_code"]
	${Stat}=    			Run Keyword And Return Status	XML.Get Element Text    		${Root}    	.//PrimaryApplicant/ApplicantInfo/SpouseInfo/CurrentAddress/ZipCode
	${FDTemp}=				Run Keyword If	${Stat}			XML.Get Element Text    		${Root}    	.//PrimaryApplicant/ApplicantInfo/SpouseInfo/CurrentAddress/ZipCode
	CompareDTtoFD			ApplicantSpouseZipCode			${DTTemp}		${FDTemp}			

	${stat}=				Run Keyword And Return Status	Element Should Be Visible		//*[@id="id_app_spouse_salary"]
	${DTTemp}=				Run Keyword If	${stat}==True	Get Value						//*[@id="id_app_spouse_salary"]
		${DTTemp}=			Run Keyword If	'${DTTemp}'!='${None}'		Replace String					${DTTemp}			,			${EMPTY}		
	${Stat}=    			Run Keyword And Return Status	XML.Get Element Text    		${Root}    	.//PrimaryApplicant/ApplicantInfo/SpouseInfo/Income/Value		
	${FDTemp}=				Run Keyword If	${Stat}			XML.Get Element Text    		${Root}    	.//PrimaryApplicant/ApplicantInfo/SpouseInfo/Income/Value
	CompareDTtoFD			ApplicantSpouseIncomeValue		${DTTemp}		${FDTemp}	

	${stat}=				Run Keyword And Return Status	Element Should Be Visible		//*[@id="id_app_spouse_salary_type_code"]
	${DTTemp}=				Run Keyword If	${stat}==True	Get Selected List Label			//*[@id="id_app_spouse_salary_type_code"]
		${DTTemp}=			Run Keyword If	'${DTTemp}'!='${None}'		Replace String					${DTTemp}			-			${EMPTY}	#Bi-weekly	
	${Stat}=    			Run Keyword And Return Status	XML.Get Element Text    		${Root}    	.//PrimaryApplicant/ApplicantInfo/SpouseInfo/Income/Type		
	${FDTemp}=				Run Keyword If	${Stat}			XML.Get Element Text    		${Root}    	.//PrimaryApplicant/ApplicantInfo/SpouseInfo/Income/Type
	CompareDTtoFD			ApplicantSpouseIncomeType		${DTTemp}		${FDTemp}	

	${stat}=				Run Keyword And Return Status	Element Should Be Visible		//*[@id="id_app_spouse_other_monthly_income"]
	${DTTemp}=				Run Keyword If	${stat}==True	Get Value						//*[@id="id_app_spouse_other_monthly_income"]
		${DTTemp}=			Run Keyword If	'${DTTemp}'!='${None}'		Replace String					${DTTemp}			,			${EMPTY}		
	${Stat}=    			Run Keyword And Return Status	XML.Get Element Text    		${Root}    	.//PrimaryApplicant/ApplicantInfo/SpouseInfo/OtherMonthlyIncome		
	${FDTemp}=				Run Keyword If	${Stat}			XML.Get Element Text    		${Root}    	.//PrimaryApplicant/ApplicantInfo/SpouseInfo/OtherMonthlyIncome
	CompareDTtoFD			ApplicantSpouseOtherMonthlyIncome	${DTTemp}		${FDTemp}	
	
	${stat}=				Run Keyword And Return Status	Element Should Be Visible		//*[@id="id_app_spouse_other_income_source"]
	${DTTemp}=				Run Keyword If	${stat}==True	Get Value						//*[@id="id_app_spouse_other_income_source"]
	${Stat}=    			Run Keyword And Return Status	XML.Get Element Text    		${Root}    	.//PrimaryApplicant/ApplicantInfo/SpouseInfo/OtherIncomeSource		
	${FDTemp}=				Run Keyword If	${Stat}			XML.Get Element Text    		${Root}    	.//PrimaryApplicant/ApplicantInfo/SpouseInfo/OtherIncomeSource	
	CompareDTtoFD			ApplicantSpouseOtherMonthlyType		${DTTemp}		${FDTemp}			
	
	### Coapp Spouse	
	
	${stat}=				Run Keyword And Return Status	Element Should Be Visible		//*[@id="id_coapp_spouse_first_name"]
	${DTTemp}=				Run Keyword If	${stat}==True	Get Value						//*[@id="id_coapp_spouse_first_name"]
	${Stat}=    			Run Keyword And Return Status	XML.Get Element Text    		${Root}    	.//CoApplicant/ApplicantInfo/SpouseInfo/FirstName		
	${FDTemp}=				Run Keyword If	${Stat}			XML.Get Element Text    		${Root}    	.//CoApplicant/ApplicantInfo/SpouseInfo/FirstName		
	CompareDTtoFD			CoAppSpouseFirstName			${DTTemp}		${FDTemp}			

	${stat}=				Run Keyword And Return Status	Element Should Be Visible		//*[@id="id_coapp_spouse_middle_name"]
	${DTTemp}=				Run Keyword If	${stat}==True	Get Value						//*[@id="id_coapp_spouse_middle_name"]
	${Stat}=    			Run Keyword And Return Status	XML.Get Element Text    		${Root}    	.//CoApplicant/ApplicantInfo/SpouseInfo/MiddleInitial		
	${FDTemp}=				Run Keyword If	${Stat}			XML.Get Element Text    		${Root}    	.//CoApplicant/ApplicantInfo/SpouseInfo/MiddleInitial		
	CompareDTtoFD			CoAppSpouseMid					${DTTemp}		${FDTemp}				
	
	${stat}=				Run Keyword And Return Status	Element Should Be Visible		//*[@id="id_coapp_spouse_last_name"]
	${DTTemp}=				Run Keyword If	${stat}==True	Get Value						//*[@id="id_coapp_spouse_last_name"]
	${Stat}=    			Run Keyword And Return Status	XML.Get Element Text    		${Root}    	.//CoApplicant/ApplicantInfo/SpouseInfo/LastName		
	${FDTemp}=				Run Keyword If	${Stat}			XML.Get Element Text    		${Root}    	.//CoApplicant/ApplicantInfo/SpouseInfo/LastName		
	CompareDTtoFD			CoAppSpouseLastName				${DTTemp}		${FDTemp}					
		
	${stat}=				Run Keyword And Return Status	Element Should Be Visible		//*[@id="id_coapp_spouse_suffix_code"]
	${DTTemp}=				Run Keyword If	${stat}==True	Get Selected List Label			//*[@id="id_coapp_spouse_suffix_code"]
	${Stat}=    			Run Keyword And Return Status	XML.Get Element Text    		${Root}    	.//CoApplicant/ApplicantInfo/SpouseInfo/Suffix		
	${FDTemp}=				Run Keyword If	${Stat}			XML.Get Element Text    		${Root}    	.//CoApplicant/ApplicantInfo/SpouseInfo/Suffix		
	CompareDTtoFD			CoAppSpouseSuffix				${DTTemp}		${FDTemp}							
		
	${stat}=				Run Keyword And Return Status	Element Should Be Visible		//*[@id="id_coapp_spouse_line_1_address"]
	${DTTemp}=				Run Keyword If	${stat}==True	Get Value						//*[@id="id_coapp_spouse_line_1_address"]
	${Stat}=    			Run Keyword And Return Status	XML.Get Element Text    		${Root}    	.//CoApplicant/ApplicantInfo/SpouseInfo/CurrentAddress/AddressLine1		
	${FDTemp}=				Run Keyword If	${Stat}			XML.Get Element Text    		${Root}    	.//CoApplicant/ApplicantInfo/SpouseInfo/CurrentAddress/AddressLine1
	CompareDTtoFD			CoAppSpouseAddress1				${DTTemp}		${FDTemp}							
	
	${stat}=				Run Keyword And Return Status	Element Should Be Visible		//*[@id="id_coapp_spouse_line_2_address"]
	${DTTemp}=				Run Keyword If	${stat}==True	Get Value						//*[@id="id_coapp_spouse_line_2_address"]
	${Stat}=    			Run Keyword And Return Status	XML.Get Element Text    		${Root}    	.//CoApplicant/ApplicantInfo/SpouseInfo/CurrentAddress/AddressLine2
	${FDTemp}=				Run Keyword If	${Stat}			XML.Get Element Text    		${Root}    	.//CoApplicant/ApplicantInfo/SpouseInfo/CurrentAddress/AddressLine2
	CompareDTtoFD			CoAppSpouseAddress2				${DTTemp}		${FDTemp}								
	
	${stat}=				Run Keyword And Return Status	Element Should Be Visible		//*[@id="id_coapp_spouse_city"]
	${DTTemp}=				Run Keyword If	${stat}==True	Get Value						//*[@id="id_coapp_spouse_city"]
	${Stat}=    			Run Keyword And Return Status	XML.Get Element Text    		${Root}    	.//CoApplicant/ApplicantInfo/SpouseInfo/CurrentAddress/City
	${FDTemp}=				Run Keyword If	${Stat}			XML.Get Element Text    		${Root}    	.//CoApplicant/ApplicantInfo/SpouseInfo/CurrentAddress/City
	CompareDTtoFD			CoAppSpouseCity					${DTTemp}		${FDTemp}									
		
	${stat}=				Run Keyword And Return Status	Element Should Be Visible		//*[@id="id_coapp_spouse_us_state_code"]
	${DTTemp}=				Run Keyword If	${stat}==True	Get Value						//*[@id="id_coapp_spouse_us_state_code"]
	${Stat}=    			Run Keyword And Return Status	XML.Get Element Text    		${Root}    	.//CoApplicant/ApplicantInfo/SpouseInfo/CurrentAddress/State
	${FDTemp}=				Run Keyword If	${Stat}			XML.Get Element Text    		${Root}    	.//CoApplicant/ApplicantInfo/SpouseInfo/CurrentAddress/State
	CompareDTtoFD			CoAppSpouseState				${DTTemp}		${FDTemp}											

	${stat}=				Run Keyword And Return Status	Element Should Be Visible		//*[@id="id_coapp_spouse_zip_code"]
	${DTTemp}=				Run Keyword If	${stat}==True	Get Value						//*[@id="id_coapp_spouse_zip_code"]
	${Stat}=    			Run Keyword And Return Status	XML.Get Element Text    		${Root}    	.//CoApplicant/ApplicantInfo/SpouseInfo/CurrentAddress/ZipCode
	${FDTemp}=				Run Keyword If	${Stat}			XML.Get Element Text    		${Root}    	.//CoApplicant/ApplicantInfo/SpouseInfo/CurrentAddress/ZipCode
	CompareDTtoFD			CoAppSpouseZipCode				${DTTemp}		${FDTemp}	
	
	${stat}=				Run Keyword And Return Status	Element Should Be Visible		//*[@id="id_coapp_spouse_salary"]
	${DTTemp}=				Run Keyword If	${stat}==True	Get Value						//*[@id="id_coapp_spouse_salary"]
		${DTTemp}=			Run Keyword If	'${DTTemp}'!='${None}'		Replace String					${DTTemp}			,			${EMPTY}		
	${Stat}=    			Run Keyword And Return Status	XML.Get Element Text    		${Root}    	.//CoApplicant/ApplicantInfo/SpouseInfo/Income/Value		
	${FDTemp}=				Run Keyword If	${Stat}			XML.Get Element Text    		${Root}    	.//CoApplicant/ApplicantInfo/SpouseInfo/Income/Value
	CompareDTtoFD			CoAppSpouseIncomeValue			${DTTemp}		${FDTemp}	

	${stat}=				Run Keyword And Return Status	Element Should Be Visible		//*[@id="id_coapp_spouse_salary_type_code"]
	${DTTemp}=				Run Keyword If	${stat}==True	Get Selected List Label			//*[@id="id_coapp_spouse_salary_type_code"]	
		${DTTemp}=			Run Keyword If	'${DTTemp}'!='${None}'		Replace String					${DTTemp}			-			${EMPTY}	#Bi-weekly	
	${Stat}=    			Run Keyword And Return Status	XML.Get Element Text    		${Root}    	.//CoApplicant/ApplicantInfo/SpouseInfo/Income/Type		
	${FDTemp}=				Run Keyword If	${Stat}			XML.Get Element Text    		${Root}    	.//CoApplicant/ApplicantInfo/SpouseInfo/Income/Type
	CompareDTtoFD			CoAppSpouseIncomeType			${DTTemp}		${FDTemp}	

	${stat}=				Run Keyword And Return Status	Element Should Be Visible		//*[@id="id_coapp_spouse_other_monthly_income"]
	${DTTemp}=				Run Keyword If	${stat}==True	Get Value						//*[@id="id_coapp_spouse_other_monthly_income"]
		${DTTemp}=			Run Keyword If	'${DTTemp}'!='${None}'		Replace String					${DTTemp}			,			${EMPTY}		
	${Stat}=    			Run Keyword And Return Status	XML.Get Element Text    		${Root}    	.//CoApplicant/ApplicantInfo/SpouseInfo/OtherMonthlyIncome		
	${FDTemp}=				Run Keyword If	${Stat}			XML.Get Element Text    		${Root}    	.//CoApplicant/ApplicantInfo/SpouseInfo/OtherMonthlyIncome
	CompareDTtoFD			CoAppSpouseOtherMonthlyIncome	${DTTemp}		${FDTemp}	
	
	${stat}=				Run Keyword And Return Status	Element Should Be Visible		//*[@id="id_coapp_spouse_other_income_source"]	
	${DTTemp}=				Run Keyword If	${stat}==True	Get Value						//*[@id="id_coapp_spouse_other_income_source"]
	${Stat}=    			Run Keyword And Return Status	XML.Get Element Text    		${Root}    	.//CoApplicant/ApplicantInfo/SpouseInfo/OtherIncomeSource		
	${FDTemp}=				Run Keyword If	${Stat}			XML.Get Element Text    		${Root}    	.//CoApplicant/ApplicantInfo/SpouseInfo/OtherIncomeSource	
	CompareDTtoFD			CoAppSpouseOtherMonthlyType		${DTTemp}		${FDTemp}		

	# Sleep	3	
	${stat}=				Run Keyword And Return Status	Element Should Be Visible							//*[@id="submit-id-_continue_"]
	${DTTemp}=				Run Keyword If	${stat}==True	Run Keyword And Ignore Error	Click Button		//*[@id="submit-id-_continue_"]	
		# WriteToFile			${logfile}		Y					After Button Click!!!
	# Sleep	3
	# ${DTTemp}=				Run Keyword If	${stat}==True									Click Button		//*[@id="submit-id-_continue_"]	
	
	#Check for DT2 error on page. There nmay be data that was not accepted by DT2 in AppSave.
	${stat}=				Run Keyword And Return Status	Page Should Not Contain 						There was an error found below
	Run Keyword If			${stat}==False					WriteToFile		${logfile}		Y				$ERROR - FAILED: Error on DT2 Page
	Run Keyword If			${stat}==False					Run Keyword And Continue On Failure		Fail	$ERROR - FAILED: Error on DT2 Page
	
	##########################################################	
	#Get the app data from the Application Vehicle & Finance
		WriteToFile			${logfile}		Y		${Empty}					
		WriteToFile			${logfile}		Y		@DT App Page-Vehicle & Finance --------------------------------
		
	${stat}=				Run Keyword And Return Status		Element Should Be Visible					//*[@id="id_product_type_1"]				#Retail
	${IsChecked1}=			Run Keyword If	${stat}==True		Selenium2Library.Get Element Attribute		//*[@id="id_product_type_1"]@checked		
		WriteToFile			${logfile}		Y					DT ProductType1=${IsChecked1}					
	${stat}=				Run Keyword And Return Status		Element Should Be Visible					//*[@id="id_product_type_2"]				#Lease
	${IsChecked2}=			Run Keyword If	${stat}==True		Selenium2Library.Get Element Attribute		//*[@id="id_product_type_2"]@checked		
		WriteToFile			${logfile}		Y					DT ProductType2=${IsChecked2}					
	${stat}=				Run Keyword And Return Status		Element Should Be Visible					//*[@id="id_product_type_3"]				#Demo
	${IsChecked3}=			Run Keyword If	${stat}==True		Selenium2Library.Get Element Attribute		//*[@id="id_product_type_3"]@checked		
		WriteToFile			${logfile}		Y					DT ProductType3=${IsChecked3}	
	${IsChecked}=												Set Variable				${EMPTY}	
	${IsChecked}=			Run Keyword If	'${IsChecked1}'=='true'		Set Variable		Retail		ELSE		Set Variable	${IsChecked}
	${IsChecked}=			Run Keyword If	'${IsChecked2}'=='true'		Set Variable		Lease		ELSE		Set Variable	${IsChecked}
	${IsChecked}=			Run Keyword If	'${IsChecked3}'=='true'		Set Variable		Balloon		ELSE		Set Variable	${IsChecked}	
	${Stat}=    			Run Keyword And Return Status		XML.Get Element Text    	${Root}    	.//FinanceMethod	
	${FDTemp}=				Run Keyword If	${Stat}				XML.Get Element Text    	${Root}    	.//FinanceMethod
	CompareDTtoFD			FinanceMethod						${IsChecked}	${FDTemp}			

	#Re Vehicle Condition: DT has 4 types (new, used, demo, or certified). FD has 3 types (new, used, demo) and an independent certified that can be passed if used or demo. Code here needs to account for these differences.
	${stat}=				Run Keyword And Return Status		Element Should Be Visible					//*[@id="id_condition_type_1"]				#New
	${IsChecked1}=			Run Keyword If	${stat}==True		Selenium2Library.Get Element Attribute		//*[@id="id_condition_type_1"]@checked		
		WriteToFile			${logfile}		Y					DT Condition1=${IsChecked1}							
	${stat}=				Run Keyword And Return Status		Element Should Be Visible					//*[@id="id_condition_type_2"]				#Used
	${IsChecked2}=			Run Keyword If	${stat}==True		Selenium2Library.Get Element Attribute		//*[@id="id_condition_type_2"]@checked		
		WriteToFile			${logfile}		Y					DT Condition2=${IsChecked2}							
	${stat}=				Run Keyword And Return Status		Element Should Be Visible					//*[@id="id_condition_type_3"]				#Demo
	${IsChecked3}=			Run Keyword If	${stat}==True		Selenium2Library.Get Element Attribute		//*[@id="id_condition_type_3"]@checked		
		WriteToFile			${logfile}		Y					DT Condition3=${IsChecked3}									
	${stat}=				Run Keyword And Return Status		Element Should Be Visible					//*[@id="id_condition_type_4"]				#Certified
	${IsChecked4}=			Run Keyword If	${stat}==True		Selenium2Library.Get Element Attribute		//*[@id="id_condition_type_4"]@checked		
		WriteToFile			${logfile}		Y					DT Condition4=${IsChecked4}			
	${IsChecked}=												Set Variable				${EMPTY}	
	${IsChecked}=			Run Keyword If	'${IsChecked1}'=='true'		Set Variable		New			ELSE		Set Variable	${IsChecked}
	${IsChecked}=			Run Keyword If	'${IsChecked2}'=='true'		Set Variable		Used		ELSE		Set Variable	${IsChecked}
	${IsChecked}=			Run Keyword If	'${IsChecked3}'=='true'		Set Variable		Demo		ELSE		Set Variable	${IsChecked}	
	${IsChecked}=			Run Keyword If	'${IsChecked4}'=='true'		Set Variable		Certified	ELSE		Set Variable	${IsChecked}	
	${Stat1}=    			Run Keyword If	'${IsChecked}'!='Certified'	Run Keyword And Return Status	XML.Get Element Text    	${Root}    	.//VehicleInfo/VehicleCondition	
	${FDTemp}=				Set Variable	$(EMPTY}
	${FDTemp}=				Run Keyword If	${Stat1}==True												XML.Get Element Text    	${Root}    	.//VehicleInfo/VehicleCondition
	...	ELSE				Set Variable	${FDTemp}
	WriteToFile				${logfile}		Y					FDTEMP1=${FDTemp}	
	${Stat2}=    			Run Keyword If	'${IsChecked}'=='Certified'	Run Keyword And Return Status	XML.Get Element Text    	${Root}    	.//VehicleInfo/CertifiedUsed	
	${FDTemp}=				Run Keyword If	${Stat2}==True												XML.Get Element Text    	${Root}    	.//VehicleInfo/CertifiedUsed
	...	ELSE				Set Variable	${FDTemp}
	#if DT says Certified and VehicleInfo/CertifiedUsed = Y then set FDTemp as Certified so that we can match up correctly
	${FDTemp}=				Run Keyword If	'${Stat2}'=='True' and '${FDTemp}'=='Y'						Set Variable	Certified	ELSE	Set Variable	${FDTemp}
	WriteToFile				${logfile}		Y					FDTEMP2=${FDTemp}	
	CompareDTtoFD			VehicleCondition					${IsChecked}	${FDTemp}			

	${stat}=				Run Keyword And Return Status	Element Should Be Visible		//*[@id="id_vin_number"]
	${DTTemp}=				Run Keyword If	${stat}==True	Get Value						//*[@id="id_vin_number"]	
	${Stat}=    			Run Keyword And Return Status	XML.Get Element Text    		${Root}    	.//VehicleInfo/VIN		
	${FDTemp}=				Run Keyword If	${Stat}			XML.Get Element Text    		${Root}    	.//VehicleInfo/VIN
	CompareDTtoFD			VIN								${DTTemp}		${FDTemp}	
	
	${stat}=				Run Keyword And Return Status	Element Should Be Visible		//*[@id="id_stock_number"]
	${DTTemp}=				Run Keyword If	${stat}==True	Get Value						//*[@id="id_stock_number"]
	${Stat}=    			Run Keyword And Return Status	XML.Get Element Text    		${Root}    	.//VehicleInfo/StockNumber		
	${FDTemp}=				Run Keyword If	${Stat}			XML.Get Element Text    		${Root}    	.//VehicleInfo/StockNumber
	${FDTemp}=				Run Keyword If	${Stat}			Get Substring					${FDTemp}		0	9			#FD allows 15 but truncates to maximum of 9	
	CompareDTtoFD			StockNumber						${DTTemp}		${FDTemp}	

	
	${stat1}=				Run Keyword And Return Status	Element Should Be Visible		//*[@id="id_year_id"]
	${DTTemp1}=				Run Keyword If	${stat1}==True	Get Selected List Label			//*[@id="id_year_id"]
		# WriteToFile				${logfile}		Y					stat1=${stat1}
		# WriteToFile				${logfile}		Y					DTTemp1=${DTTemp1}
	${stat2}=				Run Keyword And Return Status	Element Should Be Visible		//*[@id="id_year_custom"]
	${DTTemp2}=				Run Keyword If	${stat2}==True	Get Value						//*[@id="id_year_custom"]
		# WriteToFile				${logfile}		Y					stat2=${stat2}
		# WriteToFile				${logfile}		Y					DTTemp2=${DTTemp2}	
	${DTTemp}=				Run Keyword If	${stat2}		Set Variable	${DTTemp2}		ELSE	Set Variable	${DTTemp1}			
	${Stat}=    			Run Keyword And Return Status	XML.Get Element Text    		${Root}    	.//VehicleInfo/Year		
	${FDTemp}=				Run Keyword If	${Stat}			XML.Get Element Text    		${Root}    	.//VehicleInfo/Year
	CompareDTtoFD			Year							${DTTemp}		${FDTemp}	
	
	${stat1}=				Run Keyword And Return Status	Element Should Be Visible		//*[@id="id_make_id"]
	${DTTemp1}=				Run Keyword If	${stat1}==True	Get Selected List Label			//*[@id="id_make_id"]
	${stat2}=				Run Keyword And Return Status	Element Should Be Visible		//*[@id="id_make_custom"]
	${DTTemp2}=				Run Keyword If	${stat2}==True	Get Value						//*[@id="id_make_custom"]	
	${DTTemp}=				Run Keyword If	${stat2}		Set Variable	${DTTemp2}		ELSE	Set Variable	${DTTemp1}			
	${Stat}=    			Run Keyword And Return Status	XML.Get Element Text    		${Root}    	.//VehicleInfo/Make		
	${FDTemp}=				Run Keyword If	${Stat}			XML.Get Element Text    		${Root}    	.//VehicleInfo/Make
	CompareDTtoFD			Make							${DTTemp}		${FDTemp}

	${stat1}=				Run Keyword And Return Status	Element Should Be Visible		//*[@id="id_model_id"]
	${DTTemp1}=				Run Keyword If	${stat1}==True	Get Selected List Label			//*[@id="id_model_id"]
	${stat2}=				Run Keyword And Return Status	Element Should Be Visible		//*[@id="id_model_custom"]
	${DTTemp2}=				Run Keyword If	${stat2}==True	Get Value						//*[@id="id_model_custom"]
	${DTTemp}=				Run Keyword If	${stat2}		Set Variable	${DTTemp2}		ELSE	Set Variable	${DTTemp1}				
	${Stat}=    			Run Keyword And Return Status	XML.Get Element Text    		${Root}    	.//VehicleInfo/Model		
	${FDTemp}=				Run Keyword If	${Stat}			XML.Get Element Text    		${Root}    	.//VehicleInfo/Model
	CompareDTtoFD			Model							${DTTemp}		${FDTemp}
	
	${stat1}=				Run Keyword And Return Status	Element Should Be Visible		//*[@id="id_trim_id"]
	${DTTemp1}=				Run Keyword If	${stat1}==True	Get Selected List Label			//*[@id="id_trim_id"]
	${stat2}=				Run Keyword And Return Status	Element Should Be Visible		//*[@id="id_trim_custom"]
	${DTTemp2}=				Run Keyword If	${stat2}==True	Get Value						//*[@id="id_trim_custom"]	
	${DTTemp}=				Run Keyword If	${stat2}		Set Variable	${DTTemp2}		ELSE	Set Variable	${DTTemp1}				
	${Stat}=    			Run Keyword And Return Status	XML.Get Element Text    		${Root}    	.//VehicleInfo/Trim		
	${FDTemp}=				Run Keyword If	${Stat}			XML.Get Element Text    		${Root}    	.//VehicleInfo/Trim
	CompareDTtoFD			Trim							${DTTemp}		${FDTemp}
	
	${stat}=				Run Keyword And Return Status	Element Should Be Visible		//*[@id="id_invoice_amount"]
	${DTTemp}=				Run Keyword If	${stat}==True	Get Value						//*[@id="id_invoice_amount"]
	${DTTemp}=				Run Keyword If	${stat}==True	Replace String					${DTTemp}			,			${EMPTY}			
	${DTTemp}=				Run Keyword If	${stat}==True	Replace String					${DTTemp}			.00			${EMPTY}				
		# WriteToFile			${logfile}		Y				DTTemp=${DTTemp}		
	${Stat}=    			Run Keyword And Return Status	XML.Get Element Text    		${Root}    	.//ProductInfo/InvoiceAmount		
	${FDTemp}=				Run Keyword If	${Stat}			XML.Get Element Text    		${Root}    	.//ProductInfo/InvoiceAmount
	CompareDTtoFD			InvoiceAmount					${DTTemp}		${FDTemp}
	
	${stat}=				Run Keyword And Return Status	Element Should Be Visible		//*[@id="id_odometer_number"]
	${DTTemp}=				Run Keyword If	${stat}==True	Get Value						//*[@id="id_odometer_number"]
		${DTTemp}=			Run Keyword If	'${DTTemp}'!='${None}'		Replace String					${DTTemp}			,			${EMPTY}			
	${Stat}=    			Run Keyword And Return Status	XML.Get Element Text    		${Root}    	.//ProductInfo/Mileage		
	${FDTemp}=				Run Keyword If	${Stat}			XML.Get Element Text    		${Root}    	.//ProductInfo/Mileage
	CompareDTtoFD			Mileage							${DTTemp}		${FDTemp}
	
	${stat}=				Run Keyword And Return Status	Element Should Be Visible		//*[@id="id_msrp_amount"]
	${DTTemp}=				Run Keyword If	${stat}==True	Get Value						//*[@id="id_msrp_amount"]
		${DTTemp}=			Run Keyword If	'${DTTemp}'!='${None}'		Replace String					${DTTemp}			,			${EMPTY}			
		${DTTemp}=			Run Keyword If	'${DTTemp}'!='${None}'		Replace String					${DTTemp}			.00			${EMPTY}	
	${Stat}=    			Run Keyword And Return Status	XML.Get Element Text    		${Root}    	.//ProductInfo/MSRP		
	${FDTemp}=				Run Keyword If	${Stat}			XML.Get Element Text    		${Root}    	.//ProductInfo/MSRP
	CompareDTtoFD			MSRP							${DTTemp}		${FDTemp}
	
	${stat1}=				Run Keyword And Return Status	Element Should Be Visible		//*[@id="id_trade_in_vehicle_year_id"]
	${DTTemp1}=				Run Keyword If	${stat1}==True	Get Selected List Label			//*[@id="id_trade_in_vehicle_year_id"]
	${stat2}=				Run Keyword And Return Status	Element Should Be Visible		//*[@id="id_trade_in_year_custom"]
	${DTTemp2}=				Run Keyword If	${stat2}==True	Get Value						//*[@id="id_trade_in_year_custom"]	
	${DTTemp}=				Run Keyword If	${stat2}		Set Variable	${DTTemp2}		ELSE	Set Variable	${DTTemp1}				
	${Stat}=    			Run Keyword And Return Status	XML.Get Element Text    		${Root}    	.//TradeInVehicleInfo/Year		
	${FDTemp}=				Run Keyword If	${Stat}			XML.Get Element Text    		${Root}    	.//TradeInVehicleInfo/Year
	CompareDTtoFD			TradeYear						${DTTemp}		${FDTemp}

	${stat1}=				Run Keyword And Return Status	Element Should Be Visible		//*[@id="id_trade_in_vehicle_make_id"]
	${DTTemp1}=				Run Keyword If	${stat1}==True	Get Selected List Label			//*[@id="id_trade_in_vehicle_make_id"]
	${stat2}=				Run Keyword And Return Status	Element Should Be Visible		//*[@id="id_trade_in_make_custom"]
	${DTTemp2}=				Run Keyword If	${stat2}==True	Get Value						//*[@id="id_trade_in_make_custom"]	
	${DTTemp}=				Run Keyword If	${stat2}		Set Variable	${DTTemp2}		ELSE	Set Variable	${DTTemp1}				
	${Stat}=    			Run Keyword And Return Status	XML.Get Element Text    		${Root}    	.//TradeInVehicleInfo/Make		
	${FDTemp}=				Run Keyword If	${Stat}			XML.Get Element Text    		${Root}    	.//TradeInVehicleInfo/Make
	CompareDTtoFD			TradeMake						${DTTemp}		${FDTemp}
	
	${stat1}=				Run Keyword And Return Status	Element Should Be Visible		//*[@id="id_trade_in_vehicle_model_id"]
	${DTTemp1}=				Run Keyword If	${stat1}==True	Get Selected List Label			//*[@id="id_trade_in_vehicle_model_id"]
	${stat2}=				Run Keyword And Return Status	Element Should Be Visible		//*[@id="id_trade_in_model_custom"]
	${DTTemp2}=				Run Keyword If	${stat2}==True	Get Value						//*[@id="id_trade_in_model_custom"]	
	${DTTemp}=				Run Keyword If	${stat2}		Set Variable	${DTTemp2}		ELSE	Set Variable	${DTTemp1}				
	${Stat}=    			Run Keyword And Return Status	XML.Get Element Text    		${Root}    	.//TradeInVehicleInfo/Model		
	${FDTemp}=				Run Keyword If	${Stat}			XML.Get Element Text    		${Root}    	.//TradeInVehicleInfo/Model
	CompareDTtoFD			TradeModel						${DTTemp}		${FDTemp}
	
	${stat1}=				Run Keyword And Return Status	Element Should Be Visible		//*[@id="id_trade_in_vehicle_trim_id"]	
	${DTTemp1}=				Run Keyword If	${stat1}==True	Get Selected List Label			//*[@id="id_trade_in_vehicle_trim_id"]	
	${stat2}=				Run Keyword And Return Status	Element Should Be Visible		//*[@id="id_trade_in_trim_custom"]	
	${DTTemp2}=				Run Keyword If	${stat2}==True	Get Value						//*[@id="id_trade_in_trim_custom"]
	${DTTemp}=				Run Keyword If	${stat2}		Set Variable	${DTTemp2}		ELSE	Set Variable	${DTTemp1}				
	${Stat}=    			Run Keyword And Return Status	XML.Get Element Text    		${Root}    	.//TradeInVehicleInfo/Trim		
	${FDTemp}=				Run Keyword If	${Stat}			XML.Get Element Text    		${Root}    	.//TradeInVehicleInfo/Trim
	CompareDTtoFD			TradeTrim						${DTTemp}		${FDTemp}
	
	${stat}=				Run Keyword And Return Status	Element Should Be Visible		//*[@id="id_lien_holder_number"]
	${DTTemp}=				Run Keyword If	${stat}==True	Get Value						//*[@id="id_lien_holder_number"]
	${Stat}=    			Run Keyword And Return Status	XML.Get Element Text    		${Root}    	.//TradeInVehicleInfo/LienHolder		
	${FDTemp}=				Run Keyword If	${Stat}			XML.Get Element Text    		${Root}    	.//TradeInVehicleInfo/LienHolder
	CompareDTtoFD			TradeLienHolder					${DTTemp}		${FDTemp}
	
	${stat}=				Run Keyword And Return Status	Element Should Be Visible		//*[@id="id_monthly_payment_amount"]
	${DTTemp}=				Run Keyword If	${stat}==True	Get Value						//*[@id="id_monthly_payment_amount"]
		${DTTemp}=			Run Keyword If	'${DTTemp}'!='${None}'		Replace String					${DTTemp}			,			${EMPTY}
		${DTTemp}=			Run Keyword If	'${DTTemp}'!='${None}'		Replace String					${DTTemp}			.00			${EMPTY}						
	${Stat}=    			Run Keyword And Return Status	XML.Get Element Text    		${Root}    	.//TradeInVehicleInfo/MonthlyPayment		
	${FDTemp}=				Run Keyword If	${Stat}			XML.Get Element Text    		${Root}    	.//TradeInVehicleInfo/MonthlyPayment
	CompareDTtoFD			TradeMonthlyPayment				${DTTemp}		${FDTemp}

	${stat}=				Run Keyword And Return Status	Element Should Be Visible		//*[@id="id_wholesale_amount"]
	${DTTemp}=				Run Keyword If	${stat}==True	Get Value						//*[@id="id_wholesale_amount"]
	${DTTemp}=				Run Keyword If	${stat}==True	Replace String					${DTTemp}			,			${EMPTY}			
	${DTTemp}=				Run Keyword If	${stat}==True	Replace String					${DTTemp}			.00			${EMPTY}				
		WriteToFile			${logfile}		Y				DTTemp=${DTTemp}			
	${Stat}=    			Run Keyword And Return Status	XML.Get Element Text    		${Root}    	.//ProductInfo/WholesaleValue		
	${FDTemp}=				Run Keyword If	${Stat}			XML.Get Element Text    		${Root}    	.//ProductInfo/WholesaleValue
	CompareDTtoFD			WholesaleValue					${DTTemp}		${FDTemp}	

	${Stat}=				Run Keyword And Return Status	Element Should Be Visible		//*[@id="id_wholesale_source"]
	${DTTemp}=				Run Keyword If	${stat}==True	Get Selected List Label			//*[@id="id_wholesale_source"]
	${DTTemp}=				Run Keyword If	${stat}==True	Replace String					${DTTemp}			,			${EMPTY}			
	${DTTemp}=				Run Keyword If	${stat}==True	Replace String					${DTTemp}			.00			${EMPTY}				
	${Stat}=    			Run Keyword And Return Status	XML.Get Element Text    		${Root}    	.//ProductInfo/WholesaleBookSource		
	${FDTemp}=				Run Keyword If	${Stat}			XML.Get Element Text    		${Root}    	.//ProductInfo/WholesaleBookSource
	${FDTemp}=				Run Keyword If	'${FDTemp}'=='BlackBook'						Set Variable	Black Book			ELSE	Set Variable	${FDTemp}	
	${FDTemp}=				Run Keyword If	'${FDTemp}'=='KelleyBlueBook'					Set Variable	Kelley Blue Book	ELSE	Set Variable	${FDTemp}				
	${FDTemp}=				Run Keyword If	'${FDTemp}'=='GoldBook'							Set Variable	Other				ELSE	Set Variable	${FDTemp}					
	CompareDTtoFD			WholesaleBookSource				${DTTemp}		${FDTemp}		
	
	${stat}=				Run Keyword And Return Status	Element Should Be Visible		//*[@id="id_retail_amount"]
	${DTTemp}=				Run Keyword If	${stat}==True	Get Value						//*[@id="id_retail_amount"]
	${DTTemp}=				Run Keyword If	${stat}==True	Replace String					${DTTemp}			,			${EMPTY}			
	${DTTemp}=				Run Keyword If	${stat}==True	Replace String					${DTTemp}			.00			${EMPTY}		
	${Stat}=    			Run Keyword And Return Status	XML.Get Element Text    		${Root}    	.//ProductInfo/UsedCarValue		
	${FDTemp}=				Run Keyword If	${Stat}			XML.Get Element Text    		${Root}    	.//ProductInfo/UsedCarValue
	CompareDTtoFD			UsedCarValue					${DTTemp}		${FDTemp}	

	${Stat}=				Run Keyword And Return Status	Element Should Be Visible		//*[@id="id_retail_source"]
	${DTTemp}=				Run Keyword If	${stat}==True	Get Selected List Label			//*[@id="id_retail_source"]
	${DTTemp}=				Run Keyword If	${stat}==True	Replace String					${DTTemp}			,			${EMPTY}			
	${DTTemp}=				Run Keyword If	${stat}==True	Replace String					${DTTemp}			.00			${EMPTY}					
	${Stat}=    			Run Keyword And Return Status	XML.Get Element Text    		${Root}    	.//ProductInfo/UsedCarBook		
	${FDTemp}=				Run Keyword If	${Stat}			XML.Get Element Text    		${Root}    	.//ProductInfo/UsedCarBook
	${FDTemp}=				Run Keyword If	'${FDTemp}'=='BlackBook'						Set Variable	Black Book			ELSE	Set Variable	${FDTemp}		
	${FDTemp}=				Run Keyword If	'${FDTemp}'=='KelleyBlueBook'					Set Variable	Kelley Blue Book	ELSE	Set Variable	${FDTemp}	
	${FDTemp}=				Run Keyword If	'${FDTemp}'=='GoldBook'							Set Variable	Other				ELSE	Set Variable	${FDTemp}						
	CompareDTtoFD			UsedCarBook						${DTTemp}		${FDTemp}	
	
	${stat}=				Run Keyword And Return Status	Element Should Be Visible		//*[@id="id_cash_sell_price_amount"]
	${DTTemp}=				Run Keyword If	${stat}==True	Get Value						//*[@id="id_cash_sell_price_amount"]
		${DTTemp}=			Run Keyword If	'${DTTemp}'!='${None}'		Replace String					${DTTemp}			,			${EMPTY}
		${DTTemp}=			Run Keyword If	'${DTTemp}'!='${None}'		Replace String					${DTTemp}			.00			${EMPTY}							
	${Stat}=    			Run Keyword And Return Status	XML.Get Element Text    		${Root}    	.//ProductInfo/CashSellingPrice		
	${FDTemp}=				Run Keyword If	${Stat}			XML.Get Element Text    		${Root}    	.//ProductInfo/CashSellingPrice
	CompareDTtoFD			CashSellingPrice				${DTTemp}		${FDTemp}
	
	${stat}=				Run Keyword And Return Status	Element Should Be Visible		//*[@id="id_sales_tax_amount"]
	${DTTemp}=				Run Keyword If	${stat}==True	Get Value						//*[@id="id_sales_tax_amount"]
		${DTTemp}=			Run Keyword If	'${DTTemp}'!='${None}'		Replace String					${DTTemp}			,			${EMPTY}
		${DTTemp}=			Run Keyword If	'${DTTemp}'!='${None}'		Replace String					${DTTemp}			.00			${EMPTY}							
	${Stat}=    			Run Keyword And Return Status	XML.Get Element Text    		${Root}    	.//ProductInfo/SalesTax		
	${FDTemp}=				Run Keyword If	${Stat}			XML.Get Element Text    		${Root}    	.//ProductInfo/SalesTax
	CompareDTtoFD			SalesTax						${DTTemp}		${FDTemp}
	
	${stat}=				Run Keyword And Return Status	Element Should Be Visible		//*[@id="id_title_and_license_amount"]
	${DTTemp}=				Run Keyword If	${stat}==True	Get Value						//*[@id="id_title_and_license_amount"]
		${DTTemp}=			Run Keyword If	'${DTTemp}'!='${None}'		Replace String					${DTTemp}			,			${EMPTY}
		${DTTemp}=			Run Keyword If	'${DTTemp}'!='${None}'		Replace String					${DTTemp}			.00			${EMPTY}							
	${Stat}=    			Run Keyword And Return Status	XML.Get Element Text    		${Root}    	.//ProductInfo/Title		
	${FDTemp}=				Run Keyword If	${Stat}			XML.Get Element Text    		${Root}    	.//ProductInfo/Title
	CompareDTtoFD			Title							${DTTemp}		${FDTemp}
	
	${stat}=				Run Keyword And Return Status	Element Should Be Visible		//*[@id="id_cash_down_amount"]
	${DTTemp}=				Run Keyword If	${stat}==True	Get Value						//*[@id="id_cash_down_amount"]
		${DTTemp}=			Run Keyword If	'${DTTemp}'!='${None}'		Replace String					${DTTemp}			,			${EMPTY}
		${DTTemp}=			Run Keyword If	'${DTTemp}'!='${None}'		Replace String					${DTTemp}			.00			${EMPTY}							
	${Stat}=    			Run Keyword And Return Status	XML.Get Element Text    		${Root}    	.//ProductInfo/CashDown		
	${FDTemp}=				Run Keyword If	${Stat}			XML.Get Element Text    		${Root}    	.//ProductInfo/CashDown
	CompareDTtoFD			CashDown						${DTTemp}		${FDTemp}
	
	${stat}=				Run Keyword And Return Status	Element Should Be Visible		//*[@id="id_front_end_fee_amount"]
	${DTTemp}=				Run Keyword If	${stat}==True	Get Value						//*[@id="id_front_end_fee_amount"]
		${DTTemp}=			Run Keyword If	'${DTTemp}'!='${None}'		Replace String					${DTTemp}			,			${EMPTY}
		${DTTemp}=			Run Keyword If	'${DTTemp}'!='${None}'		Replace String					${DTTemp}			.00			${EMPTY}							
	${Stat}=    			Run Keyword And Return Status	XML.Get Element Text    		${Root}    	.//ProductInfo/FrontEndFees		
	${FDTemp}=				Run Keyword If	${Stat}			XML.Get Element Text    		${Root}    	.//ProductInfo/FrontEndFees
	CompareDTtoFD			FrontEndFees					${DTTemp}		${FDTemp}
	
	${stat}=				Run Keyword And Return Status	Element Should Be Visible		//*[@id="id_rebate_amount"]
	${DTTemp}=				Run Keyword If	${stat}==True	Get Value						//*[@id="id_rebate_amount"]
		${DTTemp}=			Run Keyword If	'${DTTemp}'!='${None}'		Replace String					${DTTemp}			,			${EMPTY}
		${DTTemp}=			Run Keyword If	'${DTTemp}'!='${None}'		Replace String					${DTTemp}			.00			${EMPTY}							
	${Stat}=    			Run Keyword And Return Status	XML.Get Element Text    		${Root}    	.//ProductInfo/Rebate		
	${FDTemp}=				Run Keyword If	${Stat}			XML.Get Element Text    		${Root}    	.//ProductInfo/Rebate
	CompareDTtoFD			Rebate							${DTTemp}		${FDTemp}
	
	${stat}=				Run Keyword And Return Status	Element Should Be Visible		//*[@id="id_acquisition_fee_amount"]
	${DTTemp}=				Run Keyword If	${stat}==True	Get Value						//*[@id="id_acquisition_fee_amount"]
		${DTTemp}=			Run Keyword If	'${DTTemp}'!='${None}'		Replace String					${DTTemp}			,			${EMPTY}
		${DTTemp}=			Run Keyword If	'${DTTemp}'!='${None}'		Replace String					${DTTemp}			.00			${EMPTY}							
	${Stat}=    			Run Keyword And Return Status	XML.Get Element Text    		${Root}    	.//ProductInfo/AcquisitionFees		
	${FDTemp}=				Run Keyword If	${Stat}			XML.Get Element Text    		${Root}    	.//ProductInfo/AcquisitionFees
	CompareDTtoFD			AcquisitionFees					${DTTemp}		${FDTemp}
	
	${stat}=				Run Keyword And Return Status	Element Should Be Visible		//*[@id="id_trade_in_value_amount"]
	${DTTemp}=				Run Keyword If	${stat}==True	Get Value						//*[@id="id_trade_in_value_amount"]
		${DTTemp}=			Run Keyword If	'${DTTemp}'!='${None}'		Replace String					${DTTemp}			,			${EMPTY}
		${DTTemp}=			Run Keyword If	'${DTTemp}'!='${None}'		Replace String					${DTTemp}			.00			${EMPTY}							
	${Stat}=    			Run Keyword And Return Status	XML.Get Element Text    		${Root}    	.//ProductInfo/NetTrade		
	${FDTemp}=				Run Keyword If	${Stat}			XML.Get Element Text    		${Root}    	.//ProductInfo/NetTrade
	CompareDTtoFD			NetTrade						${DTTemp}		${FDTemp}
	
	${stat}=				Run Keyword And Return Status	Element Should Be Visible		//*[@id="id_accident_health_insurance_amount"]
	${DTTemp}=				Run Keyword If	${stat}==True	Get Value						//*[@id="id_accident_health_insurance_amount"]
		${DTTemp}=			Run Keyword If	'${DTTemp}'!='${None}'		Replace String					${DTTemp}			,			${EMPTY}
		${DTTemp}=			Run Keyword If	'${DTTemp}'!='${None}'		Replace String					${DTTemp}			.00			${EMPTY}							
	${Stat}=    			Run Keyword And Return Status	XML.Get Element Text    		${Root}    	.//ProductInfo/AccidentHealthIns		
	${FDTemp}=				Run Keyword If	${Stat}			XML.Get Element Text    		${Root}    	.//ProductInfo/AccidentHealthIns
	CompareDTtoFD			AccidentHealthIns				${DTTemp}		${FDTemp}
	
	${stat}=				Run Keyword And Return Status	Element Should Be Visible		//*[@id="id_credit_life_insce_am"]
	${DTTemp}=				Run Keyword If	${stat}==True	Get Value						//*[@id="id_credit_life_insce_am"]
		${DTTemp}=			Run Keyword If	'${DTTemp}'!='${None}'		Replace String					${DTTemp}			,			${EMPTY}
		${DTTemp}=			Run Keyword If	'${DTTemp}'!='${None}'		Replace String					${DTTemp}			.00			${EMPTY}							
	${Stat}=    			Run Keyword And Return Status	XML.Get Element Text    		${Root}    	.//ProductInfo/CreditLifeIns		
	${FDTemp}=				Run Keyword If	${Stat}			XML.Get Element Text    		${Root}    	.//ProductInfo/CreditLifeIns
	CompareDTtoFD			CreditLifeIns					${DTTemp}		${FDTemp}
	
	${stat}=				Run Keyword And Return Status	Element Should Be Visible		//*[@id="id_gap_insce_am"]
	${DTTemp}=				Run Keyword If	${stat}==True	Get Value						//*[@id="id_gap_insce_am"]
		${DTTemp}=			Run Keyword If	'${DTTemp}'!='${None}'		Replace String					${DTTemp}			,			${EMPTY}
		${DTTemp}=			Run Keyword If	'${DTTemp}'!='${None}'		Replace String					${DTTemp}			.00			${EMPTY}							
	${Stat}=    			Run Keyword And Return Status	XML.Get Element Text    		${Root}    	.//ProductInfo/Gap		
	${FDTemp}=				Run Keyword If	${Stat}			XML.Get Element Text    		${Root}    	.//ProductInfo/Gap
	CompareDTtoFD			GAP								${DTTemp}		${FDTemp}
	
	${stat}=				Run Keyword And Return Status	Element Should Be Visible		//*[@id="id_warranty_amount"]
	${DTTemp}=				Run Keyword If	${stat}==True	Get Value						//*[@id="id_warranty_amount"]
		${DTTemp}=			Run Keyword If	'${DTTemp}'!='${None}'		Replace String					${DTTemp}			,			${EMPTY}
		${DTTemp}=			Run Keyword If	'${DTTemp}'!='${None}'		Replace String					${DTTemp}			.00			${EMPTY}							
	${Stat}=    			Run Keyword And Return Status	XML.Get Element Text    		${Root}    	.//ProductInfo/Warranty		
	${FDTemp}=				Run Keyword If	${Stat}			XML.Get Element Text    		${Root}    	.//ProductInfo/Warranty
	CompareDTtoFD			Warranty						${DTTemp}		${FDTemp}
	
	${stat}=				Run Keyword And Return Status	Element Should Be Visible		//*[@id="id_back_end_fee_amount"]
	${DTTemp}=				Run Keyword If	${stat}==True	Get Value						//*[@id="id_back_end_fee_amount"]
		${DTTemp}=			Run Keyword If	'${DTTemp}'!='${None}'		Replace String					${DTTemp}			,			${EMPTY}
		${DTTemp}=			Run Keyword If	'${DTTemp}'!='${None}'		Replace String					${DTTemp}			.00			${EMPTY}							
	${Stat}=    			Run Keyword And Return Status	XML.Get Element Text    		${Root}    	.//ProductInfo/OtherFees		
	${FDTemp}=				Run Keyword If	${Stat}			XML.Get Element Text    		${Root}    	.//ProductInfo/OtherFees
	CompareDTtoFD			BackEnd/OtherFees				${DTTemp}		${FDTemp}
	
	${stat}=				Run Keyword And Return Status	Element Should Be Visible		//*[@id="id_term_count"]
	${DTTemp}=				Run Keyword If	${stat}==True	Get Value						//*[@id="id_term_count"]
	${Stat}=    			Run Keyword And Return Status	XML.Get Element Text    		${Root}    	.//ProductInfo/Term		
	${FDTemp}=				Run Keyword If	${Stat}			XML.Get Element Text    		${Root}    	.//ProductInfo/Term
	CompareDTtoFD			Term							${DTTemp}		${FDTemp}
	
	# I don't believe that we send this field in app xml
	# ${stat}=				Run Keyword And Return Status	Element Should Be Visible		//*[@id="id_requested_apr_rate"]
	# ${DTTemp}=				Run Keyword If	${stat}==True	Get Value						//*[@id="id_requested_apr_rate"]
		# # WriteToFile			${logfile}		Y				DT Requested APR=${DTTemp}			
	# ${Stat}=    			Run Keyword And Return Status	XML.Get Element Text    		${Root}    	.//ProductInfo/RequestedAPR		
	# ${FDTemp}=				XML.Get Element Text			${Root}										.//ProductInfo/RequestedAPR
	# CompareDTtoFD			RequestedAPR					${DTTemp}		${FDTemp}
	
	${stat}=				Run Keyword And Return Status	Element Should Be Visible		//*[@id="id_estimated_monthly_payment"]
	${DTTemp}=				Run Keyword If	${stat}==True	Get Value						//*[@id="id_estimated_monthly_payment"]
		${DTTemp}=			Run Keyword If	'${DTTemp}'!='${None}'		Replace String					${DTTemp}			,			${EMPTY}			
		${DTTemp}=			Run Keyword If	'${DTTemp}'!='${None}'		Replace String					${DTTemp}			.00			${EMPTY}								
	${Stat}=    			Run Keyword And Return Status	XML.Get Element Text    		${Root}    	.//ProductInfo/EstimatedPayment		
	${FDTemp}=				Run Keyword If	${Stat}			XML.Get Element Text    		${Root}    	.//ProductInfo/EstimatedPayment
	CompareDTtoFD			EstimatedPayment				${DTTemp}		${FDTemp}
	
	${stat}=				Run Keyword And Return Status	Element Should Be Visible		//*[@id="id_estimated_balloon_amount"]
	${DTTemp}=				Run Keyword If	${stat}==True	Get Value						//*[@id="id_estimated_balloon_amount"]
	${DTTemp}=				Run Keyword If	${stat}==True	Replace String					${DTTemp}			,			${EMPTY}			
	${DTTemp}=				Run Keyword If	${stat}==True	Replace String					${DTTemp}			.00			${EMPTY}		
	${Stat}=    			Run Keyword And Return Status	XML.Get Element Text    		${Root}    	.//ProductInfo/EstimatedBalloonAmount		
	${FDTemp}=				Run Keyword If	${Stat}			XML.Get Element Text    		${Root}    	.//ProductInfo/EstimatedBalloonAmount
	CompareDTtoFD			EstimatedBalloonAmount			${DTTemp}		${FDTemp}	
	
	${stat}=				Run Keyword And Return Status	Element Should Be Visible		//*[@id="id_comments"]
	${DTTemp}=				Run Keyword If	${stat}==True	Get Value						//*[@id="id_comments"]
	${Stat}=    			Run Keyword And Return Status	XML.Get Element Text    		${Root}    	.//CreditAppComments		
	${FDTemp}=				Run Keyword If	${Stat}			XML.Get Element Text    		${Root}    	.//CreditAppComments
	CompareDTtoFD			CreditAppComments				${DTTemp}		${FDTemp}
	
	${Stat}=				Run Keyword And Return Status	Element Should Be Visible					//*[@id="id_disclosures_1"]				#RegB Disclose
	${DTTemp}=				Run Keyword If	${stat}==True	Selenium2Library.Get Element Attribute		//*[@id="id_disclosures_1"]@checked		
	${Stat}=    			Run Keyword And Return Status	XML.Get Element Text    		${Root}    	.//RegulationB		
	${FDTemp}=				Run Keyword If	${Stat}			XML.Get Element Text    		${Root}    	.//RegulationB
	CompareDTtoFD			RegulationB						${DTTemp}		${FDTemp}
	
	${Stat}=				Run Keyword And Return Status	Element Should Be Visible					//*[@id="id_disclosures_2"]				#CP Disclose
	${DTTemp}=				Run Keyword If	${stat}==True	Selenium2Library.Get Element Attribute		//*[@id="id_disclosures_2"]@checked		
	${Stat}=    			Run Keyword And Return Status	XML.Get Element Text    		${Root}    	.//CommunityPropertyDisclosure		
	${FDTemp}=				Run Keyword If	${Stat}			XML.Get Element Text    		${Root}    	.//CommunityPropertyDisclosure
	CompareDTtoFD			CommunityPropertyDisclosure		${DTTemp}		${FDTemp}	
	
	# # ###
	# ${Stat1}=				Run Keyword And Return Status	Element Should Be Visible					//*[@id="div_id_disclosures"]			#CP Disclose
	# ${Stat2}=				Run Keyword And Continue On Failure		Run Keyword If	${stat1}==True		Element Should Contain		//*[@id="div_id_disclosures"]		community property
	# WriteToFile				${logfile}		Y		Stat1=${Stat1}
	# WriteToFile				${logfile}		Y		Stat2=${Stat2}	
	
	# ###
	# ${Stat1}=				Run Keyword And Return Status	Element Should Be Visible					//*[@id="div_id_disclosures"]			#CP Disclose
	# ${Stat2}=				Run Keyword And Continue On Failure		Run Keyword If	${stat1}==True		Element Should Contain		//*[@id="div_id_disclosures"]		community property
	# WriteToFile				${logfile}		Y		Stat1=${Stat1}
	# WriteToFile				${logfile}		Y		Stat2=${Stat2}		
	# ###
	
	${DTTemp}=				Run Keyword If	${stat}==True	Run Keyword And Ignore Error	Click Button		//*[@id="vehicle-form-horizontal"]/div[2]/button[2]
	
	#Check for DT2 error on page. There nmay be data that was not accepted by DT2 in AppSave.
	${stat}=				Run Keyword And Return Status	Page Should Not Contain 						There was an error found below
	Run Keyword If			${stat}==False					WriteToFile		${logfile}		Y				$ERROR - FAILED: Error on DT2 Page
	Run Keyword If			${stat}==False					Run Keyword And Continue On Failure		Fail	$ERROR - FAILED: Error on DT2 Page
	
######################################	
DT2ValidateAppSubmitted

	WriteToFile						${logfile}				Y					DT2ValidateAppSubmitted
	
	WriteToFile						${logfile}				Y					@GlobalDict=${Global_Dict}
	WriteToFile						${logfile}				Y					List_DT2Apps=${List_DT2Apps}	
	${lenList}=						Get Length				${List_DT2Apps}
		
	#For each item in List_DT2Apps (the list contains an index to the Global Dict for any previously submitted xml)
	:FOR 	${I} 	IN RANGE	0		${lenList}
	\
	\		#Pull needed info from Global Dict using List_DT2Apps index		
	\		${Index1}				Get From List 			${List_DT2Apps}				${I}
	\		${Index}=				Convert To Integer 		${Index1}
	\		${dict}=				Get From Dictionary 	${Global_Dict}				${Index}
	\			WriteToFile			${logfile}				Y							----------------------^
	\			WriteToFile			${logfile}				Y							$DictIndex=${Index}
	\			WriteToFile			${logfile}				N							Dictionary=${dict}
	\		${PQ_Ref}=				Get From Dictionary		${dict}						REF PQ
	\			WriteToFile			${logfile}				Y							PQ_Ref=${PQ_Ref}
	\		${App_Ref}=				Get From Dictionary		${dict}						REF App
	\			WriteToFile			${logfile}				Y							App_Ref=${App_Ref}
	\		${InFolder}=			Get From Dictionary		${dict}						Input Folder
	# \			WriteToFile			${logfile}				Y							InFolder=${InFolder}
	\		${InFile}=				Get From Dictionary		${dict}						Filename
	# \			WriteToFile			${logfile}				Y							InFile=${InFile}
	\		${FolderPath}=			Catenate 				SEPARATOR=					${InFolder}	\\	${InFile}
	\			WriteToFile			${logfile}				Y							FolderPath=${FolderPath}		
	\		${NameLast}=			Get From Dictionary		${dict}						Last Name
	\			WriteToFile			${logfile}				Y							NameLast=${NameLast}		
	\
	# \		Validate DT2.0 App		${FolderPath}			${NameLast}
	# \		Validate DT2.0 App		${FolderPath}			${NameLast}

	#Search for Customer and navigate to Edit Application page
	Input Text			//*[@id="main-menu"]/app-search/div/form/div/input					${LastName}			#Search For Customer Text Box
	Click Element		//*[@id="main-menu"]/app-search/div/form/div/button/I									#Search Button
	Run Keyword And Ignore Error				Alert Should Be Present											#1st time through there will be no alert. All other times there will be alert "Are you sure you want to leave this page?".
	#Return if LastName not found in DealJacket Search
	${stat}=				Run Keyword And Return Status	Page Should Not Contain								There are no records to display
	Run Keyword If			${stat}==False					WriteToFile		${logfile}				Y			Error: Customer Not Found=${LastName}
	Run Keyword If			${stat}==False					Fail												Customer Not Found=${LastName}
	#Ok the customer was found
	Click Element		//*[@id="list_table"]/table/tbody/tr/td[1]/strong/a										#1st search record returned	
	${stat}=				Run Keyword And Return Status	Page Should Contain									Application Submitted
	Run Keyword If			${stat}==False					WriteToFile		${logfile}				Y			Error: Application Not Submitted=${LastName}
	Run Keyword If			${stat}==False					Fail												Application Not Submitted=${LastName}
	
	Run Keyword If			${stat}==False					Return From Keyword				${LastName}	
				
######################################
DevDI2EnvironmentSwitch

	WriteToFile				${logfile}		Y						DevDI2EnvironmentSwitch>>> http://di2.hq.dealertrack.com
	Go To					http://di2.hq.dealertrack.com
	Click Element			//*[@id="switch_trig"]
	Click Element			//*[@id="switch"]/li[1]/span[2]/a
	Input Text				//*[@id="id_search_query"]				135801
	Press Key				//*[@id="id_search_query"]				\\13
	Click Element			//*[@id="hide-form"]/table/tbody/tr/td[1]/strong/a

######################################	
QA1EnvironmentSwitch1		

	# WriteToFile				${logfile}		Y						QA1EnvironmentSwitch1>>>https://ww2.qa1.dealertrack.com/
	# Go To					https://ww2.qa1.dealertrack.com/
	WriteToFile				${logfile}		Y						QA1EnvironmentSwitch1>>>https://ww2-ua1.dealertrack.com
	Go To					https://ww2-ua1.dealertrack.com	
	# Click Element			//*[@id="switch_trig"]
	# Click Element			//*[@id="switch"]/li[1]/span[2]/a
	# Input Text				//*[@id="id_search_query"]				317051
	# Press Key				//*[@id="id_search_query"]				\\13
	# Click Element			//*[@id="hide-form"]/table/tbody/tr/td[1]/strong/a

######################################	
QA1EnvironmentSwitch2	

	WriteToFile				${logfile}		Y						QA1EnvironmentSwitch2>>>https://www.qa.dealertrack.com
	Click Element			//*[@id="switch_trig"]
	Click Element			//*[@id="switch"]/li[1]/span[2]/a
	Input Text				//*[@id="id_search_query"]				526754
	Press Key				//*[@id="id_search_query"]				\\13
	Click Element			//*[@id="hide-form"]/table/tbody/tr/td[1]/strong/a	
	Go To					https://www.qa.dealertrack.com

	
############################################################################	
### Business App UI Validation
############################################################################

Business App Dict Creation

    Log Dictionary  ${Global_Dict} 
	${len}=		Get Length 		${Global_Dict}
	${BussAppDict}=   Create Dictionary
	:FOR 	${I}	IN RANGE 	0	${len}
	\       ${dict}=  Create Dictionary
	\       Set Test Variable   ${dict}
	\		${req_dict}=	Get From Dictionary		${Global_Dict}		${I}
	\       ${filename_now}= 		Get From Dictionary		${req_dict}		Filename
	\       ${BussName}=  Get From Dictionary  ${req_dict}   VarBusinessName
	\       Set To Dictionary    ${dict}   VarBusinessName   ${BussName}
	\       ${CoApplname}=   Get From Dictionary  ${req_dict}   CoApp Last Name
	\       Set To Dictionary    ${dict}   CoApp Last Name   ${CoApplname}
	\       ${input_folder_path}=  Get From Dictionary   ${req_dict}   Input Folder
	\       ${fieldFile}=  Set Variable    Business App Fields.txt    #xml filed file path              
	\        ${file_loc}=  Catenate   SEPARATOR=    ${input_folder_path}  \\${filename_now}
	\         ${fieldFile}=  Catenate   SEPARATOR=    ${input_folder_path}  \\${fieldFile}
	\        Fetching Values From Business App XML    ${file_loc}   ${fieldFile}
	#\        Randomise Business Name And TaxId in Business App Dict   ${dict}
	\        Set To Dictionary  ${BussAppDict}  ${I}   ${dict}
	Set Suite Variable  ${BussAppDict}  
	Log Dictionary    ${BussAppDict}

	WriteToFile			${LogFile}				N		Buss App dict:${BussAppDict}
	
#################################################################################################################		
Fetching Values From Business App XML    [Arguments]   ${file_loc}   ${fieldFile}	
	[Documentation]			This keyword creates key value pair from xml
	...						Pre-requisite : N/A
	...						Note: 		  : N/A
	...						Return Type   : Dictionary
	...				  		Author        : Manish Singh
	...						Creation Date : 
	...						Update Date\By: N/A

     ${path1}=   Parse Xml    ${file_loc}
	 
	${fieldFile}=				Get File				${fieldFile}
	@{AuditLines}= 			Split To Lines 			${fieldFile}	
	:FOR 	${xmlNode}			IN 		 							@{AuditLines}
	\    ${key}	${xpath}=									Split String		${xmlNode}			-
	\    ${Stat1}=    		Run Keyword And Return Status    XML.Get Element Text    ${path1}    ${xpath}
	\    ${val}=     Run Keyword If    ${Stat1}    XML.Get Element Text    ${path1}    ${xpath}
    \               ...    ELSE    		Set Variable    ${EMPTY}
	\    Set To Dictionary    ${dict}    ${key}    ${val}

#################################################################################################################
Randomise Business Name And TaxId in Business App Dict  [Arguments]   ${dict}
	${Random_str}=		Generate Random String    				4   					[LOWER]	
	${BN}=   Get From Dictionary   ${dict}   BusinessName
	${val}=			Catenate 								SEPARATOR=				${BN}			${Random_str}
	Set To Dictionary    ${dict}   BusinessName   ${val}
	${Random_Number}=		   WS_CommonUtil.CreateRandomNumberInRange							6			1		9		
	${BT}=   Get From Dictionary    ${dict}   BusinessTaxId
	${TId1}=			WS_CommonUtil.GetSubStringFromAStringByPositions			${BT}		0		3
	${Random_TaxId}=		   Catenate								SEPARATOR=				${TId1}				${Random_Number}
	Set To Dictionary    ${dict}    BusinessTaxId   ${Random_TaxId}
#################################################################################################################
Business App Verification on Transmission Page
	[Documentation]			This keyword check the existance of bussiness app on transmission page in iterartion
	...						Pre-requisite : N/A
	...						Note: 		  : N/A
	...						Return Type   : Dictionary
	...				  		Author        : Manish Singh
	...						Creation Date : 
	...						Update Date\By: N/A
		#Log Dictionary    ${BussAppDict}  
		${len}=		Get Length 		${BussAppDict}
	
		:FOR 	${I}	IN RANGE 	0	${len}
		\		${req_dict}=	Get From Dictionary		${BussAppDict}		${I}
		\       Verify Business App Existance   ${req_dict}

#################################################################################################################
Verify Business App Existance   [Arguments]  ${req_dict}	
	[Documentation]			This keyword check the existance of bussiness app on transmission page
	...						Pre-requisite : N/A
	...						Note: 		  : N/A
	...						Return Type   : Dictionary
	...				  		Author        : Manish Singh
	...						Creation Date : 
	...						Update Date\By: N/A
	Navigate To Transmission Status Page
	Wait Until Page Contains Element            //iframe[@id='iFrm']
	Select Frame                                iFrm
	Wait Until Page Contains Element            //frame[@name='main']
	Select Frame                                main
	${Bname}=  Get From Dictionary    ${req_dict}  VarBusinessName
	WriteToFile			${LogFile}				Y			Verification for Businessname:${Bname}
	WriteToFile			${LogFile}				Y			----------------------------------------
	Input Text    TextBoxSearchEntry    ${Bname}
	Click Element    btnSearch
	Sleep  5s
    ${flag}=  Run Keyword And Return Status     Page Should Contain Element 	//td[@id='TDErrorMsg']
	Run Keyword If    ${flag}==True    WriteToFile			${LogFile}				Y			Business App with Name not found:${Bname}
	Run Keyword If    ${flag}==True    Run Keyword And Continue On Failure    Fail    Business App with Name not found:${Bname}
	Run Keyword If    ${flag}==True   Run Keyword And Return   Navigate To Transmission Status Page
		
	Mouse Over    //table[@id='DataGridTran']/tbody/tr[2]/td[2]/a
	Click Element   LinkView
	Sleep  3s	
	Wait Until Page Contains Element      app_business_name
	${val}=    Get Value    //*[@id="dtax_id"]
	${dict_Val}=  Get From Dictionary    ${req_dict}   VarBusinessName
	${val}=    Get Value    //*[@id="app_business_name"]
	BussApp-Comparison Operation   VarBusinessName    ${dict_Val}    ${val}

	${val1}=    Get Value    //*[@id="app_date_business_established1"]
	${val1}=  Run Keyword If   ${val1}<10   Catenate   0${val1}
			...  ELSE   Set Variable  ${val1}
	
	${val2}=    Get Value    //*[@id="app_date_business_established2"]
	${val2}=  Run Keyword If   ${val2}<10   Catenate   0${val2}
			...  ELSE   Set Variable  ${val2}
	${val3}=    Get Value    //*[@id="app_date_business_established3"]
	${val3}=  Run Keyword If   ${val3}<10   Catenate   0${val3}
			...  ELSE   Set Variable  ${val3}
	${str}=   Catenate   SEPARATOR=-   ${val3}  ${val1}  ${val2}
	${dict_Val}=  Get From Dictionary    ${req_dict}   BusinessEstablishedDate
	Run Keyword If   '${dict_Val}'!='${EMPTY}'    BussApp-Comparison Operation   BusinessEstablishedDate    ${dict_Val}    ${str}
	
	${dict_Val}=  Get From Dictionary    ${req_dict}   StateOfIncorporation
	${val}=    Get Value    //*[@id="app_state_of_incorporation"]
	Run Keyword If   '${dict_Val}'!='${EMPTY}'    BussApp-Comparison Operation   StateOfIncorporation    ${dict_Val}    ${val}
	
	${val1}=    Get Value    //*[@id="app_street_num"]
	${val2}=    Get Value    //*[@id="app_street_name"]
	${val3}=    Get Value   //*[@id="app_street_type"]  # it is dropdown
	${val4}=    Get Value    //*[@id="app_apt_num"]
	${val5}=    Get Value    //*[@id="app_po_box_num"]
	${val6}=    Get Value    //*[@id="app_rural_route"]
	
	${str}=   Catenate    ${val1}  ${val2}  ${val3}  ${val4}  ${val5}  ${val6} 
	${str}=    CLDV-Address Parser   ${str}
	${str}=   Catenate  @{str}  
	${BL1}=   Get From Dictionary    ${req_dict}   BussAppAddressLine1
	${BL2}=   Get From Dictionary    ${req_dict}   BussAppAddressLine2
	${BL}=    Catenate   ${BL1}  ${BL2}
	${BL}=    CLDV-Address Parser   ${BL}
	${BL}=   Catenate  @{BL}  
	BussApp-Comparison Operation   BussAppAddress    ${BL}    ${str}
	
	${dict_Val}=  Get From Dictionary    ${req_dict}   BussAppCity
	${val}=    Get Value    //*[@id="app_city"]
	Run Keyword If   '${dict_Val}'!='${EMPTY}'    BussApp-Comparison Operation   BussAppCity    ${dict_Val}    ${val}

	${dict_Val}=  Get From Dictionary    ${req_dict}   BussAppState
	${val}=    Get Value    //*[@id="app_state"]
	Run Keyword If   '${dict_Val}'!='${EMPTY}'    BussApp-Comparison Operation   BussAppState    ${dict_Val}    ${val}

	${dict_Val}=  Get From Dictionary    ${req_dict}   BussAppZipCode
	${val}=    Get Value    //*[@id="app_zip_code"]
	Run Keyword If   '${dict_Val}'!='${EMPTY}'    BussApp-Comparison Operation   BussAppZipCode    ${dict_Val}    ${val}
	
	${val1}=    Get Value    //*[@id="app_home_phone1"]
	${val2}=    Get Value    //*[@id="app_home_phone2"]
	${val3}=    Get Value    //*[@id="app_home_phone3"]

	${str}=   Catenate   SEPARATOR=-   ${val1}  ${val2}  ${val3}
	${dict_Val}=  Get From Dictionary    ${req_dict}   BussAppBusinessPhoneNo
	Run Keyword If   '${dict_Val}'!='${EMPTY}'    BussApp-Comparison Operation   BussAppBusinessPhoneNo    ${dict_Val}    ${str}
	
	####Most Recent Financial Statement
	
	${dict_Val}=  Get From Dictionary    ${req_dict}   BussApptype_code
	${val}=    Get Value   //*[@id="app_fin_statement"]   # it is dropdown
	Run Keyword If   '${dict_Val}'!='${EMPTY}'    BussApp-Comparison Operation   BussApptype_code    ${dict_Val}    ${val}
	
	${dict_Val}=  Get From Dictionary    ${req_dict}   BussAppYearsInBusiness
	${val}=    Get Value   //*[@id="app_years_in_business"]   # it is dropdown
	${val}=  Convert To String   ${val}
	Run Keyword If   '${dict_Val}'!='${EMPTY}'    BussApp-Comparison Operation   BussAppYearsInBusiness    ${dict_Val}    ${val}
	
	${dict_Val}=  Get From Dictionary    ${req_dict}   BussAppNumberOfEmployees
	${val}=    Get Value    //*[@id="app_number_of_employees"]
	Run Keyword If   '${dict_Val}'!='${EMPTY}'    BussApp-Comparison Operation   BussAppNumberOfEmployees    ${dict_Val}    ${val}
	
	${dict_Val}=  Get From Dictionary    ${req_dict}   BussAppBankName
	${val}=    Get Value    //*[@id="app_bank_name"]
	Run Keyword If   '${dict_Val}'!='${EMPTY}'    BussApp-Comparison Operation   BussAppBankName    ${dict_Val}    ${val}
	
	${dict_Val}=  Get From Dictionary    ${req_dict}   BussAppBankAccountNo
	${val}=    Get Value    //*[@id="app_bank_account_num"]
	Run Keyword If   '${dict_Val}'!='${EMPTY}'    BussApp-Comparison Operation   BussAppBankAccountNo    ${dict_Val}    ${val}
	
	${dict_Val}=  Get From Dictionary    ${req_dict}   BussAppBankContactName
	${val}=    Get Value    //*[@id="app_contact_name"]
	Run Keyword If   '${dict_Val}'!='${EMPTY}'    BussApp-Comparison Operation   BussAppBankContactName    ${dict_Val}    ${val}
	
	${val1}=    Get Value    //*[@id="app_contact_phone1"]
	${val2}=    Get Value    //*[@id="app_contact_phone2"]
	${val3}=    Get Value    //*[@id="app_contact_phone3"]
	
	${str}=   Catenate   SEPARATOR=-   ${val1}  ${val2}  ${val3}
	${dict_Val}=  Get From Dictionary    ${req_dict}   BussAppBankContactPhoneNo
	Run Keyword If   '${dict_Val}'!='${EMPTY}'    BussApp-Comparison Operation   BussAppBankContactPhoneNo    ${dict_Val}    ${str}

	${CoAppLName}=  Get From Dictionary   ${req_dict}   CoAppLastName
	Run Keyword If   '${CoAppLName}'!='${EMPTY}'    BussApp CoApplicant information Verification
	...  ELSE    WriteToFile			${LogFile}				Y			CoApplicant data verification is not requested
	
	BussApp Trade-In Vehicle information Verification
	BussApp Financial Collateral information Verification
##########################################################################################################################
BussApp CoApplicant information Verification
	[Documentation]			This keyword verifies the details of coapplicant on submit an app page
	...						Pre-requisite : N/A
	...						Note: 		  : N/A
	...						Return Type   : Dictionary
	...				  		Author        : Manish Singh
	...						Creation Date : 
	...						Update Date\By: N/A
	
	${dict_Val}=  Get From Dictionary    ${req_dict}   CoAppFirstName
	${val}=    Get Value    //*[@id="app_co_first_name"]
	Run Keyword If   '${dict_Val}'!='${EMPTY}'    BussApp-Comparison Operation   CoAppFirstName    ${dict_Val}    ${val}
	
	${dict_Val}=  Get From Dictionary    ${req_dict}   CoAppMiddleName
	${val}=    Get Value    //*[@id="app_co_mi"]
	Run Keyword If   '${dict_Val}'!='${EMPTY}'    BussApp-Comparison Operation   CoAppMiddleName    ${dict_Val}    ${val}
	
	${dict_Val}=  Get From Dictionary    ${req_dict}   CoAppLastName
	${val}=    Get Value    //*[@id="app_co_last_name"]
	#Run Keyword If   '${dict_Val}'!='${EMPTY}'    BussApp-Comparison Operation   CoAppLastName    ${dict_Val}    ${val}
	
	${dict_Val}=  Get From Dictionary    ${req_dict}   CoAppSuffix     # it is dropdown
	${val}=    Get Value   //*[@id="app_co_suffix_cd"]
	Run Keyword If   '${dict_Val}'!='${EMPTY}'    BussApp-Comparison Operation   CoAppSuffix    ${dict_Val}    ${val}
	
	${dict_Val}=  Get From Dictionary    ${req_dict}   CoAppEmailAddress
	${val}=    Get Value    //*[@id="app_co_email"]
	Run Keyword If   '${dict_Val}'!='${EMPTY}'    BussApp-Comparison Operation   CoAppEmailAddress    ${dict_Val}    ${val}

	${val}=    Get Value    //*[@id="app_co_ss_num1"]
	${val}=    Get Value    //*[@id="app_co_ss_num2"]
	${val}=    Get Value    //*[@id="app_co_ss_num3"]
	
	${dict_Val}=  Get From Dictionary    ${req_dict}   CoAppDOB
	${val1}=    Get Value    //*[@id="app_co_birth_month"]
	${val1}=  Run Keyword If   ${val1}<10   Catenate   0${val1}
			...  ELSE   Set Variable  ${val1}
	${val2}=    Get Value    //*[@id="app_co_birth_day"]
	${val2}=  Run Keyword If   ${val2}<10   Catenate   0${val2}
			...  ELSE   Set Variable  ${val2}
	${val3}=    Get Value    //*[@id="app_co_birth_year"]
	${str}=   Catenate   SEPARATOR=-   ${val3}  ${val1}  ${val2}
	Run Keyword If   '${dict_Val}'!='${EMPTY}'    BussApp-Comparison Operation   CoAppDOB    ${dict_Val}    ${str}
	
	${dict_Val}=  Get From Dictionary    ${req_dict}   CoAppDriverLicenseNumber
	${val}=    Get Value    //*[@id="app_co_driver_license_no"]
	Run Keyword If   '${dict_Val}'!='${EMPTY}'    BussApp-Comparison Operation   CoAppDriverLicenseNumber    ${dict_Val}    ${val}
	
	${dict_Val}=  Get From Dictionary    ${req_dict}   CoAppDriverLicenseState
	${val}=    Get Value    //*[@id="app_co_driver_license_state"]
	Run Keyword If   '${dict_Val}'!='${EMPTY}'    BussApp-Comparison Operation   CoAppDriverLicenseState    ${dict_Val}    ${val}
	
	${val1}=    Get Value    //*[@id="app_co_street_num"]
	${val2}=    Get Value    //*[@id="app_co_street_name"]
	${val3}=    Get Value   //*[@id="app_co_street_type"]
	${val4}=    Get Value    //*[@id="app_co_apt_num"]
	${val5}=    Get Value    //*[@id="app_co_po_box_num"]
	${val6}=    Get Value    //*[@id="app_co_rural_route"]
	
	${str}=   Catenate    ${val1}  ${val2}  ${val3}  ${val4}  ${val5}  ${val6} 
	${str}=    CLDV-Address Parser   ${str}
	${str}=   Catenate  @{str}  
	${BL1}=   Get From Dictionary    ${req_dict}   CoAppAddressLine1
	${BL2}=   Get From Dictionary    ${req_dict}   CoAppAddressLine2
	${BL}=    Catenate   ${BL1}  ${BL2}
	${BL}=    CLDV-Address Parser   ${BL}
	${BL}=   Catenate   @{BL}  
	BussApp-Comparison Operation   AppAddress    ${BL}    ${str}
	
	${dict_Val}=  Get From Dictionary    ${req_dict}   CoAppCity
	${val}=    Get Value    //*[@id="app_co_city"]
	Run Keyword If   '${dict_Val}'!='${EMPTY}'    BussApp-Comparison Operation   CoAppCity    ${dict_Val}    ${val}
	
	${dict_Val}=  Get From Dictionary    ${req_dict}   CoAppState
	${val}=    Get Value    //*[@id="app_co_state"]
	Run Keyword If   '${dict_Val}'!='${EMPTY}'    BussApp-Comparison Operation   CoAppState    ${dict_Val}    ${val}
	
	${dict_Val}=  Get From Dictionary    ${req_dict}   CoAppZipCode
	${val}=    Get Value    //*[@id="app_co_zip_code"]
	Run Keyword If   '${dict_Val}'!='${EMPTY}'    BussApp-Comparison Operation   CoAppZipCode    ${dict_Val}    ${val}

	${val1}=    Get Value    //*[@id="app_co_home_phone1"]
	${val2}=    Get Value    //*[@id="app_co_home_phone2"]
	${val3}=    Get Value    //*[@id="app_co_home_phone3"]
	
	${str}=   Catenate   SEPARATOR=-   ${val1}  ${val2}  ${val3}
	${dict_Val}=  Get From Dictionary    ${req_dict}   CoAppHomePhone
	Run Keyword If   '${dict_Val}'!='${EMPTY}'    BussApp-Comparison Operation   CoAppHomePhone    ${dict_Val}    ${str}

	${val1}=    Get Value    //*[@id="app_co_other_phone1"]
	${val2}=    Get Value    //*[@id="app_co_other_phone2"]
	${val3}=    Get Value    //*[@id="app_co_other_phone3"]
	
	${str}=   Catenate   SEPARATOR=-   ${val1}  ${val2}  ${val3}
	${dict_Val}=  Get From Dictionary    ${req_dict}   CoAppCellPhone
	Run Keyword If   '${dict_Val}'!='${EMPTY}'    BussApp-Comparison Operation   CoAppCellPhone    ${dict_Val}    ${str}
	
	${val1}=    Get Value    //*[@id="app_co_prv_street_num"]
	${val2}=    Get Value    //*[@id="app_co_prv_street_name"]
	${val3}=    Get Value   //*[@id="app_co_prv_street_type"]     # it is dropdown
	${val4}=    Get Value    //*[@id="app_co_prv_apt_num"]
	${val5}=    Get Value    //*[@id="app_co_prv_po_box_num"]
	${val6}=    Get Value    //*[@id="app_co_prv_rural_route"]
	
	${str}=   Catenate    ${val1}  ${val2}  ${val3}  ${val4}  ${val5}  ${val6} 
	${str}=    CLDV-Address Parser   ${str}
	${str}=   Catenate  @{str}  
	${BL1}=   Get From Dictionary    ${req_dict}   CoAppPreviousAddressLine1
	${BL2}=   Get From Dictionary    ${req_dict}   CoAppPreviousAddressLine2
	${BL}=    Catenate   ${BL1}  ${BL2}
	${BL}=    CLDV-Address Parser   ${BL}
	${BL}=   Catenate   @{BL}  
	BussApp-Comparison Operation   AppPreviousAddress    ${BL}    ${str}
	
	
	${dict_Val}=  Get From Dictionary    ${req_dict}   CoAppPreviousCity
	${val}=    Get Value    //*[@id="app_co_prv_city"]
	Run Keyword If   '${dict_Val}'!='${EMPTY}'    BussApp-Comparison Operation   CoAppPreviousCity    ${dict_Val}    ${val}

	${dict_Val}=  Get From Dictionary    ${req_dict}   CoAppPreviousState
	${val}=    Get Value    //*[@id="app_co_prv_state"]
	Run Keyword If   '${dict_Val}'!='${EMPTY}'    BussApp-Comparison Operation   CoAppPreviousState    ${dict_Val}    ${val}

	${dict_Val}=  Get From Dictionary    ${req_dict}   CoAppPreviousZipCode
	${val}=    Get Value    //*[@id="app_co_prv_zip_code"]
	Run Keyword If   '${dict_Val}'!='${EMPTY}'    BussApp-Comparison Operation   CoAppPreviousZipCode    ${dict_Val}    ${val}
	
	${dict_Val}=  Get From Dictionary    ${req_dict}   CoAppTotalMonthsAtAddress
	${years}=		Evaluate	${dict_Val}/12
	${years}=   Convert To String   ${years}

	${remainingmonths}=		Evaluate	${dict_Val}%12
	${remainingmonths}=   Convert To String   ${remainingmonths}
	${val}=    Get Value    //*[@id="app_co_years_at_address"]
	BussApp-Comparison Operation   CoAppTotalyearAtAddress    ${years}    ${val}
	${val}=    Get Value    //*[@id="app_co_months_at_address"]
	BussApp-Comparison Operation   CoAppTotalMonthsAtAddress    ${remainingmonths}    ${val}
	
	${dict_Val}=  Get From Dictionary    ${req_dict}   CoAppHousingStatus
	${val}=    Get Selected List Label   //*[@id="app_co_ownership_type"]  	
	${val}=  Replace String		${val}			\n 		${SPACE}
	${val}=  Replace String		${val}			\t 		${SPACE}
	Run Keyword If   '${dict_Val}'!='${EMPTY}'    BussApp-Comparison Operation   CoAppHousingStatus    ${dict_Val}    ${val}
	
	${dict_Val}=  Get From Dictionary    ${req_dict}   CoAppMortgageOrRent
	${val}=    Get Value    //*[@id="app_co_mortgage_rent"]
	Run Keyword If   '${dict_Val}'!='${EMPTY}'    BussApp-Comparison Operation   CoAppMortgageOrRent    ${dict_Val}    ${val}
	
	${dict_Val}=  Get From Dictionary    ${req_dict}   CoAppEmploymentStatus
	${val}=    Get Selected List Label   //*[@id="app_co_employed"]    # it is dropdown
	${val}=  Replace String		${val}			\n 		${SPACE}
	${val}=  Replace String		${val}			\t 		${SPACE}
	${val}=  Replace String    ${val}   ${SPACE}  ${EMPTY}
	Run Keyword If   '${dict_Val}'!='${EMPTY}'    BussApp-Comparison Operation   CoAppEmploymentStatus    ${dict_Val}    ${val}
	${val}=    Get Value    //*[@id="app_co_employer_bus"]
	${val1}=    Get Value    //*[@id="app_co_bus_phone1"]
	${val2}=    Get Value    //*[@id="app_co_bus_phone2"]
	${val3}=    Get Value    //*[@id="app_co_bus_phone3"]
	
	${str}=   Catenate   SEPARATOR=-   ${val1}  ${val2}  ${val3}
	${dict_Val}=  Get From Dictionary    ${req_dict}   CoAppBusinessPhone
	Run Keyword If   '${dict_Val}'!='${EMPTY}'    BussApp-Comparison Operation   CoAppBusinessPhone    ${dict_Val}    ${str}
	
	${dict_Val}=  Get From Dictionary    ${req_dict}   CoAppTotalMonthsEmployed
	${years}=		Evaluate	${dict_Val}/12
	${years}=   Convert To String   ${years}
	${remainingmonths}=		Evaluate	${dict_Val}%12
	${remainingmonths}=   Convert To String   ${remainingmonths}
	
	${val}=    Get Value   //*[@id="app_co_years_employed"]   # it is dropdown
	BussApp-Comparison Operation   CoAppTotalyearEmployed    ${years}    ${val}

	${val}=    Get Value    //*[@id="app_co_months_employed"]
	BussApp-Comparison Operation   CoAppTotalMonthsEmployed    ${remainingmonths}    ${val}
	
	${dict_Val}=  Get From Dictionary    ${req_dict}   CoAppOccupation
	${val}=    Get Value    //*[@id="app_co_occupation"]
	Run Keyword If   '${dict_Val}'!='${EMPTY}'    BussApp-Comparison Operation   CoAppOccupation    ${dict_Val}    ${val}
	${dict_Val}=  Get From Dictionary    ${req_dict}   CoAppIncomeValue
	${val}=    Get Value    //*[@id="app_co_salary"]
	Run Keyword If   '${dict_Val}'!='${EMPTY}'    BussApp-Comparison Operation   CoAppIncomeValue    ${dict_Val}    ${val}
	#${val}=    Get Value   //*[@id="app_co_salary_type"]  # it is dropdown

	${dict_Val}=  Get From Dictionary    ${req_dict}   CoAppOtherMonthlyIncome
	${val}=    Get Value    //*[@id="app_co_other_income"]
	Run Keyword If   '${dict_Val}'!='${EMPTY}'    BussApp-Comparison Operation   CoAppOtherMonthlyIncome    ${dict_Val}    ${val}
	
	${dict_Val}=  Get From Dictionary    ${req_dict}   CoAppOtherIncomeSource
	${val}=    Get Value    //*[@id="app_co_source_other_income"]
	Run Keyword If   '${dict_Val}'!='${EMPTY}'    BussApp-Comparison Operation   CoAppOtherIncomeSource    ${dict_Val}    ${val}

	#${val}=    Get Value    //*[@id="app_co_prv_employed"]   # it is dropdown
	${val}=    Get Value    //*[@id="app_co_prv_employer_bus"]	
	${val1}=    Get Value    //*[@id="app_co_prv_bus_phone1"]
	${val2}=    Get Value    //*[@id="app_co_prv_bus_phone2"]
	${val3}=    Get Value    //*[@id="app_co_prv_bus_phone3"]
	
	${str}=   Catenate   SEPARATOR=-   ${val1}  ${val2}  ${val3}
	${dict_Val}=  Get From Dictionary    ${req_dict}   CoAppPreviousBusinessPhone
	Run Keyword If   '${dict_Val}'!='${EMPTY}'    BussApp-Comparison Operation   CoAppPreviousBusinessPhone    ${dict_Val}    ${str}
	
	${val}=    Get Value    //*[@id="app_co_prv_years_employed"]
	${val}=    Get Value    //*[@id="app_co_prv_months_employed"]	
	${val}=    Get Value    //*[@id="app_co_prv_occupation"]
	
################################################################################################################	
BussApp-Comparison Operation   [Arguments]   ${message}    ${val1}    ${val2}	
	[Documentation]			This keyword Compare two values
	...						Pre-requisite : N/A
	...						Note: 		  : N/A
	...						Return Type   : Dictionary
	...				  		Author        : Manish Singh
	...						Creation Date : 
	...						Update Date\By: N/A	
	${val1}=  Convert To Uppercase    ${val1}
	${val2}=  Convert To Uppercase    ${val2}
	${val1}=   Evaluate  str('${val1}').strip()
	${val2}=   Evaluate  str('${val2}').strip()
	${status}=   Run Keyword And Return Status		Should Be Equal As Strings			${val1}			${val2}
	
	Run Keyword If   ${status}==True    WriteToFile			${LogFile}				Y			${message} verification-- UI value:${val2} and xml value:${val1}
	...  ELSE   Run Keyword And Continue On Failure    Fail    ${message} verification-- $Failure Error-UI value:${val2} and xml value:${val1} are not equal

################################################################################################################		
BussApp Trade-In Vehicle information Verification
	[Documentation]			This keyword verifies Trade-In Vehicle information on Submit an App page 
	...						Pre-requisite : N/A
	...						Note: 		  : N/A
	...						Return Type   : Dictionary
	...				  		Author        : Manish Singh
	...						Creation Date : 
	...						Update Date\By: N/A	
	
	${dict_Val}=  Get From Dictionary    ${req_dict}   TradeInVehicleInfoLienHolder
	${val1}=    Get Value    app_trade_financed
	Run Keyword If   '${dict_Val}'!='${EMPTY}'    BussApp-Comparison Operation   TradeInVehicleInfoLienHolder    ${dict_Val}    ${val1}
	
	${dict_Val}=  Get From Dictionary    ${req_dict}   TradeInVehicleInfoMonthlyPayment
	${val1}=    Get Value    app_trade_monthly_payment
	Run Keyword If   '${dict_Val}'!='${EMPTY}'    BussApp-Comparison Operation   TradeInVehicleInfoMonthlyPayment    ${dict_Val}    ${val1}
	
	#${val1}=    Get Value    //*[@id="app_trade_auto_yearList"]
	#${val1}=    Get Value    //*[@id="app_trade_auto_makeList"]
	#${val1}=    Get Value    //*[@id="app_trade_auto_modelList"]
	#${val1}=    Get Value    //*[@id="app_trade_auto_trimList"]
	${dict_Val}=  Get From Dictionary    ${req_dict}   TradeInVehicleInfoYear
	${val1}=    Get Value    app_trade_other_year
	Run Keyword If   '${dict_Val}'!='${EMPTY}'    BussApp-Comparison Operation   TradeInVehicleInfoYear    ${dict_Val}    ${val1}
	
	${dict_Val}=  Get From Dictionary    ${req_dict}   TradeInVehicleInfoMake
	${val1}=    Get Value    app_trade_other_make
	Run Keyword If   '${dict_Val}'!='${EMPTY}'    BussApp-Comparison Operation   TradeInVehicleInfoMake    ${dict_Val}    ${val1}
	
	${dict_Val}=  Get From Dictionary    ${req_dict}   TradeInVehicleInfoModel
	${val1}=    Get Value    app_trade_other_model
	Run Keyword If   '${dict_Val}'!='${EMPTY}'    BussApp-Comparison Operation   TradeInVehicleInfoModel    ${dict_Val}    ${val1}
	
	${dict_Val}=  Get From Dictionary    ${req_dict}   TradeInVehicleInfoTrim
	${val1}=    Get Value    app_trade_other_trim
	Run Keyword If   '${dict_Val}'!='${EMPTY}'    BussApp-Comparison Operation   TradeInVehicleInfoTrim    ${dict_Val}    ${val1}
	
################################################################################################################
BussApp Financial Collateral information Verification
	[Documentation]			This keyword verifies financial colllateral information on Submit an App page 
	...						Pre-requisite : N/A
	...						Note: 		  : N/A
	...						Return Type   : Dictionary
	...				  		Author        : Manish Singh
	...						Creation Date : 
	...						Update Date\By: N/A	
	
	${dict_Val}=  Get From Dictionary    ${req_dict}   VehicleStockNumber
	${val1}=    Get Value    //*[@id="app_stock_num"]
	Run Keyword If   '${dict_Val}'!='${EMPTY}'    BussApp-Comparison Operation   VehicleStockNumber    ${dict_Val}    ${val1}
	
	${dict_Val}=  Get From Dictionary    ${req_dict}   VehicleVIN
	${val1}=    Get Value    //*[@id="app_vin_num"]
	Run Keyword If   '${dict_Val}'!='${EMPTY}'    BussApp-Comparison Operation   VehicleVIN    ${dict_Val}    ${val1}
	
	#${val1}=    Get Value    //*[@id="app_auto_yearList"]
	#${val1}=    Get Value    //*[@id="app_auto_makeList"]
	#${val1}=    Get Value    //*[@id="app_auto_modelList"]
	#${val1}=    Get Value    //*[@id="app_auto_trimList"]
	${flagBus}=  Run Keyword And Return Status     Page Should Contain Element 	//*[@id="app_business_name"]
	${dict_Val}=  Get From Dictionary    ${req_dict}   VehicleYear
	${val1}=    Get Value    //*[@id="app_other_year"]
	Run Keyword If   '${dict_Val}'!='${EMPTY}' and '${flagBus}'=='True'    BussApp-Comparison Operation   VehicleYear    ${dict_Val}    ${val1}
	
	${dict_Val}=  Get From Dictionary    ${req_dict}   VehicleMake
	${val1}=    Get Value    //*[@id="app_other_make"]
	Run Keyword If   '${dict_Val}'!='${EMPTY}' and '${flagBus}'=='True'    BussApp-Comparison Operation   VehicleMake    ${dict_Val}    ${val1}
	
    ${dict_Val}=  Get From Dictionary    ${req_dict}   VehicleModel
	${val1}=    Get Value    //*[@id="app_other_model"]
	Run Keyword If   '${dict_Val}'!='${EMPTY}' and '${flagBus}'=='True'     BussApp-Comparison Operation   VehicleModel    ${dict_Val}    ${val1}
	
	${dict_Val}=  Get From Dictionary    ${req_dict}   VehicleTrim
	${val1}=    Get Value    //*[@id="app_other_trim"]
	#Commented due to field is empty
	#BussApp-Comparison Operation   VehicleTrim    ${dict_Val}    ${val1}
	
	${dict_Val}=  Get From Dictionary    ${req_dict}   ProductTerm
	${val1}=    Get Value    app_terms
	Run Keyword If   '${dict_Val}'!='${EMPTY}'    BussApp-Comparison Operation   ProductTerm    ${dict_Val}    ${val1}
	
	${dict_Val}=  Get From Dictionary    ${req_dict}   ProductCashSellingPrice
	${val1}=    Get Value    app_price
	Run Keyword If   '${dict_Val}'!='${EMPTY}'    BussApp-Comparison Operation   ProductCashSellingPrice    ${dict_Val}    ${val1}
	
	${dict_Val}=  Get From Dictionary    ${req_dict}   ProductSalesTax
	${val1}=    Get Value    app_sales_tax
	Run Keyword If   '${dict_Val}'!='${EMPTY}'    BussApp-Comparison Operation   ProductSalesTax    ${dict_Val}    ${val1}
	
	${dict_Val}=  Get From Dictionary    ${req_dict}   ProductTitle
	${val1}=    Get Value    app_ttl
	Run Keyword If   '${dict_Val}'!='${EMPTY}'    BussApp-Comparison Operation   ProductTitle    ${dict_Val}    ${val1}
	
	${dict_Val}=  Get From Dictionary    ${req_dict}   ProductCashDown
	${val1}=    Get Value    app_cash_down_amt
	Run Keyword If   '${dict_Val}'!='${EMPTY}'    BussApp-Comparison Operation   ProductCashDown    ${dict_Val}    ${val1}
	
	${val1}=    Get Value    app_other_finance_fees
	
	${dict_Val}=  Get From Dictionary    ${req_dict}   ProductRebate
	${val1}=    Get Value    app_rebate_amt
	Run Keyword If   '${dict_Val}'!='${EMPTY}'    BussApp-Comparison Operation   ProductRebate    ${dict_Val}    ${val1}
	
	${dict_Val}=  Get From Dictionary    ${req_dict}   ProductNetTrade
	${val1}=    Get Value    app_net_trade
	Run Keyword If   '${dict_Val}'!='${EMPTY}'    BussApp-Comparison Operation   ProductNetTrade    ${dict_Val}    ${val1}
	
	#${val1}=    Get Value    app_unpaid_balance
	#${val1}=    Get Value    app_ach
	#${val1}=    Get Value    app_credit_life
	
	${dict_Val}=  Get From Dictionary    ${req_dict}   ProductGap
	${val1}=    Get Value    app_gap
	Run Keyword If   '${dict_Val}'!='${EMPTY}'    BussApp-Comparison Operation   ProductGap    ${dict_Val}    ${val1}
	
	${dict_Val}=  Get From Dictionary    ${req_dict}   ProductWarranty
	${val1}=    Get Value    app_warranty
	Run Keyword If   '${dict_Val}'!='${EMPTY}'    BussApp-Comparison Operation   ProductWarranty    ${dict_Val}    ${val1}
	
	${dict_Val}=  Get From Dictionary    ${req_dict}   ProductOtherFees
	${val1}=    Get Value    app_other_fees
	Run Keyword If   '${dict_Val}'!='${EMPTY}'    BussApp-Comparison Operation   ProductOtherFees    ${dict_Val}    ${val1}
	
	${val1}=    Get Value    app_est_amt_financed
	
	${dict_Val}=  Get From Dictionary    ${req_dict}   ProductInvoiceAmount
	${val1}=    Get Value    app_invoice_amt
	Run Keyword If   '${dict_Val}'!='${EMPTY}'    BussApp-Comparison Operation   ProductInvoiceAmount    ${dict_Val}    ${val1}
	
	${dict_Val}=  Get From Dictionary    ${req_dict}   ProductMileage
	${val1}=    Get Value    app_mileage
	Run Keyword If   '${dict_Val}'!='${EMPTY}'    BussApp-Comparison Operation   ProductMileage    ${dict_Val}    ${val1}
	
	${dict_Val}=  Get From Dictionary    ${req_dict}   ProductMSRP
	${val1}=    Get Value    app_msrp
	Run Keyword If   '${dict_Val}'!='${EMPTY}'    BussApp-Comparison Operation   ProductMSRP    ${dict_Val}    ${val1}
	
	${dict_Val}=  Get From Dictionary    ${req_dict}   ProductEstimatedPayment
	${val1}=    Get Value    app_est_payment
	Run Keyword If   '${dict_Val}'!='${EMPTY}'    BussApp-Comparison Operation   ProductEstimatedPayment    ${dict_Val}    ${val1}
	
	${dict_Val}=  Get From Dictionary    ${req_dict}   ProductRequestedAPR
	${val1}=    Get Value    app_req_apr
	Run Keyword If   '${dict_Val}'!='${EMPTY}'    BussApp-Comparison Operation   ProductRequestedAPR    ${dict_Val}    ${val1}

	

Credit App Dict Creation

    Log Dictionary  ${Global_Dict} 
	${len}=		Get Length 		${Global_Dict}
	${AppDict}=   Create Dictionary
	:FOR 	${I}	IN RANGE 	0	${len}
	\       ${dict}=  Create Dictionary
	\       Set Test Variable   ${dict}
	\		${req_dict}=	Get From Dictionary		${Global_Dict}		${I}
	\       ${filename_now}= 		Get From Dictionary		${req_dict}		Filename
	\       ${AppName}=  Get From Dictionary  ${req_dict}   Last Name
	\       Set To Dictionary    ${dict}   Last Name   ${AppName}
	\       ${CoApplname}=   Get From Dictionary  ${req_dict}   CoApp Last Name
	\       Set To Dictionary    ${dict}   CoApp Last Name   ${CoApplname}
	\       ${input_folder_path}=  Get From Dictionary   ${req_dict}   Input Folder
	\       ${fieldFile}=  Set Variable    Credit App Fields.txt    #xml filed file path              
	\        ${file_loc}=  Catenate   SEPARATOR=    ${input_folder_path}  \\${filename_now}
	\         ${fieldFile}=  Catenate   SEPARATOR=    ${input_folder_path}  \\${fieldFile}
	\        Fetching Values From Business App XML    ${file_loc}   ${fieldFile}
	#\        Randomise Business Name And TaxId in Business App Dict   ${dict}
	\        Set To Dictionary  ${AppDict}  ${I}   ${dict}
	Set Suite Variable  ${AppDict}  
	Log Dictionary    ${AppDict}

Credit App Verification on Transmission Page
	[Documentation]			This keyword check the existance of bussiness app on transmission page in iterartion
	...						Pre-requisite : N/A
	...						Note: 		  : N/A
	...						Return Type   : Dictionary
	...				  		Author        : Manish Singh
	...						Creation Date : 
	...						Update Date\By: N/A
		#Log Dictionary    ${BussAppDict}  
		${len}=		Get Length 		${AppDict}
	
		:FOR 	${I}	IN RANGE 	0	${len}
		\		${req_dict}=	Get From Dictionary		${AppDict}		${I}
		\       Verify Credit App Existance   ${req_dict}

#################################################################################################################
Verify Credit App Existance   [Arguments]  ${req_dict}	
	[Documentation]			This keyword check the existance of bussiness app on transmission page
	...						Pre-requisite : N/A
	...						Note: 		  : N/A
	...						Return Type   : Dictionary
	...				  		Author        : Manish Singh
	...						Creation Date : 
	...						Update Date\By: N/A
	Navigate To Transmission Status Page
	Wait Until Page Contains Element            //iframe[@id='iFrm']
	Select Frame                                iFrm
	Wait Until Page Contains Element            //frame[@name='main']
	Select Frame                                main
	${Pname}=  Get From Dictionary    ${req_dict}  Last Name
	WriteToFile			${LogFile}				Y			Verification for Credit App:${Pname}
	WriteToFile			${LogFile}				Y			----------------------------------------
	Input Text    TextBoxSearchEntry    ${Pname}
	Click Element    btnSearch
	Sleep  5s
    ${flag}=  Run Keyword And Return Status     Page Should Contain Element 	//td[@id='TDErrorMsg']
	Run Keyword If    ${flag}==True    WriteToFile			${LogFile}				Y			Credit App with Last Name not found:${Pname}
	Run Keyword If    ${flag}==True    Run Keyword And Continue On Failure    Fail    Credit App with Last Name not found:${Pname}
	Run Keyword If    ${flag}==True   Run Keyword And Return   Navigate To Transmission Status Page
		
	Mouse Over    //table[@id='DataGridTran']/tbody/tr[2]/td[2]/a
	Click Element   LinkView
	Sleep  3s	
	Wait Until Page Contains Element    app_last_name   

	${dict_Val}=  Get From Dictionary    ${req_dict}   Last Name
	${val}=    Get Value    //*[@id="app_last_name"]
	BussApp-Comparison Operation   Last Name    ${dict_Val}    ${val}
	
	${dict_Val}=  Get From Dictionary    ${req_dict}   PFirstName
	${val}=    Get Value    //*[@id="app_first_name"]
	BussApp-Comparison Operation   First Name    ${dict_Val}    ${val}
	
	${dict_Val}=  Get From Dictionary    ${req_dict}   PMiddleName
	${val}=    Get Value    //*[@id="app_mi"]
	BussApp-Comparison Operation   Middle Name    ${dict_Val}    ${val}
	
	${dict_Val}=  Get From Dictionary    ${req_dict}   PSuffix     # it is dropdown
	${val}=    Get Value   //*[@id="app_suffix_cd"]
	Run Keyword If   '${dict_Val}'!='${EMPTY}'    BussApp-Comparison Operation   ApplicantSuffix    ${dict_Val}    ${val}
	
	${dict_Val}=  Get From Dictionary    ${req_dict}   PEmailAddress
	${val}=    Get Value    //*[@id="app_email"]
	Run Keyword If   '${dict_Val}'!='${EMPTY}'    BussApp-Comparison Operation   AppEmailAddress    ${dict_Val}    ${val}
	
	${dict_Val}=  Get From Dictionary    ${req_dict}   PDOB
	
	${val1}=    Get Value    //*[@id="app_birth_month"]
	${val1}=  Run Keyword If   ${val1}<10   Catenate   0${val1}
			...  ELSE   Set Variable  ${val1}
	${val2}=    Get Value    //*[@id="app_birth_day"]
	${val2}=  Run Keyword If   ${val2}<10   Catenate   0${val2}
			...  ELSE   Set Variable  ${val2}
	${val3}=    Get Value    //*[@id="app_birth_year"]
	${str}=   Catenate   SEPARATOR=-   ${val3}  ${val1}  ${val2}

    Run Keyword If   '${dict_Val}'!='${EMPTY}'    BussApp-Comparison Operation   PDOB    ${dict_Val}    ${str}
	
	${dict_Val}=  Get From Dictionary    ${req_dict}   PDriverLicenseNumber
	${val}=    Get Value    //*[@id="app_driver_license_no"]
	Run Keyword If   '${dict_Val}'!='${EMPTY}'    BussApp-Comparison Operation   PDriverLicenseNumber    ${dict_Val}    ${val}
	
	${dict_Val}=  Get From Dictionary    ${req_dict}   PDriverLicenseState
	${val}=    Get Value    //*[@id="app_driver_license_state"]
	Run Keyword If   '${dict_Val}'!='${EMPTY}'    BussApp-Comparison Operation   PDriverLicenseState    ${dict_Val}    ${val}
	
	${dict_Val}=  Get From Dictionary    ${req_dict}   PHomePhone
	${val1}=     Get Value     //*[@id="app_home_phone1"]
	${val2}=     Get Value    //*[@id="app_home_phone2"]
	${val3}=     Get Value    //*[@id="app_home_phone3"]

	${str}=   Catenate   SEPARATOR=-   ${val1}  ${val2}  ${val3}
	Run Keyword If   '${dict_Val}'!='${EMPTY}'    BussApp-Comparison Operation   PHomePhone    ${dict_Val}    ${str}
	
	${val1}=    Get Value    //*[@id="app_street_num"]
	${val2}=    Get Value    //*[@id="app_street_name"]
	${val3}=    Get Value   //*[@id="app_street_type"]  # it is dropdown
	${val4}=    Get Value    //*[@id="app_apt_num"]
	${val5}=    Get Value    //*[@id="app_po_box_num"]
	${val6}=    Get Value    //*[@id="app_rural_route"]
	
	${str}=   Catenate    ${val1}  ${val2}  ${val3}  ${val4}  ${val5}  ${val6} 
	${str}=    CLDV-Address Parser   ${str}
	${str}=   Catenate  @{str}  
	${BL1}=   Get From Dictionary    ${req_dict}   PAddressLine1
	${BL2}=   Get From Dictionary    ${req_dict}   PAddressLine2
	${BL}=    Catenate   ${BL1}  ${BL2}
	${BL}=    CLDV-Address Parser   ${BL}
	${BL}=   Catenate  @{BL}  
	BussApp-Comparison Operation   AppAddress    ${BL}    ${str}
	
	${dict_Val}=  Get From Dictionary    ${req_dict}   PCity
	${val}=    Get Value    //*[@id="app_city"]
	Run Keyword If   '${dict_Val}'!='${EMPTY}'    BussApp-Comparison Operation   AppCity    ${dict_Val}    ${val}

	${dict_Val}=  Get From Dictionary    ${req_dict}   PState
	${val}=    Get Value    //*[@id="app_state"]
	Run Keyword If   '${dict_Val}'!='${EMPTY}'    BussApp-Comparison Operation   AppState    ${dict_Val}    ${val}

	${dict_Val}=  Get From Dictionary    ${req_dict}   PZipCode
	${val}=    Get Value    //*[@id="app_zip_code"]
	Run Keyword If   '${dict_Val}'!='${EMPTY}'    BussApp-Comparison Operation   AppZipCode    ${dict_Val}    ${val}
	
	${val1}=    Get Value    //*[@id="app_other_phone1"]
	${val2}=    Get Value    //*[@id="app_other_phone2"]
	${val3}=    Get Value    //*[@id="app_other_phone3"]
	
	${str}=   Catenate   SEPARATOR=-   ${val1}  ${val2}  ${val3}
	${dict_Val}=  Get From Dictionary    ${req_dict}   PCellPhone
	Run Keyword If   '${dict_Val}'!='${EMPTY}'    BussApp-Comparison Operation   AppCellPhone    ${dict_Val}    ${str}
	
	${val1}=    Get Value    //*[@id="app_prv_street_num"]
	${val2}=    Get Value    //*[@id="app_prv_street_name"]
	${val3}=    Get Value   //*[@id="app_prv_street_type"]     # it is dropdown
	${val4}=    Get Value    //*[@id="app_prv_apt_num"]
	${val5}=    Get Value    //*[@id="app_prv_po_box_num"]
	${val6}=    Get Value    //*[@id="app_prv_rural_route"]
	
	${str}=   Catenate    ${val1}  ${val2}  ${val3}  ${val4}  ${val5}  ${val6} 
	${str}=    CLDV-Address Parser   ${str}
	${str}=   Catenate  @{str}  
	${BL1}=   Get From Dictionary    ${req_dict}   PPreviousAddressLine1
	${BL2}=   Get From Dictionary    ${req_dict}   PPreviousAddressLine2
	${BL}=    Catenate   ${BL1}  ${BL2}
	${BL}=    CLDV-Address Parser   ${BL}
	${BL}=   Catenate   @{BL}  
	BussApp-Comparison Operation   AppPreviousAddress    ${BL}    ${str}
	
	
	${dict_Val}=  Get From Dictionary    ${req_dict}   PPreviousCity
	${val}=    Get Value    //*[@id="app_prv_city"]
	Run Keyword If   '${dict_Val}'!='${EMPTY}'    BussApp-Comparison Operation   AppPreviousCity    ${dict_Val}    ${val}

	${dict_Val}=  Get From Dictionary    ${req_dict}   PPreviousState
	${val}=    Get Value    //*[@id="app_prv_state"]
	Run Keyword If   '${dict_Val}'!='${EMPTY}'    BussApp-Comparison Operation   AppPreviousState    ${dict_Val}    ${val}

	${dict_Val}=  Get From Dictionary    ${req_dict}   PPreviousZipCode
	${val}=    Get Value    //*[@id="app_prv_zip_code"]
	Run Keyword If   '${dict_Val}'!='${EMPTY}'    BussApp-Comparison Operation   AppPreviousZipCode    ${dict_Val}    ${val}
	
	${dict_Val}=  Get From Dictionary    ${req_dict}   PTotalMonthsAtAddress
	${years}=		Evaluate	${dict_Val}/12
	${years}=   Convert To String   ${years}

	${remainingmonths}=		Evaluate	${dict_Val}%12
	${remainingmonths}=   Convert To String   ${remainingmonths}
	${val}=    Get Value    //*[@id="app_years_at_address"]
	BussApp-Comparison Operation   AppTotalyearAtAddress    ${years}    ${val}
	${val}=    Get Value    //*[@id="app_months_at_address"]
	BussApp-Comparison Operation   PTotalMonthsAtAddress    ${remainingmonths}    ${val}
	
	${dict_Val}=  Get From Dictionary    ${req_dict}   PHousingStatus
	${val}=    Get Selected List Label   //*[@id="app_ownership_type"]  	
	${val}=  Replace String		${val}			\n 		${SPACE}
	${val}=  Replace String		${val}			\t 		${SPACE}
	Run Keyword If   '${dict_Val}'!='${EMPTY}'    BussApp-Comparison Operation   AppHousingStatus    ${dict_Val}    ${val}
	
	${dict_Val}=  Get From Dictionary    ${req_dict}   PMortgageOrRent
	${val}=    Get Value    //*[@id="app_mortgage_rent"]
	Run Keyword If   '${dict_Val}'!='${EMPTY}'    BussApp-Comparison Operation   AppMortgageOrRent    ${dict_Val}    ${val}
	
	${dict_Val}=  Get From Dictionary    ${req_dict}   PEmploymentStatus
	${val}=    Get Selected List Label   //*[@id="app_employed"]    # it is dropdown
	${val}=  Replace String		${val}			\n 		${SPACE}
	${val}=  Replace String		${val}			\t 		${SPACE}
	${val}=  Replace String    ${val}   ${SPACE}  ${EMPTY}
	Run Keyword If   '${dict_Val}'!='${EMPTY}'    BussApp-Comparison Operation   PEmploymentStatus    ${dict_Val}    ${val}
	
	${val}=    Get Value    //*[@id="app_co_employer_bus"]
	${val1}=    Get Value    //*[@id="app_bus_phone1"]
	${val2}=    Get Value    //*[@id="app_bus_phone2"]
	${val3}=    Get Value    //*[@id="app_bus_phone3"]
	
	${str}=   Catenate   SEPARATOR=-   ${val1}  ${val2}  ${val3}
	${dict_Val}=  Get From Dictionary    ${req_dict}   PBusinessPhone
	Run Keyword If   '${dict_Val}'!='${EMPTY}'    BussApp-Comparison Operation   AppBusinessPhone    ${dict_Val}    ${str}
	
	${dict_Val}=  Get From Dictionary    ${req_dict}   PTotalMonthsEmployed
	${years}=		Evaluate	${dict_Val}/12
	${years}=   Convert To String   ${years}
	${remainingmonths}=		Evaluate	${dict_Val}%12
	${remainingmonths}=   Convert To String   ${remainingmonths}
	
	${val}=    Get Value   //*[@id="app_years_employed"]   # it is dropdown
	BussApp-Comparison Operation   AppTotalyearEmployed    ${years}    ${val}

	${val}=    Get Value    //*[@id="app_months_employed"]
	BussApp-Comparison Operation   AppTotalMonthsEmployed    ${remainingmonths}    ${val}
	
	${dict_Val}=  Get From Dictionary    ${req_dict}   POccupation
	${val}=    Get Value    //*[@id="app_occupation"]
	Run Keyword If   '${dict_Val}'!='${EMPTY}'    BussApp-Comparison Operation   AppOccupation    ${dict_Val}    ${val}
	
	${dict_Val}=  Get From Dictionary    ${req_dict}   PIncomeValue
	${val}=    Get Value    //*[@id="app_salary"]
	Run Keyword If   '${dict_Val}'!='${EMPTY}'    BussApp-Comparison Operation   AppIncomeValue    ${dict_Val}    ${val}
	#${val}=    Get Value   //*[@id="app_co_salary_type"]  # it is dropdown

	${CoAppLName}=  Get From Dictionary   ${req_dict}   CoApp Last Name
	Run Keyword If   '${CoAppLName}'!='${EMPTY}'    BussApp CoApplicant information Verification
	...  ELSE    WriteToFile			${LogFile}				Y			CoApplicant data verification is not requested
	
	BussApp Trade-In Vehicle information Verification
	BussApp Financial Collateral information Verification
#####new keyword for My leads page
My Leads Page Validation
    [Documentation]			This Keyword validates data on My Leads page
	...				  		Author        : Manish Singh
	...						Creation Date : N/A
	...						Update Date\By: N/A
	
	WriteToFile			${logfile}					Y					Validation on My Leads Page>>>
	Login to DT And Switch Dealership	${DEALERID}		
	${len}=		Get Length		${List_LeadsSummary}
	
	WriteToFile			${logfile}					Y					-----	
	Navigate To My Leads
	:FOR 	${I} 	IN RANGE 	0 		${len}
	\		${Index1}		Get From List 	${List_LeadsSummary}		${I}
	\	    ${Index}=		Convert To Integer 		${Index1}
	\	    ${dict}=		Get From Dictionary 	${Global_Dict}		${Index}
	\       ${lname}=  	Get From Dictionary  		${dict}   			Last Name	
	\       WriteToFile	${logfile}					Y					Iteration: ${I} - ${lname}
	\       Unselect Frame
	\       Wait Until Page Contains Element            //iframe[@id='iFrm']
	\       Select Frame                                iFrm
	\       Wait Until Page Contains Element            //frame[@name='main']
	\       Select Frame                                main
	\ 	    Wait Until Keyword Succeeds 	60	3	Page Should Contain Element 	//tr[@id='pagerRow']	Page navigator is not present on page.	loglevel=None
	\       Input Text    	//input[@id='SearchEntryTextBox']     ${lname}
	\       Press Key    	//input[@id='btnSearch']     \\13
	\       Sleep  6s
	\      ${flag}=  Run Keyword And Return Status     Page Should Contain Element 	//div[@id='errMsgIs']
	\      Run Keyword If    ${flag}==True    WriteToFile			${logfile}					Y					Failed to find Last Name! - ${lname}
	\      Run Keyword If    ${flag}==True    Run Keyword And Continue On Failure    Fail    Applicant is not found with last name! - ${lname}
	\      Run Keyword If    ${flag}==True    Run Keyword And Return      Log   Failed to find Last Name! - ${lname}
	\      Unselect Frame
	\      Wait Until Page Contains Element            //iframe[@id='iFrm']
	\      Select Frame                                iFrm
	\      Wait Until Page Contains Element            //frame[@name='main']
	\      Select Frame                                main
	\      Wait Until Keyword Succeeds 	60	3			Page Should Contain Element 	//table[@id='DGLeadsReport']/tbody/tr[2]/td[3]/a	  Applicant is not found on page.	loglevel=None
	\      Validate Request Details on Leads Summary Page    ${dict}
	\      Navigate To My Leads
	\      Sleep  5s

	
	
Validate Request Details on Leads Summary Page   [Arguments]   ${dict}
	#Date Validation
	
	Log 	Applicant Name Validation 		WARN
	${FIRSTNAME}=  Get From Dictionary    ${dict}   First Name
	${LASTNAME}=  Get From Dictionary     ${dict}   Last Name
	${STR1}=			Catenate		SEPARATOR=			${SPACE}				${FIRSTNAME}
	${EXP_APPLICANT}=		Catenate		SEPARATOR=,  		${LASTNAME}				${STR1}
	
	${ACT_APPLICANT}=		Get Text   //table[@id='DGLeadsReport']/tbody/tr[2]/td[3]/a
	
	Run Keyword If 		'${ACT_APPLICANT}'=='None'		Fail			Unable to get value in Applicant column on My Leads Page. The record you are searching for is not found on My Leads page. 
	${ACT_NAME}=		Evaluate		str('${ACT_APPLICANT}').strip()
	Should Be Equal As Strings			${EXP_APPLICANT}		${ACT_NAME}		Comparision of Applicant Name failed on My Leads Page. Expected value: ${EXP_APPLICANT}. Actual Value: ${ACT_NAME}. Please make sure that FD - Web Service is working fine as the expected record is not shown on My Leads page.		values=False

	Log 	***** Vehicle Validation *****
	Log 	Vehicle Validation 		WARN
	
	${VehInfo}=  Get From Dictionary     ${dict}   Vehicle Info

	${EXP_VEHICLE}=		Evaluate			str('${VehInfo}').upper()
	
	${ACT_VEHICLE}=		Get Text   //table[@id='DGLeadsReport']/tbody/tr[2]/td[4]
	
	Should Be Equal As Strings			${EXP_VEHICLE}		${ACT_VEHICLE}		Comparision of Vehicle failed on My Leads Page. Expected value: ${EXP_VEHICLE}. Actual Value: ${ACT_VEHICLE}. Please make sure that FD - Web Service is working fine as the expected record is not shown on My Leads page.		values=False
	
	
	Log 	Date Validation 		WARN
	${MM}		${DD}=		Get Time			month,day
	${EXP_DATE}=				Catenate		SEPARATOR=/			${MM}		${DD}
	
	${ACT_CREATED}=		Get Text   //table[@id='DGLeadsReport']/tbody/tr[2]/td[7]
	
	@{ACT_CRT_LIST}=		Split String		${ACT_CREATED}
	
	${ACT_DATE}=			Get From List		${ACT_CRT_LIST}			0
	
	Should Be Equal			${EXP_DATE}			${ACT_DATE}			Comparison of dates failed on My Leads Page. Expected value: ${EXP_DATE}. Actual Value: ${ACT_DATE}. Please make sure that FD - Web Service is working fine as the expected record is not shown on My Leads page.		values=False
	${TC}=    Get From Dictionary     ${dict}   TransCode
	Run Keyword If  '${TC}'=='3'    Lead Type Verification     ${dict}  
	...   ELSE    Credit App Status Verification    ${dict} 
	#Name verification
	#Lead Type verification
	#status verification
Lead Type Verification    [Arguments]   ${dict}
   
	${CreditType}=    Get From Dictionary     ${dict}   CreditType
	${EXP_LEADTYPE}=	Run Keyword If 		'${CreditType}'=='SubPrime'		Set Variable	Special Finance
	... 				ELSE IF		'${CreditType}'=='Prime'			Set Variable	New Car
	...					ELSE		Set Variable		${EXP_LEADTYPE}
	
	Wait Until Page Contains Element		//table[@id='DGLeadsReport']/tbody/tr[2]/td[6]		10s
	${ACT_LEADTYPE}=		Get Text		//table[@id='DGLeadsReport']/tbody/tr[2]/td[6]
	${ACT_LEADTYPE}=		Evaluate		str('${ACT_LEADTYPE}').strip()
	Should Be Equal As Strings			${EXP_LEADTYPE}		${ACT_LEADTYPE}		Comparision of Lead Type failed on My Leads Page. Expected value: ${EXP_LEADTYPE}. Actual Value: ${ACT_LEADTYPE}. Please make sure that FD - Web Service is working fine as the expected record is not shown on My Leads page.		values=False
	${LeadStatus}=   Get Text				//table[@id='DGLeadsReport']/tbody/tr[2]/td[9]
	Run Keyword If   '${LeadStatus}'=='New'    Log  Passed

Credit App Status Verification   [Arguments]    ${dict}

   		
	${FinMethod}=    Get From Dictionary     ${dict}   FinMethod
	${EXP_AppStatus}=	Run Keyword If 		'${FinMethod}'=='R' or '${FinMethod}'=='L'		Set Variable	App Submitted
	... 				ELSE IF		'${FinMethod}'=='B'			Set Variable	App Saved - New
	...					ELSE		Set Variable		${EXP_AppStatus}
	
	${App_Status}=   Get Text				//table[@id='DGLeadsReport']/tbody/tr[2]/td[9]
	${App_Status}=   Evaluate		str('${App_Status}').strip()
	Should Be Equal As Strings			${EXP_AppStatus}		${App_Status}		Comparision of App Status failed on My Leads Page. Expected value: ${EXP_AppStatus}. Actual Value: ${App_Status}. Please make sure that FD - Web Service is working fine as the expected record is not shown on My Leads page.		values=False